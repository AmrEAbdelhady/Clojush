Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 82 82 82] 29] [[-88 -88 -88 64] -88] [[-5 -5 -5 -5] -5] [[-63 -63 -26 -63] -63] [[29 -39 29 29] -39] [[32 -93 32 32] -93] [[-81 -20 -81 -81] -81] [[99 99 16 99] 16] [[-24 -24 -24 96] -24] [[70 19 70 70] 19] [(-41 -41 -41 -41) -41] [(-38 -38 -38 -38) -38] [(96 96 96 96) 96] [(-97 -97 -97 -97) -97] [(-41 -41 -41 -41) -41] [(79 55 24 26) 24] [(18 84 17 35) 17] [(29 78 28 73) 28] [(29 45 94 54) 29] [(75 85 16 35) 16] [(20 7 63 73) 7] [(31 44 40 0) 0] [(32 59 88 93) 32] [(47 1 3 62) 1] [(77 79 77 3) 3] [(86 13 91 59) 13] [(7 94 30 13) 7] [(52 99 63 98) 52] [(66 86 83 77) 66] [(46 8 25 37) 8] [(73 57 42 31) 31] [(4 43 98 71) 4] [(92 80 53 37) 37] [(63 10 82 22) 10] [(73 79 30 74) 30] [(15 -43 -79 -34) -79] [(10 -98 -12 -4) -98] [(35 -70 -47 1) -70] [(-97 -1 -74 -45) -97] [(-85 23 42 23) -85] [(-81 59 62 -42) -81] [(52 38 63 40) 38] [(-80 89 41 2) -80] [(90 -67 68 -25) -67] [(-21 -45 -45 -22) -45] [(-96 95 77 73) -96] [(-56 -8 7 12) -56] [(-85 -64 -68 -80) -85] [(-93 -13 65 -15) -93] [(-74 34 -12 -23) -74] [(85 -4 32 14) -4] [(16 35 -69 19) -69] [(-48 73 83 -13) -48] [(18 -66 -77 -66) -77] [(0 -67 -29 -62) -67] [(-67 -47 -7 -78) -78] [(78 43 85 -6) -6] [(78 -83 77 48) -83] [(-51 9 -79 8) -79] [(83 14 98 36) 14] [(-23 27 -85 -7) -85] [(-57 82 62 36) -57] [(-19 56 -89 -67) -89] [(-96 -85 24 -59) -96] [(-71 96 -17 61) -71] [(-38 11 -68 -85) -85] [(-28 72 -3 -7) -28] [(-71 86 77 -88) -88] [(-4 -23 83 56) -23] [(99 -40 64 -15) -40] [(78 39 -12 -93) -93] [(0 33 -38 24) -38] [(-4 85 -98 -78) -98] [(7 21 16 -97) -97] [(33 68 -66 -98) -98] [(93 49 26 -38) -38] [(-100 91 40 -1) -100] [(-21 38 -76 76) -76] [(-3 -79 -81 88) -81] [(51 -63 44 18) -63] [(75 8 89 84) 8] [(-74 68 -17 -59) -74] [(-100 -64 -76 79) -100] [(97 -75 -28 87) -75] [(15 -50 55 11) -50] [(-59 28 -94 49) -94] [(-46 -9 72 70) -46] [(21 -4 -42 -65) -65] [(78 1 88 32) 1] [(55 82 -40 64) -40] [(22 -50 1 -2) -50] [(85 11 -7 45) -7] [(59 72 95 18) 18] [(24 44 -79 89) -79] [(-19 -10 55 36) -19])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[29 82 82 82] 29]
Train Case:   6 | Input/Output: [[-88 -88 -88 64] -88]
Train Case:   7 | Input/Output: [[-5 -5 -5 -5] -5]
Train Case:   8 | Input/Output: [[-63 -63 -26 -63] -63]
Train Case:   9 | Input/Output: [[29 -39 29 29] -39]
Train Case:  10 | Input/Output: [[32 -93 32 32] -93]
Train Case:  11 | Input/Output: [[-81 -20 -81 -81] -81]
Train Case:  12 | Input/Output: [[99 99 16 99] 16]
Train Case:  13 | Input/Output: [[-24 -24 -24 96] -24]
Train Case:  14 | Input/Output: [[70 19 70 70] 19]
Train Case:  15 | Input/Output: [(-41 -41 -41 -41) -41]
Train Case:  16 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  17 | Input/Output: [(96 96 96 96) 96]
Train Case:  18 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  19 | Input/Output: [(-41 -41 -41 -41) -41]
Train Case:  20 | Input/Output: [(79 55 24 26) 24]
Train Case:  21 | Input/Output: [(18 84 17 35) 17]
Train Case:  22 | Input/Output: [(29 78 28 73) 28]
Train Case:  23 | Input/Output: [(29 45 94 54) 29]
Train Case:  24 | Input/Output: [(75 85 16 35) 16]
Train Case:  25 | Input/Output: [(20 7 63 73) 7]
Train Case:  26 | Input/Output: [(31 44 40 0) 0]
Train Case:  27 | Input/Output: [(32 59 88 93) 32]
Train Case:  28 | Input/Output: [(47 1 3 62) 1]
Train Case:  29 | Input/Output: [(77 79 77 3) 3]
Train Case:  30 | Input/Output: [(86 13 91 59) 13]
Train Case:  31 | Input/Output: [(7 94 30 13) 7]
Train Case:  32 | Input/Output: [(52 99 63 98) 52]
Train Case:  33 | Input/Output: [(66 86 83 77) 66]
Train Case:  34 | Input/Output: [(46 8 25 37) 8]
Train Case:  35 | Input/Output: [(73 57 42 31) 31]
Train Case:  36 | Input/Output: [(4 43 98 71) 4]
Train Case:  37 | Input/Output: [(92 80 53 37) 37]
Train Case:  38 | Input/Output: [(63 10 82 22) 10]
Train Case:  39 | Input/Output: [(73 79 30 74) 30]
Train Case:  40 | Input/Output: [(15 -43 -79 -34) -79]
Train Case:  41 | Input/Output: [(10 -98 -12 -4) -98]
Train Case:  42 | Input/Output: [(35 -70 -47 1) -70]
Train Case:  43 | Input/Output: [(-97 -1 -74 -45) -97]
Train Case:  44 | Input/Output: [(-85 23 42 23) -85]
Train Case:  45 | Input/Output: [(-81 59 62 -42) -81]
Train Case:  46 | Input/Output: [(52 38 63 40) 38]
Train Case:  47 | Input/Output: [(-80 89 41 2) -80]
Train Case:  48 | Input/Output: [(90 -67 68 -25) -67]
Train Case:  49 | Input/Output: [(-21 -45 -45 -22) -45]
Train Case:  50 | Input/Output: [(-96 95 77 73) -96]
Train Case:  51 | Input/Output: [(-56 -8 7 12) -56]
Train Case:  52 | Input/Output: [(-85 -64 -68 -80) -85]
Train Case:  53 | Input/Output: [(-93 -13 65 -15) -93]
Train Case:  54 | Input/Output: [(-74 34 -12 -23) -74]
Train Case:  55 | Input/Output: [(85 -4 32 14) -4]
Train Case:  56 | Input/Output: [(16 35 -69 19) -69]
Train Case:  57 | Input/Output: [(-48 73 83 -13) -48]
Train Case:  58 | Input/Output: [(18 -66 -77 -66) -77]
Train Case:  59 | Input/Output: [(0 -67 -29 -62) -67]
Train Case:  60 | Input/Output: [(-67 -47 -7 -78) -78]
Train Case:  61 | Input/Output: [(78 43 85 -6) -6]
Train Case:  62 | Input/Output: [(78 -83 77 48) -83]
Train Case:  63 | Input/Output: [(-51 9 -79 8) -79]
Train Case:  64 | Input/Output: [(83 14 98 36) 14]
Train Case:  65 | Input/Output: [(-23 27 -85 -7) -85]
Train Case:  66 | Input/Output: [(-57 82 62 36) -57]
Train Case:  67 | Input/Output: [(-19 56 -89 -67) -89]
Train Case:  68 | Input/Output: [(-96 -85 24 -59) -96]
Train Case:  69 | Input/Output: [(-71 96 -17 61) -71]
Train Case:  70 | Input/Output: [(-38 11 -68 -85) -85]
Train Case:  71 | Input/Output: [(-28 72 -3 -7) -28]
Train Case:  72 | Input/Output: [(-71 86 77 -88) -88]
Train Case:  73 | Input/Output: [(-4 -23 83 56) -23]
Train Case:  74 | Input/Output: [(99 -40 64 -15) -40]
Train Case:  75 | Input/Output: [(78 39 -12 -93) -93]
Train Case:  76 | Input/Output: [(0 33 -38 24) -38]
Train Case:  77 | Input/Output: [(-4 85 -98 -78) -98]
Train Case:  78 | Input/Output: [(7 21 16 -97) -97]
Train Case:  79 | Input/Output: [(33 68 -66 -98) -98]
Train Case:  80 | Input/Output: [(93 49 26 -38) -38]
Train Case:  81 | Input/Output: [(-100 91 40 -1) -100]
Train Case:  82 | Input/Output: [(-21 38 -76 76) -76]
Train Case:  83 | Input/Output: [(-3 -79 -81 88) -81]
Train Case:  84 | Input/Output: [(51 -63 44 18) -63]
Train Case:  85 | Input/Output: [(75 8 89 84) 8]
Train Case:  86 | Input/Output: [(-74 68 -17 -59) -74]
Train Case:  87 | Input/Output: [(-100 -64 -76 79) -100]
Train Case:  88 | Input/Output: [(97 -75 -28 87) -75]
Train Case:  89 | Input/Output: [(15 -50 55 11) -50]
Train Case:  90 | Input/Output: [(-59 28 -94 49) -94]
Train Case:  91 | Input/Output: [(-46 -9 72 70) -46]
Train Case:  92 | Input/Output: [(21 -4 -42 -65) -65]
Train Case:  93 | Input/Output: [(78 1 88 32) 1]
Train Case:  94 | Input/Output: [(55 82 -40 64) -40]
Train Case:  95 | Input/Output: [(22 -50 1 -2) -50]
Train Case:  96 | Input/Output: [(85 11 -7 45) -7]
Train Case:  97 | Input/Output: [(59 72 95 18) 18]
Train Case:  98 | Input/Output: [(24 44 -79 89) -79]
Train Case:  99 | Input/Output: [(-19 -10 55 36) -19]
Test Case:   0 | Input/Output: [[2 2 2 25] 2]
Test Case:   1 | Input/Output: [[67 67 67 21] 21]
Test Case:   2 | Input/Output: [[-81 33 -81 -81] -81]
Test Case:   3 | Input/Output: [[33 33 33 -6] -6]
Test Case:   4 | Input/Output: [[-54 -54 -54 48] -54]
Test Case:   5 | Input/Output: [[-10 -10 -10 -10] -10]
Test Case:   6 | Input/Output: [[88 -95 -95 -95] -95]
Test Case:   7 | Input/Output: [[13 13 13 14] 13]
Test Case:   8 | Input/Output: [[82 -55 82 82] -55]
Test Case:   9 | Input/Output: [[5 -8 5 5] -8]
Test Case:  10 | Input/Output: [[9 9 9 32] 9]
Test Case:  11 | Input/Output: [[45 45 45 -17] -17]
Test Case:  12 | Input/Output: [[74 66 74 74] 66]
Test Case:  13 | Input/Output: [[-22 -15 -15 -15] -22]
Test Case:  14 | Input/Output: [[-9 16 16 16] -9]
Test Case:  15 | Input/Output: [[98 39 98 98] 39]
Test Case:  16 | Input/Output: [[4 4 4 33] 4]
Test Case:  17 | Input/Output: [[69 87 87 87] 69]
Test Case:  18 | Input/Output: [[-66 47 47 47] -66]
Test Case:  19 | Input/Output: [[-27 -27 -27 58] -27]
Test Case:  20 | Input/Output: [[74 74 74 55] 55]
Test Case:  21 | Input/Output: [[-39 -39 -39 79] -39]
Test Case:  22 | Input/Output: [[-81 9 -81 -81] -81]
Test Case:  23 | Input/Output: [[49 -47 49 49] -47]
Test Case:  24 | Input/Output: [[-28 -28 5 -28] -28]
Test Case:  25 | Input/Output: [[78 23 78 78] 23]
Test Case:  26 | Input/Output: [[4 -49 4 4] -49]
Test Case:  27 | Input/Output: [[-7 -11 -7 -7] -11]
Test Case:  28 | Input/Output: [[-35 -38 -35 -35] -38]
Test Case:  29 | Input/Output: [[98 98 98 -95] -95]
Test Case:  30 | Input/Output: [[40 40 -24 40] -24]
Test Case:  31 | Input/Output: [[-63 -33 -33 -33] -63]
Test Case:  32 | Input/Output: [[-85 -85 -85 -21] -85]
Test Case:  33 | Input/Output: [[83 -15 -15 -15] -15]
Test Case:  34 | Input/Output: [[4 37 4 4] 4]
Test Case:  35 | Input/Output: [[24 24 -3 24] -3]
Test Case:  36 | Input/Output: [[14 26 14 14] 14]
Test Case:  37 | Input/Output: [[97 97 30 97] 30]
Test Case:  38 | Input/Output: [[-29 -6 -29 -29] -29]
Test Case:  39 | Input/Output: [[-29 -29 -29 69] -29]
Test Case:  40 | Input/Output: [[4 7 4 4] 4]
Test Case:  41 | Input/Output: [[32 32 32 -61] -61]
Test Case:  42 | Input/Output: [[-84 -84 -84 -7] -84]
Test Case:  43 | Input/Output: [[-45 -18 -45 -45] -45]
Test Case:  44 | Input/Output: [[44 -40 44 44] -40]
Test Case:  45 | Input/Output: [[-93 37 -93 -93] -93]
Test Case:  46 | Input/Output: [[-8 -43 -8 -8] -43]
Test Case:  47 | Input/Output: [[54 7 7 7] 7]
Test Case:  48 | Input/Output: [[-35 -35 2 -35] -35]
Test Case:  49 | Input/Output: [[96 96 -43 96] -43]
Test Case:  50 | Input/Output: [[-81 -46 -81 -81] -81]
Test Case:  51 | Input/Output: [[71 100 71 71] 71]
Test Case:  52 | Input/Output: [[71 56 71 71] 56]
Test Case:  53 | Input/Output: [[18 73 73 73] 18]
Test Case:  54 | Input/Output: [[62 -97 -97 -97] -97]
Test Case:  55 | Input/Output: [[-42 20 20 20] -42]
Test Case:  56 | Input/Output: [[-93 -93 71 -93] -93]
Test Case:  57 | Input/Output: [[57 57 25 57] 25]
Test Case:  58 | Input/Output: [[-13 -23 -23 -23] -23]
Test Case:  59 | Input/Output: [[29 29 -51 29] -51]
Test Case:  60 | Input/Output: [[98 80 98 98] 80]
Test Case:  61 | Input/Output: [[48 48 48 27] 27]
Test Case:  62 | Input/Output: [[-25 -71 -71 -71] -71]
Test Case:  63 | Input/Output: [[25 25 25 57] 25]
Test Case:  64 | Input/Output: [[88 -18 88 88] -18]
Test Case:  65 | Input/Output: [[52 52 52 95] 52]
Test Case:  66 | Input/Output: [[-1 -14 -1 -1] -14]
Test Case:  67 | Input/Output: [[49 69 49 49] 49]
Test Case:  68 | Input/Output: [[-31 -31 -89 -31] -89]
Test Case:  69 | Input/Output: [[79 49 49 49] 49]
Test Case:  70 | Input/Output: [[-47 33 33 33] -47]
Test Case:  71 | Input/Output: [[3 -45 3 3] -45]
Test Case:  72 | Input/Output: [[-21 -21 27 -21] -21]
Test Case:  73 | Input/Output: [[-13 97 97 97] -13]
Test Case:  74 | Input/Output: [[-10 -96 -96 -96] -96]
Test Case:  75 | Input/Output: [[-26 -26 -86 -26] -86]
Test Case:  76 | Input/Output: [[27 83 83 83] 27]
Test Case:  77 | Input/Output: [[-61 26 26 26] -61]
Test Case:  78 | Input/Output: [[23 58 58 58] 23]
Test Case:  79 | Input/Output: [[-42 43 -42 -42] -42]
Test Case:  80 | Input/Output: [[86 86 86 82] 82]
Test Case:  81 | Input/Output: [[82 82 82 82] 82]
Test Case:  82 | Input/Output: [[39 45 45 45] 39]
Test Case:  83 | Input/Output: [[-57 -57 -39 -57] -57]
Test Case:  84 | Input/Output: [[16 56 16 16] 16]
Test Case:  85 | Input/Output: [[13 -14 13 13] -14]
Test Case:  86 | Input/Output: [[-1 55 55 55] -1]
Test Case:  87 | Input/Output: [[-80 -26 -80 -80] -80]
Test Case:  88 | Input/Output: [[80 80 -53 80] -53]
Test Case:  89 | Input/Output: [[20 20 -15 20] -15]
Test Case:  90 | Input/Output: [[59 -78 59 59] -78]
Test Case:  91 | Input/Output: [[68 68 -80 68] -80]
Test Case:  92 | Input/Output: [[88 88 31 88] 31]
Test Case:  93 | Input/Output: [[43 43 52 43] 43]
Test Case:  94 | Input/Output: [[-94 -68 -68 -68] -94]
Test Case:  95 | Input/Output: [[58 58 48 58] 48]
Test Case:  96 | Input/Output: [[5 5 5 5] 5]
Test Case:  97 | Input/Output: [[-33 16 16 16] -33]
Test Case:  98 | Input/Output: [[8 59 59 59] 8]
Test Case:  99 | Input/Output: [[18 18 18 -84] -84]
Test Case: 100 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 101 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 102 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 103 | Input/Output: [(87 87 87 87) 87]
Test Case: 104 | Input/Output: [(63 63 63 63) 63]
Test Case: 105 | Input/Output: [(19 19 19 19) 19]
Test Case: 106 | Input/Output: [(43 43 43 43) 43]
Test Case: 107 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 108 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 109 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 110 | Input/Output: [(62 62 62 62) 62]
Test Case: 111 | Input/Output: [(33 33 33 33) 33]
Test Case: 112 | Input/Output: [(59 59 59 59) 59]
Test Case: 113 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 114 | Input/Output: [(6 6 6 6) 6]
Test Case: 115 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 116 | Input/Output: [(15 15 15 15) 15]
Test Case: 117 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 118 | Input/Output: [(59 59 59 59) 59]
Test Case: 119 | Input/Output: [(12 12 12 12) 12]
Test Case: 120 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 121 | Input/Output: [(71 71 71 71) 71]
Test Case: 122 | Input/Output: [(70 70 70 70) 70]
Test Case: 123 | Input/Output: [(20 20 20 20) 20]
Test Case: 124 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 125 | Input/Output: [(91 91 91 91) 91]
Test Case: 126 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 127 | Input/Output: [(61 61 61 61) 61]
Test Case: 128 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 129 | Input/Output: [(59 59 59 59) 59]
Test Case: 130 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 131 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 132 | Input/Output: [(58 58 58 58) 58]
Test Case: 133 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 134 | Input/Output: [(25 25 25 25) 25]
Test Case: 135 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 136 | Input/Output: [(8 8 8 8) 8]
Test Case: 137 | Input/Output: [(24 24 24 24) 24]
Test Case: 138 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 139 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 140 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 141 | Input/Output: [(29 29 29 29) 29]
Test Case: 142 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 143 | Input/Output: [(99 99 99 99) 99]
Test Case: 144 | Input/Output: [(29 29 29 29) 29]
Test Case: 145 | Input/Output: [(44 44 44 44) 44]
Test Case: 146 | Input/Output: [(70 70 70 70) 70]
Test Case: 147 | Input/Output: [(62 62 62 62) 62]
Test Case: 148 | Input/Output: [(71 71 71 71) 71]
Test Case: 149 | Input/Output: [(6 6 6 6) 6]
Test Case: 150 | Input/Output: [(9 9 9 9) 9]
Test Case: 151 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 152 | Input/Output: [(6 6 6 6) 6]
Test Case: 153 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 154 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 155 | Input/Output: [(65 65 65 65) 65]
Test Case: 156 | Input/Output: [(82 82 82 82) 82]
Test Case: 157 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 158 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 159 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 160 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 161 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 162 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 163 | Input/Output: [(85 85 85 85) 85]
Test Case: 164 | Input/Output: [(67 67 67 67) 67]
Test Case: 165 | Input/Output: [(43 43 43 43) 43]
Test Case: 166 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 167 | Input/Output: [(94 94 94 94) 94]
Test Case: 168 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 169 | Input/Output: [(65 65 65 65) 65]
Test Case: 170 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 171 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 172 | Input/Output: [(13 13 13 13) 13]
Test Case: 173 | Input/Output: [(62 62 62 62) 62]
Test Case: 174 | Input/Output: [(79 79 79 79) 79]
Test Case: 175 | Input/Output: [(21 21 21 21) 21]
Test Case: 176 | Input/Output: [(96 96 96 96) 96]
Test Case: 177 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 178 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 179 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 180 | Input/Output: [(28 28 28 28) 28]
Test Case: 181 | Input/Output: [(97 97 97 97) 97]
Test Case: 182 | Input/Output: [(41 41 41 41) 41]
Test Case: 183 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 184 | Input/Output: [(46 46 46 46) 46]
Test Case: 185 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 186 | Input/Output: [(77 77 77 77) 77]
Test Case: 187 | Input/Output: [(83 83 83 83) 83]
Test Case: 188 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 189 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 190 | Input/Output: [(68 68 68 68) 68]
Test Case: 191 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 192 | Input/Output: [(47 47 47 47) 47]
Test Case: 193 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 194 | Input/Output: [(24 24 24 24) 24]
Test Case: 195 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 196 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 197 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 198 | Input/Output: [(92 92 92 92) 92]
Test Case: 199 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 200 | Input/Output: [(47 58 33 33) 33]
Test Case: 201 | Input/Output: [(47 25 37 41) 25]
Test Case: 202 | Input/Output: [(80 9 25 12) 9]
Test Case: 203 | Input/Output: [(29 97 21 68) 21]
Test Case: 204 | Input/Output: [(84 61 4 23) 4]
Test Case: 205 | Input/Output: [(70 90 41 63) 41]
Test Case: 206 | Input/Output: [(85 81 37 79) 37]
Test Case: 207 | Input/Output: [(72 46 35 14) 14]
Test Case: 208 | Input/Output: [(69 3 12 78) 3]
Test Case: 209 | Input/Output: [(19 100 55 91) 19]
Test Case: 210 | Input/Output: [(58 4 39 32) 4]
Test Case: 211 | Input/Output: [(15 78 100 87) 15]
Test Case: 212 | Input/Output: [(3 53 45 97) 3]
Test Case: 213 | Input/Output: [(3 15 75 3) 3]
Test Case: 214 | Input/Output: [(48 35 19 26) 19]
Test Case: 215 | Input/Output: [(37 56 43 23) 23]
Test Case: 216 | Input/Output: [(70 44 75 8) 8]
Test Case: 217 | Input/Output: [(93 56 77 55) 55]
Test Case: 218 | Input/Output: [(64 5 43 10) 5]
Test Case: 219 | Input/Output: [(21 91 74 79) 21]
Test Case: 220 | Input/Output: [(62 93 11 82) 11]
Test Case: 221 | Input/Output: [(55 58 71 79) 55]
Test Case: 222 | Input/Output: [(54 64 85 88) 54]
Test Case: 223 | Input/Output: [(95 59 23 24) 23]
Test Case: 224 | Input/Output: [(40 63 20 96) 20]
Test Case: 225 | Input/Output: [(17 51 92 23) 17]
Test Case: 226 | Input/Output: [(72 13 1 12) 1]
Test Case: 227 | Input/Output: [(20 34 97 47) 20]
Test Case: 228 | Input/Output: [(39 15 41 46) 15]
Test Case: 229 | Input/Output: [(35 51 16 35) 16]
Test Case: 230 | Input/Output: [(29 94 75 97) 29]
Test Case: 231 | Input/Output: [(0 78 38 0) 0]
Test Case: 232 | Input/Output: [(41 0 90 74) 0]
Test Case: 233 | Input/Output: [(73 3 59 88) 3]
Test Case: 234 | Input/Output: [(84 29 31 82) 29]
Test Case: 235 | Input/Output: [(1 31 26 3) 1]
Test Case: 236 | Input/Output: [(33 30 41 43) 30]
Test Case: 237 | Input/Output: [(23 40 16 32) 16]
Test Case: 238 | Input/Output: [(72 35 53 86) 35]
Test Case: 239 | Input/Output: [(99 8 79 14) 8]
Test Case: 240 | Input/Output: [(12 34 29 81) 12]
Test Case: 241 | Input/Output: [(74 24 92 5) 5]
Test Case: 242 | Input/Output: [(69 54 40 74) 40]
Test Case: 243 | Input/Output: [(12 75 87 6) 6]
Test Case: 244 | Input/Output: [(9 98 37 15) 9]
Test Case: 245 | Input/Output: [(83 70 67 51) 51]
Test Case: 246 | Input/Output: [(40 23 60 45) 23]
Test Case: 247 | Input/Output: [(61 75 75 67) 61]
Test Case: 248 | Input/Output: [(36 92 15 59) 15]
Test Case: 249 | Input/Output: [(98 32 67 65) 32]
Test Case: 250 | Input/Output: [(6 81 57 68) 6]
Test Case: 251 | Input/Output: [(2 77 82 91) 2]
Test Case: 252 | Input/Output: [(36 25 7 39) 7]
Test Case: 253 | Input/Output: [(82 63 86 42) 42]
Test Case: 254 | Input/Output: [(81 45 73 10) 10]
Test Case: 255 | Input/Output: [(9 80 83 96) 9]
Test Case: 256 | Input/Output: [(86 68 60 59) 59]
Test Case: 257 | Input/Output: [(2 70 29 8) 2]
Test Case: 258 | Input/Output: [(74 46 37 29) 29]
Test Case: 259 | Input/Output: [(27 32 35 79) 27]
Test Case: 260 | Input/Output: [(3 93 50 73) 3]
Test Case: 261 | Input/Output: [(99 91 44 4) 4]
Test Case: 262 | Input/Output: [(19 83 18 14) 14]
Test Case: 263 | Input/Output: [(39 16 9 60) 9]
Test Case: 264 | Input/Output: [(68 16 77 25) 16]
Test Case: 265 | Input/Output: [(20 58 83 12) 12]
Test Case: 266 | Input/Output: [(35 12 84 29) 12]
Test Case: 267 | Input/Output: [(25 94 61 91) 25]
Test Case: 268 | Input/Output: [(6 100 45 54) 6]
Test Case: 269 | Input/Output: [(14 34 56 80) 14]
Test Case: 270 | Input/Output: [(83 28 82 16) 16]
Test Case: 271 | Input/Output: [(22 59 43 19) 19]
Test Case: 272 | Input/Output: [(82 49 100 85) 49]
Test Case: 273 | Input/Output: [(51 87 70 20) 20]
Test Case: 274 | Input/Output: [(81 81 98 64) 64]
Test Case: 275 | Input/Output: [(81 9 15 98) 9]
Test Case: 276 | Input/Output: [(0 72 29 46) 0]
Test Case: 277 | Input/Output: [(74 64 54 42) 42]
Test Case: 278 | Input/Output: [(15 96 96 96) 15]
Test Case: 279 | Input/Output: [(15 73 33 50) 15]
Test Case: 280 | Input/Output: [(28 33 16 93) 16]
Test Case: 281 | Input/Output: [(82 13 17 65) 13]
Test Case: 282 | Input/Output: [(38 14 36 80) 14]
Test Case: 283 | Input/Output: [(79 36 2 78) 2]
Test Case: 284 | Input/Output: [(60 57 70 46) 46]
Test Case: 285 | Input/Output: [(54 36 21 87) 21]
Test Case: 286 | Input/Output: [(37 57 23 39) 23]
Test Case: 287 | Input/Output: [(10 5 82 10) 5]
Test Case: 288 | Input/Output: [(61 91 30 96) 30]
Test Case: 289 | Input/Output: [(71 33 74 98) 33]
Test Case: 290 | Input/Output: [(85 22 38 76) 22]
Test Case: 291 | Input/Output: [(74 56 76 50) 50]
Test Case: 292 | Input/Output: [(68 11 88 65) 11]
Test Case: 293 | Input/Output: [(78 100 64 58) 58]
Test Case: 294 | Input/Output: [(91 87 46 21) 21]
Test Case: 295 | Input/Output: [(6 69 14 38) 6]
Test Case: 296 | Input/Output: [(83 97 49 21) 21]
Test Case: 297 | Input/Output: [(3 94 44 71) 3]
Test Case: 298 | Input/Output: [(90 47 65 5) 5]
Test Case: 299 | Input/Output: [(32 26 71 68) 26]
Test Case: 300 | Input/Output: [(83 72 98 41) 41]
Test Case: 301 | Input/Output: [(0 16 89 67) 0]
Test Case: 302 | Input/Output: [(53 84 77 86) 53]
Test Case: 303 | Input/Output: [(28 31 51 68) 28]
Test Case: 304 | Input/Output: [(10 15 10 37) 10]
Test Case: 305 | Input/Output: [(2 33 30 20) 2]
Test Case: 306 | Input/Output: [(95 17 14 85) 14]
Test Case: 307 | Input/Output: [(32 65 40 11) 11]
Test Case: 308 | Input/Output: [(15 100 32 68) 15]
Test Case: 309 | Input/Output: [(57 45 10 81) 10]
Test Case: 310 | Input/Output: [(74 10 70 43) 10]
Test Case: 311 | Input/Output: [(29 73 40 17) 17]
Test Case: 312 | Input/Output: [(81 85 30 81) 30]
Test Case: 313 | Input/Output: [(35 48 3 6) 3]
Test Case: 314 | Input/Output: [(6 56 36 39) 6]
Test Case: 315 | Input/Output: [(62 34 50 9) 9]
Test Case: 316 | Input/Output: [(65 24 23 50) 23]
Test Case: 317 | Input/Output: [(49 95 73 38) 38]
Test Case: 318 | Input/Output: [(10 35 65 46) 10]
Test Case: 319 | Input/Output: [(0 2 43 13) 0]
Test Case: 320 | Input/Output: [(13 79 54 76) 13]
Test Case: 321 | Input/Output: [(58 89 81 46) 46]
Test Case: 322 | Input/Output: [(20 66 95 19) 19]
Test Case: 323 | Input/Output: [(42 3 7 61) 3]
Test Case: 324 | Input/Output: [(61 37 92 21) 21]
Test Case: 325 | Input/Output: [(69 46 77 44) 44]
Test Case: 326 | Input/Output: [(2 4 91 85) 2]
Test Case: 327 | Input/Output: [(72 73 47 64) 47]
Test Case: 328 | Input/Output: [(74 92 24 22) 22]
Test Case: 329 | Input/Output: [(52 2 63 30) 2]
Test Case: 330 | Input/Output: [(18 49 92 67) 18]
Test Case: 331 | Input/Output: [(18 56 43 50) 18]
Test Case: 332 | Input/Output: [(5 24 54 3) 3]
Test Case: 333 | Input/Output: [(33 47 99 99) 33]
Test Case: 334 | Input/Output: [(72 56 24 45) 24]
Test Case: 335 | Input/Output: [(41 89 78 27) 27]
Test Case: 336 | Input/Output: [(54 17 15 53) 15]
Test Case: 337 | Input/Output: [(44 77 54 74) 44]
Test Case: 338 | Input/Output: [(92 24 7 17) 7]
Test Case: 339 | Input/Output: [(7 69 44 81) 7]
Test Case: 340 | Input/Output: [(62 40 66 98) 40]
Test Case: 341 | Input/Output: [(66 38 8 87) 8]
Test Case: 342 | Input/Output: [(97 33 58 15) 15]
Test Case: 343 | Input/Output: [(53 13 56 12) 12]
Test Case: 344 | Input/Output: [(27 32 41 55) 27]
Test Case: 345 | Input/Output: [(32 67 38 3) 3]
Test Case: 346 | Input/Output: [(51 9 6 58) 6]
Test Case: 347 | Input/Output: [(49 12 98 5) 5]
Test Case: 348 | Input/Output: [(66 18 61 95) 18]
Test Case: 349 | Input/Output: [(1 60 25 79) 1]
Test Case: 350 | Input/Output: [(19 26 15 31) 15]
Test Case: 351 | Input/Output: [(64 78 100 36) 36]
Test Case: 352 | Input/Output: [(38 11 77 89) 11]
Test Case: 353 | Input/Output: [(41 40 75 32) 32]
Test Case: 354 | Input/Output: [(17 57 40 64) 17]
Test Case: 355 | Input/Output: [(29 93 17 11) 11]
Test Case: 356 | Input/Output: [(28 42 60 48) 28]
Test Case: 357 | Input/Output: [(23 36 31 78) 23]
Test Case: 358 | Input/Output: [(0 78 10 22) 0]
Test Case: 359 | Input/Output: [(94 60 75 63) 60]
Test Case: 360 | Input/Output: [(67 89 40 15) 15]
Test Case: 361 | Input/Output: [(51 9 66 4) 4]
Test Case: 362 | Input/Output: [(72 99 74 44) 44]
Test Case: 363 | Input/Output: [(32 6 47 14) 6]
Test Case: 364 | Input/Output: [(48 24 72 7) 7]
Test Case: 365 | Input/Output: [(85 49 6 32) 6]
Test Case: 366 | Input/Output: [(90 29 10 90) 10]
Test Case: 367 | Input/Output: [(92 59 47 38) 38]
Test Case: 368 | Input/Output: [(16 0 68 98) 0]
Test Case: 369 | Input/Output: [(100 80 26 1) 1]
Test Case: 370 | Input/Output: [(94 13 61 94) 13]
Test Case: 371 | Input/Output: [(47 34 43 3) 3]
Test Case: 372 | Input/Output: [(49 39 28 33) 28]
Test Case: 373 | Input/Output: [(14 60 59 25) 14]
Test Case: 374 | Input/Output: [(52 68 83 19) 19]
Test Case: 375 | Input/Output: [(15 80 70 24) 15]
Test Case: 376 | Input/Output: [(95 26 56 76) 26]
Test Case: 377 | Input/Output: [(87 73 88 37) 37]
Test Case: 378 | Input/Output: [(3 52 19 31) 3]
Test Case: 379 | Input/Output: [(50 70 45 21) 21]
Test Case: 380 | Input/Output: [(21 65 96 19) 19]
Test Case: 381 | Input/Output: [(44 29 72 62) 29]
Test Case: 382 | Input/Output: [(15 8 64 40) 8]
Test Case: 383 | Input/Output: [(1 53 99 60) 1]
Test Case: 384 | Input/Output: [(24 9 70 18) 9]
Test Case: 385 | Input/Output: [(15 71 100 43) 15]
Test Case: 386 | Input/Output: [(9 24 23 17) 9]
Test Case: 387 | Input/Output: [(36 61 93 37) 36]
Test Case: 388 | Input/Output: [(8 31 98 70) 8]
Test Case: 389 | Input/Output: [(48 15 59 1) 1]
Test Case: 390 | Input/Output: [(56 46 65 16) 16]
Test Case: 391 | Input/Output: [(52 92 97 93) 52]
Test Case: 392 | Input/Output: [(59 9 77 87) 9]
Test Case: 393 | Input/Output: [(24 93 43 49) 24]
Test Case: 394 | Input/Output: [(96 42 16 89) 16]
Test Case: 395 | Input/Output: [(66 1 57 46) 1]
Test Case: 396 | Input/Output: [(42 88 9 25) 9]
Test Case: 397 | Input/Output: [(20 65 51 71) 20]
Test Case: 398 | Input/Output: [(2 11 95 92) 2]
Test Case: 399 | Input/Output: [(76 30 81 37) 30]
Test Case: 400 | Input/Output: [(-84 -70 -99 47) -99]
Test Case: 401 | Input/Output: [(29 56 3 93) 3]
Test Case: 402 | Input/Output: [(100 44 -18 -6) -18]
Test Case: 403 | Input/Output: [(1 -71 22 -19) -71]
Test Case: 404 | Input/Output: [(18 -8 -30 -83) -83]
Test Case: 405 | Input/Output: [(44 97 14 -86) -86]
Test Case: 406 | Input/Output: [(-46 -31 55 96) -46]
Test Case: 407 | Input/Output: [(-26 60 -9 100) -26]
Test Case: 408 | Input/Output: [(57 23 71 -78) -78]
Test Case: 409 | Input/Output: [(85 -12 -89 11) -89]
Test Case: 410 | Input/Output: [(-39 -32 -87 -74) -87]
Test Case: 411 | Input/Output: [(-31 35 59 -78) -78]
Test Case: 412 | Input/Output: [(58 -51 76 -100) -100]
Test Case: 413 | Input/Output: [(5 43 -77 -56) -77]
Test Case: 414 | Input/Output: [(20 43 87 -10) -10]
Test Case: 415 | Input/Output: [(-74 -29 -89 13) -89]
Test Case: 416 | Input/Output: [(13 62 -4 -30) -30]
Test Case: 417 | Input/Output: [(71 -62 -34 21) -62]
Test Case: 418 | Input/Output: [(31 -33 77 -84) -84]
Test Case: 419 | Input/Output: [(51 92 -95 -18) -95]
Test Case: 420 | Input/Output: [(15 64 48 85) 15]
Test Case: 421 | Input/Output: [(-58 -6 9 -19) -58]
Test Case: 422 | Input/Output: [(-52 37 41 -17) -52]
Test Case: 423 | Input/Output: [(18 73 97 -24) -24]
Test Case: 424 | Input/Output: [(-10 -87 -68 -24) -87]
Test Case: 425 | Input/Output: [(-94 38 -49 -2) -94]
Test Case: 426 | Input/Output: [(-10 15 1 -63) -63]
Test Case: 427 | Input/Output: [(-83 9 -23 -98) -98]
Test Case: 428 | Input/Output: [(0 -69 -94 46) -94]
Test Case: 429 | Input/Output: [(3 53 -25 92) -25]
Test Case: 430 | Input/Output: [(0 -21 -98 42) -98]
Test Case: 431 | Input/Output: [(-59 4 84 49) -59]
Test Case: 432 | Input/Output: [(-19 16 7 0) -19]
Test Case: 433 | Input/Output: [(-69 -20 69 -60) -69]
Test Case: 434 | Input/Output: [(-4 12 66 -73) -73]
Test Case: 435 | Input/Output: [(-21 -41 -25 91) -41]
Test Case: 436 | Input/Output: [(-67 -34 21 -21) -67]
Test Case: 437 | Input/Output: [(-73 30 -69 6) -73]
Test Case: 438 | Input/Output: [(26 -78 68 2) -78]
Test Case: 439 | Input/Output: [(51 59 15 -51) -51]
Test Case: 440 | Input/Output: [(-88 -16 89 -12) -88]
Test Case: 441 | Input/Output: [(3 -30 -31 15) -31]
Test Case: 442 | Input/Output: [(82 -35 44 1) -35]
Test Case: 443 | Input/Output: [(33 28 64 27) 27]
Test Case: 444 | Input/Output: [(-75 -91 43 -48) -91]
Test Case: 445 | Input/Output: [(72 58 27 -5) -5]
Test Case: 446 | Input/Output: [(19 -66 -49 -9) -66]
Test Case: 447 | Input/Output: [(26 6 57 -45) -45]
Test Case: 448 | Input/Output: [(-57 -74 54 -62) -74]
Test Case: 449 | Input/Output: [(76 52 -76 44) -76]
Test Case: 450 | Input/Output: [(0 88 -63 89) -63]
Test Case: 451 | Input/Output: [(-85 -84 61 -67) -85]
Test Case: 452 | Input/Output: [(20 -75 -49 83) -75]
Test Case: 453 | Input/Output: [(-18 -80 -60 68) -80]
Test Case: 454 | Input/Output: [(3 5 -84 -70) -84]
Test Case: 455 | Input/Output: [(38 -15 -62 29) -62]
Test Case: 456 | Input/Output: [(14 100 25 29) 14]
Test Case: 457 | Input/Output: [(-2 45 -29 -49) -49]
Test Case: 458 | Input/Output: [(15 49 -100 -85) -100]
Test Case: 459 | Input/Output: [(98 44 9 86) 9]
Test Case: 460 | Input/Output: [(90 94 -32 71) -32]
Test Case: 461 | Input/Output: [(89 71 -3 69) -3]
Test Case: 462 | Input/Output: [(31 -64 -45 92) -64]
Test Case: 463 | Input/Output: [(-32 42 -32 5) -32]
Test Case: 464 | Input/Output: [(-10 12 -17 56) -17]
Test Case: 465 | Input/Output: [(11 81 50 -88) -88]
Test Case: 466 | Input/Output: [(37 -48 47 -77) -77]
Test Case: 467 | Input/Output: [(-92 -56 -35 -18) -92]
Test Case: 468 | Input/Output: [(-16 17 -33 39) -33]
Test Case: 469 | Input/Output: [(-65 -74 -42 -44) -74]
Test Case: 470 | Input/Output: [(55 -37 4 54) -37]
Test Case: 471 | Input/Output: [(62 41 -100 32) -100]
Test Case: 472 | Input/Output: [(75 -13 47 74) -13]
Test Case: 473 | Input/Output: [(52 -94 97 -9) -94]
Test Case: 474 | Input/Output: [(79 -41 -62 -22) -62]
Test Case: 475 | Input/Output: [(45 38 78 50) 38]
Test Case: 476 | Input/Output: [(-51 -41 -5 81) -51]
Test Case: 477 | Input/Output: [(89 28 73 39) 28]
Test Case: 478 | Input/Output: [(47 -57 -77 30) -77]
Test Case: 479 | Input/Output: [(-62 -41 87 18) -62]
Test Case: 480 | Input/Output: [(-59 77 -71 -32) -71]
Test Case: 481 | Input/Output: [(57 78 76 17) 17]
Test Case: 482 | Input/Output: [(58 -29 -51 -90) -90]
Test Case: 483 | Input/Output: [(24 76 -84 -99) -99]
Test Case: 484 | Input/Output: [(-53 50 -39 49) -53]
Test Case: 485 | Input/Output: [(26 17 96 -79) -79]
Test Case: 486 | Input/Output: [(-20 -97 67 1) -97]
Test Case: 487 | Input/Output: [(71 65 68 -2) -2]
Test Case: 488 | Input/Output: [(-62 28 -36 -2) -62]
Test Case: 489 | Input/Output: [(-6 97 19 -78) -78]
Test Case: 490 | Input/Output: [(-35 68 -33 -83) -83]
Test Case: 491 | Input/Output: [(0 -95 -36 -28) -95]
Test Case: 492 | Input/Output: [(-35 -41 -78 -37) -78]
Test Case: 493 | Input/Output: [(48 -20 -100 -40) -100]
Test Case: 494 | Input/Output: [(85 -73 -76 -41) -76]
Test Case: 495 | Input/Output: [(20 13 -7 -73) -73]
Test Case: 496 | Input/Output: [(-21 -38 54 99) -38]
Test Case: 497 | Input/Output: [(-23 22 55 26) -23]
Test Case: 498 | Input/Output: [(-35 -11 71 -7) -35]
Test Case: 499 | Input/Output: [(11 -26 61 22) -26]
Test Case: 500 | Input/Output: [(32 95 -86 -14) -86]
Test Case: 501 | Input/Output: [(81 -99 -34 97) -99]
Test Case: 502 | Input/Output: [(1 -36 -39 -67) -67]
Test Case: 503 | Input/Output: [(-14 -85 -44 80) -85]
Test Case: 504 | Input/Output: [(29 -88 95 21) -88]
Test Case: 505 | Input/Output: [(2 27 2 18) 2]
Test Case: 506 | Input/Output: [(59 -53 -32 -55) -55]
Test Case: 507 | Input/Output: [(-8 85 44 -81) -81]
Test Case: 508 | Input/Output: [(66 -34 -29 43) -34]
Test Case: 509 | Input/Output: [(62 -9 -91 29) -91]
Test Case: 510 | Input/Output: [(10 85 97 28) 10]
Test Case: 511 | Input/Output: [(3 95 55 -53) -53]
Test Case: 512 | Input/Output: [(-3 91 -25 33) -25]
Test Case: 513 | Input/Output: [(-85 -6 3 63) -85]
Test Case: 514 | Input/Output: [(-79 29 -69 -52) -79]
Test Case: 515 | Input/Output: [(28 56 92 -24) -24]
Test Case: 516 | Input/Output: [(-95 -65 18 -41) -95]
Test Case: 517 | Input/Output: [(85 -45 -54 66) -54]
Test Case: 518 | Input/Output: [(21 83 11 63) 11]
Test Case: 519 | Input/Output: [(-99 13 -15 26) -99]
Test Case: 520 | Input/Output: [(-69 100 -32 -81) -81]
Test Case: 521 | Input/Output: [(9 -1 -91 86) -91]
Test Case: 522 | Input/Output: [(-19 76 55 -67) -67]
Test Case: 523 | Input/Output: [(90 16 12 93) 12]
Test Case: 524 | Input/Output: [(-85 -24 68 52) -85]
Test Case: 525 | Input/Output: [(-94 -87 -56 -11) -94]
Test Case: 526 | Input/Output: [(-31 45 16 17) -31]
Test Case: 527 | Input/Output: [(-14 26 24 -55) -55]
Test Case: 528 | Input/Output: [(-8 77 -77 -52) -77]
Test Case: 529 | Input/Output: [(-65 -95 62 -11) -95]
Test Case: 530 | Input/Output: [(-100 21 70 -5) -100]
Test Case: 531 | Input/Output: [(33 -35 5 -6) -35]
Test Case: 532 | Input/Output: [(36 2 -65 -3) -65]
Test Case: 533 | Input/Output: [(-93 -33 -56 -65) -93]
Test Case: 534 | Input/Output: [(-66 -26 77 -95) -95]
Test Case: 535 | Input/Output: [(-60 -88 -50 -73) -88]
Test Case: 536 | Input/Output: [(100 35 -24 -64) -64]
Test Case: 537 | Input/Output: [(-3 -78 -85 4) -85]
Test Case: 538 | Input/Output: [(58 57 80 40) 40]
Test Case: 539 | Input/Output: [(-45 -21 82 -60) -60]
Test Case: 540 | Input/Output: [(-75 -100 -22 32) -100]
Test Case: 541 | Input/Output: [(66 -93 57 60) -93]
Test Case: 542 | Input/Output: [(-33 77 95 76) -33]
Test Case: 543 | Input/Output: [(-43 51 -57 92) -57]
Test Case: 544 | Input/Output: [(57 -14 -13 36) -14]
Test Case: 545 | Input/Output: [(63 -31 -1 84) -31]
Test Case: 546 | Input/Output: [(79 -24 -48 -33) -48]
Test Case: 547 | Input/Output: [(39 3 26 -61) -61]
Test Case: 548 | Input/Output: [(61 -46 64 78) -46]
Test Case: 549 | Input/Output: [(18 93 9 92) 9]
Test Case: 550 | Input/Output: [(-96 -16 -35 -92) -96]
Test Case: 551 | Input/Output: [(-100 -27 34 -47) -100]
Test Case: 552 | Input/Output: [(31 62 47 47) 31]
Test Case: 553 | Input/Output: [(-39 -42 73 -91) -91]
Test Case: 554 | Input/Output: [(-77 -4 -37 -15) -77]
Test Case: 555 | Input/Output: [(77 -49 -86 41) -86]
Test Case: 556 | Input/Output: [(-38 -13 56 73) -38]
Test Case: 557 | Input/Output: [(93 -31 -28 49) -31]
Test Case: 558 | Input/Output: [(27 98 -40 84) -40]
Test Case: 559 | Input/Output: [(-94 -77 -61 -93) -94]
Test Case: 560 | Input/Output: [(-34 22 -89 78) -89]
Test Case: 561 | Input/Output: [(27 -17 70 -96) -96]
Test Case: 562 | Input/Output: [(-3 90 -4 -99) -99]
Test Case: 563 | Input/Output: [(-42 -95 -33 7) -95]
Test Case: 564 | Input/Output: [(-35 30 98 47) -35]
Test Case: 565 | Input/Output: [(92 23 -75 22) -75]
Test Case: 566 | Input/Output: [(-72 60 100 19) -72]
Test Case: 567 | Input/Output: [(55 -49 76 60) -49]
Test Case: 568 | Input/Output: [(12 69 -85 -89) -89]
Test Case: 569 | Input/Output: [(-55 -38 4 46) -55]
Test Case: 570 | Input/Output: [(22 23 -20 57) -20]
Test Case: 571 | Input/Output: [(66 -45 33 63) -45]
Test Case: 572 | Input/Output: [(26 -82 -30 10) -82]
Test Case: 573 | Input/Output: [(17 61 47 -28) -28]
Test Case: 574 | Input/Output: [(20 26 -56 -49) -56]
Test Case: 575 | Input/Output: [(53 56 -35 -43) -43]
Test Case: 576 | Input/Output: [(-37 100 46 -100) -100]
Test Case: 577 | Input/Output: [(-56 25 -87 17) -87]
Test Case: 578 | Input/Output: [(4 -77 -61 -81) -81]
Test Case: 579 | Input/Output: [(-34 29 -60 47) -60]
Test Case: 580 | Input/Output: [(-75 49 -55 55) -75]
Test Case: 581 | Input/Output: [(83 27 13 -14) -14]
Test Case: 582 | Input/Output: [(-55 91 98 55) -55]
Test Case: 583 | Input/Output: [(49 64 -45 -7) -45]
Test Case: 584 | Input/Output: [(-30 -78 -27 -64) -78]
Test Case: 585 | Input/Output: [(-3 10 -31 57) -31]
Test Case: 586 | Input/Output: [(-79 63 91 39) -79]
Test Case: 587 | Input/Output: [(92 43 21 63) 21]
Test Case: 588 | Input/Output: [(-38 23 4 48) -38]
Test Case: 589 | Input/Output: [(79 -24 9 80) -24]
Test Case: 590 | Input/Output: [(-81 64 -81 -23) -81]
Test Case: 591 | Input/Output: [(99 -55 50 -75) -75]
Test Case: 592 | Input/Output: [(3 7 93 -98) -98]
Test Case: 593 | Input/Output: [(95 13 -51 -16) -51]
Test Case: 594 | Input/Output: [(-21 -94 60 -55) -94]
Test Case: 595 | Input/Output: [(87 36 100 32) 32]
Test Case: 596 | Input/Output: [(-3 11 -38 -6) -38]
Test Case: 597 | Input/Output: [(-77 -24 91 -47) -77]
Test Case: 598 | Input/Output: [(-5 18 -38 -14) -38]
Test Case: 599 | Input/Output: [(80 88 3 -94) -94]
Test Case: 600 | Input/Output: [(78 -16 61 -7) -16]
Test Case: 601 | Input/Output: [(-26 83 -18 -75) -75]
Test Case: 602 | Input/Output: [(86 -84 -65 28) -84]
Test Case: 603 | Input/Output: [(12 40 31 -99) -99]
Test Case: 604 | Input/Output: [(50 7 -23 2) -23]
Test Case: 605 | Input/Output: [(81 -85 72 38) -85]
Test Case: 606 | Input/Output: [(-52 97 -29 42) -52]
Test Case: 607 | Input/Output: [(-6 87 -39 74) -39]
Test Case: 608 | Input/Output: [(12 -91 -31 25) -91]
Test Case: 609 | Input/Output: [(36 -36 -4 -52) -52]
Test Case: 610 | Input/Output: [(23 0 -40 58) -40]
Test Case: 611 | Input/Output: [(-5 -91 24 20) -91]
Test Case: 612 | Input/Output: [(-14 -95 -62 -28) -95]
Test Case: 613 | Input/Output: [(29 -78 31 66) -78]
Test Case: 614 | Input/Output: [(-58 29 44 4) -58]
Test Case: 615 | Input/Output: [(59 -41 -45 -97) -97]
Test Case: 616 | Input/Output: [(28 -99 -61 -38) -99]
Test Case: 617 | Input/Output: [(-72 -83 90 -42) -83]
Test Case: 618 | Input/Output: [(34 -81 -24 99) -81]
Test Case: 619 | Input/Output: [(-5 -81 -61 28) -81]
Test Case: 620 | Input/Output: [(-8 60 -7 -14) -14]
Test Case: 621 | Input/Output: [(22 14 -70 -100) -100]
Test Case: 622 | Input/Output: [(-54 82 75 -89) -89]
Test Case: 623 | Input/Output: [(-10 -93 -29 -49) -93]
Test Case: 624 | Input/Output: [(-59 -81 -85 44) -85]
Test Case: 625 | Input/Output: [(-45 -24 -76 -27) -76]
Test Case: 626 | Input/Output: [(-25 -76 58 79) -76]
Test Case: 627 | Input/Output: [(-83 -43 -27 -92) -92]
Test Case: 628 | Input/Output: [(3 71 -46 -60) -60]
Test Case: 629 | Input/Output: [(35 -98 98 -71) -98]
Test Case: 630 | Input/Output: [(0 15 -40 -73) -73]
Test Case: 631 | Input/Output: [(-3 13 12 40) -3]
Test Case: 632 | Input/Output: [(23 42 -81 8) -81]
Test Case: 633 | Input/Output: [(90 27 -27 -57) -57]
Test Case: 634 | Input/Output: [(74 -2 2 81) -2]
Test Case: 635 | Input/Output: [(11 -74 46 87) -74]
Test Case: 636 | Input/Output: [(26 -32 17 -79) -79]
Test Case: 637 | Input/Output: [(-78 25 68 -88) -88]
Test Case: 638 | Input/Output: [(11 64 27 100) 11]
Test Case: 639 | Input/Output: [(60 56 -21 -99) -99]
Test Case: 640 | Input/Output: [(28 52 52 -98) -98]
Test Case: 641 | Input/Output: [(-4 -13 -2 65) -13]
Test Case: 642 | Input/Output: [(-79 -48 -33 -14) -79]
Test Case: 643 | Input/Output: [(89 71 8 -13) -13]
Test Case: 644 | Input/Output: [(30 26 -8 -29) -29]
Test Case: 645 | Input/Output: [(25 -18 -15 55) -18]
Test Case: 646 | Input/Output: [(-22 -3 -76 42) -76]
Test Case: 647 | Input/Output: [(-30 19 -4 31) -30]
Test Case: 648 | Input/Output: [(21 -15 43 -7) -15]
Test Case: 649 | Input/Output: [(-87 22 -73 23) -87]
Test Case: 650 | Input/Output: [(0 -9 27 -50) -50]
Test Case: 651 | Input/Output: [(1 -69 -79 7) -79]
Test Case: 652 | Input/Output: [(-99 -80 62 -44) -99]
Test Case: 653 | Input/Output: [(-98 98 -63 100) -98]
Test Case: 654 | Input/Output: [(89 -4 70 44) -4]
Test Case: 655 | Input/Output: [(38 -51 -15 93) -51]
Test Case: 656 | Input/Output: [(-50 56 97 36) -50]
Test Case: 657 | Input/Output: [(99 -67 -86 72) -86]
Test Case: 658 | Input/Output: [(-86 -75 99 100) -86]
Test Case: 659 | Input/Output: [(-72 -59 83 59) -72]
Test Case: 660 | Input/Output: [(56 -69 -8 38) -69]
Test Case: 661 | Input/Output: [(-35 83 11 97) -35]
Test Case: 662 | Input/Output: [(12 95 -29 94) -29]
Test Case: 663 | Input/Output: [(16 -81 -56 61) -81]
Test Case: 664 | Input/Output: [(-32 -90 36 -6) -90]
Test Case: 665 | Input/Output: [(66 -3 95 66) -3]
Test Case: 666 | Input/Output: [(64 47 -52 82) -52]
Test Case: 667 | Input/Output: [(-14 -52 26 52) -52]
Test Case: 668 | Input/Output: [(75 81 51 -1) -1]
Test Case: 669 | Input/Output: [(34 82 -46 31) -46]
Test Case: 670 | Input/Output: [(-64 87 92 -62) -64]
Test Case: 671 | Input/Output: [(86 -35 -51 -31) -51]
Test Case: 672 | Input/Output: [(13 -5 -50 -53) -53]
Test Case: 673 | Input/Output: [(47 82 -98 48) -98]
Test Case: 674 | Input/Output: [(43 4 77 -100) -100]
Test Case: 675 | Input/Output: [(53 -11 53 84) -11]
Test Case: 676 | Input/Output: [(46 -78 -1 -15) -78]
Test Case: 677 | Input/Output: [(40 59 -90 31) -90]
Test Case: 678 | Input/Output: [(6 44 74 -95) -95]
Test Case: 679 | Input/Output: [(61 -36 -98 -7) -98]
Test Case: 680 | Input/Output: [(-68 60 24 30) -68]
Test Case: 681 | Input/Output: [(-98 -16 8 18) -98]
Test Case: 682 | Input/Output: [(-78 -69 85 21) -78]
Test Case: 683 | Input/Output: [(-100 -10 -46 62) -100]
Test Case: 684 | Input/Output: [(-80 -83 -49 -100) -100]
Test Case: 685 | Input/Output: [(-12 -47 -63 10) -63]
Test Case: 686 | Input/Output: [(-62 40 69 57) -62]
Test Case: 687 | Input/Output: [(20 21 21 -90) -90]
Test Case: 688 | Input/Output: [(6 33 -93 37) -93]
Test Case: 689 | Input/Output: [(89 -47 -56 71) -56]
Test Case: 690 | Input/Output: [(-26 -52 8 -80) -80]
Test Case: 691 | Input/Output: [(-84 98 12 50) -84]
Test Case: 692 | Input/Output: [(-95 1 -23 -85) -95]
Test Case: 693 | Input/Output: [(-10 24 15 -69) -69]
Test Case: 694 | Input/Output: [(23 55 -90 -37) -90]
Test Case: 695 | Input/Output: [(85 -46 -92 90) -92]
Test Case: 696 | Input/Output: [(69 -91 18 87) -91]
Test Case: 697 | Input/Output: [(37 -47 75 -12) -47]
Test Case: 698 | Input/Output: [(14 39 74 81) 14]
Test Case: 699 | Input/Output: [(95 -4 75 -26) -26]
Test Case: 700 | Input/Output: [(80 82 -76 29) -76]
Test Case: 701 | Input/Output: [(-9 -20 32 -97) -97]
Test Case: 702 | Input/Output: [(83 -24 97 -69) -69]
Test Case: 703 | Input/Output: [(60 -43 59 1) -43]
Test Case: 704 | Input/Output: [(-97 -77 -47 -29) -97]
Test Case: 705 | Input/Output: [(86 84 80 -98) -98]
Test Case: 706 | Input/Output: [(-5 90 53 9) -5]
Test Case: 707 | Input/Output: [(85 29 5 80) 5]
Test Case: 708 | Input/Output: [(23 -36 99 -36) -36]
Test Case: 709 | Input/Output: [(58 48 -56 8) -56]
Test Case: 710 | Input/Output: [(15 17 -99 37) -99]
Test Case: 711 | Input/Output: [(49 23 -56 -82) -82]
Test Case: 712 | Input/Output: [(-88 -77 -77 -54) -88]
Test Case: 713 | Input/Output: [(95 -93 -7 15) -93]
Test Case: 714 | Input/Output: [(42 82 17 -49) -49]
Test Case: 715 | Input/Output: [(59 93 -35 48) -35]
Test Case: 716 | Input/Output: [(81 25 -5 77) -5]
Test Case: 717 | Input/Output: [(94 43 99 17) 17]
Test Case: 718 | Input/Output: [(-80 -63 -78 -11) -80]
Test Case: 719 | Input/Output: [(21 15 -16 -41) -41]
Test Case: 720 | Input/Output: [(-26 -12 -85 84) -85]
Test Case: 721 | Input/Output: [(-73 -51 -80 54) -80]
Test Case: 722 | Input/Output: [(-43 11 -55 -87) -87]
Test Case: 723 | Input/Output: [(39 -93 -45 48) -93]
Test Case: 724 | Input/Output: [(36 -56 50 57) -56]
Test Case: 725 | Input/Output: [(12 31 91 -84) -84]
Test Case: 726 | Input/Output: [(-66 33 -60 -9) -66]
Test Case: 727 | Input/Output: [(81 -97 34 82) -97]
Test Case: 728 | Input/Output: [(-43 -44 -53 24) -53]
Test Case: 729 | Input/Output: [(-41 -33 -89 -58) -89]
Test Case: 730 | Input/Output: [(93 3 73 23) 3]
Test Case: 731 | Input/Output: [(-46 -68 93 100) -68]
Test Case: 732 | Input/Output: [(38 24 67 -55) -55]
Test Case: 733 | Input/Output: [(-18 -89 83 -83) -89]
Test Case: 734 | Input/Output: [(-38 -39 82 8) -39]
Test Case: 735 | Input/Output: [(95 98 -96 21) -96]
Test Case: 736 | Input/Output: [(4 30 85 53) 4]
Test Case: 737 | Input/Output: [(51 39 43 -8) -8]
Test Case: 738 | Input/Output: [(72 57 59 93) 57]
Test Case: 739 | Input/Output: [(38 -50 51 -47) -50]
Test Case: 740 | Input/Output: [(50 84 34 78) 34]
Test Case: 741 | Input/Output: [(-53 -65 5 84) -65]
Test Case: 742 | Input/Output: [(-16 -58 12 -81) -81]
Test Case: 743 | Input/Output: [(90 25 88 37) 25]
Test Case: 744 | Input/Output: [(72 8 -2 -74) -74]
Test Case: 745 | Input/Output: [(-97 80 -47 -34) -97]
Test Case: 746 | Input/Output: [(21 7 -20 58) -20]
Test Case: 747 | Input/Output: [(64 -5 63 -99) -99]
Test Case: 748 | Input/Output: [(-62 10 63 -29) -62]
Test Case: 749 | Input/Output: [(-36 -64 21 10) -64]
Test Case: 750 | Input/Output: [(-64 43 55 50) -64]
Test Case: 751 | Input/Output: [(81 -69 15 15) -69]
Test Case: 752 | Input/Output: [(93 35 37 1) 1]
Test Case: 753 | Input/Output: [(-16 38 -32 18) -32]
Test Case: 754 | Input/Output: [(51 58 12 -80) -80]
Test Case: 755 | Input/Output: [(99 -41 -20 -38) -41]
Test Case: 756 | Input/Output: [(-98 49 27 2) -98]
Test Case: 757 | Input/Output: [(-91 -21 -17 -51) -91]
Test Case: 758 | Input/Output: [(50 17 97 74) 17]
Test Case: 759 | Input/Output: [(82 12 6 51) 6]
Test Case: 760 | Input/Output: [(75 -83 71 78) -83]
Test Case: 761 | Input/Output: [(-15 76 -86 42) -86]
Test Case: 762 | Input/Output: [(47 16 -27 53) -27]
Test Case: 763 | Input/Output: [(75 68 62 -42) -42]
Test Case: 764 | Input/Output: [(48 44 85 52) 44]
Test Case: 765 | Input/Output: [(82 49 -61 76) -61]
Test Case: 766 | Input/Output: [(-60 -20 76 -68) -68]
Test Case: 767 | Input/Output: [(-35 9 -74 3) -74]
Test Case: 768 | Input/Output: [(-39 -31 -83 80) -83]
Test Case: 769 | Input/Output: [(14 -28 71 -4) -28]
Test Case: 770 | Input/Output: [(-1 19 93 29) -1]
Test Case: 771 | Input/Output: [(-37 23 -96 -87) -96]
Test Case: 772 | Input/Output: [(24 -24 67 2) -24]
Test Case: 773 | Input/Output: [(64 -19 -11 -37) -37]
Test Case: 774 | Input/Output: [(100 -5 50 -86) -86]
Test Case: 775 | Input/Output: [(60 65 41 99) 41]
Test Case: 776 | Input/Output: [(48 -91 91 -78) -91]
Test Case: 777 | Input/Output: [(77 65 -21 -98) -98]
Test Case: 778 | Input/Output: [(91 -85 60 60) -85]
Test Case: 779 | Input/Output: [(62 83 -94 89) -94]
Test Case: 780 | Input/Output: [(91 26 19 15) 15]
Test Case: 781 | Input/Output: [(-68 8 68 9) -68]
Test Case: 782 | Input/Output: [(27 50 -49 9) -49]
Test Case: 783 | Input/Output: [(-53 -32 -60 -68) -68]
Test Case: 784 | Input/Output: [(55 -28 67 37) -28]
Test Case: 785 | Input/Output: [(46 -65 13 -96) -96]
Test Case: 786 | Input/Output: [(-49 71 -57 -8) -57]
Test Case: 787 | Input/Output: [(-40 -84 -54 74) -84]
Test Case: 788 | Input/Output: [(-66 -63 3 -98) -98]
Test Case: 789 | Input/Output: [(-31 -38 46 -57) -57]
Test Case: 790 | Input/Output: [(-77 -45 -53 -33) -77]
Test Case: 791 | Input/Output: [(-49 -54 -41 25) -54]
Test Case: 792 | Input/Output: [(66 14 92 -58) -58]
Test Case: 793 | Input/Output: [(-55 -92 -12 -24) -92]
Test Case: 794 | Input/Output: [(34 16 14 30) 14]
Test Case: 795 | Input/Output: [(55 71 65 -38) -38]
Test Case: 796 | Input/Output: [(-99 57 -75 52) -99]
Test Case: 797 | Input/Output: [(54 -26 -22 -96) -96]
Test Case: 798 | Input/Output: [(18 -78 -38 1) -78]
Test Case: 799 | Input/Output: [(-60 56 -10 -21) -60]
Test Case: 800 | Input/Output: [(-41 -17 46 -1) -41]
Test Case: 801 | Input/Output: [(37 1 -98 55) -98]
Test Case: 802 | Input/Output: [(-95 27 64 82) -95]
Test Case: 803 | Input/Output: [(15 35 39 -29) -29]
Test Case: 804 | Input/Output: [(18 27 -6 45) -6]
Test Case: 805 | Input/Output: [(-78 -46 -42 6) -78]
Test Case: 806 | Input/Output: [(6 -52 -99 21) -99]
Test Case: 807 | Input/Output: [(-95 -63 -93 -17) -95]
Test Case: 808 | Input/Output: [(27 -94 17 55) -94]
Test Case: 809 | Input/Output: [(-51 2 -21 32) -51]
Test Case: 810 | Input/Output: [(-88 -14 71 -38) -88]
Test Case: 811 | Input/Output: [(100 59 -18 11) -18]
Test Case: 812 | Input/Output: [(100 64 89 14) 14]
Test Case: 813 | Input/Output: [(89 -42 58 -5) -42]
Test Case: 814 | Input/Output: [(53 -81 98 15) -81]
Test Case: 815 | Input/Output: [(21 -42 33 -58) -58]
Test Case: 816 | Input/Output: [(-84 34 -33 41) -84]
Test Case: 817 | Input/Output: [(-4 -90 35 83) -90]
Test Case: 818 | Input/Output: [(-22 21 13 -95) -95]
Test Case: 819 | Input/Output: [(-3 17 90 -7) -7]
Test Case: 820 | Input/Output: [(49 64 16 52) 16]
Test Case: 821 | Input/Output: [(-21 -4 25 -68) -68]
Test Case: 822 | Input/Output: [(2 -98 90 -30) -98]
Test Case: 823 | Input/Output: [(-84 -66 -94 -3) -94]
Test Case: 824 | Input/Output: [(85 -97 24 6) -97]
Test Case: 825 | Input/Output: [(21 -41 34 -66) -66]
Test Case: 826 | Input/Output: [(-63 82 -72 -10) -72]
Test Case: 827 | Input/Output: [(-37 48 -75 13) -75]
Test Case: 828 | Input/Output: [(65 87 -66 -6) -66]
Test Case: 829 | Input/Output: [(-50 72 39 83) -50]
Test Case: 830 | Input/Output: [(-27 -53 -72 86) -72]
Test Case: 831 | Input/Output: [(34 -72 -100 -12) -100]
Test Case: 832 | Input/Output: [(53 -85 23 -50) -85]
Test Case: 833 | Input/Output: [(-15 44 -11 -51) -51]
Test Case: 834 | Input/Output: [(-63 -53 -24 8) -63]
Test Case: 835 | Input/Output: [(-92 0 20 27) -92]
Test Case: 836 | Input/Output: [(7 0 94 -41) -41]
Test Case: 837 | Input/Output: [(-56 -11 -14 24) -56]
Test Case: 838 | Input/Output: [(76 -38 8 -96) -96]
Test Case: 839 | Input/Output: [(44 28 -58 3) -58]
Test Case: 840 | Input/Output: [(64 92 15 -56) -56]
Test Case: 841 | Input/Output: [(-39 -16 38 -9) -39]
Test Case: 842 | Input/Output: [(-70 2 -66 90) -70]
Test Case: 843 | Input/Output: [(2 -71 92 78) -71]
Test Case: 844 | Input/Output: [(-73 51 -4 -24) -73]
Test Case: 845 | Input/Output: [(91 -6 64 94) -6]
Test Case: 846 | Input/Output: [(3 58 -20 -52) -52]
Test Case: 847 | Input/Output: [(98 -40 -29 -29) -40]
Test Case: 848 | Input/Output: [(-11 67 72 -90) -90]
Test Case: 849 | Input/Output: [(11 -15 42 -78) -78]
Test Case: 850 | Input/Output: [(1 20 -37 23) -37]
Test Case: 851 | Input/Output: [(-30 -89 5 65) -89]
Test Case: 852 | Input/Output: [(83 51 42 25) 25]
Test Case: 853 | Input/Output: [(-12 -40 65 -72) -72]
Test Case: 854 | Input/Output: [(-33 -29 -20 -15) -33]
Test Case: 855 | Input/Output: [(-78 -25 -42 -58) -78]
Test Case: 856 | Input/Output: [(72 86 -81 14) -81]
Test Case: 857 | Input/Output: [(56 91 26 -13) -13]
Test Case: 858 | Input/Output: [(68 -99 80 -18) -99]
Test Case: 859 | Input/Output: [(34 98 93 -65) -65]
Test Case: 860 | Input/Output: [(-43 11 89 -80) -80]
Test Case: 861 | Input/Output: [(-39 -1 -31 -60) -60]
Test Case: 862 | Input/Output: [(-35 2 26 -8) -35]
Test Case: 863 | Input/Output: [(-75 -68 -67 93) -75]
Test Case: 864 | Input/Output: [(-42 -10 35 -88) -88]
Test Case: 865 | Input/Output: [(25 82 34 100) 25]
Test Case: 866 | Input/Output: [(-86 -7 -34 -52) -86]
Test Case: 867 | Input/Output: [(33 -74 72 -8) -74]
Test Case: 868 | Input/Output: [(-45 -71 -21 -38) -71]
Test Case: 869 | Input/Output: [(-16 72 -100 29) -100]
Test Case: 870 | Input/Output: [(-38 -49 -6 65) -49]
Test Case: 871 | Input/Output: [(7 -3 -82 36) -82]
Test Case: 872 | Input/Output: [(-49 -84 -75 -45) -84]
Test Case: 873 | Input/Output: [(48 -74 -58 -74) -74]
Test Case: 874 | Input/Output: [(-13 -71 18 22) -71]
Test Case: 875 | Input/Output: [(-86 3 -55 -17) -86]
Test Case: 876 | Input/Output: [(27 14 -73 -80) -80]
Test Case: 877 | Input/Output: [(3 82 88 -23) -23]
Test Case: 878 | Input/Output: [(-25 -59 28 18) -59]
Test Case: 879 | Input/Output: [(23 59 42 -41) -41]
Test Case: 880 | Input/Output: [(-34 -51 4 72) -51]
Test Case: 881 | Input/Output: [(-65 -78 -62 -35) -78]
Test Case: 882 | Input/Output: [(98 12 -8 71) -8]
Test Case: 883 | Input/Output: [(-59 -40 97 36) -59]
Test Case: 884 | Input/Output: [(41 -55 -68 -14) -68]
Test Case: 885 | Input/Output: [(96 41 26 -1) -1]
Test Case: 886 | Input/Output: [(-4 -84 -23 -10) -84]
Test Case: 887 | Input/Output: [(-17 -13 -14 58) -17]
Test Case: 888 | Input/Output: [(-13 -29 39 -37) -37]
Test Case: 889 | Input/Output: [(94 44 20 -47) -47]
Test Case: 890 | Input/Output: [(70 45 62 -3) -3]
Test Case: 891 | Input/Output: [(-74 40 -82 33) -82]
Test Case: 892 | Input/Output: [(21 80 94 -72) -72]
Test Case: 893 | Input/Output: [(60 36 -76 1) -76]
Test Case: 894 | Input/Output: [(-12 33 71 56) -12]
Test Case: 895 | Input/Output: [(-14 49 -92 -31) -92]
Test Case: 896 | Input/Output: [(-17 -53 78 -88) -88]
Test Case: 897 | Input/Output: [(94 96 -23 -82) -82]
Test Case: 898 | Input/Output: [(55 22 89 -38) -38]
Test Case: 899 | Input/Output: [(10 2 58 -84) -84]
Test Case: 900 | Input/Output: [(45 98 -57 -6) -57]
Test Case: 901 | Input/Output: [(21 49 47 -21) -21]
Test Case: 902 | Input/Output: [(88 -34 -44 -26) -44]
Test Case: 903 | Input/Output: [(96 61 44 -99) -99]
Test Case: 904 | Input/Output: [(99 78 -57 91) -57]
Test Case: 905 | Input/Output: [(48 -70 13 30) -70]
Test Case: 906 | Input/Output: [(-38 28 96 -22) -38]
Test Case: 907 | Input/Output: [(-45 74 26 -61) -61]
Test Case: 908 | Input/Output: [(66 -96 -74 -8) -96]
Test Case: 909 | Input/Output: [(-42 63 0 -90) -90]
Test Case: 910 | Input/Output: [(25 -32 -74 70) -74]
Test Case: 911 | Input/Output: [(94 40 85 -100) -100]
Test Case: 912 | Input/Output: [(32 -15 0 8) -15]
Test Case: 913 | Input/Output: [(56 67 -95 15) -95]
Test Case: 914 | Input/Output: [(-62 73 -65 31) -65]
Test Case: 915 | Input/Output: [(93 -79 60 84) -79]
Test Case: 916 | Input/Output: [(-3 54 -87 -40) -87]
Test Case: 917 | Input/Output: [(35 56 25 -100) -100]
Test Case: 918 | Input/Output: [(81 92 -50 97) -50]
Test Case: 919 | Input/Output: [(16 57 -72 -6) -72]
Test Case: 920 | Input/Output: [(-60 -55 40 -30) -60]
Test Case: 921 | Input/Output: [(31 -8 -1 70) -8]
Test Case: 922 | Input/Output: [(-99 48 43 83) -99]
Test Case: 923 | Input/Output: [(-58 57 -18 -72) -72]
Test Case: 924 | Input/Output: [(100 51 38 93) 38]
Test Case: 925 | Input/Output: [(-65 -35 -94 -63) -94]
Test Case: 926 | Input/Output: [(26 -56 67 11) -56]
Test Case: 927 | Input/Output: [(-35 -58 48 -45) -58]
Test Case: 928 | Input/Output: [(70 -93 -41 -35) -93]
Test Case: 929 | Input/Output: [(2 -67 35 -85) -85]
Test Case: 930 | Input/Output: [(-30 -36 -9 -85) -85]
Test Case: 931 | Input/Output: [(62 -89 36 -12) -89]
Test Case: 932 | Input/Output: [(-58 40 96 -90) -90]
Test Case: 933 | Input/Output: [(-18 -29 -18 -7) -29]
Test Case: 934 | Input/Output: [(49 48 -27 71) -27]
Test Case: 935 | Input/Output: [(89 99 -8 -93) -93]
Test Case: 936 | Input/Output: [(38 5 -35 -82) -82]
Test Case: 937 | Input/Output: [(-55 -98 59 26) -98]
Test Case: 938 | Input/Output: [(87 -77 -15 -28) -77]
Test Case: 939 | Input/Output: [(75 51 -32 -18) -32]
Test Case: 940 | Input/Output: [(85 -77 61 -12) -77]
Test Case: 941 | Input/Output: [(86 58 -54 42) -54]
Test Case: 942 | Input/Output: [(38 54 -5 8) -5]
Test Case: 943 | Input/Output: [(59 -93 15 47) -93]
Test Case: 944 | Input/Output: [(-27 -4 -45 -30) -45]
Test Case: 945 | Input/Output: [(97 -70 46 -76) -76]
Test Case: 946 | Input/Output: [(12 -60 81 49) -60]
Test Case: 947 | Input/Output: [(42 -72 -89 75) -89]
Test Case: 948 | Input/Output: [(9 46 40 70) 9]
Test Case: 949 | Input/Output: [(-66 70 -99 -1) -99]
Test Case: 950 | Input/Output: [(-72 22 -49 -61) -72]
Test Case: 951 | Input/Output: [(70 -79 5 -25) -79]
Test Case: 952 | Input/Output: [(-8 41 90 -65) -65]
Test Case: 953 | Input/Output: [(1 -36 32 -29) -36]
Test Case: 954 | Input/Output: [(-34 7 25 -77) -77]
Test Case: 955 | Input/Output: [(5 34 -80 -41) -80]
Test Case: 956 | Input/Output: [(5 -85 41 35) -85]
Test Case: 957 | Input/Output: [(-60 3 -96 -48) -96]
Test Case: 958 | Input/Output: [(90 -10 -36 49) -36]
Test Case: 959 | Input/Output: [(-55 -94 73 -54) -94]
Test Case: 960 | Input/Output: [(67 -41 49 39) -41]
Test Case: 961 | Input/Output: [(-6 24 -75 88) -75]
Test Case: 962 | Input/Output: [(83 -73 5 -75) -75]
Test Case: 963 | Input/Output: [(-84 -16 39 94) -84]
Test Case: 964 | Input/Output: [(52 65 -35 -71) -71]
Test Case: 965 | Input/Output: [(-57 -16 -77 -59) -77]
Test Case: 966 | Input/Output: [(-80 20 -4 34) -80]
Test Case: 967 | Input/Output: [(18 -75 95 -27) -75]
Test Case: 968 | Input/Output: [(-32 9 88 17) -32]
Test Case: 969 | Input/Output: [(74 82 -67 42) -67]
Test Case: 970 | Input/Output: [(100 51 69 59) 51]
Test Case: 971 | Input/Output: [(-16 -23 71 75) -23]
Test Case: 972 | Input/Output: [(53 47 52 14) 14]
Test Case: 973 | Input/Output: [(50 -58 -54 -76) -76]
Test Case: 974 | Input/Output: [(36 -88 99 79) -88]
Test Case: 975 | Input/Output: [(-89 -71 -81 75) -89]
Test Case: 976 | Input/Output: [(12 64 -37 29) -37]
Test Case: 977 | Input/Output: [(-81 -26 42 -74) -81]
Test Case: 978 | Input/Output: [(61 -3 -27 -1) -27]
Test Case: 979 | Input/Output: [(10 36 -44 39) -44]
Test Case: 980 | Input/Output: [(11 17 4 60) 4]
Test Case: 981 | Input/Output: [(1 -53 -80 -92) -92]
Test Case: 982 | Input/Output: [(-36 -51 -99 95) -99]
Test Case: 983 | Input/Output: [(5 53 -42 40) -42]
Test Case: 984 | Input/Output: [(-13 25 -30 -41) -41]
Test Case: 985 | Input/Output: [(93 -66 2 -35) -66]
Test Case: 986 | Input/Output: [(5 -88 -89 -93) -93]
Test Case: 987 | Input/Output: [(-42 70 21 -8) -42]
Test Case: 988 | Input/Output: [(82 -49 -27 -39) -49]
Test Case: 989 | Input/Output: [(-38 -72 -72 49) -72]
Test Case: 990 | Input/Output: [(15 -37 60 33) -37]
Test Case: 991 | Input/Output: [(70 52 -73 88) -73]
Test Case: 992 | Input/Output: [(-21 -5 3 -40) -40]
Test Case: 993 | Input/Output: [(11 -97 -42 -74) -97]
Test Case: 994 | Input/Output: [(-47 51 -96 -98) -98]
Test Case: 995 | Input/Output: [(-14 100 39 55) -14]
Test Case: 996 | Input/Output: [(98 -61 89 -48) -61]
Test Case: 997 | Input/Output: [(38 53 -85 -75) -85]
Test Case: 998 | Input/Output: [(37 -13 85 -89) -89]
Test Case: 999 | Input/Output: [(-65 -41 64 57) -65]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -120 103 -71 -44 -70 -75 -30 46 -47 -33 16 -120 24 65 92 7
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 82 82 82] 29] [[-88 -88 -88 64] -88] [[-5 -5 -5 -5] -5] [[-63 -63 -26 -63] -63] [[29 -39 29 29] -39] [[32 -93 32 32] -93] [[-81 -20 -81 -81] -81] [[99 99 16 99] 16] [[-24 -24 -24 96] -24] [[70 19 70 70] 19] [(-41 -41 -41 -41) -41] [(-38 -38 -38 -38) -38] [(96 96 96 96) 96] [(-97 -97 -97 -97) -97] [(-41 -41 -41 -41) -41] [(79 55 24 26) 24] [(18 84 17 35) 17] [(29 78 28 73) 28] [(29 45 94 54) 29] [(75 85 16 35) 16] [(20 7 63 73) 7] [(31 44 40 0) 0] [(32 59 88 93) 32] [(47 1 3 62) 1] [(77 79 77 3) 3] [(86 13 91 59) 13] [(7 94 30 13) 7] [(52 99 63 98) 52] [(66 86 83 77) 66] [(46 8 25 37) 8] [(73 57 42 31) 31] [(4 43 98 71) 4] [(92 80 53 37) 37] [(63 10 82 22) 10] [(73 79 30 74) 30] [(15 -43 -79 -34) -79] [(10 -98 -12 -4) -98] [(35 -70 -47 1) -70] [(-97 -1 -74 -45) -97] [(-85 23 42 23) -85] [(-81 59 62 -42) -81] [(52 38 63 40) 38] [(-80 89 41 2) -80] [(90 -67 68 -25) -67] [(-21 -45 -45 -22) -45] [(-96 95 77 73) -96] [(-56 -8 7 12) -56] [(-85 -64 -68 -80) -85] [(-93 -13 65 -15) -93] [(-74 34 -12 -23) -74] [(85 -4 32 14) -4] [(16 35 -69 19) -69] [(-48 73 83 -13) -48] [(18 -66 -77 -66) -77] [(0 -67 -29 -62) -67] [(-67 -47 -7 -78) -78] [(78 43 85 -6) -6] [(78 -83 77 48) -83] [(-51 9 -79 8) -79] [(83 14 98 36) 14] [(-23 27 -85 -7) -85] [(-57 82 62 36) -57] [(-19 56 -89 -67) -89] [(-96 -85 24 -59) -96] [(-71 96 -17 61) -71] [(-38 11 -68 -85) -85] [(-28 72 -3 -7) -28] [(-71 86 77 -88) -88] [(-4 -23 83 56) -23] [(99 -40 64 -15) -40] [(78 39 -12 -93) -93] [(0 33 -38 24) -38] [(-4 85 -98 -78) -98] [(7 21 16 -97) -97] [(33 68 -66 -98) -98] [(93 49 26 -38) -38] [(-100 91 40 -1) -100] [(-21 38 -76 76) -76] [(-3 -79 -81 88) -81] [(51 -63 44 18) -63] [(75 8 89 84) 8] [(-74 68 -17 -59) -74] [(-100 -64 -76 79) -100] [(97 -75 -28 87) -75] [(15 -50 55 11) -50] [(-59 28 -94 49) -94] [(-46 -9 72 70) -46] [(21 -4 -42 -65) -65] [(78 1 88 32) 1] [(55 82 -40 64) -40] [(22 -50 1 -2) -50] [(85 11 -7 45) -7] [(59 72 95 18) 18] [(24 44 -79 89) -79] [(-19 -10 55 36) -19])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 3 11 1 2 7 12 4 2 1)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (1 3 11 1 2 7 12 4 2 1)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Errors: [0 1 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 77
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.999 0.997 0.989 0.999 0.998 0.993 0.988 0.996 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.877
Average program size in population (points): 68.302
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.272
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 434491
--- Timings ---
Current time: 1559314328303 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 29.0%
Fitness Testing:      1.7 seconds, 67.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop})
Lexicase best program: (in1 boolean_xor integer_eq boolean_dup print_integer integer_stackdepth boolean_rot integer_inc integer_yankdup exec_do*range () integer_gte integer_pop in2 integer_swap integer_stackdepth boolean_pop)
Lexicase best errors: [0 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop})
Zero cases best program: (in1 boolean_xor integer_eq boolean_dup print_integer integer_stackdepth boolean_rot integer_inc integer_yankdup exec_do*range () integer_gte integer_pop in2 integer_swap integer_stackdepth boolean_pop)
Zero cases best errors: [0 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 264 287 656 369 265 369 288 266 919)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (368 264 287 656 369 265 369 288 266 919)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Errors: [0 1 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 63
Size: 77
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.949
Median total errors in population: 6
Error averages by case: (0.632 0.736 0.713 0.344 0.631 0.735 0.631 0.712 0.734 0.081)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.095
Average program size in population (points): 49.126
Average percent parens in population: 0.204
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.513
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 706661
--- Timings ---
Current time: 1559314330710 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 46.4%
Fitness Testing:      2.1 seconds, 41.7%
Report:               0.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_dup_times) boolean_pop exec_dup_items integer_gt integer_yank in3 print_integer boolean_dup_times integer_add integer_mod exec_while (integer_sub boolean_frominteger exec_k_when_autoconstructing (boolean_rot) (boolean_shove) boolean_yankdup exec_y_when_autoconstructing (exec_do*range (integer_dup integer_lt) exec_noop integer_yank integer_max boolean_stackdepth) exec_yankdup integer_yankdup exec_do*range () integer_eq integer_gte) integer_lt exec_flush boolean_dup_items integer_gte exec_eq boolean_flush boolean_frominteger)
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_dup_times) boolean_pop exec_dup_items integer_gt integer_yank in3 print_integer boolean_dup_times integer_add integer_mod exec_while (integer_sub boolean_frominteger exec_k_when_autoconstructing (boolean_rot) (boolean_shove) boolean_yankdup exec_y_when_autoconstructing (exec_do*range (integer_dup integer_lt) exec_noop integer_yank integer_max boolean_stackdepth) exec_yankdup integer_yankdup exec_do*range () integer_eq integer_gte) integer_lt exec_flush boolean_dup_items integer_gte exec_eq boolean_flush boolean_frominteger)
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 254 927 617 254 311 927 363 363 312)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (311 254 927 617 254 311 927 363 363 312)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_min integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Errors: [1 1 0 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 77
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.361
Median total errors in population: 5
Error averages by case: (0.689 0.746 0.073 0.383 0.746 0.689 0.073 0.637 0.637 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.138
Average program size in population (points): 45.613
Average percent parens in population: 0.203
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.977
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 972466
--- Timings ---
Current time: 1559314333484 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 56.2%
Fitness Testing:      2.5 seconds, 31.3%
Report:               0.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank 20 88 in4 boolean_yankdup in3 tag_boolean_899 in4 boolean_not exec_yank boolean_flush integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Lexicase best errors: [0 1 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 69
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank 20 88 in4 boolean_yankdup in3 tag_boolean_899 in4 boolean_not exec_yank boolean_flush integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Zero cases best errors: [0 1 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 69
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 355 291 1000 291 624 267 1000 267 293)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (269 355 291 0 291 624 267 0 267 293)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 89} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer exec_yankdup integer_add exec_if (integer_flush 20 89) (in4) boolean_yankdup in3 tag_boolean_899 in4 boolean_not exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty integer_empty boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod))) ())
Errors: [0 1 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 56
Size: 67
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 7.343
Median total errors in population: 7
Error averages by case: (0.731 0.645 0.709 1.0 0.709 0.376 0.733 1.0 0.733 0.707)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 32.672
Average program size in population (points): 40.255
Average percent parens in population: 0.207
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4325
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1209127
--- Timings ---
Current time: 1559314336182 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 61.5%
Fitness Testing:      2.8 seconds, 26.1%
Report:               1.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer exec_swap (exec_yank boolean_rot exec_yankdup integer_yank integer_sub) (print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 boolean_pop in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2) () ())
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer exec_swap (exec_yank boolean_rot exec_yankdup integer_yank integer_sub) (print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 boolean_pop in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2) () ())
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (132 928 1000 1000 425 425 369 796 371 424)
Population mean number of elite cases: 5.87
Count of perfect (error zero) individuals by case: (132 928 0 0 425 425 369 796 371 424)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_mult integer_flush integer_pop) exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_yankdup integer_yankdup exec_do*range () integer_eq integer_gte) (integer_lt exec_flush boolean_dup_items integer_gte integer_rot) exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup in1 exec_do*range (boolean_and integer_shove integer_mod))) ()) () ())
Errors: [1 0 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.13
Median total errors in population: 6
Error averages by case: (0.868 0.072 1.0 1.0 0.575 0.575 0.631 0.204 0.629 0.576)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 37.584
Average program size in population (points): 46.315
Average percent parens in population: 0.205
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.97475
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1498267
--- Timings ---
Current time: 1559314338990 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.8 seconds, 65.0%
Fitness Testing:      3.1 seconds, 23.0%
Report:               1.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -64} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction 10} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction 59} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction in3})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec boolean_pop exec_dup_items -64 integer_yank in3 print_integer boolean_dup_times integer_add integer_mod exec_while (integer_sub boolean_frominteger exec_k_when_autoconstructing (boolean_rot) (boolean_shove) boolean_yankdup exec_y_when_autoconstructing (exec_do*range (integer_dup integer_lt) exec_noop integer_yank integer_max boolean_stackdepth) exec_yankdup integer_yankdup exec_do*range () integer_eq integer_gte) integer_lt exec_flush boolean_dup_items integer_gte exec_eq boolean_flush boolean_frominteger print_boolean boolean_invert_first_then_and exec_dup (boolean_flush) integer_empty boolean_invert_first_then_and boolean_not boolean_swap print_exec (exec_pop (integer_dec boolean_shove exec_when (print_integer boolean_dup_times integer_empty) exec_eq boolean_or) exec_empty boolean_rot 10 integer_yank integer_mod boolean_stackdepth exec_y_when_autoconstructing (boolean_stackdepth integer_dec 59 exec_do*times (integer_mod integer_sub in3))))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.155
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -64} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction 10} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction 59} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction in3})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec boolean_pop exec_dup_items -64 integer_yank in3 print_integer boolean_dup_times integer_add integer_mod exec_while (integer_sub boolean_frominteger exec_k_when_autoconstructing (boolean_rot) (boolean_shove) boolean_yankdup exec_y_when_autoconstructing (exec_do*range (integer_dup integer_lt) exec_noop integer_yank integer_max boolean_stackdepth) exec_yankdup integer_yankdup exec_do*range () integer_eq integer_gte) integer_lt exec_flush boolean_dup_items integer_gte exec_eq boolean_flush boolean_frominteger print_boolean boolean_invert_first_then_and exec_dup (boolean_flush) integer_empty boolean_invert_first_then_and boolean_not boolean_swap print_exec (exec_pop (integer_dec boolean_shove exec_when (print_integer boolean_dup_times integer_empty) exec_eq boolean_or) exec_empty boolean_rot 10 integer_yank integer_mod boolean_stackdepth exec_y_when_autoconstructing (boolean_stackdepth integer_dec 59 exec_do*times (integer_mod integer_sub in3))))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.155
--- Lexicase Population Statistics ---
Count of elite individuals by case: (452 330 1000 328 330 452 451 921 327 330)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (452 330 0 328 330 452 451 921 327 330)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub})
Best program: (in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_dup_times) boolean_pop exec_dup_items integer_gt integer_yank in3 print_integer boolean_dup_times integer_add integer_mod exec_while (integer_sub))
Errors: [1 0 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 20
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 6.079
Median total errors in population: 6
Error averages by case: (0.548 0.67 1.0 0.672 0.67 0.548 0.549 0.079 0.673 0.67)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 36.506
Average program size in population (points): 45.096
Average percent parens in population: 0.205
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.40825
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1784550
--- Timings ---
Current time: 1559314341608 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 67.4%
Fitness Testing:      3.4 seconds, 21.1%
Report:               1.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 681
Test mean error for best: 0.68100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70true             
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output:                    
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output:                    
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: true               
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_dec exec_yank integer_div integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup integer_mod integer_pop boolean_invert_second_then_and exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod)))
Lexicase best errors: [0 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_dec exec_yank integer_div integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup integer_mod integer_pop boolean_invert_second_then_and exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup boolean_eq exec_do*range (boolean_and integer_shove integer_mod)))
Zero cases best errors: [0 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 1000 551 933 935 1000 384 935 1000 1000)
Population mean number of elite cases: 8.12
Count of perfect (error zero) individuals by case: (383 0 551 933 935 0 384 935 0 0)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_do*range () integer_lte integer_shove integer_max in2 boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 in4) (boolean_not) exec_yank integer_dup_times integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop boolean_invert_second_then_and) (exec_dup (tagged_388 exec_pop ())) ())
Errors: [0 1 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 77
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.879
Median total errors in population: 6
Error averages by case: (0.617 1.0 0.449 0.067 0.065 1.0 0.616 0.065 1.0 1.0)
Error minima by case: (0 1 0 0 0 1 0 0 1 1)
Average genome size in population (length): 33.774
Average program size in population (points): 41.65
Average percent parens in population: 0.208
Minimum age in population: 6.0
Maximum age in population: 10.96875
Average age in population: 8.9056875
Median age in population: 8.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2051683
--- Timings ---
Current time: 1559314344379 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.0 seconds, 69.3%
Fitness Testing:      3.7 seconds, 19.7%
Report:               2.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.177
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.177
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 302 1 302 1 1000 1000 628 629)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (1 1 302 1 302 1 0 0 628 629)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 65
Size: 79
Percent parens: 0.177
--- Population Statistics ---
Average total errors in population: 8.135
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.698 0.999 0.698 0.999 1.0 1.0 0.372 0.371)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 36.342
Average program size in population (points): 44.903
Average percent parens in population: 0.201
Minimum age in population: 7.0
Maximum age in population: 12.203125
Average age in population: 10.301953125
Median age in population: 10.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2377496
--- Timings ---
Current time: 1559314346827 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.8 seconds, 69.6%
Fitness Testing:      4.0 seconds, 18.9%
Report:               2.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.177
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.177
--- Lexicase Population Statistics ---
Count of elite individuals by case: (930 929 548 548 234 3 148 232 549 930)
Population mean number of elite cases: 5.05
Count of perfect (error zero) individuals by case: (930 929 548 548 234 3 148 232 549 930)
Population mean number of perfect (error zero) cases: 5.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 exec_pop (integer_gt) in3) (boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup) exec_y_when_autoconstructing () integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 65
Size: 81
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 4.949
Median total errors in population: 4
Error averages by case: (0.07 0.071 0.452 0.452 0.766 0.997 0.852 0.768 0.451 0.07)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.15
Average program size in population (points): 61.317
Average percent parens in population: 0.191
Minimum age in population: 8.375
Maximum age in population: 13.515625
Average age in population: 12.0643515625
Median age in population: 11.90234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2772941
--- Timings ---
Current time: 1559314349343 milliseconds
Total Time:          23.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 69.9%
Fitness Testing:      4.4 seconds, 18.5%
Report:               2.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction 83})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank exec_while (83))
Lexicase best errors: [1 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction 83})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank exec_while (83))
Zero cases best errors: [1 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 137 854 137 137 416 852 137 300 301)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (301 137 854 137 137 416 852 137 300 301)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction in3})
Best program: (in1 boolean_xor integer_eq integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub integer_eq exec_rot (integer_add exec_if (integer_flush 20 88 in4) (exec_flush) in3) () ())
Errors: [1 0 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.428
Median total errors in population: 7
Error averages by case: (0.699 0.863 0.146 0.863 0.863 0.584 0.148 0.863 0.7 0.699)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.011
Average program size in population (points): 55.059
Average percent parens in population: 0.193
Minimum age in population: 10.875
Maximum age in population: 15.1484375
Average age in population: 13.55048046875
Median age in population: 13.68359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3134903
--- Timings ---
Current time: 1559314351994 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.7 seconds, 70.5%
Fitness Testing:      4.8 seconds, 17.9%
Report:               3.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_and})
Lexicase best program: (in2 boolean_not boolean_flush boolean_flush exec_pop (integer_fromboolean) boolean_yank exec_if () (in3 print_integer) boolean_invert_first_then_and exec_stackdepth boolean_and)
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_and})
Zero cases best program: (in2 boolean_not boolean_flush boolean_flush exec_pop (integer_fromboolean) boolean_yank exec_if () (in3 print_integer) boolean_invert_first_then_and exec_stackdepth boolean_and)
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 331 130 934 331 329 130 1000 1000 934)
Population mean number of elite cases: 6.12
Count of perfect (error zero) individuals by case: (0 331 130 934 331 329 130 0 0 934)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_eq exec_dup (boolean_stackdepth integer_dup_times) boolean_pop exec_dup_items integer_gt integer_yank in3 print_integer boolean_dup_times integer_add integer_mod exec_while ())
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.881
Median total errors in population: 8
Error averages by case: (1.0 0.669 0.87 0.066 0.669 0.671 0.87 1.0 1.0 0.066)
Error minima by case: (1 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 38.058
Average program size in population (points): 46.903
Average percent parens in population: 0.200
Minimum age in population: 12.125
Maximum age in population: 16.76171875
Average age in population: 14.96276171875
Median age in population: 15.0556640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3473014
--- Timings ---
Current time: 1559314354569 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.8 seconds, 71.3%
Fitness Testing:      5.1 seconds, 17.5%
Report:               3.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult exec_swap () (in2 boolean_eq) print_integer integer_stackdepth exec_yank print_boolean exec_rot (integer_add exec_if (integer_flush in4) (boolean_yankdup) in3 tag_boolean_899 integer_dup_items integer_gt) (in3) (boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup) boolean_yankdup exec_when (boolean_not boolean_empty exec_yankdup boolean_dup) boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult exec_swap () (in2 boolean_eq) print_integer integer_stackdepth exec_yank print_boolean exec_rot (integer_add exec_if (integer_flush in4) (boolean_yankdup) in3 tag_boolean_899 integer_dup_items integer_gt) (in3) (boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup) boolean_yankdup exec_when (boolean_not boolean_empty exec_yankdup boolean_dup) boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (943 581 943 361 361 362 581 1000 1000 361)
Population mean number of elite cases: 6.49
Count of perfect (error zero) individuals by case: (943 581 943 361 361 362 581 0 0 361)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items integer_lte exec_flush in2 integer_dec integer_mod integer_pop print_integer exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_shove (boolean_and integer_shove integer_mod)))
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 65
Size: 76
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 5.507
Median total errors in population: 6
Error averages by case: (0.057 0.419 0.057 0.639 0.639 0.638 0.419 1.0 1.0 0.639)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 34.128
Average program size in population (points): 42.104
Average percent parens in population: 0.206
Minimum age in population: 14.0234375
Maximum age in population: 18.333984375
Average age in population: 16.478091796875
Median age in population: 16.5712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3756412
--- Timings ---
Current time: 1559314357161 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 72.0%
Fitness Testing:      5.4 seconds, 17.0%
Report:               3.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup)
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup)
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (627 626 304 306 623 304 1000 1000 1 627)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (627 626 304 306 623 304 0 0 1 627)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_noop integer_flush 20 88) (in4) (boolean_yankdup) in3 tag_boolean_899 integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_flush exec_yankdup boolean_dup print_boolean integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush integer_lte) (integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_eq integer_mod))))
Errors: [0 0 1 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 65
Size: 77
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 6.582
Median total errors in population: 6
Error averages by case: (0.373 0.374 0.696 0.694 0.377 0.696 1.0 1.0 0.999 0.373)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 42.818
Average program size in population (points): 52.441
Average percent parens in population: 0.192
Minimum age in population: 15.525390625
Maximum age in population: 19.85009765625
Average age in population: 17.96961767578125
Median age in population: 18.022705078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4117057
--- Timings ---
Current time: 1559314359553 milliseconds
Total Time:          34.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 72.0%
Fitness Testing:      5.7 seconds, 16.9%
Report:               3.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_shove in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_dup_times) boolean_pop exec_dup_items integer_gt integer_yank in3 print_integer boolean_dup_times integer_add integer_mod)
Lexicase best errors: [1 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_shove in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_dup_times) boolean_pop exec_dup_items integer_gt integer_yank in3 print_integer boolean_dup_times integer_add integer_mod)
Zero cases best errors: [1 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 364 467 559 366 366 89 364 925 364)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (0 364 467 559 366 366 89 364 925 364)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_401} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_and})
Best program: (exec_y_when_autoconstructing () boolean_invert_second_then_and tagged_401 boolean_yank exec_if () (in3 print_integer) boolean_invert_first_then_and exec_stackdepth boolean_and)
Errors: [1 0 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.136
Median total errors in population: 7
Error averages by case: (1.0 0.636 0.533 0.441 0.634 0.634 0.911 0.636 0.075 0.636)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.841
Average program size in population (points): 48.915
Average percent parens in population: 0.195
Minimum age in population: 16.765625
Maximum age in population: 21.69189453125
Average age in population: 19.42776245117188
Median age in population: 19.4483642578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4458004
--- Timings ---
Current time: 1559314361939 milliseconds
Total Time:          36.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.4 seconds, 72.3%
Fitness Testing:      6.1 seconds, 16.6%
Report:               4.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tagged_340} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup tagged_340 boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tagged_340} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup tagged_340 boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 1000 169 158 914 168 584 1000 167 158)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (167 0 169 158 914 168 584 0 167 158)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 60
Size: 72
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.515
Median total errors in population: 8
Error averages by case: (0.833 1.0 0.831 0.842 0.086 0.832 0.416 1.0 0.833 0.842)
Error minima by case: (0 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 31.419
Average program size in population (points): 38.865
Average percent parens in population: 0.207
Minimum age in population: 17.9765625
Maximum age in population: 22.9180908203125
Average age in population: 20.95466796875
Median age in population: 20.99273681640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4736185
--- Timings ---
Current time: 1559314364437 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.3 seconds, 72.8%
Fitness Testing:      6.4 seconds, 16.4%
Report:               4.1 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) in3) (boolean_yank boolean_not boolean_empty exec_yankdup) (boolean_dup) boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 73
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) in3) (boolean_yank boolean_not boolean_empty exec_yankdup) (boolean_dup) boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 73
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 142 265 504 266 1 503 504 505 264)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (263 142 265 504 266 1 503 504 505 264)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot () () (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup in3 tag_boolean_899 integer_dup_items integer_gt) in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup) (integer_mod exec_do*range (integer_inc) integer_shove integer_mod) ())
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 56
Size: 68
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.783
Median total errors in population: 6
Error averages by case: (0.737 0.858 0.735 0.496 0.734 0.999 0.497 0.496 0.495 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.051
Average program size in population (points): 55.177
Average percent parens in population: 0.189
Minimum age in population: 19.2578125
Maximum age in population: 24.229248046875
Average age in population: 22.33015631103516
Median age in population: 22.403564453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5151438
--- Timings ---
Current time: 1559314367230 milliseconds
Total Time:          41.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.4 seconds, 73.0%
Fitness Testing:      6.8 seconds, 16.2%
Report:               4.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup)
Lexicase best errors: [0 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup)
Zero cases best errors: [0 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (897 369 341 99 83 83 343 369 99 341)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (897 369 341 99 83 83 343 369 99 341)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_invert_first_then_and integer_add integer_dec exec_yank integer_lte integer_stackdepth integer_lte integer_mult exec_yank integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot () (integer_add integer_dup integer_flush 20 88) (in4) boolean_yankdup in3 boolean_rot integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup boolean_invert_second_then_and exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod in4 print_integer) (integer_add tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod)) ())
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 63
Size: 74
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 6.976
Median total errors in population: 7
Error averages by case: (0.103 0.631 0.659 0.901 0.917 0.917 0.657 0.631 0.901 0.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.195
Average program size in population (points): 53.8
Average percent parens in population: 0.181
Minimum age in population: 20.2578125
Maximum age in population: 25.84942626953125
Average age in population: 23.81457086181641
Median age in population: 23.85293579101562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5556597
--- Timings ---
Current time: 1559314369885 milliseconds
Total Time:          44.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 73.0%
Fitness Testing:      7.2 seconds, 16.1%
Report:               4.7 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 678
Test mean error for best: 0.67800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99true             
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75true             
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -5620true          
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7true              
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Lexicase best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2) () ())
Lexicase best errors: [1 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Zero cases best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2) () ())
Zero cases best errors: [1 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 213 291 194 193 192 291 193 213 193)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (291 213 291 194 193 192 291 193 213 193)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_xor integer_eq exec_dup (print_integer in3 exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod exec_yank) (exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Errors: [1 1 1 0 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 67
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 7.736
Median total errors in population: 8
Error averages by case: (0.709 0.787 0.709 0.806 0.807 0.808 0.709 0.807 0.787 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.133
Average program size in population (points): 48.406
Average percent parens in population: 0.177
Minimum age in population: 21.2578125
Maximum age in population: 27.47135925292969
Average age in population: 25.2993182220459
Median age in population: 25.38593292236328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5918890
--- Timings ---
Current time: 1559314372665 milliseconds
Total Time:          47.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.5 seconds, 73.2%
Fitness Testing:      7.5 seconds, 15.9%
Report:               5.0 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod})
Lexicase best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (in4) (boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_flush boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop integer_mod) () ())
Lexicase best errors: [1 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod})
Zero cases best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (in4) (boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) in3 boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_flush boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop integer_mod) () ())
Zero cases best errors: [1 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 1 282 282 457 612 458 458 458 1)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (282 1 282 282 457 612 458 458 458 1)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup})
Best program: (boolean_invert_first_then_and integer_add in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot boolean_stackdepth boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add exec_if (integer_flush 20 88) (in4) 20 88) (in4) (boolean_yankdup) in3 tag_boolean_899 integer_dup_items integer_gt in3 boolean_yank boolean_not boolean_empty integer_empty boolean_dup boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (integer_eq integer_gte) (integer_lt exec_flush boolean_dup_items integer_gte exec_eq) boolean_flush boolean_frominteger print_boolean boolean_invert_first_then_and exec_dup ())
Errors: [1 1 1 1 0 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 62
Size: 73
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 6.709
Median total errors in population: 7
Error averages by case: (0.718 0.999 0.718 0.718 0.543 0.388 0.542 0.542 0.542 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.642
Average program size in population (points): 52.958
Average percent parens in population: 0.177
Minimum age in population: 23.90771484375
Maximum age in population: 28.85462188720703
Average age in population: 26.77965412902832
Median age in population: 26.84157180786133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6334732
--- Timings ---
Current time: 1559314375647 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 73.5%
Fitness Testing:      7.9 seconds, 15.8%
Report:               5.3 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add integer_gt) (in3) (boolean_yank boolean_not boolean_empty exec_yankdup) boolean_dup boolean_yank boolean_not boolean_empty exec_yankdup exec_k () (boolean_yankdup) integer_dup_items boolean_not exec_y_when_autoconstructing (exec_yankdup boolean_dup boolean_dup_times) integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Lexicase best errors: [1 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) exec_rot (integer_add integer_gt) (in3) (boolean_yank boolean_not boolean_empty exec_yankdup) boolean_dup boolean_yank boolean_not boolean_empty exec_yankdup exec_k () (boolean_yankdup) integer_dup_items boolean_not exec_y_when_autoconstructing (exec_yankdup boolean_dup boolean_dup_times) integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_dec integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (boolean_and integer_shove integer_mod))) ())
Zero cases best errors: [1 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 368 265 1000 1000 368 248 368 272 368)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (271 368 265 0 0 368 248 368 272 368)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_xor integer_eq exec_dup (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub) boolean_yank exec_rot (integer_add exec_if () (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) in3 tag_boolean_899 integer_dup_items integer_gt in3) (boolean_yank boolean_not boolean_empty exec_yankdup) (boolean_dup) boolean_yankdup integer_dup_items boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (integer_pop in2 integer_shove integer_mod) () ())
Errors: [1 0 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 43
Size: 55
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 7.472
Median total errors in population: 8
Error averages by case: (0.729 0.632 0.735 1.0 1.0 0.632 0.752 0.632 0.728 0.632)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 45.965
Average program size in population (points): 55.906
Average percent parens in population: 0.180
Minimum age in population: 25.20751953125
Maximum age in population: 29.90851974487305
Average age in population: 27.92985593032837
Median age in population: 28.00587844848633
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6744383
--- Timings ---
Current time: 1559314378650 milliseconds
Total Time:          53.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 73.6%
Fitness Testing:      8.3 seconds, 15.6%
Report:               5.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup})
Lexicase best program: (in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_dup_times) exec_k (exec_dup_items) (integer_stackdepth integer_lte integer_mult integer_flush integer_pop) exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88 in4) (boolean_yankdup) in3 tag_boolean_899 integer_dup_items integer_gt) (in3) (boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup) boolean_yankdup)
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup})
Zero cases best program: (in1 boolean_xor integer_eq exec_dup (boolean_stackdepth integer_dup_times) exec_k (exec_dup_items) (integer_stackdepth integer_lte integer_mult integer_flush integer_pop) exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88 in4) (boolean_yankdup) in3 tag_boolean_899 integer_dup_items integer_gt) (in3) (boolean_yank boolean_not boolean_empty exec_yankdup boolean_dup) boolean_yankdup)
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 908 448 1000 215 245 448 693 245 1000)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (246 908 448 0 215 245 448 693 245 0)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 3, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup})
Best program: (boolean_yankdup integer_add integer_dec integer_gte integer_lte integer_stackdepth integer_stackdepth integer_lte exec_s_when_autoconstructing (integer_flush integer_pop) (exec_swap () (in2 boolean_eq)) (print_integer boolean_rot) exec_yank boolean_rot exec_yankdup)
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 25
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 6.552
Median total errors in population: 6
Error averages by case: (0.754 0.092 0.552 1.0 0.785 0.755 0.552 0.307 0.755 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 44.956
Average program size in population (points): 54.958
Average percent parens in population: 0.185
Minimum age in population: 26.20751953125
Maximum age in population: 31.41239547729492
Average age in population: 29.47800242042542
Median age in population: 29.55669116973877
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7155040
--- Timings ---
Current time: 1559314381617 milliseconds
Total Time:          56.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.4 seconds, 73.8%
Fitness Testing:      8.7 seconds, 15.4%
Report:               6.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output:                    
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output:                    
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3})
Lexicase best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot 88 in4 boolean_yankdup in3)
Lexicase best errors: [1 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3})
Zero cases best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot 88 in4 boolean_yankdup in3)
Zero cases best errors: [1 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (474 130 134 473 140 132 474 916 1000 474)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (474 130 134 473 140 132 474 916 0 474)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 3, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_boolean_690} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (boolean_yankdup integer_add in1 exec_yank integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in2 boolean_eq) print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub boolean_eq print_integer exec_yankdup integer_add print_integer boolean_rot exec_yank boolean_rot integer_gt in3 integer_stackdepth boolean_not boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup boolean_not tag_boolean_690 exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 69
Percent parens: 0.116
--- Population Statistics ---
Average total errors in population: 6.653
Median total errors in population: 5
Error averages by case: (0.526 0.87 0.866 0.527 0.86 0.868 0.526 0.084 1.0 0.526)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 42.139
Average program size in population (points): 51.49
Average percent parens in population: 0.184
Minimum age in population: 27.30987548828125
Maximum age in population: 33.0269136428833
Average age in population: 30.99360004997253
Median age in population: 31.08691024780273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7550412
--- Timings ---
Current time: 1559314384815 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.0 seconds, 74.1%
Fitness Testing:      9.1 seconds, 15.3%
Report:               6.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod})
Lexicase best program: (in1 boolean_eq integer_eq exec_k_when_autoconstructing (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) (exec_rot (integer_add exec_if (integer_flush 20 88 boolean_yankdup) (in3 tag_boolean_899) integer_dup_items integer_gt) (in3) (boolean_yank boolean_not boolean_empty) exec_yankdup boolean_dup) boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank)) (exec_flush integer_yankdup integer_yankdup integer_mod exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod))
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod})
Zero cases best program: (in1 boolean_eq integer_eq exec_k_when_autoconstructing (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) (exec_rot (integer_add exec_if (integer_flush 20 88 boolean_yankdup) (in3 tag_boolean_899) integer_dup_items integer_gt) (in3) (boolean_yank boolean_not boolean_empty) exec_yankdup boolean_dup) boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank)) (exec_flush integer_yankdup integer_yankdup integer_mod exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod))
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 452 3 3 3 928 1000 3 451 473)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (473 452 3 3 3 928 0 3 451 473)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_eq integer_eq in3 print_boolean exec_rot (integer_add exec_if (boolean_eq) () print_integer boolean_rot exec_yank boolean_rot exec_yankdup boolean_yankdup integer_sub) (print_boolean) (exec_yankdup) boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 56
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.211
Median total errors in population: 7
Error averages by case: (0.527 0.548 0.997 0.997 0.997 0.072 1.0 0.997 0.549 0.527)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 43.474
Average program size in population (points): 52.706
Average percent parens in population: 0.176
Minimum age in population: 29.21260833740234
Maximum age in population: 34.17215871810913
Average age in population: 32.33027956151962
Median age in population: 32.41561555862427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7941537
--- Timings ---
Current time: 1559314387596 milliseconds
Total Time:          62.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.1 seconds, 74.2%
Fitness Testing:      9.4 seconds, 15.2%
Report:               6.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod})
Lexicase best program: (in1 boolean_eq integer_eq exec_k_when_autoconstructing (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) (exec_rot (integer_add exec_if (integer_flush 20 88 boolean_yankdup) (in3 tag_boolean_899) integer_dup_items integer_gt) (in3) (print_integer boolean_not boolean_empty) exec_yankdup boolean_dup) boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank)) (exec_flush integer_yankdup integer_yankdup integer_mod exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod))
Lexicase best errors: [0 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod})
Zero cases best program: (in1 boolean_eq integer_eq exec_k_when_autoconstructing (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) (exec_rot (integer_add exec_if (integer_flush 20 88 boolean_yankdup) (in3 tag_boolean_899) integer_dup_items integer_gt) (in3) (print_integer boolean_not boolean_empty) exec_yankdup boolean_dup) boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank)) (exec_flush integer_yankdup integer_yankdup integer_mod exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod))
Zero cases best errors: [0 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (672 222 223 232 222 322 448 222 436 435)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (672 222 223 232 222 322 448 222 436 435)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_336} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod})
Best program: (in1 boolean_eq integer_eq exec_k_when_autoconstructing (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) (exec_rot (integer_add exec_if (integer_flush 20 88 boolean_yankdup) (in3 tag_boolean_899) integer_dup_items integer_gt) (in3) (boolean_yank boolean_not boolean_empty) exec_yankdup boolean_dup) boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup exec_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_336 exec_yank)) (exec_flush integer_yankdup integer_yankdup integer_mod exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod))
Errors: [0 1 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 60
Size: 73
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 6.566
Median total errors in population: 5
Error averages by case: (0.328 0.778 0.777 0.768 0.778 0.678 0.552 0.778 0.564 0.565)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.571
Average program size in population (points): 54.547
Average percent parens in population: 0.184
Minimum age in population: 30.62794494628906
Maximum age in population: 35.62230801582336
Average age in population: 33.92597564601898
Median age in population: 34.07640290260315
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8307440
--- Timings ---
Current time: 1559314389986 milliseconds
Total Time:          64.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.9 seconds, 74.3%
Fitness Testing:      9.8 seconds, 15.2%
Report:               6.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12true            
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction -2} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub integer_sub exec_rot (integer_add exec_if (integer_flush 20 -2) (in4) boolean_yankdup) (boolean_yankdup) (integer_dup_items exec_do*count () boolean_yank boolean_not boolean_empty) exec_yankdup boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod))) ())
Lexicase best errors: [0 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 66
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction -2} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub integer_sub exec_rot (integer_add exec_if (integer_flush 20 -2) (in4) boolean_yankdup) (boolean_yankdup) (integer_dup_items exec_do*count () boolean_yank boolean_not boolean_empty) exec_yankdup boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod))) ())
Zero cases best errors: [0 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 66
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (77 75 520 442 482 443 444 1000 75 76)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (77 75 520 442 482 443 444 0 75 76)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (boolean_eq) () print_integer boolean_rot exec_yank boolean_rot exec_yankdup boolean_yankdup integer_sub) (print_boolean) (boolean_yankdup) exec_shove (integer_sub boolean_empty exec_yankdup boolean_dup) boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod exec_do*range (integer_inc integer_shove integer_mod)) ())
Errors: [0 0 0 1 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.366
Median total errors in population: 6
Error averages by case: (0.923 0.925 0.48 0.558 0.518 0.557 0.556 1.0 0.925 0.924)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 42.375
Average program size in population (points): 51.985
Average percent parens in population: 0.186
Minimum age in population: 31.62794494628906
Maximum age in population: 37.30154967308044
Average age in population: 35.40416140401363
Median age in population: 35.46486461162567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8669636
--- Timings ---
Current time: 1559314392962 milliseconds
Total Time:          67.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 74.5%
Fitness Testing:     10.1 seconds, 15.0%
Report:               7.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32true             
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88true             
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction 88} {:close 2, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec integer_yankdup integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_invert_second_then_and exec_yankdup 20 88 in4 boolean_yankdup in3 tag_boolean_899 88 in4 integer_inc in3 tag_boolean_899 integer_dup_items)
Lexicase best errors: [0 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 1, :instruction 88} {:close 2, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec integer_yankdup integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_invert_second_then_and exec_yankdup 20 88 in4 boolean_yankdup in3 tag_boolean_899 88 in4 integer_inc in3 tag_boolean_899 integer_dup_items)
Zero cases best errors: [0 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 1000 1000 1000 1000 929 929 329 597 600)
Population mean number of elite cases: 7.71
Count of perfect (error zero) individuals by case: (328 0 0 0 0 929 929 329 597 600)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items boolean_frominteger in3) (boolean_yank boolean_not boolean_empty) exec_yankdup boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_stackdepth exec_flush in2 integer_shove integer_mod integer_pop print_integer exec_dup (tagged_388 exec_yank) exec_flush integer_yankdup integer_yankdup integer_mod boolean_empty integer_inc integer_shove integer_mod)
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 56
Size: 63
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.288
Median total errors in population: 6
Error averages by case: (0.672 1.0 1.0 1.0 1.0 0.071 0.071 0.671 0.403 0.4)
Error minima by case: (0 1 1 1 1 0 0 0 0 0)
Average genome size in population (length): 43.766
Average program size in population (points): 53.425
Average percent parens in population: 0.180
Minimum age in population: 32.62794494628906
Maximum age in population: 38.57933366298676
Average age in population: 36.81114055281878
Median age in population: 36.89922398328781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9057242
--- Timings ---
Current time: 1559314395526 milliseconds
Total Time:          70.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.2 seconds, 74.5%
Fitness Testing:     10.5 seconds, 15.0%
Report:               7.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush})
Lexicase best program: (in1 boolean_eq boolean_invert_first_then_and in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k (20 88) (in4) boolean_yankdup) (boolean_eq tag_boolean_899 integer_dup_items integer_gt) in3) (boolean_yank boolean_not boolean_empty) (exec_yankdup) boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup exec_yankdup boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush) () ())
Lexicase best errors: [1 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush})
Zero cases best program: (in1 boolean_eq boolean_invert_first_then_and in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k (20 88) (in4) boolean_yankdup) (boolean_eq tag_boolean_899 integer_dup_items integer_gt) in3) (boolean_yank boolean_not boolean_empty) (exec_yankdup) boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup exec_yankdup boolean_dup boolean_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush) () ())
Zero cases best errors: [1 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 1000 455 1000 1000 1000 1000 455 1000 936)
Population mean number of elite cases: 8.33
Count of perfect (error zero) individuals by case: (484 0 455 0 0 0 0 455 0 936)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_388} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_388} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot integer_yankdup boolean_rot exec_yankdup integer_yank integer_sub integer_dup exec_rot (integer_add exec_if (integer_flush 20 88) (in4) boolean_yankdup) (in3 tag_boolean_899 integer_dup_items integer_gt) (in3) boolean_yank boolean_not boolean_empty boolean_empty exec_yankdup integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup boolean_dup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove boolean_empty integer_pop print_integer) (exec_dup (tagged_388 exec_yank)) (exec_flush integer_yankdup integer_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod integer_pop print_integer) (print_newline tagged_388 exec_pop () exec_flush integer_yankdup integer_yankdup) (integer_mod exec_do*range (boolean_and integer_shove integer_mod))))
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 69
Size: 84
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.67
Median total errors in population: 8
Error averages by case: (0.516 1.0 0.545 1.0 1.0 1.0 1.0 0.545 1.0 0.064)
Error minima by case: (0 1 0 1 1 1 1 0 1 0)
Average genome size in population (length): 42.921
Average program size in population (points): 52.627
Average percent parens in population: 0.184
Minimum age in population: 34.90751266479492
Maximum age in population: 40.08070519566536
Average age in population: 38.28045317587256
Median age in population: 38.35423311591148
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9431702
--- Timings ---
Current time: 1559314397861 milliseconds
Total Time:          72.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.9 seconds, 74.5%
Fitness Testing:     10.9 seconds, 15.0%
Report:               7.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 2, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec integer_yankdup integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_invert_second_then_and exec_yankdup integer_yank integer_dup_times print_boolean exec_rot () (boolean_dup_times exec_if (integer_flush 20 88) (integer_max)) (integer_inc in3 tag_boolean_899 integer_dup_items))
Lexicase best errors: [0 0 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 2, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec integer_yankdup integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_invert_second_then_and exec_yankdup integer_yank integer_dup_times print_boolean exec_rot () (boolean_dup_times exec_if (integer_flush 20 88) (integer_max)) (integer_inc in3 tag_boolean_899 integer_dup_items))
Zero cases best errors: [0 0 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (303 303 303 1000 1 1 1000 943 600 612)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (303 303 303 0 1 1 0 943 600 612)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 2, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction 20} {:close 1, :instruction 88} {:close 2, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_899} {:close 0, :instruction integer_dup_items})
Best program: (in1 boolean_eq integer_eq exec_k_when_autoconstructing (print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean) (exec_rot (integer_add exec_if (integer_flush 20 88 boolean_yankdup) (in3 boolean_rot) exec_yank boolean_invert_second_then_and exec_yankdup integer_yank integer_dup_times) (exec_while ()) (exec_rot (boolean_dup_times boolean_invert_first_then_and integer_flush 20) (88) (in4)) integer_inc in3 tag_boolean_899 integer_dup_items))
Errors: [0 0 0 1 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 6.934
Median total errors in population: 7
Error averages by case: (0.697 0.697 0.697 1.0 0.999 0.999 1.0 0.057 0.4 0.388)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 41.757
Average program size in population (points): 50.966
Average percent parens in population: 0.180
Minimum age in population: 36.83827781677246
Maximum age in population: 41.72313755750656
Average age in population: 39.81141680595279
Median age in population: 39.87919425219297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9801882
--- Timings ---
Current time: 1559314400275 milliseconds
Total Time:          74.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.7 seconds, 74.5%
Fitness Testing:     11.2 seconds, 15.0%
Report:               7.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 2, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq integer_eq in2 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if () (exec_k_when_autoconstructing () (20 88)) in4) (boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 2, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq integer_eq in2 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if () (exec_k_when_autoconstructing () (20 88)) in4) (boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 1000 1000 274 274 376 273 927 274 274)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (274 0 0 274 274 376 273 927 274 274)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup})
Best program: (in1 boolean_eq integer_eq in2 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) integer_sub) (print_boolean) (exec_rot (boolean_dup_items exec_if (integer_flush 20 88 exec_do*times () boolean_yankdup) ()) () ()))
Errors: [0 1 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 7.054
Median total errors in population: 8
Error averages by case: (0.726 1.0 1.0 0.726 0.726 0.624 0.727 0.073 0.726 0.726)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 36.718
Average program size in population (points): 46.955
Average percent parens in population: 0.221
Minimum age in population: 38.72024357318878
Maximum age in population: 43.29781321436167
Average age in population: 41.59610320788622
Median age in population: 41.78343567252159
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10149757
--- Timings ---
Current time: 1559314403100 milliseconds
Total Time:          77.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 74.5%
Fitness Testing:     11.6 seconds, 15.0%
Report:               8.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_invert_first_then_and integer_add integer_dec integer_yankdup integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_invert_second_then_and exec_yankdup integer_yank integer_dup_times print_boolean exec_rot () (boolean_dup_times exec_if (integer_flush 20 boolean_empty) () exec_yankdup integer_lt boolean_yankdup) (integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup) boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod) () ())
Lexicase best errors: [1 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction 20} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_invert_first_then_and integer_add integer_dec integer_yankdup integer_lte integer_stackdepth integer_lte integer_mult integer_flush integer_pop exec_swap () (in1 boolean_eq) print_integer boolean_rot exec_yank boolean_invert_second_then_and exec_yankdup integer_yank integer_dup_times print_boolean exec_rot () (boolean_dup_times exec_if (integer_flush 20 boolean_empty) () exec_yankdup integer_lt boolean_yankdup) (integer_dup_items integer_sub boolean_empty exec_yankdup boolean_dup) boolean_yankdup integer_dup_items exec_s_when_autoconstructing (exec_flush in2 integer_shove integer_mod) () ())
Zero cases best errors: [1 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (824 120 948 119 824 1000 1 119 825 120)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (824 120 948 119 824 0 1 119 825 120)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq boolean_pop print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (integer_dup) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Errors: [1 0 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.1
Median total errors in population: 6
Error averages by case: (0.176 0.88 0.052 0.881 0.176 1.0 0.999 0.881 0.175 0.88)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 30.345
Average program size in population (points): 42.669
Average percent parens in population: 0.293
Minimum age in population: 40.46168980002403
Maximum age in population: 44.9252172857523
Average age in population: 43.47087542827427
Median age in population: 43.55735352262855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 402
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 418
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10472818
--- Timings ---
Current time: 1559314405722 milliseconds
Total Time:          80.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.7 seconds, 74.4%
Fitness Testing:     11.9 seconds, 14.8%
Report:               8.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 367 911 1000 1000 544 102 1000 1000 102)
Population mean number of elite cases: 6.94
Count of perfect (error zero) individuals by case: (911 367 911 0 0 544 102 0 0 102)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 7.063
Median total errors in population: 7
Error averages by case: (0.089 0.633 0.089 1.0 1.0 0.456 0.898 1.0 1.0 0.898)
Error minima by case: (0 0 0 1 1 0 0 1 1 0)
Average genome size in population (length): 33.108
Average program size in population (points): 44.333
Average percent parens in population: 0.257
Minimum age in population: 41.46168980002403
Maximum age in population: 46.69835499860346
Average age in population: 44.83598666229658
Median age in population: 44.88496648520231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10795873
--- Timings ---
Current time: 1559314407943 milliseconds
Total Time:          82.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.3 seconds, 74.4%
Fitness Testing:     12.2 seconds, 14.8%
Report:               8.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq integer_eq in2 print_integer exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Lexicase best errors: [1 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq integer_eq in2 print_integer exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Zero cases best errors: [1 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (698 240 8 239 1000 697 9 698 239 240)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (698 240 8 239 0 697 9 698 239 240)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 22} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (boolean_invert_first_then_and integer_add integer_dec integer_yankdup integer_lte integer_stackdepth integer_lte integer_mult boolean_eq integer_eq in2 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (22 88) (in4) boolean_yankdup exec_yankdup integer_yank integer_shove) (print_boolean)) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Errors: [1 0 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 6.932
Median total errors in population: 7
Error averages by case: (0.302 0.76 0.992 0.761 1.0 0.303 0.991 0.302 0.761 0.76)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 28.381
Average program size in population (points): 41.209
Average percent parens in population: 0.311
Minimum age in population: 43.57394234836102
Maximum age in population: 48.10088840406388
Average age in population: 46.66751574455481
Median age in population: 46.81846114201471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 369
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11118126
--- Timings ---
Current time: 1559314410462 milliseconds
Total Time:          85.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 74.4%
Fitness Testing:     12.6 seconds, 14.8%
Report:               9.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) in4) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add integer_rot integer_flush) () ()) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) in4) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add integer_rot integer_flush) () ()) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (954 322 209 423 322 530 425 1000 1000 208)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (954 322 209 423 322 530 425 0 0 208)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup print_boolean integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (integer_dec 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.607
Median total errors in population: 6
Error averages by case: (0.046 0.678 0.791 0.577 0.678 0.47 0.575 1.0 1.0 0.792)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 28.283
Average program size in population (points): 40.943
Average percent parens in population: 0.308
Minimum age in population: 44.96036431193352
Maximum age in population: 50.00127110723406
Average age in population: 48.16624752932321
Median age in population: 48.22066116891801
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11437917
--- Timings ---
Current time: 1559314412652 milliseconds
Total Time:          87.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.9 seconds, 74.4%
Fitness Testing:     12.9 seconds, 14.8%
Report:               9.3 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -26                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 63                 
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 88                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 91                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 98                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 82                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 42                 
Correct output: -81                 | Program output: 62                 
Correct output: 38                  | Program output: 63                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: 68                 
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: 7                  
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: 65                 
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: 32                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -29                
Correct output: -78                 | Program output: -7                 
Correct output: -6                  | Program output: 85                 
Correct output: -83                 | Program output: 77                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 98                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 24                 
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: 83                 
Correct output: -40                 | Program output: 64                 
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 44                 
Correct output: 8                   | Program output: 89                 
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 72                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 1                  
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub})
Lexicase best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub)
Lexicase best errors: [0 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 12
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub})
Zero cases best program: (in1 boolean_eq integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub)
Zero cases best errors: [0 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 12
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (945 273 1000 330 273 329 343 945 945 329)
Population mean number of elite cases: 5.71
Count of perfect (error zero) individuals by case: (945 273 0 330 273 329 343 945 945 329)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 integer_fromboolean integer_eq in3 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Errors: [0 1 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 5.288
Median total errors in population: 5
Error averages by case: (0.055 0.727 1.0 0.67 0.727 0.671 0.657 0.055 0.055 0.671)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 28.032
Average program size in population (points): 40.607
Average percent parens in population: 0.307
Minimum age in population: 46.78343567252159
Maximum age in population: 51.55980185396038
Average age in population: 49.72325865950156
Median age in population: 49.7730709980242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11748950
--- Timings ---
Current time: 1559314415289 milliseconds
Total Time:          89.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 74.5%
Fitness Testing:     13.2 seconds, 14.7%
Report:               9.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq integer_eq integer_shove print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (exec_k (exec_if (integer_flush) ()) ()) () ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq integer_eq integer_shove print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (exec_k (exec_if (integer_flush) ()) ()) () ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 159 291 937 158 159 159 937 159 292)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (159 159 291 937 158 159 159 937 159 292)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_max} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq integer_shove print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup in4) boolean_yankdup) (exec_yankdup integer_yank integer_max) (print_boolean) exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 31
Size: 44
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.59
Median total errors in population: 8
Error averages by case: (0.841 0.841 0.709 0.063 0.842 0.841 0.841 0.063 0.841 0.708)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.128
Average program size in population (points): 40.605
Average percent parens in population: 0.305
Minimum age in population: 47.78343567252159
Maximum age in population: 53.2197681022808
Average age in population: 51.15416287699924
Median age in population: 51.23066810215823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12067923
--- Timings ---
Current time: 1559314418008 milliseconds
Total Time:          92.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.1 seconds, 74.7%
Fitness Testing:     13.6 seconds, 14.7%
Report:               9.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq integer_eq in2 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq integer_eq in2 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 716 717 1000 1000 228 228 228 1 228)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (220 716 717 0 0 228 228 228 1 228)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 0, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq in2 print_integer boolean_rot exec_yank boolean_rot boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88 in4) (boolean_yankdup) exec_swap (integer_yank integer_shove) (print_boolean) exec_rot (integer_add exec_if (integer_flush) ()) () ()) ()) () ())
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 44
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 7.434
Median total errors in population: 8
Error averages by case: (0.78 0.284 0.283 1.0 1.0 0.772 0.772 0.772 0.999 0.772)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 27.526
Average program size in population (points): 39.857
Average percent parens in population: 0.306
Minimum age in population: 50.44228031579405
Maximum age in population: 54.66862151079113
Average age in population: 52.73694924139092
Median age in population: 52.78586080184323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12385607
--- Timings ---
Current time: 1559314420495 milliseconds
Total Time:          95.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.0 seconds, 74.7%
Fitness Testing:     13.9 seconds, 14.6%
Report:              10.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove})
Lexicase best program: (in1 boolean_eq integer_eq boolean_and print_integer exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_min 20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) ())
Lexicase best errors: [0 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove})
Zero cases best program: (in1 boolean_eq integer_eq boolean_and print_integer exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_min 20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) ())
Zero cases best errors: [0 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 949 608 223 608 223 223 949 118 607)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (223 949 608 223 608 223 223 949 118 607)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq integer_lte print_integer boolean_rot exec_yank boolean_eq integer_eq integer_shove print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_yankdup integer_yank integer_shove) (print_boolean) (exec_rot (integer_add exec_if (integer_flush) ()) () ()))
Errors: [0 0 1 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.269
Median total errors in population: 5
Error averages by case: (0.777 0.051 0.392 0.777 0.392 0.777 0.777 0.051 0.882 0.393)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.034
Average program size in population (points): 40.433
Average percent parens in population: 0.303
Minimum age in population: 51.49274876900017
Maximum age in population: 56.28673202177742
Average age in population: 54.12769144832579
Median age in population: 54.18892278602289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 12691099
--- Timings ---
Current time: 1559314422944 milliseconds
Total Time:          97.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 74.8%
Fitness Testing:     14.2 seconds, 14.6%
Report:              10.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq integer_eq boolean_yank print_integer boolean_rot exec_yank boolean_rot boolean_swap integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ()) () ())
Lexicase best errors: [0 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq integer_eq boolean_yank print_integer boolean_rot exec_yank boolean_rot boolean_swap integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ()) () ())
Zero cases best errors: [0 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (949 114 374 460 458 460 460 1 457 460)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (949 114 374 460 458 460 460 1 457 460)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq boolean_yank print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean) (exec_rot (boolean_rot exec_if (integer_flush) ()) () ()) ())
Errors: [0 1 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 5.807
Median total errors in population: 8
Error averages by case: (0.051 0.886 0.626 0.54 0.542 0.54 0.54 0.999 0.543 0.54)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.676
Average program size in population (points): 40.028
Average percent parens in population: 0.305
Minimum age in population: 52.49274876900017
Maximum age in population: 57.58115568182257
Average age in population: 55.62024455899662
Median age in population: 55.66175741759798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 12998490
--- Timings ---
Current time: 1559314425318 milliseconds
Total Time:          99.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.8 seconds, 74.9%
Fitness Testing:     14.6 seconds, 14.6%
Report:              10.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove})
Lexicase best program: (in1 boolean_eq integer_eq boolean_and print_integer exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_min 20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove})
Zero cases best program: (in1 boolean_eq integer_eq boolean_and print_integer exec_yank boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (integer_min 20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 741 741 512 741 514 741 1000 741 1000)
Population mean number of elite cases: 6.96
Count of perfect (error zero) individuals by case: (225 741 741 512 741 514 741 0 741 0)
Population mean number of perfect (error zero) cases: 4.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_786} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_eq tag_boolean_786 print_integer boolean_rot exec_s_when_autoconstructing (boolean_rot exec_yankdup integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_invert_second_then_and) (exec_yankdup integer_yank print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ()) () ())) () ()) () ())
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 62
Percent parens: 0.371
--- Population Statistics ---
Average total errors in population: 5.044
Median total errors in population: 3
Error averages by case: (0.775 0.259 0.259 0.488 0.259 0.486 0.259 1.0 0.259 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 26.161
Average program size in population (points): 38.031
Average percent parens in population: 0.309
Minimum age in population: 54.13504355502664
Maximum age in population: 59.21761662786594
Average age in population: 57.35375108396863
Median age in population: 57.49182782111166
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 13352150
--- Timings ---
Current time: 1559314427835 milliseconds
Total Time:         102.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.7 seconds, 74.9%
Fitness Testing:     14.9 seconds, 14.6%
Report:              10.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 947 1 1 629 1 1 309 1000 1000)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (0 947 1 1 629 1 1 309 0 0)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.111
Median total errors in population: 8
Error averages by case: (1.0 0.053 0.999 0.999 0.371 0.999 0.999 0.691 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 25.823
Average program size in population (points): 37.669
Average percent parens in population: 0.311
Minimum age in population: 55.13504355502664
Maximum age in population: 60.56353303703872
Average age in population: 58.921215762674
Median age in population: 58.99875866607181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 13901944
--- Timings ---
Current time: 1559314430661 milliseconds
Total Time:         105.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.8 seconds, 74.9%
Fitness Testing:     15.4 seconds, 14.6%
Report:              10.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [1 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [1 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 142 478 478 1000 151 1000 1000 1000 478)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (5 142 478 478 0 151 0 0 0 478)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 1 0 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.268
Median total errors in population: 8
Error averages by case: (0.995 0.858 0.522 0.522 1.0 0.849 1.0 1.0 1.0 0.522)
Error minima by case: (0 0 0 0 1 0 1 1 1 0)
Average genome size in population (length): 22.058
Average program size in population (points): 30.561
Average percent parens in population: 0.272
Minimum age in population: 58.69891447339614
Maximum age in population: 62.36843213933389
Average age in population: 61.17324392029902
Median age in population: 61.36843213933389
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 353
Genome diversity (% unique genomes):	 0.32
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 379
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 14399505
--- Timings ---
Current time: 1559314432956 milliseconds
Total Time:         107.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.5 seconds, 74.8%
Fitness Testing:     15.8 seconds, 14.7%
Report:              11.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 802
Test mean error for best: 0.80200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 29                  | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 28                 
Correct output: -93                 | Program output: 31                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output:                    
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output:                    
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output:                    
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output:                    
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 28                 
Correct output: 16                  | Program output:                    
Correct output: 7                   | Program output: 19                 
Correct output: 0                   | Program output: 30                 
Correct output: 32                  | Program output: 31                 
Correct output: 1                   | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 7                   | Program output: 6                  
Correct output: 52                  | Program output:                    
Correct output: 66                  | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: 31                  | Program output:                    
Correct output: 4                   | Program output: 3                  
Correct output: 37                  | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 30                  | Program output:                    
Correct output: -79                 | Program output: 14                 
Correct output: -98                 | Program output: 9                  
Correct output: -70                 | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output:                    
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output:                    
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output:                    
Correct output: -69                 | Program output: 15                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 17                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output:                    
Correct output: -83                 | Program output:                    
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output:                    
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output:                    
Correct output: -93                 | Program output:                    
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 6                  
Correct output: -98                 | Program output: 32                 
Correct output: -38                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output:                    
Correct output: -50                 | Program output: 14                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 20                 
Correct output: 1                   | Program output:                    
Correct output: -40                 | Program output:                    
Correct output: -50                 | Program output: 21                 
Correct output: -7                  | Program output:                    
Correct output: 18                  | Program output:                    
Correct output: -79                 | Program output: 23                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 2, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if})
Lexicase best program: (in1 exec_do*count () print_integer boolean_rot boolean_rot boolean_rot exec_yankdup boolean_empty integer_sub exec_if (exec_k_when_autoconstructing (20 88) (boolean_rot exec_yankdup boolean_empty integer_sub exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) () in4) (boolean_yankdup) integer_add integer_yank integer_yankdup print_boolean exec_rot (integer_add exec_if () ()) () ()) () ())) ())
Lexicase best errors: [0 1 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 2, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if})
Zero cases best program: (in1 exec_do*count () print_integer boolean_rot boolean_rot boolean_rot exec_yankdup boolean_empty integer_sub exec_if (exec_k_when_autoconstructing (20 88) (boolean_rot exec_yankdup boolean_empty integer_sub exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) integer_yank integer_sub print_boolean exec_rot (integer_add exec_if (exec_k_when_autoconstructing (20 88) () in4) (boolean_yankdup) integer_add integer_yank integer_yankdup print_boolean exec_rot (integer_add exec_if () ()) () ()) () ())) ())
Zero cases best errors: [0 1 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 1000 244 476 1000 488 1000 1000 1000 219)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (246 0 244 476 0 488 0 0 0 219)
Population mean number of perfect (error zero) cases: 1.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush})
Best program: (in1 exec_do*count () print_integer exec_if (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) (exec_yankdup integer_yank integer_shove) print_boolean exec_rot (integer_add exec_do*range (integer_flush)) () ())
Errors: [0 1 0 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 17
Size: 27
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 8.327
Median total errors in population: 9
Error averages by case: (0.754 1.0 0.756 0.524 1.0 0.512 1.0 1.0 1.0 0.781)
Error minima by case: (0 1 0 0 1 0 1 1 1 0)
Average genome size in population (length): 21.896
Average program size in population (points): 29.401
Average percent parens in population: 0.249
Minimum age in population: 59.69891447339614
Maximum age in population: 64.36843213933389
Average age in population: 62.93417214312888
Median age in population: 62.98647576470375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 277
Genome diversity (% unique genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 308
Syntactic diversity (% unique Push programs):	 0.367
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 14749658
--- Timings ---
Current time: 1559314435999 milliseconds
Total Time:         110.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.9 seconds, 75.1%
Fitness Testing:     16.2 seconds, 14.6%
Report:              11.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: 64                 
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: 96                 
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 26                 
Correct output: 17                  | Program output: 35                 
Correct output: 28                  | Program output: 73                 
Correct output: 29                  | Program output: 54                 
Correct output: 16                  | Program output: 35                 
Correct output: 7                   | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 93                 
Correct output: 1                   | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 59                 
Correct output: 7                   | Program output: 13                 
Correct output: 52                  | Program output: 98                 
Correct output: 66                  | Program output: 77                 
Correct output: 8                   | Program output: 37                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 71                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 22                 
Correct output: 30                  | Program output: 74                 
Correct output: -79                 | Program output: -34                
Correct output: -98                 | Program output: -4                 
Correct output: -70                 | Program output: 1                  
Correct output: -97                 | Program output: -45                
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: -42                
Correct output: 38                  | Program output: 40                 
Correct output: -80                 | Program output: 2                  
Correct output: -67                 | Program output: -25                
Correct output: -45                 | Program output: -22                
Correct output: -96                 | Program output: 73                 
Correct output: -56                 | Program output: 12                 
Correct output: -85                 | Program output: -80                
Correct output: -93                 | Program output: -15                
Correct output: -74                 | Program output: -23                
Correct output: -4                  | Program output: 14                 
Correct output: -69                 | Program output: 19                 
Correct output: -48                 | Program output: -13                
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -62                
Correct output: -78                 | Program output: -78                
Correct output: -6                  | Program output: -6                 
Correct output: -83                 | Program output: 48                 
Correct output: -79                 | Program output: 8                  
Correct output: 14                  | Program output: 36                 
Correct output: -85                 | Program output: -7                 
Correct output: -57                 | Program output: 36                 
Correct output: -89                 | Program output: -67                
Correct output: -96                 | Program output: -59                
Correct output: -71                 | Program output: 61                 
Correct output: -85                 | Program output: -85                
Correct output: -28                 | Program output: -7                 
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: 56                 
Correct output: -40                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -38                 | Program output: 24                 
Correct output: -98                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -1                 
Correct output: -76                 | Program output: 76                 
Correct output: -81                 | Program output: 88                 
Correct output: -63                 | Program output: 18                 
Correct output: 8                   | Program output: 84                 
Correct output: -74                 | Program output: -59                
Correct output: -100                | Program output: 79                 
Correct output: -75                 | Program output: 87                 
Correct output: -50                 | Program output: 11                 
Correct output: -94                 | Program output: 49                 
Correct output: -46                 | Program output: 70                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 32                 
Correct output: -40                 | Program output: 64                 
Correct output: -50                 | Program output: -2                 
Correct output: -7                  | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: -79                 | Program output: 89                 
Correct output: -19                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 in4 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup 20 88 in4 boolean_yankdup exec_yankdup integer_yank integer_shove integer_gt exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [1 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 in4 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup 20 88 in4 boolean_yankdup exec_yankdup integer_yank integer_shove integer_gt exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [1 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 774 1 255 1 1000 1 1 772 188)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (0 774 1 255 1 0 1 1 772 188)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 in4 print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup 20 88 in4 boolean_yankdup exec_yankdup integer_yank integer_shove integer_gt exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 1 0 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 31
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 8.007
Median total errors in population: 8
Error averages by case: (1.0 0.226 0.999 0.745 0.999 1.0 0.999 0.999 0.228 0.812)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 22.261
Average program size in population (points): 30.92
Average percent parens in population: 0.273
Minimum age in population: 60.69891447339614
Maximum age in population: 66.14675803905266
Average age in population: 64.25764496690896
Median age in population: 64.33454800625873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 15207263
--- Timings ---
Current time: 1559314438552 milliseconds
Total Time:         113.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.8 seconds, 75.0%
Fitness Testing:     16.6 seconds, 14.6%
Report:              11.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 exec_pop () print_integer exec_flush exec_yank boolean_rot exec_yankdup boolean_empty integer_sub exec_if () (exec_k_when_autoconstructing (20 88) (in4) boolean_empty integer_sub exec_if () (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) 88) in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean integer_flush integer_add exec_if (integer_flush) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction 20} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction 88} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 exec_pop () print_integer exec_flush exec_yank boolean_rot exec_yankdup boolean_empty integer_sub exec_if () (exec_k_when_autoconstructing (20 88) (in4) boolean_empty integer_sub exec_if () (exec_k_when_autoconstructing (20 88) (in4) boolean_yankdup) 88) in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean integer_flush integer_add exec_if (integer_flush) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 376 376 376 376 483 376 108 376 107)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (485 376 376 376 376 483 376 108 376 107)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq boolean_shove boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.561
Median total errors in population: 9
Error averages by case: (0.515 0.624 0.624 0.624 0.624 0.517 0.624 0.892 0.624 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.232
Average program size in population (points): 29.377
Average percent parens in population: 0.210
Minimum age in population: 63.60451939007362
Maximum age in population: 67.7921571507693
Average age in population: 65.57634697009762
Median age in population: 65.66498172455067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 321
Genome diversity (% unique genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 357
Syntactic diversity (% unique Push programs):	 0.342
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 15444869
--- Timings ---
Current time: 1559314441341 milliseconds
Total Time:         115.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.2 seconds, 75.2%
Fitness Testing:     16.8 seconds, 14.5%
Report:              11.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [1 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [1 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 956 97 625 1 230 230 230 1000 956)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (0 956 97 625 1 230 230 230 0 956)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 0 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.675
Median total errors in population: 7
Error averages by case: (1.0 0.044 0.903 0.375 0.999 0.77 0.77 0.77 1.0 0.044)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 21.792
Average program size in population (points): 27.966
Average percent parens in population: 0.220
Minimum age in population: 64.60451939007362
Maximum age in population: 69.12086956252597
Average age in population: 67.250060461728
Median age in population: 67.28830304663978
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.521
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 15669098
--- Timings ---
Current time: 1559314443571 milliseconds
Total Time:         118.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.0 seconds, 75.3%
Fitness Testing:     17.1 seconds, 14.4%
Report:              12.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq boolean_pop boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean integer_swap integer_add exec_if (integer_flush) ())
Lexicase best errors: [1 1 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq boolean_pop boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean integer_swap integer_add exec_if (integer_flush) ())
Zero cases best errors: [1 1 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 186 462 173 186 360 173 462 173 462)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (462 186 462 173 186 360 173 462 173 462)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.901
Median total errors in population: 6
Error averages by case: (0.538 0.814 0.538 0.827 0.814 0.64 0.827 0.538 0.827 0.538)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.798
Average program size in population (points): 27.786
Average percent parens in population: 0.215
Minimum age in population: 66.27886669302643
Maximum age in population: 70.83701568743152
Average age in population: 68.88228139803833
Median age in population: 68.98754932530892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 15892169
--- Timings ---
Current time: 1559314445761 milliseconds
Total Time:         120.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.8 seconds, 75.4%
Fitness Testing:     17.3 seconds, 14.4%
Report:              12.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 350 214 396 215 396 350 959 396 396)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (350 350 214 396 215 396 350 959 396 396)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.978
Median total errors in population: 6
Error averages by case: (0.65 0.65 0.786 0.604 0.785 0.604 0.65 0.041 0.604 0.604)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.085
Average program size in population (points): 28.094
Average percent parens in population: 0.213
Minimum age in population: 67.27886669302643
Maximum age in population: 72.52611349763632
Average age in population: 70.27866349792353
Median age in population: 70.33878607970094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 16121405
--- Timings ---
Current time: 1559314448357 milliseconds
Total Time:         123.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.0 seconds, 75.6%
Fitness Testing:     17.6 seconds, 14.3%
Report:              12.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -20                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 84                 
Correct output: 28                  | Program output: 78                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 94                 
Correct output: 52                  | Program output: 99                 
Correct output: 66                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 79                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -1                 
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 89                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 95                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -64                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: 34                 
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 35                 
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 82                 
Correct output: -89                 | Program output: 56                 
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: 96                 
Correct output: -85                 | Program output: 11                 
Correct output: -28                 | Program output: 72                 
Correct output: -88                 | Program output: 86                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 33                 
Correct output: -98                 | Program output: 85                 
Correct output: -97                 | Program output: 21                 
Correct output: -98                 | Program output: 68                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: 91                 
Correct output: -76                 | Program output: 38                 
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: 68                 
Correct output: -100                | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 28                 
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 82                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: 44                 
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 integer_yank in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_while (integer_yank integer_sub in4) boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [1 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 integer_yank in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_while (integer_yank integer_sub in4) boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [1 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 428 428 428 326 202 326 428 201 1000)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (326 428 428 428 326 202 326 428 201 0)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_swap (integer_yank integer_shove) (print_boolean) exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 0 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.907
Median total errors in population: 7
Error averages by case: (0.674 0.572 0.572 0.572 0.674 0.798 0.674 0.572 0.799 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 22.089
Average program size in population (points): 28.028
Average percent parens in population: 0.210
Minimum age in population: 68.57496917415301
Maximum age in population: 73.89015191915196
Average age in population: 71.77774895716492
Median age in population: 71.86681243223583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 16347107
--- Timings ---
Current time: 1559314450708 milliseconds
Total Time:         125.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.9 seconds, 75.7%
Fitness Testing:     17.8 seconds, 14.2%
Report:              12.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 79                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 47                 
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 46                 
Correct output: 31                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 92                 
Correct output: 10                  | Program output: 63                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -70                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: 90                 
Correct output: -45                 | Program output: -21                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 85                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: 18                 
Correct output: -67                 | Program output: 0                  
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 78                 
Correct output: -83                 | Program output: 78                 
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 83                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: 99                 
Correct output: -93                 | Program output: 78                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -3                 
Correct output: -63                 | Program output: 51                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 97                 
Correct output: -50                 | Program output: 15                 
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: 21                 
Correct output: 1                   | Program output: 78                 
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: 22                 
Correct output: -7                  | Program output: 85                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq boolean_shove boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if () (integer_flush)) () ())
Lexicase best errors: [1 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq boolean_shove boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank integer_shove print_boolean exec_rot (integer_add exec_if () (integer_flush)) () ())
Zero cases best errors: [1 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 214 307 1000 307 438 307 439 307 1000)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (0 214 307 0 307 438 307 439 307 0)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq integer_div boolean_and print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 1 0 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 20
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.681
Median total errors in population: 8
Error averages by case: (1.0 0.786 0.693 1.0 0.693 0.562 0.693 0.561 0.693 1.0)
Error minima by case: (1 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 21.93
Average program size in population (points): 27.738
Average percent parens in population: 0.206
Minimum age in population: 70.36579931321444
Maximum age in population: 75.15257706495915
Average age in population: 73.25554702717282
Median age in population: 73.33869096018567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 16578386
--- Timings ---
Current time: 1559314453194 milliseconds
Total Time:         127.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.0 seconds, 75.9%
Fitness Testing:     18.0 seconds, 14.1%
Report:              12.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 99                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 55                 
Correct output: 17                  | Program output: 18                 
Correct output: 28                  | Program output: 29                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 57                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 73                 
Correct output: -79                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: -51                
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -38                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: 39                 
Correct output: -38                 | Program output: 0                  
Correct output: -98                 | Program output: -4                 
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: 33                 
Correct output: -38                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -21                
Correct output: -81                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: -4                 
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: 55                 
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: 11                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: 24                 
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (677 538 274 538 1 1 538 951 276 538)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (677 538 274 538 1 1 538 951 276 538)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.668
Median total errors in population: 4
Error averages by case: (0.323 0.462 0.726 0.462 0.999 0.999 0.462 0.049 0.724 0.462)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.6
Average program size in population (points): 27.554
Average percent parens in population: 0.213
Minimum age in population: 71.4391794070134
Maximum age in population: 76.50621058506637
Average age in population: 74.7530713254089
Median age in population: 74.8161640985365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 16803376
--- Timings ---
Current time: 1559314455538 milliseconds
Total Time:         130.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.0 seconds, 76.0%
Fitness Testing:     18.3 seconds, 14.0%
Report:              12.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 in3 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [1 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 in3 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [1 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (692 692 253 699 692 253 1000 253 699 253)
Population mean number of elite cases: 5.49
Count of perfect (error zero) individuals by case: (692 692 253 699 692 253 0 253 699 253)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 in3 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [1 1 0 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.514
Median total errors in population: 5
Error averages by case: (0.308 0.308 0.747 0.301 0.308 0.747 1.0 0.747 0.301 0.747)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 22.049
Average program size in population (points): 28.004
Average percent parens in population: 0.213
Minimum age in population: 75.25675407894533
Maximum age in population: 76.60165827579888
Average age in population: 76.0060851006799
Median age in population: 76.25675407894533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 499
Genome diversity (% unique genomes):	 0.307
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 535
Syntactic diversity (% unique Push programs):	 0.266
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 16995120
--- Timings ---
Current time: 1559314457886 milliseconds
Total Time:         132.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.9 seconds, 76.2%
Fitness Testing:     18.5 seconds, 14.0%
Report:              13.0 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 82                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 40                 
Correct output: 32                  | Program output: 59                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 30                 
Correct output: 52                  | Program output: 63                 
Correct output: 66                  | Program output: 83                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 43                 
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -74                
Correct output: -85                 | Program output: 23                 
Correct output: -81                 | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: 77                 
Correct output: -56                 | Program output: -8                 
Correct output: -85                 | Program output: -68                
Correct output: -93                 | Program output: -13                
Correct output: -74                 | Program output: -12                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -47                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: 62                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -85                
Correct output: -71                 | Program output: -17                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -3                 
Correct output: -88                 | Program output: 77                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 16                 
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: -17                
Correct output: -100                | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -9                 
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 in3 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 in3 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (565 565 565 405 565 957 1000 405 957 565)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (565 565 565 405 565 957 0 405 957 565)
Population mean number of perfect (error zero) cases: 5.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 in3 integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 4.451
Median total errors in population: 3
Error averages by case: (0.435 0.435 0.435 0.595 0.435 0.043 1.0 0.595 0.043 0.435)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 21.687
Average program size in population (points): 27.661
Average percent parens in population: 0.216
Minimum age in population: 76.42920617737211
Maximum age in population: 78.60165827579888
Average age in population: 77.7664602740498
Median age in population: 77.60165827579888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 428
Genome diversity (% unique genomes):	 0.305
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 459
Syntactic diversity (% unique Push programs):	 0.254
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 17167536
--- Timings ---
Current time: 1559314459908 milliseconds
Total Time:         134.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.6 seconds, 76.3%
Fitness Testing:     18.7 seconds, 13.9%
Report:              13.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 233
Test mean error for best: 0.23300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 31                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 77                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 42                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -67                
Correct output: -6                  | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -68                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -71                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: 7                  
Correct output: -98                 | Program output: -66                
Correct output: -38                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: -42                
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 29
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 29
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (546 844 970 1000 844 534 970 546 844 534)
Population mean number of elite cases: 7.63
Count of perfect (error zero) individuals by case: (546 844 970 0 844 534 970 546 844 534)
Population mean number of perfect (error zero) cases: 6.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 23
Size: 29
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 3.368
Median total errors in population: 3
Error averages by case: (0.454 0.156 0.03 1.0 0.156 0.466 0.03 0.454 0.156 0.466)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 21.782
Average program size in population (points): 27.738
Average percent parens in population: 0.214
Minimum age in population: 77.42920617737211
Maximum age in population: 80.51543222658549
Average age in population: 79.14602164553669
Median age in population: 79.42920617737211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 304
Genome diversity (% unique genomes):	 0.36
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 325
Syntactic diversity (% unique Push programs):	 0.303
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 17340368
--- Timings ---
Current time: 1559314462042 milliseconds
Total Time:         136.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.4 seconds, 76.4%
Fitness Testing:     18.9 seconds, 13.8%
Report:              13.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 29                 
Correct output: -93                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 70                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 25                 
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 22                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -12                
Correct output: -70                 | Program output: -47                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 40                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -62                
Correct output: -78                 | Program output: -78                
Correct output: -6                  | Program output: -6                 
Correct output: -83                 | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 36                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -4                 
Correct output: -40                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: 18                 
Correct output: 8                   | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -28                
Correct output: -50                 | Program output: 11                 
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 32                 
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -2                 
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 18                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 29
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 29
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 957 967 1 958 948 957 1 1 948)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (1 957 967 1 958 948 957 1 1 948)
Population mean number of perfect (error zero) cases: 5.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 23
Size: 29
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 4.261
Median total errors in population: 4
Error averages by case: (0.999 0.043 0.033 0.999 0.042 0.052 0.043 0.999 0.999 0.052)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.048
Average program size in population (points): 29.062
Average percent parens in population: 0.207
Minimum age in population: 79.9723192019788
Maximum age in population: 80.9723192019788
Average age in population: 80.4873192019788
Median age in population: 80.9723192019788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 700
Genome diversity (% unique genomes):	 0.252
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 752
Syntactic diversity (% unique Push programs):	 0.222
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 17531662
--- Timings ---
Current time: 1559314464365 milliseconds
Total Time:         139.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.3 seconds, 76.5%
Fitness Testing:     19.1 seconds, 13.8%
Report:              13.4 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -78                
Correct output: -6                  | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 18                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: -19                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 200 967 761 954 941 942 202 760 941)
Population mean number of elite cases: 6.87
Count of perfect (error zero) individuals by case: (201 200 967 761 954 941 942 202 760 941)
Population mean number of perfect (error zero) cases: 6.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction in4} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush})
Best program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 28
Size: 34
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 3.131
Median total errors in population: 3
Error averages by case: (0.799 0.8 0.033 0.239 0.046 0.059 0.058 0.798 0.24 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.1
Average program size in population (points): 29.108
Average percent parens in population: 0.206
Minimum age in population: 80.9723192019788
Maximum age in population: 82.9723192019788
Average age in population: 82.3723192019788
Median age in population: 82.4723192019788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 537
Genome diversity (% unique genomes):	 0.322
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 582
Syntactic diversity (% unique Push programs):	 0.277
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 17716099
--- Timings ---
Current time: 1559314466481 milliseconds
Total Time:         141.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.0 seconds, 76.6%
Fitness Testing:     19.3 seconds, 13.7%
Report:              13.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 54
Successful program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 34


Auto-simplifying with starting size: 34
step: 0
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 500
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 1000
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 1500
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 2000
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 2500
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 3000
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 3500
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 4000
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 4500
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 5000
program: (in1 boolean_eq in2 in3 integer_min integer_min boolean_eq in4 in3 integer_min integer_min print_integer boolean_rot exec_yank boolean_rot exec_yankdup integer_yank integer_sub in4 boolean_yankdup exec_yankdup integer_yank exec_flush print_boolean exec_rot (integer_add exec_if (integer_flush) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -88                 | Program output: -88                
Correct output: -5                  | Program output: -5                 
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: -39                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: 16                  | Program output: 16                 
Correct output: -24                 | Program output: -24                
Correct output: 19                  | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: -38                
Correct output: 96                  | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -41                 | Program output: -41                
Correct output: 24                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 28                  | Program output: 28                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 52                  | Program output: 52                 
Correct output: 66                  | Program output: 66                 
Correct output: 8                   | Program output: 8                  
Correct output: 31                  | Program output: 31                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: 38                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -56                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -78                 | Program output: -78                
Correct output: -6                  | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -93                 | Program output: -93                
Correct output: -38                 | Program output: -38                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -81                 | Program output: -81                
Correct output: -63                 | Program output: -63                
Correct output: 8                   | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -7                  | Program output: -7                 
Correct output: 18                  | Program output: 18                 
Correct output: -79                 | Program output: -79                
Correct output: -19                 | Program output: -19                
;;******************************
