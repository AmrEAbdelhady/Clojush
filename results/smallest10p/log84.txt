Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-31 -31 -31 49] -31] [[-60 82 82 82] -60] [[46 -60 46 46] -60] [[63 63 63 5] 5] [[23 15 23 23] 15] [[58 58 12 58] 12] [[80 80 80 -73] -73] [[-1 53 -1 -1] -1] [[87 79 79 79] 79] [[37 37 37 73] 37] [(12 12 12 12) 12] [(-56 -56 -56 -56) -56] [(40 40 40 40) 40] [(82 82 82 82) 82] [(-31 -31 -31 -31) -31] [(37 5 25 67) 5] [(83 72 75 52) 52] [(81 79 40 97) 40] [(72 97 15 2) 2] [(46 6 41 11) 6] [(42 7 34 82) 7] [(93 47 5 38) 5] [(52 56 61 19) 19] [(7 72 87 15) 7] [(97 16 38 44) 16] [(45 40 60 93) 40] [(4 13 85 40) 4] [(31 17 83 52) 17] [(48 21 30 97) 21] [(35 44 73 7) 7] [(14 46 24 70) 14] [(23 100 87 79) 23] [(56 65 100 93) 56] [(93 42 65 69) 42] [(72 5 44 69) 5] [(94 -85 0 98) -85] [(-97 86 -73 16) -97] [(75 -34 31 52) -34] [(-80 -64 97 -39) -80] [(-43 90 -24 4) -43] [(98 3 20 11) 3] [(43 -98 66 -42) -98] [(-61 27 -48 -59) -61] [(-87 81 64 -70) -87] [(-61 60 51 -81) -81] [(38 84 -67 0) -67] [(80 65 -47 -73) -73] [(-44 0 -70 -91) -91] [(28 50 -84 3) -84] [(-60 32 69 -66) -66] [(5 52 -43 69) -43] [(7 -2 -8 -35) -35] [(18 61 11 -45) -45] [(-8 -70 60 -82) -82] [(-40 46 8 2) -40] [(5 34 13 -4) -4] [(47 -18 -5 55) -18] [(-21 59 40 19) -21] [(-56 -56 74 2) -56] [(39 47 -70 -1) -70] [(-36 84 64 15) -36] [(80 78 63 29) 29] [(-78 7 95 37) -78] [(-12 -15 22 -51) -51] [(85 -92 -34 -84) -92] [(65 -68 -33 41) -68] [(38 20 -35 18) -35] [(-27 57 4 -77) -77] [(-95 29 -21 -68) -95] [(-38 -65 -43 87) -65] [(-64 -63 -78 66) -78] [(70 -53 99 88) -53] [(-16 59 -10 -40) -40] [(27 99 -44 66) -44] [(45 -14 -3 61) -14] [(-73 88 99 -70) -73] [(-61 -71 -81 -46) -81] [(-74 -14 99 58) -74] [(37 51 71 23) 23] [(-7 -61 -20 -78) -78] [(-95 25 28 -64) -95] [(-46 17 100 90) -46] [(-56 -56 -28 -94) -94] [(-83 -92 73 -24) -92] [(-90 16 97 56) -90] [(41 -57 -77 45) -77] [(83 51 -64 -95) -95] [(38 35 -41 40) -41] [(51 64 -3 2) -3] [(-31 42 -68 72) -68] [(-26 -75 -23 88) -75] [(59 37 -60 -10) -60] [(4 7 -58 -79) -79] [(-30 -84 97 -69) -84] [(-93 74 23 20) -93])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-31 -31 -31 49] -31]
Train Case:   6 | Input/Output: [[-60 82 82 82] -60]
Train Case:   7 | Input/Output: [[46 -60 46 46] -60]
Train Case:   8 | Input/Output: [[63 63 63 5] 5]
Train Case:   9 | Input/Output: [[23 15 23 23] 15]
Train Case:  10 | Input/Output: [[58 58 12 58] 12]
Train Case:  11 | Input/Output: [[80 80 80 -73] -73]
Train Case:  12 | Input/Output: [[-1 53 -1 -1] -1]
Train Case:  13 | Input/Output: [[87 79 79 79] 79]
Train Case:  14 | Input/Output: [[37 37 37 73] 37]
Train Case:  15 | Input/Output: [(12 12 12 12) 12]
Train Case:  16 | Input/Output: [(-56 -56 -56 -56) -56]
Train Case:  17 | Input/Output: [(40 40 40 40) 40]
Train Case:  18 | Input/Output: [(82 82 82 82) 82]
Train Case:  19 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  20 | Input/Output: [(37 5 25 67) 5]
Train Case:  21 | Input/Output: [(83 72 75 52) 52]
Train Case:  22 | Input/Output: [(81 79 40 97) 40]
Train Case:  23 | Input/Output: [(72 97 15 2) 2]
Train Case:  24 | Input/Output: [(46 6 41 11) 6]
Train Case:  25 | Input/Output: [(42 7 34 82) 7]
Train Case:  26 | Input/Output: [(93 47 5 38) 5]
Train Case:  27 | Input/Output: [(52 56 61 19) 19]
Train Case:  28 | Input/Output: [(7 72 87 15) 7]
Train Case:  29 | Input/Output: [(97 16 38 44) 16]
Train Case:  30 | Input/Output: [(45 40 60 93) 40]
Train Case:  31 | Input/Output: [(4 13 85 40) 4]
Train Case:  32 | Input/Output: [(31 17 83 52) 17]
Train Case:  33 | Input/Output: [(48 21 30 97) 21]
Train Case:  34 | Input/Output: [(35 44 73 7) 7]
Train Case:  35 | Input/Output: [(14 46 24 70) 14]
Train Case:  36 | Input/Output: [(23 100 87 79) 23]
Train Case:  37 | Input/Output: [(56 65 100 93) 56]
Train Case:  38 | Input/Output: [(93 42 65 69) 42]
Train Case:  39 | Input/Output: [(72 5 44 69) 5]
Train Case:  40 | Input/Output: [(94 -85 0 98) -85]
Train Case:  41 | Input/Output: [(-97 86 -73 16) -97]
Train Case:  42 | Input/Output: [(75 -34 31 52) -34]
Train Case:  43 | Input/Output: [(-80 -64 97 -39) -80]
Train Case:  44 | Input/Output: [(-43 90 -24 4) -43]
Train Case:  45 | Input/Output: [(98 3 20 11) 3]
Train Case:  46 | Input/Output: [(43 -98 66 -42) -98]
Train Case:  47 | Input/Output: [(-61 27 -48 -59) -61]
Train Case:  48 | Input/Output: [(-87 81 64 -70) -87]
Train Case:  49 | Input/Output: [(-61 60 51 -81) -81]
Train Case:  50 | Input/Output: [(38 84 -67 0) -67]
Train Case:  51 | Input/Output: [(80 65 -47 -73) -73]
Train Case:  52 | Input/Output: [(-44 0 -70 -91) -91]
Train Case:  53 | Input/Output: [(28 50 -84 3) -84]
Train Case:  54 | Input/Output: [(-60 32 69 -66) -66]
Train Case:  55 | Input/Output: [(5 52 -43 69) -43]
Train Case:  56 | Input/Output: [(7 -2 -8 -35) -35]
Train Case:  57 | Input/Output: [(18 61 11 -45) -45]
Train Case:  58 | Input/Output: [(-8 -70 60 -82) -82]
Train Case:  59 | Input/Output: [(-40 46 8 2) -40]
Train Case:  60 | Input/Output: [(5 34 13 -4) -4]
Train Case:  61 | Input/Output: [(47 -18 -5 55) -18]
Train Case:  62 | Input/Output: [(-21 59 40 19) -21]
Train Case:  63 | Input/Output: [(-56 -56 74 2) -56]
Train Case:  64 | Input/Output: [(39 47 -70 -1) -70]
Train Case:  65 | Input/Output: [(-36 84 64 15) -36]
Train Case:  66 | Input/Output: [(80 78 63 29) 29]
Train Case:  67 | Input/Output: [(-78 7 95 37) -78]
Train Case:  68 | Input/Output: [(-12 -15 22 -51) -51]
Train Case:  69 | Input/Output: [(85 -92 -34 -84) -92]
Train Case:  70 | Input/Output: [(65 -68 -33 41) -68]
Train Case:  71 | Input/Output: [(38 20 -35 18) -35]
Train Case:  72 | Input/Output: [(-27 57 4 -77) -77]
Train Case:  73 | Input/Output: [(-95 29 -21 -68) -95]
Train Case:  74 | Input/Output: [(-38 -65 -43 87) -65]
Train Case:  75 | Input/Output: [(-64 -63 -78 66) -78]
Train Case:  76 | Input/Output: [(70 -53 99 88) -53]
Train Case:  77 | Input/Output: [(-16 59 -10 -40) -40]
Train Case:  78 | Input/Output: [(27 99 -44 66) -44]
Train Case:  79 | Input/Output: [(45 -14 -3 61) -14]
Train Case:  80 | Input/Output: [(-73 88 99 -70) -73]
Train Case:  81 | Input/Output: [(-61 -71 -81 -46) -81]
Train Case:  82 | Input/Output: [(-74 -14 99 58) -74]
Train Case:  83 | Input/Output: [(37 51 71 23) 23]
Train Case:  84 | Input/Output: [(-7 -61 -20 -78) -78]
Train Case:  85 | Input/Output: [(-95 25 28 -64) -95]
Train Case:  86 | Input/Output: [(-46 17 100 90) -46]
Train Case:  87 | Input/Output: [(-56 -56 -28 -94) -94]
Train Case:  88 | Input/Output: [(-83 -92 73 -24) -92]
Train Case:  89 | Input/Output: [(-90 16 97 56) -90]
Train Case:  90 | Input/Output: [(41 -57 -77 45) -77]
Train Case:  91 | Input/Output: [(83 51 -64 -95) -95]
Train Case:  92 | Input/Output: [(38 35 -41 40) -41]
Train Case:  93 | Input/Output: [(51 64 -3 2) -3]
Train Case:  94 | Input/Output: [(-31 42 -68 72) -68]
Train Case:  95 | Input/Output: [(-26 -75 -23 88) -75]
Train Case:  96 | Input/Output: [(59 37 -60 -10) -60]
Train Case:  97 | Input/Output: [(4 7 -58 -79) -79]
Train Case:  98 | Input/Output: [(-30 -84 97 -69) -84]
Train Case:  99 | Input/Output: [(-93 74 23 20) -93]
Test Case:   0 | Input/Output: [[-13 -13 -88 -13] -88]
Test Case:   1 | Input/Output: [[-72 -72 -72 74] -72]
Test Case:   2 | Input/Output: [[10 44 10 10] 10]
Test Case:   3 | Input/Output: [[76 76 10 76] 10]
Test Case:   4 | Input/Output: [[64 1 64 64] 1]
Test Case:   5 | Input/Output: [[99 99 74 99] 74]
Test Case:   6 | Input/Output: [[77 -1 -1 -1] -1]
Test Case:   7 | Input/Output: [[18 88 88 88] 18]
Test Case:   8 | Input/Output: [[91 60 60 60] 60]
Test Case:   9 | Input/Output: [[14 30 14 14] 14]
Test Case:  10 | Input/Output: [[98 98 12 98] 12]
Test Case:  11 | Input/Output: [[7 32 32 32] 7]
Test Case:  12 | Input/Output: [[84 91 91 91] 84]
Test Case:  13 | Input/Output: [[-50 -50 -50 33] -50]
Test Case:  14 | Input/Output: [[-34 -34 -34 95] -34]
Test Case:  15 | Input/Output: [[43 43 43 -66] -66]
Test Case:  16 | Input/Output: [[-57 -57 -43 -57] -57]
Test Case:  17 | Input/Output: [[13 13 49 13] 13]
Test Case:  18 | Input/Output: [[50 50 50 -20] -20]
Test Case:  19 | Input/Output: [[-55 67 67 67] -55]
Test Case:  20 | Input/Output: [[-93 -93 -54 -93] -93]
Test Case:  21 | Input/Output: [[94 -28 -28 -28] -28]
Test Case:  22 | Input/Output: [[85 85 -13 85] -13]
Test Case:  23 | Input/Output: [[48 48 -25 48] -25]
Test Case:  24 | Input/Output: [[-55 -55 -55 -71] -71]
Test Case:  25 | Input/Output: [[-29 3 -29 -29] -29]
Test Case:  26 | Input/Output: [[89 89 89 74] 74]
Test Case:  27 | Input/Output: [[82 54 54 54] 54]
Test Case:  28 | Input/Output: [[-92 -38 -38 -38] -92]
Test Case:  29 | Input/Output: [[-58 -58 -58 -55] -58]
Test Case:  30 | Input/Output: [[43 43 43 3] 3]
Test Case:  31 | Input/Output: [[-70 -70 30 -70] -70]
Test Case:  32 | Input/Output: [[-77 -9 -77 -77] -77]
Test Case:  33 | Input/Output: [[14 14 14 -74] -74]
Test Case:  34 | Input/Output: [[18 20 18 18] 18]
Test Case:  35 | Input/Output: [[-12 -31 -12 -12] -31]
Test Case:  36 | Input/Output: [[38 38 38 47] 38]
Test Case:  37 | Input/Output: [[-14 -14 23 -14] -14]
Test Case:  38 | Input/Output: [[-16 -16 -16 -1] -16]
Test Case:  39 | Input/Output: [[53 -99 53 53] -99]
Test Case:  40 | Input/Output: [[-32 -32 -32 49] -32]
Test Case:  41 | Input/Output: [[19 64 19 19] 19]
Test Case:  42 | Input/Output: [[-18 69 -18 -18] -18]
Test Case:  43 | Input/Output: [[-55 -58 -55 -55] -58]
Test Case:  44 | Input/Output: [[-31 10 10 10] -31]
Test Case:  45 | Input/Output: [[-93 53 53 53] -93]
Test Case:  46 | Input/Output: [[84 -37 -37 -37] -37]
Test Case:  47 | Input/Output: [[71 71 -5 71] -5]
Test Case:  48 | Input/Output: [[42 42 95 42] 42]
Test Case:  49 | Input/Output: [[68 68 -12 68] -12]
Test Case:  50 | Input/Output: [[33 33 33 12] 12]
Test Case:  51 | Input/Output: [[100 100 100 33] 33]
Test Case:  52 | Input/Output: [[73 11 73 73] 11]
Test Case:  53 | Input/Output: [[69 -30 69 69] -30]
Test Case:  54 | Input/Output: [[0 -34 -34 -34] -34]
Test Case:  55 | Input/Output: [[-60 -60 41 -60] -60]
Test Case:  56 | Input/Output: [[-44 -44 -44 -28] -44]
Test Case:  57 | Input/Output: [[26 26 71 26] 26]
Test Case:  58 | Input/Output: [[66 -80 -80 -80] -80]
Test Case:  59 | Input/Output: [[59 -86 -86 -86] -86]
Test Case:  60 | Input/Output: [[29 39 29 29] 29]
Test Case:  61 | Input/Output: [[-70 -70 94 -70] -70]
Test Case:  62 | Input/Output: [[-47 -47 -75 -47] -75]
Test Case:  63 | Input/Output: [[-74 -62 -74 -74] -74]
Test Case:  64 | Input/Output: [[39 39 39 -64] -64]
Test Case:  65 | Input/Output: [[69 69 35 69] 35]
Test Case:  66 | Input/Output: [[-56 -84 -84 -84] -84]
Test Case:  67 | Input/Output: [[-84 -84 -84 17] -84]
Test Case:  68 | Input/Output: [[86 86 86 -85] -85]
Test Case:  69 | Input/Output: [[-30 -30 77 -30] -30]
Test Case:  70 | Input/Output: [[35 35 -27 35] -27]
Test Case:  71 | Input/Output: [[43 43 43 -53] -53]
Test Case:  72 | Input/Output: [[8 42 8 8] 8]
Test Case:  73 | Input/Output: [[-97 -97 -97 8] -97]
Test Case:  74 | Input/Output: [[-75 -36 -36 -36] -75]
Test Case:  75 | Input/Output: [[-54 -20 -20 -20] -54]
Test Case:  76 | Input/Output: [[-86 -86 68 -86] -86]
Test Case:  77 | Input/Output: [[6 6 6 25] 6]
Test Case:  78 | Input/Output: [[-86 -46 -46 -46] -86]
Test Case:  79 | Input/Output: [[-100 -94 -94 -94] -100]
Test Case:  80 | Input/Output: [[13 -34 13 13] -34]
Test Case:  81 | Input/Output: [[-48 -48 -48 31] -48]
Test Case:  82 | Input/Output: [[10 10 -87 10] -87]
Test Case:  83 | Input/Output: [[-32 -59 -59 -59] -59]
Test Case:  84 | Input/Output: [[-80 76 -80 -80] -80]
Test Case:  85 | Input/Output: [[1 1 1 74] 1]
Test Case:  86 | Input/Output: [[44 61 44 44] 44]
Test Case:  87 | Input/Output: [[-24 -24 -24 -43] -43]
Test Case:  88 | Input/Output: [[-43 -43 -43 -43] -43]
Test Case:  89 | Input/Output: [[18 -21 -21 -21] -21]
Test Case:  90 | Input/Output: [[-20 -37 -20 -20] -37]
Test Case:  91 | Input/Output: [[-58 -77 -58 -58] -77]
Test Case:  92 | Input/Output: [[-24 41 41 41] -24]
Test Case:  93 | Input/Output: [[-11 -11 -41 -11] -41]
Test Case:  94 | Input/Output: [[-13 20 20 20] -13]
Test Case:  95 | Input/Output: [[-63 -63 -63 -12] -63]
Test Case:  96 | Input/Output: [[-57 -11 -11 -11] -57]
Test Case:  97 | Input/Output: [[11 11 41 11] 11]
Test Case:  98 | Input/Output: [[55 55 55 31] 31]
Test Case:  99 | Input/Output: [[51 51 -86 51] -86]
Test Case: 100 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 101 | Input/Output: [(18 18 18 18) 18]
Test Case: 102 | Input/Output: [(94 94 94 94) 94]
Test Case: 103 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 104 | Input/Output: [(78 78 78 78) 78]
Test Case: 105 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 106 | Input/Output: [(89 89 89 89) 89]
Test Case: 107 | Input/Output: [(48 48 48 48) 48]
Test Case: 108 | Input/Output: [(36 36 36 36) 36]
Test Case: 109 | Input/Output: [(61 61 61 61) 61]
Test Case: 110 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 111 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 112 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 113 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 114 | Input/Output: [(57 57 57 57) 57]
Test Case: 115 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 116 | Input/Output: [(57 57 57 57) 57]
Test Case: 117 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 118 | Input/Output: [(84 84 84 84) 84]
Test Case: 119 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 120 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 121 | Input/Output: [(69 69 69 69) 69]
Test Case: 122 | Input/Output: [(9 9 9 9) 9]
Test Case: 123 | Input/Output: [(10 10 10 10) 10]
Test Case: 124 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 125 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 126 | Input/Output: [(71 71 71 71) 71]
Test Case: 127 | Input/Output: [(98 98 98 98) 98]
Test Case: 128 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 129 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 130 | Input/Output: [(23 23 23 23) 23]
Test Case: 131 | Input/Output: [(46 46 46 46) 46]
Test Case: 132 | Input/Output: [(32 32 32 32) 32]
Test Case: 133 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 134 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 135 | Input/Output: [(1 1 1 1) 1]
Test Case: 136 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 137 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 138 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 139 | Input/Output: [(98 98 98 98) 98]
Test Case: 140 | Input/Output: [(41 41 41 41) 41]
Test Case: 141 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 142 | Input/Output: [(17 17 17 17) 17]
Test Case: 143 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 144 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 145 | Input/Output: [(79 79 79 79) 79]
Test Case: 146 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 147 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 148 | Input/Output: [(76 76 76 76) 76]
Test Case: 149 | Input/Output: [(35 35 35 35) 35]
Test Case: 150 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 151 | Input/Output: [(10 10 10 10) 10]
Test Case: 152 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 153 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 154 | Input/Output: [(14 14 14 14) 14]
Test Case: 155 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 156 | Input/Output: [(45 45 45 45) 45]
Test Case: 157 | Input/Output: [(90 90 90 90) 90]
Test Case: 158 | Input/Output: [(29 29 29 29) 29]
Test Case: 159 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 160 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 161 | Input/Output: [(100 100 100 100) 100]
Test Case: 162 | Input/Output: [(33 33 33 33) 33]
Test Case: 163 | Input/Output: [(28 28 28 28) 28]
Test Case: 164 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 165 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 166 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 167 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 168 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 169 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 170 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 171 | Input/Output: [(56 56 56 56) 56]
Test Case: 172 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 173 | Input/Output: [(17 17 17 17) 17]
Test Case: 174 | Input/Output: [(71 71 71 71) 71]
Test Case: 175 | Input/Output: [(75 75 75 75) 75]
Test Case: 176 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 177 | Input/Output: [(62 62 62 62) 62]
Test Case: 178 | Input/Output: [(61 61 61 61) 61]
Test Case: 179 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 180 | Input/Output: [(73 73 73 73) 73]
Test Case: 181 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 182 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 183 | Input/Output: [(5 5 5 5) 5]
Test Case: 184 | Input/Output: [(29 29 29 29) 29]
Test Case: 185 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 186 | Input/Output: [(49 49 49 49) 49]
Test Case: 187 | Input/Output: [(90 90 90 90) 90]
Test Case: 188 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 189 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 190 | Input/Output: [(41 41 41 41) 41]
Test Case: 191 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 192 | Input/Output: [(20 20 20 20) 20]
Test Case: 193 | Input/Output: [(27 27 27 27) 27]
Test Case: 194 | Input/Output: [(31 31 31 31) 31]
Test Case: 195 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 196 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 197 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 198 | Input/Output: [(30 30 30 30) 30]
Test Case: 199 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 200 | Input/Output: [(14 88 38 55) 14]
Test Case: 201 | Input/Output: [(32 60 53 67) 32]
Test Case: 202 | Input/Output: [(48 23 50 94) 23]
Test Case: 203 | Input/Output: [(8 21 35 60) 8]
Test Case: 204 | Input/Output: [(38 88 10 27) 10]
Test Case: 205 | Input/Output: [(32 17 31 37) 17]
Test Case: 206 | Input/Output: [(21 35 60 79) 21]
Test Case: 207 | Input/Output: [(47 45 19 58) 19]
Test Case: 208 | Input/Output: [(60 0 23 84) 0]
Test Case: 209 | Input/Output: [(68 51 85 56) 51]
Test Case: 210 | Input/Output: [(74 27 82 26) 26]
Test Case: 211 | Input/Output: [(57 86 91 46) 46]
Test Case: 212 | Input/Output: [(73 47 47 36) 36]
Test Case: 213 | Input/Output: [(14 93 64 43) 14]
Test Case: 214 | Input/Output: [(86 60 81 15) 15]
Test Case: 215 | Input/Output: [(20 19 41 47) 19]
Test Case: 216 | Input/Output: [(87 71 74 3) 3]
Test Case: 217 | Input/Output: [(9 79 84 99) 9]
Test Case: 218 | Input/Output: [(9 33 62 11) 9]
Test Case: 219 | Input/Output: [(3 65 12 2) 2]
Test Case: 220 | Input/Output: [(93 21 49 46) 21]
Test Case: 221 | Input/Output: [(84 48 79 19) 19]
Test Case: 222 | Input/Output: [(88 10 77 33) 10]
Test Case: 223 | Input/Output: [(76 61 32 54) 32]
Test Case: 224 | Input/Output: [(57 28 42 56) 28]
Test Case: 225 | Input/Output: [(52 46 79 55) 46]
Test Case: 226 | Input/Output: [(86 17 57 86) 17]
Test Case: 227 | Input/Output: [(89 96 52 75) 52]
Test Case: 228 | Input/Output: [(3 40 65 66) 3]
Test Case: 229 | Input/Output: [(90 39 48 51) 39]
Test Case: 230 | Input/Output: [(56 98 77 88) 56]
Test Case: 231 | Input/Output: [(80 63 87 85) 63]
Test Case: 232 | Input/Output: [(39 60 64 68) 39]
Test Case: 233 | Input/Output: [(40 95 80 58) 40]
Test Case: 234 | Input/Output: [(13 81 19 12) 12]
Test Case: 235 | Input/Output: [(37 61 74 38) 37]
Test Case: 236 | Input/Output: [(50 9 33 27) 9]
Test Case: 237 | Input/Output: [(80 31 15 20) 15]
Test Case: 238 | Input/Output: [(48 21 62 30) 21]
Test Case: 239 | Input/Output: [(85 4 22 6) 4]
Test Case: 240 | Input/Output: [(22 20 67 4) 4]
Test Case: 241 | Input/Output: [(38 10 65 42) 10]
Test Case: 242 | Input/Output: [(42 95 45 90) 42]
Test Case: 243 | Input/Output: [(90 51 46 80) 46]
Test Case: 244 | Input/Output: [(45 13 97 75) 13]
Test Case: 245 | Input/Output: [(45 13 2 38) 2]
Test Case: 246 | Input/Output: [(58 1 22 82) 1]
Test Case: 247 | Input/Output: [(4 55 86 74) 4]
Test Case: 248 | Input/Output: [(57 78 32 86) 32]
Test Case: 249 | Input/Output: [(16 4 49 93) 4]
Test Case: 250 | Input/Output: [(16 92 48 68) 16]
Test Case: 251 | Input/Output: [(61 75 8 80) 8]
Test Case: 252 | Input/Output: [(31 20 52 65) 20]
Test Case: 253 | Input/Output: [(14 81 24 10) 10]
Test Case: 254 | Input/Output: [(85 92 88 76) 76]
Test Case: 255 | Input/Output: [(5 76 21 95) 5]
Test Case: 256 | Input/Output: [(94 92 98 39) 39]
Test Case: 257 | Input/Output: [(46 78 84 62) 46]
Test Case: 258 | Input/Output: [(58 33 54 0) 0]
Test Case: 259 | Input/Output: [(23 19 10 20) 10]
Test Case: 260 | Input/Output: [(37 9 51 54) 9]
Test Case: 261 | Input/Output: [(83 40 35 76) 35]
Test Case: 262 | Input/Output: [(7 6 14 5) 5]
Test Case: 263 | Input/Output: [(77 76 24 4) 4]
Test Case: 264 | Input/Output: [(31 97 42 46) 31]
Test Case: 265 | Input/Output: [(32 63 33 3) 3]
Test Case: 266 | Input/Output: [(62 86 61 35) 35]
Test Case: 267 | Input/Output: [(65 4 4 15) 4]
Test Case: 268 | Input/Output: [(68 56 48 96) 48]
Test Case: 269 | Input/Output: [(7 1 30 4) 1]
Test Case: 270 | Input/Output: [(58 88 43 59) 43]
Test Case: 271 | Input/Output: [(54 38 19 13) 13]
Test Case: 272 | Input/Output: [(86 1 12 71) 1]
Test Case: 273 | Input/Output: [(32 29 14 4) 4]
Test Case: 274 | Input/Output: [(61 69 65 60) 60]
Test Case: 275 | Input/Output: [(32 71 37 35) 32]
Test Case: 276 | Input/Output: [(28 34 9 19) 9]
Test Case: 277 | Input/Output: [(90 99 94 33) 33]
Test Case: 278 | Input/Output: [(2 3 0 65) 0]
Test Case: 279 | Input/Output: [(85 22 87 10) 10]
Test Case: 280 | Input/Output: [(37 40 11 40) 11]
Test Case: 281 | Input/Output: [(27 7 4 0) 0]
Test Case: 282 | Input/Output: [(18 60 73 61) 18]
Test Case: 283 | Input/Output: [(77 17 18 12) 12]
Test Case: 284 | Input/Output: [(97 14 75 79) 14]
Test Case: 285 | Input/Output: [(10 40 93 42) 10]
Test Case: 286 | Input/Output: [(100 85 100 52) 52]
Test Case: 287 | Input/Output: [(54 53 92 39) 39]
Test Case: 288 | Input/Output: [(96 21 62 78) 21]
Test Case: 289 | Input/Output: [(78 21 51 98) 21]
Test Case: 290 | Input/Output: [(93 58 90 61) 58]
Test Case: 291 | Input/Output: [(31 7 91 64) 7]
Test Case: 292 | Input/Output: [(87 39 97 97) 39]
Test Case: 293 | Input/Output: [(47 56 91 38) 38]
Test Case: 294 | Input/Output: [(66 39 63 31) 31]
Test Case: 295 | Input/Output: [(15 62 54 77) 15]
Test Case: 296 | Input/Output: [(21 2 70 10) 2]
Test Case: 297 | Input/Output: [(40 10 78 34) 10]
Test Case: 298 | Input/Output: [(13 50 45 17) 13]
Test Case: 299 | Input/Output: [(83 43 17 96) 17]
Test Case: 300 | Input/Output: [(86 9 79 82) 9]
Test Case: 301 | Input/Output: [(92 91 10 4) 4]
Test Case: 302 | Input/Output: [(34 39 52 88) 34]
Test Case: 303 | Input/Output: [(13 8 37 44) 8]
Test Case: 304 | Input/Output: [(48 97 14 26) 14]
Test Case: 305 | Input/Output: [(92 0 59 52) 0]
Test Case: 306 | Input/Output: [(51 95 31 28) 28]
Test Case: 307 | Input/Output: [(46 47 1 33) 1]
Test Case: 308 | Input/Output: [(11 25 92 45) 11]
Test Case: 309 | Input/Output: [(100 32 87 59) 32]
Test Case: 310 | Input/Output: [(66 57 50 90) 50]
Test Case: 311 | Input/Output: [(22 19 80 40) 19]
Test Case: 312 | Input/Output: [(93 21 21 43) 21]
Test Case: 313 | Input/Output: [(66 54 20 67) 20]
Test Case: 314 | Input/Output: [(46 20 20 32) 20]
Test Case: 315 | Input/Output: [(77 68 60 8) 8]
Test Case: 316 | Input/Output: [(5 75 97 13) 5]
Test Case: 317 | Input/Output: [(2 91 77 80) 2]
Test Case: 318 | Input/Output: [(100 25 93 17) 17]
Test Case: 319 | Input/Output: [(3 92 7 4) 3]
Test Case: 320 | Input/Output: [(63 22 14 13) 13]
Test Case: 321 | Input/Output: [(83 20 81 29) 20]
Test Case: 322 | Input/Output: [(32 48 99 14) 14]
Test Case: 323 | Input/Output: [(75 99 49 74) 49]
Test Case: 324 | Input/Output: [(52 2 65 92) 2]
Test Case: 325 | Input/Output: [(65 57 74 14) 14]
Test Case: 326 | Input/Output: [(70 83 34 13) 13]
Test Case: 327 | Input/Output: [(77 67 11 82) 11]
Test Case: 328 | Input/Output: [(75 4 23 26) 4]
Test Case: 329 | Input/Output: [(17 81 62 94) 17]
Test Case: 330 | Input/Output: [(38 53 43 36) 36]
Test Case: 331 | Input/Output: [(50 39 22 18) 18]
Test Case: 332 | Input/Output: [(29 70 62 74) 29]
Test Case: 333 | Input/Output: [(37 65 61 24) 24]
Test Case: 334 | Input/Output: [(46 38 61 36) 36]
Test Case: 335 | Input/Output: [(97 46 12 19) 12]
Test Case: 336 | Input/Output: [(85 48 87 42) 42]
Test Case: 337 | Input/Output: [(34 10 64 89) 10]
Test Case: 338 | Input/Output: [(37 73 30 86) 30]
Test Case: 339 | Input/Output: [(78 40 69 35) 35]
Test Case: 340 | Input/Output: [(6 6 5 21) 5]
Test Case: 341 | Input/Output: [(68 39 13 55) 13]
Test Case: 342 | Input/Output: [(28 6 10 59) 6]
Test Case: 343 | Input/Output: [(48 71 59 95) 48]
Test Case: 344 | Input/Output: [(81 46 37 14) 14]
Test Case: 345 | Input/Output: [(50 65 52 38) 38]
Test Case: 346 | Input/Output: [(15 45 37 98) 15]
Test Case: 347 | Input/Output: [(63 79 80 50) 50]
Test Case: 348 | Input/Output: [(56 29 56 97) 29]
Test Case: 349 | Input/Output: [(13 14 70 21) 13]
Test Case: 350 | Input/Output: [(56 30 72 10) 10]
Test Case: 351 | Input/Output: [(66 51 25 62) 25]
Test Case: 352 | Input/Output: [(14 96 7 54) 7]
Test Case: 353 | Input/Output: [(6 12 31 7) 6]
Test Case: 354 | Input/Output: [(83 28 53 78) 28]
Test Case: 355 | Input/Output: [(90 97 77 46) 46]
Test Case: 356 | Input/Output: [(31 28 48 78) 28]
Test Case: 357 | Input/Output: [(10 52 31 10) 10]
Test Case: 358 | Input/Output: [(73 94 64 20) 20]
Test Case: 359 | Input/Output: [(80 6 48 32) 6]
Test Case: 360 | Input/Output: [(24 53 22 49) 22]
Test Case: 361 | Input/Output: [(84 13 33 19) 13]
Test Case: 362 | Input/Output: [(67 63 10 97) 10]
Test Case: 363 | Input/Output: [(70 61 54 26) 26]
Test Case: 364 | Input/Output: [(84 54 95 29) 29]
Test Case: 365 | Input/Output: [(100 42 80 57) 42]
Test Case: 366 | Input/Output: [(82 34 74 67) 34]
Test Case: 367 | Input/Output: [(76 46 48 12) 12]
Test Case: 368 | Input/Output: [(21 67 94 98) 21]
Test Case: 369 | Input/Output: [(5 43 31 41) 5]
Test Case: 370 | Input/Output: [(68 34 9 61) 9]
Test Case: 371 | Input/Output: [(76 44 35 54) 35]
Test Case: 372 | Input/Output: [(51 9 72 25) 9]
Test Case: 373 | Input/Output: [(52 36 54 55) 36]
Test Case: 374 | Input/Output: [(62 48 73 47) 47]
Test Case: 375 | Input/Output: [(32 15 27 76) 15]
Test Case: 376 | Input/Output: [(19 13 38 53) 13]
Test Case: 377 | Input/Output: [(5 54 9 81) 5]
Test Case: 378 | Input/Output: [(59 55 47 95) 47]
Test Case: 379 | Input/Output: [(95 65 13 50) 13]
Test Case: 380 | Input/Output: [(70 29 34 5) 5]
Test Case: 381 | Input/Output: [(25 50 74 50) 25]
Test Case: 382 | Input/Output: [(64 4 46 75) 4]
Test Case: 383 | Input/Output: [(59 81 32 12) 12]
Test Case: 384 | Input/Output: [(20 81 14 92) 14]
Test Case: 385 | Input/Output: [(14 40 13 38) 13]
Test Case: 386 | Input/Output: [(42 74 37 17) 17]
Test Case: 387 | Input/Output: [(98 62 61 81) 61]
Test Case: 388 | Input/Output: [(79 66 98 70) 66]
Test Case: 389 | Input/Output: [(31 31 79 49) 31]
Test Case: 390 | Input/Output: [(88 74 30 88) 30]
Test Case: 391 | Input/Output: [(89 99 63 2) 2]
Test Case: 392 | Input/Output: [(19 3 20 16) 3]
Test Case: 393 | Input/Output: [(49 13 83 96) 13]
Test Case: 394 | Input/Output: [(65 23 60 15) 15]
Test Case: 395 | Input/Output: [(22 48 86 40) 22]
Test Case: 396 | Input/Output: [(93 78 32 39) 32]
Test Case: 397 | Input/Output: [(23 82 63 16) 16]
Test Case: 398 | Input/Output: [(25 75 86 23) 23]
Test Case: 399 | Input/Output: [(86 7 43 29) 7]
Test Case: 400 | Input/Output: [(-94 97 55 -39) -94]
Test Case: 401 | Input/Output: [(71 -59 -64 0) -64]
Test Case: 402 | Input/Output: [(0 -88 -33 57) -88]
Test Case: 403 | Input/Output: [(82 30 15 -42) -42]
Test Case: 404 | Input/Output: [(-15 -94 97 50) -94]
Test Case: 405 | Input/Output: [(15 -16 34 35) -16]
Test Case: 406 | Input/Output: [(84 -49 -19 87) -49]
Test Case: 407 | Input/Output: [(-29 19 -40 -84) -84]
Test Case: 408 | Input/Output: [(64 -17 -82 -47) -82]
Test Case: 409 | Input/Output: [(-97 29 -39 74) -97]
Test Case: 410 | Input/Output: [(0 21 1 87) 0]
Test Case: 411 | Input/Output: [(-77 -7 43 -18) -77]
Test Case: 412 | Input/Output: [(26 -29 14 -94) -94]
Test Case: 413 | Input/Output: [(-54 -78 25 44) -78]
Test Case: 414 | Input/Output: [(90 -90 -21 -16) -90]
Test Case: 415 | Input/Output: [(45 -45 93 8) -45]
Test Case: 416 | Input/Output: [(-41 25 -78 23) -78]
Test Case: 417 | Input/Output: [(61 -3 -7 -4) -7]
Test Case: 418 | Input/Output: [(-99 -7 13 -35) -99]
Test Case: 419 | Input/Output: [(-29 -33 -2 -42) -42]
Test Case: 420 | Input/Output: [(-2 -6 95 -95) -95]
Test Case: 421 | Input/Output: [(20 70 -60 -59) -60]
Test Case: 422 | Input/Output: [(-5 44 79 -4) -5]
Test Case: 423 | Input/Output: [(-4 53 66 -22) -22]
Test Case: 424 | Input/Output: [(-4 78 -81 -83) -83]
Test Case: 425 | Input/Output: [(-53 -10 -22 0) -53]
Test Case: 426 | Input/Output: [(91 -36 26 -41) -41]
Test Case: 427 | Input/Output: [(-100 -97 -87 0) -100]
Test Case: 428 | Input/Output: [(30 65 -16 75) -16]
Test Case: 429 | Input/Output: [(77 27 -70 -55) -70]
Test Case: 430 | Input/Output: [(65 -63 87 -76) -76]
Test Case: 431 | Input/Output: [(-14 -18 -48 -48) -48]
Test Case: 432 | Input/Output: [(98 49 -70 -15) -70]
Test Case: 433 | Input/Output: [(8 -6 4 56) -6]
Test Case: 434 | Input/Output: [(94 3 90 -47) -47]
Test Case: 435 | Input/Output: [(-72 -3 7 -81) -81]
Test Case: 436 | Input/Output: [(-17 -46 11 56) -46]
Test Case: 437 | Input/Output: [(-99 36 -20 69) -99]
Test Case: 438 | Input/Output: [(14 -50 85 17) -50]
Test Case: 439 | Input/Output: [(68 -1 -1 -62) -62]
Test Case: 440 | Input/Output: [(-65 -53 -22 -63) -65]
Test Case: 441 | Input/Output: [(-46 24 15 45) -46]
Test Case: 442 | Input/Output: [(38 11 31 84) 11]
Test Case: 443 | Input/Output: [(-67 48 66 -15) -67]
Test Case: 444 | Input/Output: [(-57 32 -97 25) -97]
Test Case: 445 | Input/Output: [(-78 82 37 -83) -83]
Test Case: 446 | Input/Output: [(-67 -41 4 -11) -67]
Test Case: 447 | Input/Output: [(-44 15 -6 71) -44]
Test Case: 448 | Input/Output: [(99 -23 81 40) -23]
Test Case: 449 | Input/Output: [(-7 -53 85 -55) -55]
Test Case: 450 | Input/Output: [(-20 -70 -18 -23) -70]
Test Case: 451 | Input/Output: [(-62 -46 -21 22) -62]
Test Case: 452 | Input/Output: [(8 31 -58 12) -58]
Test Case: 453 | Input/Output: [(-40 48 -61 -2) -61]
Test Case: 454 | Input/Output: [(14 -44 85 -8) -44]
Test Case: 455 | Input/Output: [(-92 -61 -56 -9) -92]
Test Case: 456 | Input/Output: [(56 -87 -14 -88) -88]
Test Case: 457 | Input/Output: [(11 -16 79 43) -16]
Test Case: 458 | Input/Output: [(51 -87 -56 -61) -87]
Test Case: 459 | Input/Output: [(-88 7 37 -70) -88]
Test Case: 460 | Input/Output: [(-32 11 -86 43) -86]
Test Case: 461 | Input/Output: [(-22 92 26 89) -22]
Test Case: 462 | Input/Output: [(-68 91 53 -70) -70]
Test Case: 463 | Input/Output: [(-20 75 -59 -48) -59]
Test Case: 464 | Input/Output: [(4 1 -72 -5) -72]
Test Case: 465 | Input/Output: [(-43 50 -98 -46) -98]
Test Case: 466 | Input/Output: [(58 -36 22 -22) -36]
Test Case: 467 | Input/Output: [(70 -99 63 0) -99]
Test Case: 468 | Input/Output: [(-36 29 -61 -91) -91]
Test Case: 469 | Input/Output: [(68 -12 100 -94) -94]
Test Case: 470 | Input/Output: [(99 -19 74 67) -19]
Test Case: 471 | Input/Output: [(32 16 11 38) 11]
Test Case: 472 | Input/Output: [(-27 -100 -41 -21) -100]
Test Case: 473 | Input/Output: [(-78 5 94 -26) -78]
Test Case: 474 | Input/Output: [(-49 -36 -60 -58) -60]
Test Case: 475 | Input/Output: [(100 -96 -57 49) -96]
Test Case: 476 | Input/Output: [(-70 -30 -71 95) -71]
Test Case: 477 | Input/Output: [(-86 3 25 61) -86]
Test Case: 478 | Input/Output: [(-25 -39 -59 99) -59]
Test Case: 479 | Input/Output: [(33 32 -4 18) -4]
Test Case: 480 | Input/Output: [(-94 73 -20 -97) -97]
Test Case: 481 | Input/Output: [(26 -89 -89 -47) -89]
Test Case: 482 | Input/Output: [(53 -64 -59 -1) -64]
Test Case: 483 | Input/Output: [(24 39 -84 53) -84]
Test Case: 484 | Input/Output: [(-40 93 50 -43) -43]
Test Case: 485 | Input/Output: [(-45 -45 88 81) -45]
Test Case: 486 | Input/Output: [(98 -55 -34 -37) -55]
Test Case: 487 | Input/Output: [(73 -73 -82 -68) -82]
Test Case: 488 | Input/Output: [(-17 49 38 -75) -75]
Test Case: 489 | Input/Output: [(-18 -65 -89 -62) -89]
Test Case: 490 | Input/Output: [(97 -65 52 34) -65]
Test Case: 491 | Input/Output: [(-33 76 81 -1) -33]
Test Case: 492 | Input/Output: [(-87 -33 99 -47) -87]
Test Case: 493 | Input/Output: [(25 -44 92 -54) -54]
Test Case: 494 | Input/Output: [(38 -23 21 22) -23]
Test Case: 495 | Input/Output: [(55 -30 -62 -14) -62]
Test Case: 496 | Input/Output: [(-44 -13 94 47) -44]
Test Case: 497 | Input/Output: [(53 -1 88 -36) -36]
Test Case: 498 | Input/Output: [(-28 -66 -8 -86) -86]
Test Case: 499 | Input/Output: [(88 89 -93 71) -93]
Test Case: 500 | Input/Output: [(24 55 66 73) 24]
Test Case: 501 | Input/Output: [(-67 63 44 38) -67]
Test Case: 502 | Input/Output: [(52 -10 -17 0) -17]
Test Case: 503 | Input/Output: [(65 -25 -91 -69) -91]
Test Case: 504 | Input/Output: [(-88 0 -95 -75) -95]
Test Case: 505 | Input/Output: [(-54 -71 64 57) -71]
Test Case: 506 | Input/Output: [(28 52 -23 -44) -44]
Test Case: 507 | Input/Output: [(48 -38 63 67) -38]
Test Case: 508 | Input/Output: [(-33 -40 -10 -13) -40]
Test Case: 509 | Input/Output: [(62 52 -91 45) -91]
Test Case: 510 | Input/Output: [(82 -39 43 35) -39]
Test Case: 511 | Input/Output: [(19 99 -3 -31) -31]
Test Case: 512 | Input/Output: [(-16 31 75 -46) -46]
Test Case: 513 | Input/Output: [(35 73 80 -65) -65]
Test Case: 514 | Input/Output: [(-89 -52 18 -51) -89]
Test Case: 515 | Input/Output: [(-48 5 -80 14) -80]
Test Case: 516 | Input/Output: [(-30 26 -32 -82) -82]
Test Case: 517 | Input/Output: [(40 -59 75 -7) -59]
Test Case: 518 | Input/Output: [(-95 18 9 95) -95]
Test Case: 519 | Input/Output: [(-21 97 62 -79) -79]
Test Case: 520 | Input/Output: [(79 26 -67 14) -67]
Test Case: 521 | Input/Output: [(-4 95 -24 -31) -31]
Test Case: 522 | Input/Output: [(-23 50 34 68) -23]
Test Case: 523 | Input/Output: [(22 70 21 -69) -69]
Test Case: 524 | Input/Output: [(-88 49 64 -83) -88]
Test Case: 525 | Input/Output: [(-77 15 2 -50) -77]
Test Case: 526 | Input/Output: [(61 83 49 8) 8]
Test Case: 527 | Input/Output: [(-86 -98 100 -13) -98]
Test Case: 528 | Input/Output: [(27 -74 -32 -43) -74]
Test Case: 529 | Input/Output: [(63 -18 -78 77) -78]
Test Case: 530 | Input/Output: [(61 -93 89 -22) -93]
Test Case: 531 | Input/Output: [(-56 5 66 -25) -56]
Test Case: 532 | Input/Output: [(-61 63 -52 97) -61]
Test Case: 533 | Input/Output: [(80 67 -87 -6) -87]
Test Case: 534 | Input/Output: [(34 57 -33 -27) -33]
Test Case: 535 | Input/Output: [(-58 0 70 43) -58]
Test Case: 536 | Input/Output: [(38 -90 -52 -35) -90]
Test Case: 537 | Input/Output: [(-22 34 32 72) -22]
Test Case: 538 | Input/Output: [(45 -56 61 77) -56]
Test Case: 539 | Input/Output: [(40 -32 -25 28) -32]
Test Case: 540 | Input/Output: [(-35 26 36 25) -35]
Test Case: 541 | Input/Output: [(-22 -15 12 26) -22]
Test Case: 542 | Input/Output: [(-73 -83 1 -64) -83]
Test Case: 543 | Input/Output: [(61 -70 12 -37) -70]
Test Case: 544 | Input/Output: [(-26 -36 48 -31) -36]
Test Case: 545 | Input/Output: [(15 59 0 76) 0]
Test Case: 546 | Input/Output: [(61 73 81 -73) -73]
Test Case: 547 | Input/Output: [(100 56 -19 -82) -82]
Test Case: 548 | Input/Output: [(0 99 -72 -8) -72]
Test Case: 549 | Input/Output: [(-23 -57 -22 12) -57]
Test Case: 550 | Input/Output: [(73 -87 -44 -11) -87]
Test Case: 551 | Input/Output: [(-81 -82 50 -12) -82]
Test Case: 552 | Input/Output: [(-89 -99 77 -28) -99]
Test Case: 553 | Input/Output: [(26 -2 -86 -83) -86]
Test Case: 554 | Input/Output: [(-13 -71 -6 36) -71]
Test Case: 555 | Input/Output: [(42 9 -46 61) -46]
Test Case: 556 | Input/Output: [(-41 70 -19 56) -41]
Test Case: 557 | Input/Output: [(43 37 57 -15) -15]
Test Case: 558 | Input/Output: [(88 57 -3 -11) -11]
Test Case: 559 | Input/Output: [(97 -42 -40 -53) -53]
Test Case: 560 | Input/Output: [(97 91 10 72) 10]
Test Case: 561 | Input/Output: [(59 50 -45 -54) -54]
Test Case: 562 | Input/Output: [(13 -8 61 86) -8]
Test Case: 563 | Input/Output: [(-68 -27 -77 0) -77]
Test Case: 564 | Input/Output: [(62 -64 -42 35) -64]
Test Case: 565 | Input/Output: [(84 50 -4 57) -4]
Test Case: 566 | Input/Output: [(69 -47 68 -75) -75]
Test Case: 567 | Input/Output: [(41 70 48 47) 41]
Test Case: 568 | Input/Output: [(-42 23 8 68) -42]
Test Case: 569 | Input/Output: [(15 70 82 -88) -88]
Test Case: 570 | Input/Output: [(-53 4 -82 91) -82]
Test Case: 571 | Input/Output: [(-95 93 -100 24) -100]
Test Case: 572 | Input/Output: [(-17 -46 32 16) -46]
Test Case: 573 | Input/Output: [(-18 -93 -27 -7) -93]
Test Case: 574 | Input/Output: [(12 69 -45 44) -45]
Test Case: 575 | Input/Output: [(29 -35 -74 -83) -83]
Test Case: 576 | Input/Output: [(-84 12 71 3) -84]
Test Case: 577 | Input/Output: [(71 86 -87 -92) -92]
Test Case: 578 | Input/Output: [(-8 -81 55 -56) -81]
Test Case: 579 | Input/Output: [(45 -52 90 13) -52]
Test Case: 580 | Input/Output: [(11 -75 41 -40) -75]
Test Case: 581 | Input/Output: [(29 -74 27 75) -74]
Test Case: 582 | Input/Output: [(27 63 -27 -89) -89]
Test Case: 583 | Input/Output: [(72 8 2 -51) -51]
Test Case: 584 | Input/Output: [(97 8 45 -60) -60]
Test Case: 585 | Input/Output: [(-56 -92 -12 55) -92]
Test Case: 586 | Input/Output: [(27 -31 -65 -35) -65]
Test Case: 587 | Input/Output: [(2 -78 85 -44) -78]
Test Case: 588 | Input/Output: [(57 52 -86 31) -86]
Test Case: 589 | Input/Output: [(-59 -90 26 27) -90]
Test Case: 590 | Input/Output: [(90 -33 84 79) -33]
Test Case: 591 | Input/Output: [(-78 -9 94 -33) -78]
Test Case: 592 | Input/Output: [(77 52 27 -48) -48]
Test Case: 593 | Input/Output: [(-8 -48 -6 94) -48]
Test Case: 594 | Input/Output: [(-4 -2 -26 91) -26]
Test Case: 595 | Input/Output: [(-33 -15 -80 -5) -80]
Test Case: 596 | Input/Output: [(28 100 33 93) 28]
Test Case: 597 | Input/Output: [(9 42 -51 39) -51]
Test Case: 598 | Input/Output: [(-23 43 -38 -23) -38]
Test Case: 599 | Input/Output: [(-46 10 100 53) -46]
Test Case: 600 | Input/Output: [(16 -91 -48 -50) -91]
Test Case: 601 | Input/Output: [(71 85 -91 18) -91]
Test Case: 602 | Input/Output: [(-67 -21 -45 -94) -94]
Test Case: 603 | Input/Output: [(12 -49 -17 87) -49]
Test Case: 604 | Input/Output: [(-91 8 44 58) -91]
Test Case: 605 | Input/Output: [(-29 51 -67 -5) -67]
Test Case: 606 | Input/Output: [(78 33 45 -87) -87]
Test Case: 607 | Input/Output: [(81 -34 -71 15) -71]
Test Case: 608 | Input/Output: [(85 -72 -95 82) -95]
Test Case: 609 | Input/Output: [(83 -7 -78 -28) -78]
Test Case: 610 | Input/Output: [(-88 -79 51 46) -88]
Test Case: 611 | Input/Output: [(21 -21 -91 49) -91]
Test Case: 612 | Input/Output: [(-81 -66 90 -8) -81]
Test Case: 613 | Input/Output: [(76 53 8 32) 8]
Test Case: 614 | Input/Output: [(79 41 19 -24) -24]
Test Case: 615 | Input/Output: [(-25 63 -18 44) -25]
Test Case: 616 | Input/Output: [(-10 -76 50 -61) -76]
Test Case: 617 | Input/Output: [(-96 38 -2 -48) -96]
Test Case: 618 | Input/Output: [(54 55 -82 0) -82]
Test Case: 619 | Input/Output: [(-57 -26 69 -37) -57]
Test Case: 620 | Input/Output: [(-19 83 0 13) -19]
Test Case: 621 | Input/Output: [(-3 -37 4 -85) -85]
Test Case: 622 | Input/Output: [(66 58 -43 -100) -100]
Test Case: 623 | Input/Output: [(49 -17 -51 -36) -51]
Test Case: 624 | Input/Output: [(66 34 16 -42) -42]
Test Case: 625 | Input/Output: [(-33 46 14 -71) -71]
Test Case: 626 | Input/Output: [(64 21 -3 60) -3]
Test Case: 627 | Input/Output: [(82 78 -85 -48) -85]
Test Case: 628 | Input/Output: [(79 -22 60 20) -22]
Test Case: 629 | Input/Output: [(-3 24 -31 -17) -31]
Test Case: 630 | Input/Output: [(96 22 -96 -62) -96]
Test Case: 631 | Input/Output: [(74 32 -37 -71) -71]
Test Case: 632 | Input/Output: [(-52 76 6 25) -52]
Test Case: 633 | Input/Output: [(76 3 -92 -63) -92]
Test Case: 634 | Input/Output: [(-67 6 81 -29) -67]
Test Case: 635 | Input/Output: [(-51 8 -100 78) -100]
Test Case: 636 | Input/Output: [(-83 -2 -42 -35) -83]
Test Case: 637 | Input/Output: [(-99 67 -65 -24) -99]
Test Case: 638 | Input/Output: [(78 -85 71 -80) -85]
Test Case: 639 | Input/Output: [(74 36 9 44) 9]
Test Case: 640 | Input/Output: [(-3 63 -9 -73) -73]
Test Case: 641 | Input/Output: [(-35 9 45 -45) -45]
Test Case: 642 | Input/Output: [(38 -73 -61 -68) -73]
Test Case: 643 | Input/Output: [(50 75 93 88) 50]
Test Case: 644 | Input/Output: [(22 -43 -20 -56) -56]
Test Case: 645 | Input/Output: [(-59 -58 69 83) -59]
Test Case: 646 | Input/Output: [(-66 58 87 61) -66]
Test Case: 647 | Input/Output: [(-62 4 40 85) -62]
Test Case: 648 | Input/Output: [(-21 -14 58 -20) -21]
Test Case: 649 | Input/Output: [(-93 -3 71 -80) -93]
Test Case: 650 | Input/Output: [(99 -69 79 86) -69]
Test Case: 651 | Input/Output: [(17 -7 -24 26) -24]
Test Case: 652 | Input/Output: [(27 -93 99 14) -93]
Test Case: 653 | Input/Output: [(79 -32 2 -82) -82]
Test Case: 654 | Input/Output: [(-48 71 67 -23) -48]
Test Case: 655 | Input/Output: [(-99 7 -39 2) -99]
Test Case: 656 | Input/Output: [(10 -12 23 -78) -78]
Test Case: 657 | Input/Output: [(66 28 97 -22) -22]
Test Case: 658 | Input/Output: [(-60 -38 -92 -38) -92]
Test Case: 659 | Input/Output: [(44 -60 17 84) -60]
Test Case: 660 | Input/Output: [(-100 61 97 -34) -100]
Test Case: 661 | Input/Output: [(-82 17 9 9) -82]
Test Case: 662 | Input/Output: [(-18 52 -29 -37) -37]
Test Case: 663 | Input/Output: [(37 -5 34 -80) -80]
Test Case: 664 | Input/Output: [(61 57 0 62) 0]
Test Case: 665 | Input/Output: [(-86 38 43 -58) -86]
Test Case: 666 | Input/Output: [(79 -55 -74 23) -74]
Test Case: 667 | Input/Output: [(75 72 4 -73) -73]
Test Case: 668 | Input/Output: [(56 -35 59 -88) -88]
Test Case: 669 | Input/Output: [(-9 -8 -77 96) -77]
Test Case: 670 | Input/Output: [(19 30 69 58) 19]
Test Case: 671 | Input/Output: [(-37 -58 46 24) -58]
Test Case: 672 | Input/Output: [(-3 97 -32 -68) -68]
Test Case: 673 | Input/Output: [(-64 36 50 92) -64]
Test Case: 674 | Input/Output: [(91 66 43 92) 43]
Test Case: 675 | Input/Output: [(-57 62 57 29) -57]
Test Case: 676 | Input/Output: [(51 -71 -99 100) -99]
Test Case: 677 | Input/Output: [(-12 69 -43 -29) -43]
Test Case: 678 | Input/Output: [(30 24 67 -4) -4]
Test Case: 679 | Input/Output: [(-76 41 -27 -28) -76]
Test Case: 680 | Input/Output: [(-53 79 21 48) -53]
Test Case: 681 | Input/Output: [(-57 -53 -52 -58) -58]
Test Case: 682 | Input/Output: [(10 52 -26 -93) -93]
Test Case: 683 | Input/Output: [(91 11 -28 86) -28]
Test Case: 684 | Input/Output: [(3 73 61 70) 3]
Test Case: 685 | Input/Output: [(-76 -6 -17 64) -76]
Test Case: 686 | Input/Output: [(-36 6 20 -79) -79]
Test Case: 687 | Input/Output: [(-68 -5 -35 -18) -68]
Test Case: 688 | Input/Output: [(-15 -77 38 15) -77]
Test Case: 689 | Input/Output: [(-78 52 -93 56) -93]
Test Case: 690 | Input/Output: [(87 76 70 -29) -29]
Test Case: 691 | Input/Output: [(1 69 81 42) 1]
Test Case: 692 | Input/Output: [(-37 50 66 -86) -86]
Test Case: 693 | Input/Output: [(-5 -66 73 -12) -66]
Test Case: 694 | Input/Output: [(-9 -46 -32 22) -46]
Test Case: 695 | Input/Output: [(-93 22 87 -95) -95]
Test Case: 696 | Input/Output: [(34 28 88 100) 28]
Test Case: 697 | Input/Output: [(-79 27 -51 2) -79]
Test Case: 698 | Input/Output: [(1 91 -34 59) -34]
Test Case: 699 | Input/Output: [(-23 -46 46 39) -46]
Test Case: 700 | Input/Output: [(-10 100 3 83) -10]
Test Case: 701 | Input/Output: [(29 19 40 -45) -45]
Test Case: 702 | Input/Output: [(59 -62 -25 -16) -62]
Test Case: 703 | Input/Output: [(22 -66 -85 -41) -85]
Test Case: 704 | Input/Output: [(-59 -94 -49 63) -94]
Test Case: 705 | Input/Output: [(-28 -48 -38 24) -48]
Test Case: 706 | Input/Output: [(-56 -34 93 93) -56]
Test Case: 707 | Input/Output: [(-25 74 14 43) -25]
Test Case: 708 | Input/Output: [(-67 -56 8 62) -67]
Test Case: 709 | Input/Output: [(81 -34 -65 -88) -88]
Test Case: 710 | Input/Output: [(-40 -89 -61 73) -89]
Test Case: 711 | Input/Output: [(-65 -6 88 -52) -65]
Test Case: 712 | Input/Output: [(-50 -7 -20 86) -50]
Test Case: 713 | Input/Output: [(60 -12 -15 -36) -36]
Test Case: 714 | Input/Output: [(42 -54 -7 -71) -71]
Test Case: 715 | Input/Output: [(15 -45 32 -42) -45]
Test Case: 716 | Input/Output: [(-33 19 -76 90) -76]
Test Case: 717 | Input/Output: [(-28 38 -27 45) -28]
Test Case: 718 | Input/Output: [(-5 36 -81 -54) -81]
Test Case: 719 | Input/Output: [(-74 -26 92 -26) -74]
Test Case: 720 | Input/Output: [(55 13 22 77) 13]
Test Case: 721 | Input/Output: [(-20 -31 59 -78) -78]
Test Case: 722 | Input/Output: [(-21 -50 51 -17) -50]
Test Case: 723 | Input/Output: [(-77 -44 -21 -25) -77]
Test Case: 724 | Input/Output: [(73 10 89 18) 10]
Test Case: 725 | Input/Output: [(-94 -4 53 -61) -94]
Test Case: 726 | Input/Output: [(-92 -62 -56 -41) -92]
Test Case: 727 | Input/Output: [(-38 -72 -98 27) -98]
Test Case: 728 | Input/Output: [(59 -57 -3 -27) -57]
Test Case: 729 | Input/Output: [(-44 -41 -53 -70) -70]
Test Case: 730 | Input/Output: [(86 -63 -14 1) -63]
Test Case: 731 | Input/Output: [(31 89 86 4) 4]
Test Case: 732 | Input/Output: [(53 -74 -50 96) -74]
Test Case: 733 | Input/Output: [(35 -38 -8 -52) -52]
Test Case: 734 | Input/Output: [(94 -5 -8 -73) -73]
Test Case: 735 | Input/Output: [(-73 60 51 24) -73]
Test Case: 736 | Input/Output: [(41 -47 26 -73) -73]
Test Case: 737 | Input/Output: [(-41 51 5 -95) -95]
Test Case: 738 | Input/Output: [(-73 83 -17 -3) -73]
Test Case: 739 | Input/Output: [(-5 -9 69 33) -9]
Test Case: 740 | Input/Output: [(11 100 -59 70) -59]
Test Case: 741 | Input/Output: [(-76 12 -6 96) -76]
Test Case: 742 | Input/Output: [(-99 25 -38 -77) -99]
Test Case: 743 | Input/Output: [(17 -39 -26 -41) -41]
Test Case: 744 | Input/Output: [(-57 98 71 32) -57]
Test Case: 745 | Input/Output: [(-20 10 -73 -43) -73]
Test Case: 746 | Input/Output: [(-45 78 44 69) -45]
Test Case: 747 | Input/Output: [(93 34 80 -88) -88]
Test Case: 748 | Input/Output: [(-93 -61 -52 -10) -93]
Test Case: 749 | Input/Output: [(-14 -62 12 6) -62]
Test Case: 750 | Input/Output: [(16 -80 97 20) -80]
Test Case: 751 | Input/Output: [(-3 29 -66 -55) -66]
Test Case: 752 | Input/Output: [(-48 59 -75 -65) -75]
Test Case: 753 | Input/Output: [(16 81 -15 72) -15]
Test Case: 754 | Input/Output: [(57 0 16 96) 0]
Test Case: 755 | Input/Output: [(-98 97 35 2) -98]
Test Case: 756 | Input/Output: [(13 4 59 -21) -21]
Test Case: 757 | Input/Output: [(59 -30 52 33) -30]
Test Case: 758 | Input/Output: [(61 97 34 56) 34]
Test Case: 759 | Input/Output: [(-61 -36 -75 24) -75]
Test Case: 760 | Input/Output: [(16 -8 -31 99) -31]
Test Case: 761 | Input/Output: [(-16 -26 -62 42) -62]
Test Case: 762 | Input/Output: [(-10 43 -54 11) -54]
Test Case: 763 | Input/Output: [(75 3 -32 14) -32]
Test Case: 764 | Input/Output: [(-26 23 13 70) -26]
Test Case: 765 | Input/Output: [(91 -97 -82 67) -97]
Test Case: 766 | Input/Output: [(55 40 -20 98) -20]
Test Case: 767 | Input/Output: [(-88 -78 -41 -41) -88]
Test Case: 768 | Input/Output: [(-26 74 -26 98) -26]
Test Case: 769 | Input/Output: [(99 -3 28 36) -3]
Test Case: 770 | Input/Output: [(48 -66 -89 7) -89]
Test Case: 771 | Input/Output: [(-59 50 77 -86) -86]
Test Case: 772 | Input/Output: [(-25 -70 52 53) -70]
Test Case: 773 | Input/Output: [(-63 -24 -16 -15) -63]
Test Case: 774 | Input/Output: [(41 25 29 94) 25]
Test Case: 775 | Input/Output: [(25 17 -43 4) -43]
Test Case: 776 | Input/Output: [(100 -29 20 -74) -74]
Test Case: 777 | Input/Output: [(23 -37 -66 -56) -66]
Test Case: 778 | Input/Output: [(23 -60 2 80) -60]
Test Case: 779 | Input/Output: [(44 38 -1 13) -1]
Test Case: 780 | Input/Output: [(-92 -88 47 11) -92]
Test Case: 781 | Input/Output: [(-19 69 -8 -14) -19]
Test Case: 782 | Input/Output: [(-62 43 -53 36) -62]
Test Case: 783 | Input/Output: [(49 -37 -60 93) -60]
Test Case: 784 | Input/Output: [(-36 91 -77 7) -77]
Test Case: 785 | Input/Output: [(20 95 -77 -70) -77]
Test Case: 786 | Input/Output: [(12 55 -27 22) -27]
Test Case: 787 | Input/Output: [(8 -55 13 -26) -55]
Test Case: 788 | Input/Output: [(86 -21 85 -91) -91]
Test Case: 789 | Input/Output: [(-15 69 -86 -52) -86]
Test Case: 790 | Input/Output: [(84 -93 6 44) -93]
Test Case: 791 | Input/Output: [(-38 54 60 99) -38]
Test Case: 792 | Input/Output: [(52 90 -45 -19) -45]
Test Case: 793 | Input/Output: [(-97 91 -52 72) -97]
Test Case: 794 | Input/Output: [(-25 36 84 13) -25]
Test Case: 795 | Input/Output: [(45 -82 52 92) -82]
Test Case: 796 | Input/Output: [(-71 -22 64 -42) -71]
Test Case: 797 | Input/Output: [(8 64 -82 -42) -82]
Test Case: 798 | Input/Output: [(-26 2 27 53) -26]
Test Case: 799 | Input/Output: [(38 62 -36 70) -36]
Test Case: 800 | Input/Output: [(-62 98 6 -75) -75]
Test Case: 801 | Input/Output: [(-37 -4 49 56) -37]
Test Case: 802 | Input/Output: [(-77 -73 76 -59) -77]
Test Case: 803 | Input/Output: [(-16 -46 35 -27) -46]
Test Case: 804 | Input/Output: [(95 11 -91 -52) -91]
Test Case: 805 | Input/Output: [(35 -99 -50 -45) -99]
Test Case: 806 | Input/Output: [(55 58 -82 26) -82]
Test Case: 807 | Input/Output: [(23 50 33 14) 14]
Test Case: 808 | Input/Output: [(85 -40 50 -64) -64]
Test Case: 809 | Input/Output: [(86 7 -89 64) -89]
Test Case: 810 | Input/Output: [(-37 20 -92 -96) -96]
Test Case: 811 | Input/Output: [(2 24 -22 18) -22]
Test Case: 812 | Input/Output: [(-42 -90 -98 99) -98]
Test Case: 813 | Input/Output: [(30 -76 81 -65) -76]
Test Case: 814 | Input/Output: [(-53 60 -89 -15) -89]
Test Case: 815 | Input/Output: [(67 -17 -74 60) -74]
Test Case: 816 | Input/Output: [(22 -4 -16 -68) -68]
Test Case: 817 | Input/Output: [(-71 3 -84 -48) -84]
Test Case: 818 | Input/Output: [(-93 95 1 -8) -93]
Test Case: 819 | Input/Output: [(66 0 51 -52) -52]
Test Case: 820 | Input/Output: [(41 6 39 -33) -33]
Test Case: 821 | Input/Output: [(60 -70 -16 -61) -70]
Test Case: 822 | Input/Output: [(95 -33 64 54) -33]
Test Case: 823 | Input/Output: [(11 15 -76 -38) -76]
Test Case: 824 | Input/Output: [(-62 20 68 -67) -67]
Test Case: 825 | Input/Output: [(57 63 -41 -78) -78]
Test Case: 826 | Input/Output: [(-69 51 -2 -14) -69]
Test Case: 827 | Input/Output: [(-90 82 -56 56) -90]
Test Case: 828 | Input/Output: [(-25 12 -45 -18) -45]
Test Case: 829 | Input/Output: [(31 -66 -47 38) -66]
Test Case: 830 | Input/Output: [(-71 -82 -2 -66) -82]
Test Case: 831 | Input/Output: [(38 -46 51 35) -46]
Test Case: 832 | Input/Output: [(11 -90 -55 -95) -95]
Test Case: 833 | Input/Output: [(-37 22 75 -66) -66]
Test Case: 834 | Input/Output: [(49 90 -42 23) -42]
Test Case: 835 | Input/Output: [(-33 13 -18 -66) -66]
Test Case: 836 | Input/Output: [(-97 16 -27 4) -97]
Test Case: 837 | Input/Output: [(-92 -71 -86 51) -92]
Test Case: 838 | Input/Output: [(66 77 55 -93) -93]
Test Case: 839 | Input/Output: [(-5 -83 65 72) -83]
Test Case: 840 | Input/Output: [(3 10 13 24) 3]
Test Case: 841 | Input/Output: [(-55 49 -87 74) -87]
Test Case: 842 | Input/Output: [(66 -6 -44 -39) -44]
Test Case: 843 | Input/Output: [(7 -97 21 40) -97]
Test Case: 844 | Input/Output: [(-6 17 45 -12) -12]
Test Case: 845 | Input/Output: [(50 -42 67 92) -42]
Test Case: 846 | Input/Output: [(60 -51 10 22) -51]
Test Case: 847 | Input/Output: [(41 -69 -76 24) -76]
Test Case: 848 | Input/Output: [(-46 -96 19 14) -96]
Test Case: 849 | Input/Output: [(-48 -99 -88 -27) -99]
Test Case: 850 | Input/Output: [(47 -26 9 91) -26]
Test Case: 851 | Input/Output: [(-99 -66 92 86) -99]
Test Case: 852 | Input/Output: [(57 53 -36 70) -36]
Test Case: 853 | Input/Output: [(67 -43 -34 -79) -79]
Test Case: 854 | Input/Output: [(6 4 16 74) 4]
Test Case: 855 | Input/Output: [(-63 -8 87 68) -63]
Test Case: 856 | Input/Output: [(-4 75 -94 -20) -94]
Test Case: 857 | Input/Output: [(87 56 36 -72) -72]
Test Case: 858 | Input/Output: [(89 70 97 20) 20]
Test Case: 859 | Input/Output: [(-63 -85 -37 -14) -85]
Test Case: 860 | Input/Output: [(24 -89 -97 36) -97]
Test Case: 861 | Input/Output: [(-81 -44 -15 -92) -92]
Test Case: 862 | Input/Output: [(18 -92 -63 -77) -92]
Test Case: 863 | Input/Output: [(29 -53 -76 -19) -76]
Test Case: 864 | Input/Output: [(-18 87 4 51) -18]
Test Case: 865 | Input/Output: [(-90 -59 29 -19) -90]
Test Case: 866 | Input/Output: [(-1 9 -49 59) -49]
Test Case: 867 | Input/Output: [(82 -38 5 18) -38]
Test Case: 868 | Input/Output: [(27 17 22 -89) -89]
Test Case: 869 | Input/Output: [(15 -27 87 -74) -74]
Test Case: 870 | Input/Output: [(-16 -69 -75 -88) -88]
Test Case: 871 | Input/Output: [(-4 -64 -10 99) -64]
Test Case: 872 | Input/Output: [(30 53 -69 83) -69]
Test Case: 873 | Input/Output: [(-91 46 -56 57) -91]
Test Case: 874 | Input/Output: [(48 14 -53 -62) -62]
Test Case: 875 | Input/Output: [(-62 38 -65 -37) -65]
Test Case: 876 | Input/Output: [(66 37 44 85) 37]
Test Case: 877 | Input/Output: [(61 -95 81 71) -95]
Test Case: 878 | Input/Output: [(-51 3 9 -90) -90]
Test Case: 879 | Input/Output: [(-11 -36 -36 97) -36]
Test Case: 880 | Input/Output: [(65 -38 -61 19) -61]
Test Case: 881 | Input/Output: [(-60 -78 -61 0) -78]
Test Case: 882 | Input/Output: [(-9 -40 58 69) -40]
Test Case: 883 | Input/Output: [(43 34 -84 87) -84]
Test Case: 884 | Input/Output: [(-93 -24 -11 75) -93]
Test Case: 885 | Input/Output: [(35 -11 -33 -56) -56]
Test Case: 886 | Input/Output: [(63 79 8 -54) -54]
Test Case: 887 | Input/Output: [(-83 -14 91 23) -83]
Test Case: 888 | Input/Output: [(-82 99 75 -17) -82]
Test Case: 889 | Input/Output: [(-3 87 -16 97) -16]
Test Case: 890 | Input/Output: [(-35 -71 79 2) -71]
Test Case: 891 | Input/Output: [(-39 -6 -23 74) -39]
Test Case: 892 | Input/Output: [(8 -19 -56 -78) -78]
Test Case: 893 | Input/Output: [(22 90 -58 90) -58]
Test Case: 894 | Input/Output: [(47 -5 99 -12) -12]
Test Case: 895 | Input/Output: [(-39 38 97 -59) -59]
Test Case: 896 | Input/Output: [(-7 75 75 42) -7]
Test Case: 897 | Input/Output: [(-68 82 61 -32) -68]
Test Case: 898 | Input/Output: [(-51 -53 68 2) -53]
Test Case: 899 | Input/Output: [(31 -21 73 -100) -100]
Test Case: 900 | Input/Output: [(3 -54 -8 -8) -54]
Test Case: 901 | Input/Output: [(80 -8 66 32) -8]
Test Case: 902 | Input/Output: [(47 28 -71 -5) -71]
Test Case: 903 | Input/Output: [(-100 3 -71 -32) -100]
Test Case: 904 | Input/Output: [(80 -90 81 62) -90]
Test Case: 905 | Input/Output: [(-7 53 55 -22) -22]
Test Case: 906 | Input/Output: [(10 16 67 -36) -36]
Test Case: 907 | Input/Output: [(43 -91 20 80) -91]
Test Case: 908 | Input/Output: [(35 53 -47 -88) -88]
Test Case: 909 | Input/Output: [(66 -12 63 35) -12]
Test Case: 910 | Input/Output: [(86 80 -64 68) -64]
Test Case: 911 | Input/Output: [(45 60 44 55) 44]
Test Case: 912 | Input/Output: [(39 -82 -11 -27) -82]
Test Case: 913 | Input/Output: [(16 -79 -68 -71) -79]
Test Case: 914 | Input/Output: [(77 -57 -23 32) -57]
Test Case: 915 | Input/Output: [(78 69 -29 75) -29]
Test Case: 916 | Input/Output: [(49 -84 -55 -98) -98]
Test Case: 917 | Input/Output: [(3 -25 -22 37) -25]
Test Case: 918 | Input/Output: [(-62 -29 43 96) -62]
Test Case: 919 | Input/Output: [(-70 -88 -18 -31) -88]
Test Case: 920 | Input/Output: [(47 -89 90 -4) -89]
Test Case: 921 | Input/Output: [(10 45 35 94) 10]
Test Case: 922 | Input/Output: [(-38 -6 31 24) -38]
Test Case: 923 | Input/Output: [(16 -10 -92 47) -92]
Test Case: 924 | Input/Output: [(-78 89 42 -31) -78]
Test Case: 925 | Input/Output: [(-77 0 48 5) -77]
Test Case: 926 | Input/Output: [(85 -91 -3 -79) -91]
Test Case: 927 | Input/Output: [(-23 57 29 61) -23]
Test Case: 928 | Input/Output: [(64 -46 -42 -29) -46]
Test Case: 929 | Input/Output: [(82 -65 8 62) -65]
Test Case: 930 | Input/Output: [(-67 78 44 13) -67]
Test Case: 931 | Input/Output: [(90 -96 -19 20) -96]
Test Case: 932 | Input/Output: [(-40 24 -7 -46) -46]
Test Case: 933 | Input/Output: [(48 20 -88 59) -88]
Test Case: 934 | Input/Output: [(-96 43 -94 33) -96]
Test Case: 935 | Input/Output: [(17 45 41 48) 17]
Test Case: 936 | Input/Output: [(-89 81 -97 87) -97]
Test Case: 937 | Input/Output: [(94 -25 -81 -28) -81]
Test Case: 938 | Input/Output: [(-34 4 58 -30) -34]
Test Case: 939 | Input/Output: [(35 -48 72 80) -48]
Test Case: 940 | Input/Output: [(-60 -47 27 37) -60]
Test Case: 941 | Input/Output: [(-97 -78 90 98) -97]
Test Case: 942 | Input/Output: [(95 -60 -86 -93) -93]
Test Case: 943 | Input/Output: [(95 95 40 -18) -18]
Test Case: 944 | Input/Output: [(9 90 -42 -36) -42]
Test Case: 945 | Input/Output: [(15 -21 16 -8) -21]
Test Case: 946 | Input/Output: [(-36 -20 50 -37) -37]
Test Case: 947 | Input/Output: [(97 -98 -33 -65) -98]
Test Case: 948 | Input/Output: [(-51 -100 2 100) -100]
Test Case: 949 | Input/Output: [(54 45 -74 -62) -74]
Test Case: 950 | Input/Output: [(100 81 98 -73) -73]
Test Case: 951 | Input/Output: [(-62 -9 34 73) -62]
Test Case: 952 | Input/Output: [(2 76 -52 -4) -52]
Test Case: 953 | Input/Output: [(-82 23 -35 68) -82]
Test Case: 954 | Input/Output: [(99 6 -15 73) -15]
Test Case: 955 | Input/Output: [(-25 20 48 9) -25]
Test Case: 956 | Input/Output: [(100 -40 68 58) -40]
Test Case: 957 | Input/Output: [(91 72 -91 -48) -91]
Test Case: 958 | Input/Output: [(56 87 66 81) 56]
Test Case: 959 | Input/Output: [(-81 65 8 -48) -81]
Test Case: 960 | Input/Output: [(-82 94 13 -5) -82]
Test Case: 961 | Input/Output: [(81 -21 -83 54) -83]
Test Case: 962 | Input/Output: [(47 -69 -85 81) -85]
Test Case: 963 | Input/Output: [(96 -61 -76 -11) -76]
Test Case: 964 | Input/Output: [(20 -53 -23 -52) -53]
Test Case: 965 | Input/Output: [(63 -21 69 -37) -37]
Test Case: 966 | Input/Output: [(93 -19 -2 72) -19]
Test Case: 967 | Input/Output: [(-12 -43 41 -48) -48]
Test Case: 968 | Input/Output: [(-9 59 53 1) -9]
Test Case: 969 | Input/Output: [(100 83 42 -81) -81]
Test Case: 970 | Input/Output: [(1 -51 -75 70) -75]
Test Case: 971 | Input/Output: [(-29 -98 38 47) -98]
Test Case: 972 | Input/Output: [(-46 39 59 80) -46]
Test Case: 973 | Input/Output: [(-32 -35 69 -65) -65]
Test Case: 974 | Input/Output: [(25 -56 -88 -18) -88]
Test Case: 975 | Input/Output: [(-33 98 -75 39) -75]
Test Case: 976 | Input/Output: [(51 49 -100 13) -100]
Test Case: 977 | Input/Output: [(7 59 -32 81) -32]
Test Case: 978 | Input/Output: [(85 -2 57 49) -2]
Test Case: 979 | Input/Output: [(-32 -70 -24 40) -70]
Test Case: 980 | Input/Output: [(-36 45 87 -1) -36]
Test Case: 981 | Input/Output: [(-4 97 -81 -70) -81]
Test Case: 982 | Input/Output: [(-88 40 50 -81) -88]
Test Case: 983 | Input/Output: [(-86 -86 75 -70) -86]
Test Case: 984 | Input/Output: [(33 -36 4 3) -36]
Test Case: 985 | Input/Output: [(-22 82 8 -9) -22]
Test Case: 986 | Input/Output: [(40 84 29 -74) -74]
Test Case: 987 | Input/Output: [(99 4 -97 -45) -97]
Test Case: 988 | Input/Output: [(-3 48 -19 -59) -59]
Test Case: 989 | Input/Output: [(-3 -75 81 73) -75]
Test Case: 990 | Input/Output: [(82 -83 -98 -85) -98]
Test Case: 991 | Input/Output: [(-36 -70 56 61) -70]
Test Case: 992 | Input/Output: [(75 55 16 -80) -80]
Test Case: 993 | Input/Output: [(83 66 -41 -19) -41]
Test Case: 994 | Input/Output: [(-54 37 54 -45) -54]
Test Case: 995 | Input/Output: [(66 -92 85 -57) -92]
Test Case: 996 | Input/Output: [(67 47 -53 22) -53]
Test Case: 997 | Input/Output: [(-98 -10 63 38) -98]
Test Case: 998 | Input/Output: [(-30 31 -57 -76) -76]
Test Case: 999 | Input/Output: [(-78 -81 -34 91) -81]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -51 -25 -45 -91 -94 -74 42 45 -76 -123 20 -63 13 -123 -91 -116
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-31 -31 -31 49] -31] [[-60 82 82 82] -60] [[46 -60 46 46] -60] [[63 63 63 5] 5] [[23 15 23 23] 15] [[58 58 12 58] 12] [[80 80 80 -73] -73] [[-1 53 -1 -1] -1] [[87 79 79 79] 79] [[37 37 37 73] 37] [(12 12 12 12) 12] [(-56 -56 -56 -56) -56] [(40 40 40 40) 40] [(82 82 82 82) 82] [(-31 -31 -31 -31) -31] [(37 5 25 67) 5] [(83 72 75 52) 52] [(81 79 40 97) 40] [(72 97 15 2) 2] [(46 6 41 11) 6] [(42 7 34 82) 7] [(93 47 5 38) 5] [(52 56 61 19) 19] [(7 72 87 15) 7] [(97 16 38 44) 16] [(45 40 60 93) 40] [(4 13 85 40) 4] [(31 17 83 52) 17] [(48 21 30 97) 21] [(35 44 73 7) 7] [(14 46 24 70) 14] [(23 100 87 79) 23] [(56 65 100 93) 56] [(93 42 65 69) 42] [(72 5 44 69) 5] [(94 -85 0 98) -85] [(-97 86 -73 16) -97] [(75 -34 31 52) -34] [(-80 -64 97 -39) -80] [(-43 90 -24 4) -43] [(98 3 20 11) 3] [(43 -98 66 -42) -98] [(-61 27 -48 -59) -61] [(-87 81 64 -70) -87] [(-61 60 51 -81) -81] [(38 84 -67 0) -67] [(80 65 -47 -73) -73] [(-44 0 -70 -91) -91] [(28 50 -84 3) -84] [(-60 32 69 -66) -66] [(5 52 -43 69) -43] [(7 -2 -8 -35) -35] [(18 61 11 -45) -45] [(-8 -70 60 -82) -82] [(-40 46 8 2) -40] [(5 34 13 -4) -4] [(47 -18 -5 55) -18] [(-21 59 40 19) -21] [(-56 -56 74 2) -56] [(39 47 -70 -1) -70] [(-36 84 64 15) -36] [(80 78 63 29) 29] [(-78 7 95 37) -78] [(-12 -15 22 -51) -51] [(85 -92 -34 -84) -92] [(65 -68 -33 41) -68] [(38 20 -35 18) -35] [(-27 57 4 -77) -77] [(-95 29 -21 -68) -95] [(-38 -65 -43 87) -65] [(-64 -63 -78 66) -78] [(70 -53 99 88) -53] [(-16 59 -10 -40) -40] [(27 99 -44 66) -44] [(45 -14 -3 61) -14] [(-73 88 99 -70) -73] [(-61 -71 -81 -46) -81] [(-74 -14 99 58) -74] [(37 51 71 23) 23] [(-7 -61 -20 -78) -78] [(-95 25 28 -64) -95] [(-46 17 100 90) -46] [(-56 -56 -28 -94) -94] [(-83 -92 73 -24) -92] [(-90 16 97 56) -90] [(41 -57 -77 45) -77] [(83 51 -64 -95) -95] [(38 35 -41 40) -41] [(51 64 -3 2) -3] [(-31 42 -68 72) -68] [(-26 -75 -23 88) -75] [(59 37 -60 -10) -60] [(4 7 -58 -79) -79] [(-30 -84 97 -69) -84] [(-93 74 23 20) -93])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: 97                 
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: 64                 
Correct output: -81                 | Program output: 51                 
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: 60                 
Correct output: -40                 | Program output: 8                  
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: 40                 
Correct output: -56                 | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: 64                 
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: 95                 
Correct output: -51                 | Program output: 22                 
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: 4                  
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: 99                 
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: 28                 
Correct output: -46                 | Program output: 100                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: 73                 
Correct output: -90                 | Program output: 97                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: 97                 
Correct output: -93                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ()))) ())))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 129
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ()))) ())))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 129
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 3 9 1 1 9 1 1 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (1 1 3 9 1 1 9 1 1 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ()))) ())))
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 98
Size: 129
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 9.97
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.997 0.991 0.999 0.999 0.991 0.999 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.335
Average program size in population (points): 70.492
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 499943
--- Timings ---
Current time: 1559314698580 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 33.2%
Fitness Testing:      1.6 seconds, 62.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction -55} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction -93} {:close 0, :instruction -42} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction 65} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction -83} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (integer_empty boolean_dup_items in4 -55 exec_yankdup boolean_invert_first_then_and integer_eq print_integer exec_while (boolean_empty) exec_do*times (integer_div exec_yankdup exec_do*while () integer_dup_times integer_dup_times exec_do*range () exec_pop (boolean_stackdepth exec_do*range () integer_shove boolean_pop) integer_yankdup integer_gte boolean_pop integer_yankdup boolean_dup_items exec_dup_times (integer_mod) boolean_and -93) -42 integer_pop integer_yank exec_y (exec_do*count (boolean_or integer_div integer_shove) exec_shove () exec_eq exec_dup (exec_do*count (exec_stackdepth) boolean_pop 65 exec_shove (exec_stackdepth integer_flush) integer_gt exec_while (print_exec (print_exec (exec_k () (exec_s_when_autoconstructing (boolean_dup_times exec_yank integer_yank) (exec_rot () (exec_swap (print_boolean boolean_invert_first_then_and -83) () integer_empty integer_flush) (integer_swap exec_dup (in3 boolean_pop) exec_do*range (integer_gte)) integer_yankdup boolean_xor) ())))))))
Lexicase best errors: [1 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 102
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction -55} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction -93} {:close 0, :instruction -42} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction 65} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction -83} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (integer_empty boolean_dup_items in4 -55 exec_yankdup boolean_invert_first_then_and integer_eq print_integer exec_while (boolean_empty) exec_do*times (integer_div exec_yankdup exec_do*while () integer_dup_times integer_dup_times exec_do*range () exec_pop (boolean_stackdepth exec_do*range () integer_shove boolean_pop) integer_yankdup integer_gte boolean_pop integer_yankdup boolean_dup_items exec_dup_times (integer_mod) boolean_and -93) -42 integer_pop integer_yank exec_y (exec_do*count (boolean_or integer_div integer_shove) exec_shove () exec_eq exec_dup (exec_do*count (exec_stackdepth) boolean_pop 65 exec_shove (exec_stackdepth integer_flush) integer_gt exec_while (print_exec (print_exec (exec_k () (exec_s_when_autoconstructing (boolean_dup_times exec_yank integer_yank) (exec_rot () (exec_swap (print_boolean boolean_invert_first_then_and -83) () integer_empty integer_flush) (integer_swap exec_dup (in3 boolean_pop) exec_do*range (integer_gte)) integer_yankdup boolean_xor) ())))))))
Zero cases best errors: [1 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 102
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 350 239 239 106 109 239 110 106 106)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (350 350 239 239 106 109 239 110 106 106)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction -55} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction -93} {:close 0, :instruction -42} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction 65} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Best program: (integer_empty boolean_dup_items in4 -55 exec_yankdup boolean_invert_first_then_and integer_eq print_integer exec_while (boolean_empty) exec_do*times (integer_div exec_yankdup exec_do*while () integer_dup_times integer_dup_times exec_do*range () exec_pop (boolean_stackdepth exec_do*range () integer_shove boolean_pop) integer_yankdup integer_gte boolean_pop integer_yankdup boolean_dup_items exec_dup_times (integer_mod) boolean_and -93) -42 integer_pop integer_yank exec_y (exec_do*count (boolean_or integer_div integer_shove) exec_shove () exec_eq exec_dup (exec_do*count (exec_stackdepth) boolean_pop 65 exec_shove (exec_stackdepth integer_flush) integer_gt exec_while (print_exec (print_exec (exec_k () (exec_s_when_autoconstructing (boolean_dup_times exec_yank exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ())) () ())))))))
Errors: [1 1 1 1 0 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 99
Size: 133
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.046
Median total errors in population: 8
Error averages by case: (0.65 0.65 0.761 0.761 0.894 0.891 0.761 0.89 0.894 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.078
Average program size in population (points): 99.061
Average percent parens in population: 0.241
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 979143
--- Timings ---
Current time: 1559314701431 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.4 seconds, 46.2%
Fitness Testing:      2.1 seconds, 39.8%
Report:               0.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: 97                 
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: 64                 
Correct output: -81                 | Program output: 51                 
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: 60                 
Correct output: -40                 | Program output: 8                  
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: 40                 
Correct output: -56                 | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: 64                 
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: 95                 
Correct output: -51                 | Program output: 22                 
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: 4                  
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: 99                 
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: 28                 
Correct output: -46                 | Program output: 100                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: 73                 
Correct output: -90                 | Program output: 97                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: 97                 
Correct output: -93                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (integer_sub integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush integer_mult boolean_dup_items)) ()) ()))) ())))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 130
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (integer_sub integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush integer_mult boolean_dup_items)) ()) ()))) ())))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 130
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 609 296 268 269 125 874 124 125 125)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (297 609 296 268 269 125 874 124 125 125)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14 print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ()))) ()))) ())))
Errors: [1 0 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 108
Size: 145
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.888
Median total errors in population: 7
Error averages by case: (0.703 0.391 0.704 0.732 0.731 0.875 0.126 0.876 0.875 0.875)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.489
Average program size in population (points): 84.921
Average percent parens in population: 0.250
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0115
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1492647
--- Timings ---
Current time: 1559314704798 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.8 seconds, 54.3%
Fitness Testing:      2.6 seconds, 28.8%
Report:               1.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (in2 print_integer) (exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div boolean_xor exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () exec_flush) (exec_dup (boolean_shove)) (integer_yankdup integer_shove) exec_dup_items boolean_invert_first_then_and -28 integer_gt) ()) (boolean_flush integer_yankdup))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (in2 print_integer) (exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div boolean_xor exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () exec_flush) (exec_dup (boolean_shove)) (integer_yankdup integer_shove) exec_dup_items boolean_invert_first_then_and -28 integer_gt) ()) (boolean_flush integer_yankdup))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 226 791 190 190 226 1000 567 375 226)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (190 226 791 190 190 226 0 567 375 226)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () exec_flush) (exec_dup (boolean_shove)) (integer_yankdup integer_shove) exec_dup_items integer_dup_items exec_rot (boolean_pop exec_y () exec_do*while (integer_lt exec_s_when_autoconstructing (exec_eq) (boolean_yank integer_empty boolean_not) (exec_swap (boolean_eq exec_y () integer_shove boolean_flush boolean_yank) (boolean_empty in1 integer_lt) print_integer integer_lt exec_yank boolean_invert_first_then_and exec_s (boolean_invert_first_then_and integer_eq integer_sub boolean_stackdepth) (boolean_and integer_lte integer_dup_items boolean_or boolean_dup boolean_flush boolean_dup) ()))) () ()) ()) ())
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 84
Size: 112
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.019
Median total errors in population: 7
Error averages by case: (0.81 0.774 0.209 0.81 0.81 0.774 1.0 0.433 0.625 0.774)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 74.483
Average program size in population (points): 99.147
Average percent parens in population: 0.248
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.476
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2043585
--- Timings ---
Current time: 1559314708004 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.3 seconds, 59.3%
Fitness Testing:      3.0 seconds, 24.8%
Report:               1.8 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: 97                 
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: 64                 
Correct output: -81                 | Program output: 51                 
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: 60                 
Correct output: -40                 | Program output: 8                  
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: 40                 
Correct output: -56                 | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: 64                 
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: 95                 
Correct output: -51                 | Program output: 22                 
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: 4                  
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: 99                 
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: 28                 
Correct output: -46                 | Program output: 100                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: 73                 
Correct output: -90                 | Program output: 97                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: 97                 
Correct output: -93                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (integer_inc) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte exec_s_when_autoconstructing (exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ()) () ())) ())))
Lexicase best errors: [1 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 127
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (integer_inc) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte exec_s_when_autoconstructing (exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14 integer_shove integer_lte integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ()) () ())) ())))
Zero cases best errors: [1 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 127
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 402 127 127 128 878 404 1 1 345)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (345 402 127 127 128 878 404 1 1 345)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 27} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup})
Best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (27) boolean_shove integer_sub exec_pop (integer_yankdup) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty print_integer -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_min integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (exec_k_when_autoconstructing (exec_noop boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_and print_boolean integer_mod 14 integer_shove boolean_empty integer_dup_times exec_do*times (integer_fromboolean integer_flush boolean_dup)) ()) ()))) ())))
Errors: [1 1 0 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 98
Size: 129
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.242
Median total errors in population: 7
Error averages by case: (0.655 0.598 0.873 0.873 0.872 0.122 0.596 0.999 0.999 0.655)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.015
Average program size in population (points): 86.563
Average percent parens in population: 0.247
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.940375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2553285
--- Timings ---
Current time: 1559314711049 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.4 seconds, 62.1%
Fitness Testing:      3.5 seconds, 23.0%
Report:               2.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction tag_boolean_143} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction 65} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction -83} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (tag_boolean_143 boolean_eq boolean_eq boolean_rot print_integer) (boolean_dup_items exec_swap (exec_y_when_autoconstructing (integer_dec exec_empty exec_do*while (exec_do*count (exec_k () (integer_flush) integer_max exec_yank exec_empty exec_noop boolean_and exec_do*while (boolean_or)) exec_do*times (boolean_rot boolean_yank integer_dup_times exec_do*times (integer_dup_times exec_do*while () integer_flush integer_yankdup) exec_do*times (integer_sub exec_y () boolean_empty exec_when (boolean_flush boolean_pop 65 exec_shove (exec_stackdepth integer_flush) integer_gt exec_while (print_exec (print_exec (exec_k () (exec_s_when_autoconstructing (boolean_dup_times exec_yank integer_yank) (exec_rot (exec_swap (print_boolean boolean_invert_first_then_and -83) () integer_empty integer_flush) (integer_dec exec_dup (in3 boolean_pop) integer_empty integer_gte) () integer_yankdup boolean_xor) ())))))))))) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 107
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction tag_boolean_143} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction 65} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction -83} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (tag_boolean_143 boolean_eq boolean_eq boolean_rot print_integer) (boolean_dup_items exec_swap (exec_y_when_autoconstructing (integer_dec exec_empty exec_do*while (exec_do*count (exec_k () (integer_flush) integer_max exec_yank exec_empty exec_noop boolean_and exec_do*while (boolean_or)) exec_do*times (boolean_rot boolean_yank integer_dup_times exec_do*times (integer_dup_times exec_do*while () integer_flush integer_yankdup) exec_do*times (integer_sub exec_y () boolean_empty exec_when (boolean_flush boolean_pop 65 exec_shove (exec_stackdepth integer_flush) integer_gt exec_while (print_exec (print_exec (exec_k () (exec_s_when_autoconstructing (boolean_dup_times exec_yank integer_yank) (exec_rot (exec_swap (print_boolean boolean_invert_first_then_and -83) () integer_empty integer_flush) (integer_dec exec_dup (in3 boolean_pop) integer_empty integer_gte) () integer_yankdup boolean_xor) ())))))))))) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 107
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 196 205 240 858 204 218 194 204 218)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (204 196 205 240 858 204 218 194 204 218)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_576} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction 56} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_min})
Best program: (boolean_swap exec_rot (in4 boolean_swap) (print_integer integer_min exec_when (integer_rot boolean_dup) integer_yankdup exec_do*while (exec_flush integer_pop) integer_sub exec_do*while (exec_empty exec_shove (integer_gt print_exec (exec_y_when_autoconstructing (boolean_empty boolean_swap integer_dup_items exec_s (print_exec (integer_eq integer_dup_times integer_min) boolean_dup boolean_flush integer_dec boolean_yankdup integer_sub tagged_576 boolean_frominteger) (integer_shove boolean_shove print_boolean in2 boolean_dup_times boolean_invert_first_then_and boolean_empty) (boolean_and integer_dec exec_while (exec_do*range (print_newline) print_exec (integer_yankdup boolean_eq exec_shove (56 exec_dup_items exec_shove (integer_lt integer_sub boolean_and integer_div) integer_min))))))))) ())
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 78
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.259
Median total errors in population: 7
Error averages by case: (0.796 0.804 0.795 0.76 0.142 0.796 0.782 0.806 0.796 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.733
Average program size in population (points): 84.126
Average percent parens in population: 0.238
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.6285625
Median age in population: 7.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3001487
--- Timings ---
Current time: 1559314713718 milliseconds
Total Time:          18.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.4 seconds, 63.5%
Fitness Testing:      3.8 seconds, 21.3%
Report:               2.6 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: 97                 
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: 64                 
Correct output: -81                 | Program output: 51                 
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: 60                 
Correct output: -40                 | Program output: 8                  
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: 40                 
Correct output: -56                 | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: 64                 
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: 95                 
Correct output: -51                 | Program output: 22                 
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: 4                  
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: 99                 
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: 28                 
Correct output: -46                 | Program output: 100                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: 73                 
Correct output: -90                 | Program output: 97                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: 97                 
Correct output: -93                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction -55} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_846} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_empty boolean_dup_items in4 -55 exec_yankdup boolean_invert_first_then_and integer_eq print_integer exec_while (boolean_empty) exec_do*times (integer_div exec_yankdup exec_do*while () integer_dup_times integer_dup_times exec_do*range () exec_pop (boolean_stackdepth exec_do*range () integer_mult integer_pop exec_do*while () boolean_pop boolean_flush tagged_846 in3) integer_dup_items integer_gt exec_s (exec_while (exec_k (boolean_invert_first_then_and integer_swap) (integer_dup_items boolean_invert_first_then_and exec_k_when_autoconstructing (integer_dup_times integer_div boolean_or exec_do*while (print_exec (print_integer boolean_swap integer_dup) boolean_stackdepth integer_gte exec_do*times (integer_dup_items exec_rot (boolean_pop exec_y () exec_do*while (integer_lt exec_s_when_autoconstructing (exec_eq) (boolean_yank integer_empty boolean_not) (exec_swap (boolean_eq integer_lte) (integer_shove boolean_flush boolean_yank) boolean_empty in1 integer_lt) print_integer integer_lt integer_eq boolean_invert_first_then_and integer_swap boolean_invert_first_then_and integer_eq exec_empty)) () ()))) ()))) () ()))
Lexicase best errors: [1 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 105
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction -55} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_846} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_empty boolean_dup_items in4 -55 exec_yankdup boolean_invert_first_then_and integer_eq print_integer exec_while (boolean_empty) exec_do*times (integer_div exec_yankdup exec_do*while () integer_dup_times integer_dup_times exec_do*range () exec_pop (boolean_stackdepth exec_do*range () integer_mult integer_pop exec_do*while () boolean_pop boolean_flush tagged_846 in3) integer_dup_items integer_gt exec_s (exec_while (exec_k (boolean_invert_first_then_and integer_swap) (integer_dup_items boolean_invert_first_then_and exec_k_when_autoconstructing (integer_dup_times integer_div boolean_or exec_do*while (print_exec (print_integer boolean_swap integer_dup) boolean_stackdepth integer_gte exec_do*times (integer_dup_items exec_rot (boolean_pop exec_y () exec_do*while (integer_lt exec_s_when_autoconstructing (exec_eq) (boolean_yank integer_empty boolean_not) (exec_swap (boolean_eq integer_lte) (integer_shove boolean_flush boolean_yank) boolean_empty in1 integer_lt) print_integer integer_lt integer_eq boolean_invert_first_then_and integer_swap boolean_invert_first_then_and integer_eq exec_empty)) () ()))) ()))) () ()))
Zero cases best errors: [1 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 105
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 391 199 223 391 391 90 90 199 199)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (89 391 199 223 391 391 90 90 199 199)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_181} {:close 1, :instruction tag_boolean_637} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction 26} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -33} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 69} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction 14})
Best program: (boolean_yankdup integer_yankdup integer_lt exec_rot (tagged_181 tag_boolean_637) (integer_dec exec_swap (exec_pop () in3 boolean_shove print_integer in4 integer_rot integer_fromboolean) (26) boolean_shove integer_sub exec_pop (print_newline) boolean_yank in3 boolean_stackdepth exec_stackdepth integer_dup boolean_invert_first_then_and boolean_dup) (exec_empty integer_yankdup -33 integer_sub boolean_shove integer_mult integer_yank integer_swap) integer_gte integer_flush integer_add exec_rot (exec_eq) (exec_dup_times (print_boolean) integer_eq integer_flush exec_dup_times () integer_shove) (exec_if () (exec_if (integer_yankdup exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (69 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (boolean_stackdepth integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) boolean_yankdup print_boolean integer_mod 14) ()) ())))))
Errors: [0 1 1 1 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 85
Size: 110
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.738
Median total errors in population: 7
Error averages by case: (0.911 0.609 0.801 0.777 0.609 0.609 0.91 0.91 0.801 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.282
Average program size in population (points): 79.712
Average percent parens in population: 0.239
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 9.0540625
Median age in population: 9.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3467845
--- Timings ---
Current time: 1559314716827 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 65.6%
Fitness Testing:      4.2 seconds, 20.2%
Report:               2.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: 38                 
Correct output: -73                 | Program output: 80                 
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: 28                 
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: 7                  
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: 47                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: 85                 
Correct output: -68                 | Program output: 65                 
Correct output: -35                 | Program output: 38                 
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 41                 
Correct output: -95                 | Program output: 83                 
Correct output: -41                 | Program output: 38                 
Correct output: -3                  | Program output: 51                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: 59                 
Correct output: -79                 | Program output: 4                  
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_integer_908} {:close 0, :instruction 65} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction -83} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in1 print_integer exec_eq tag_exec_413 () boolean_yankdup integer_swap exec_if (boolean_pop integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_and boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () exec_flush) (exec_dup (boolean_shove)) (tag_integer_908 65 exec_shove (exec_stackdepth integer_flush) integer_gt exec_while (print_exec (print_exec (exec_k () (exec_s_when_autoconstructing (boolean_dup_times exec_yank integer_yank) (exec_rot () (exec_swap (print_boolean boolean_invert_first_then_and -83) () integer_empty integer_flush) (integer_dec exec_dup (in3 boolean_pop) integer_empty integer_gte)) (integer_yankdup boolean_xor))))))) ())
Lexicase best errors: [1 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_integer_908} {:close 0, :instruction 65} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction -83} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in1 print_integer exec_eq tag_exec_413 () boolean_yankdup integer_swap exec_if (boolean_pop integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_and boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () exec_flush) (exec_dup (boolean_shove)) (tag_integer_908 65 exec_shove (exec_stackdepth integer_flush) integer_gt exec_while (print_exec (print_exec (exec_k () (exec_s_when_autoconstructing (boolean_dup_times exec_yank integer_yank) (exec_rot () (exec_swap (print_boolean boolean_invert_first_then_and -83) () integer_empty integer_flush) (integer_dec exec_dup (in3 boolean_pop) integer_empty integer_gte)) (integer_yankdup boolean_xor))))))) ())
Zero cases best errors: [1 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (228 228 276 232 277 276 84 361 276 873)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (228 228 276 232 277 276 84 361 276 873)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_integer_908} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in1 print_integer exec_eq tag_exec_413 () boolean_yankdup integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_and boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () exec_flush) (exec_dup (boolean_shove)) (tag_integer_908 integer_shove) exec_dup_items boolean_invert_first_then_and -28 integer_gt) () boolean_flush integer_yankdup)
Errors: [1 1 0 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 63
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.889
Median total errors in population: 6
Error averages by case: (0.772 0.772 0.724 0.768 0.723 0.724 0.916 0.639 0.724 0.127)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.81
Average program size in population (points): 80.309
Average percent parens in population: 0.238
Minimum age in population: 7.0
Maximum age in population: 12.5
Average age in population: 10.58
Median age in population: 10.6640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3930244
--- Timings ---
Current time: 1559314719993 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.3 seconds, 67.1%
Fitness Testing:      4.6 seconds, 19.0%
Report:               3.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) integer_max exec_y_when_autoconstructing (boolean_invert_second_then_and integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult boolean_eq exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_pop boolean_yankdup boolean_xor exec_dup (boolean_shove)) integer_yankdup integer_shove) (exec_dup_items integer_lt exec_s_when_autoconstructing (exec_eq) (boolean_yank integer_empty boolean_not) (exec_swap (boolean_eq exec_y () integer_shove boolean_flush boolean_yank) (boolean_empty in1 integer_lt) print_integer integer_lt exec_yank boolean_invert_first_then_and exec_s (boolean_invert_first_then_and integer_eq in4 boolean_stackdepth) (exec_dup_items integer_lte integer_dup_items boolean_or) ()))) ())
Lexicase best errors: [0 0 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) integer_max exec_y_when_autoconstructing (boolean_invert_second_then_and integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult boolean_eq exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_pop boolean_yankdup boolean_xor exec_dup (boolean_shove)) integer_yankdup integer_shove) (exec_dup_items integer_lt exec_s_when_autoconstructing (exec_eq) (boolean_yank integer_empty boolean_not) (exec_swap (boolean_eq exec_y () integer_shove boolean_flush boolean_yank) (boolean_empty in1 integer_lt) print_integer integer_lt exec_yank boolean_invert_first_then_and exec_s (boolean_invert_first_then_and integer_eq in4 boolean_stackdepth) (exec_dup_items integer_lte integer_dup_items boolean_or) ()))) ())
Zero cases best errors: [0 0 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 125 1000 125 502 1000 630 502 248 1000)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (125 125 0 125 502 0 630 502 248 0)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_462} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 4, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) boolean_xor boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_boolean_462 boolean_yankdup integer_dec integer_gte boolean_shove boolean_frominteger integer_mult boolean_yank integer_swap exec_if (integer_rot integer_fromboolean in4 integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when (exec_if () (print_exec (boolean_shove)) integer_yankdup integer_shove) exec_dup_items boolean_invert_first_then_and -28 integer_gt) () ()) (boolean_flush integer_yankdup))
Errors: [0 0 1 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.743
Median total errors in population: 7
Error averages by case: (0.875 0.875 1.0 0.875 0.498 1.0 0.37 0.498 0.752 1.0)
Error minima by case: (0 0 1 0 0 1 0 0 0 1)
Average genome size in population (length): 56.893
Average program size in population (points): 74.015
Average percent parens in population: 0.225
Minimum age in population: 8.5
Maximum age in population: 13.8828125
Average age in population: 12.23746875
Median age in population: 12.328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4287676
--- Timings ---
Current time: 1559314722764 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 68.4%
Fitness Testing:      4.9 seconds, 18.2%
Report:               3.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop})
Lexicase best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush) integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) (exec_rot (exec_when () exec_flush) (exec_dup (boolean_pop)) () integer_yankdup boolean_pop) exec_dup_items integer_yankdup -28 integer_gt) () exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and 68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) integer_lte integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop))) ()) ()) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 126
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 3, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_814} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop})
Zero cases best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush) integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) (exec_rot (exec_when () exec_flush) (exec_dup (boolean_pop)) () integer_yankdup boolean_pop) exec_dup_items integer_yankdup -28 integer_gt) () exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and 68 boolean_flush exec_if () (boolean_and integer_div integer_min integer_dup boolean_dup_times boolean_dup_times boolean_swap boolean_dup_items boolean_dup_times print_boolean integer_gte boolean_dup_items exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop) in1) integer_lte integer_empty integer_flush exec_if (integer_mult boolean_dup_items boolean_invert_second_then_and tag_boolean_814 exec_do*count (print_boolean integer_gt) exec_rot () (in1 integer_mult exec_pop (exec_if () (boolean_pop))) ()) ()) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 126
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 910 482 912 483 912 96 578 333 910)
Population mean number of elite cases: 6.62
Count of perfect (error zero) individuals by case: (0 910 482 912 483 912 96 578 333 910)
Population mean number of perfect (error zero) cases: 5.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 3, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer in3 integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush) integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) (exec_rot (exec_when () exec_flush) (exec_dup (boolean_shove)) () integer_yankdup boolean_pop) exec_dup_items boolean_invert_first_then_and -28 integer_gt) boolean_flush integer_yankdup)
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 66
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 4.384
Median total errors in population: 4
Error averages by case: (1.0 0.09 0.518 0.088 0.517 0.088 0.904 0.422 0.667 0.09)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.687
Average program size in population (points): 72.136
Average percent parens in population: 0.222
Minimum age in population: 9.5
Maximum age in population: 15.3515625
Average age in population: 13.63314453125
Median age in population: 13.7109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4612712
--- Timings ---
Current time: 1559314725249 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.3 seconds, 69.1%
Fitness Testing:      5.2 seconds, 17.7%
Report:               3.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Lexicase best errors: [0 0 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Zero cases best errors: [0 0 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 892 1 221 176 492 492 221 176)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (1 1 892 1 221 176 492 492 221 176)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Errors: [0 0 0 0 1 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 59
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.327
Median total errors in population: 7
Error averages by case: (0.999 0.999 0.108 0.999 0.779 0.824 0.508 0.508 0.779 0.824)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.752
Average program size in population (points): 74.217
Average percent parens in population: 0.229
Minimum age in population: 10.5
Maximum age in population: 16.966796875
Average age in population: 15.0854765625
Median age in population: 15.2041015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4961909
--- Timings ---
Current time: 1559314727715 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.2 seconds, 69.5%
Fitness Testing:      5.5 seconds, 17.2%
Report:               4.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 283 239 215 283 283 215 283 215 283)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (283 283 239 215 283 283 215 283 215 283)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 59
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.418
Median total errors in population: 9
Error averages by case: (0.717 0.717 0.761 0.785 0.717 0.717 0.785 0.717 0.785 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.749
Average program size in population (points): 67.173
Average percent parens in population: 0.225
Minimum age in population: 11.5
Maximum age in population: 18.48046875
Average age in population: 16.766015625
Median age in population: 16.7548828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5283760
--- Timings ---
Current time: 1559314730145 milliseconds
Total Time:          34.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.1 seconds, 70.0%
Fitness Testing:      5.8 seconds, 16.8%
Report:               4.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Lexicase best errors: [0 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Zero cases best errors: [0 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 906 527 527 527 277 1 1 101 277)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (906 906 527 527 527 277 1 1 101 277)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Errors: [0 0 0 0 0 1 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 46
Size: 59
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 5.95
Median total errors in population: 5
Error averages by case: (0.094 0.094 0.473 0.473 0.473 0.723 0.999 0.999 0.899 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.045
Average program size in population (points): 61.657
Average percent parens in population: 0.218
Minimum age in population: 15.05859375
Maximum age in population: 19.892578125
Average age in population: 18.3144951171875
Median age in population: 18.44482421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5557585
--- Timings ---
Current time: 1559314732798 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.3 seconds, 70.8%
Fitness Testing:      6.0 seconds, 16.2%
Report:               4.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_integer_908} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) print_integer exec_eq tag_exec_413 (boolean_yankdup integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_max integer_gt) (exec_pop (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_and boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () in2) (exec_dup (boolean_shove)) (tag_integer_908 integer_shove) exec_dup_items boolean_invert_first_then_and -28 integer_gt))) boolean_flush integer_yankdup)
Lexicase best errors: [0 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_integer_908} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) print_integer exec_eq tag_exec_413 (boolean_yankdup integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_max integer_gt) (exec_pop (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_and boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_stackdepth) exec_rot (exec_when () in2) (exec_dup (boolean_shove)) (tag_integer_908 integer_shove) exec_dup_items boolean_invert_first_then_and -28 integer_gt))) boolean_flush integer_yankdup)
Zero cases best errors: [0 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 134 135 325 221 134 589 234 134 221)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (134 134 135 325 221 134 589 234 134 221)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 85} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in2) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_dup_times 85 boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt)) () boolean_flush integer_yankdup) ())
Errors: [0 0 0 1 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 58
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 7.739
Median total errors in population: 8
Error averages by case: (0.866 0.866 0.865 0.675 0.779 0.866 0.411 0.766 0.866 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.343
Average program size in population (points): 60.781
Average percent parens in population: 0.219
Minimum age in population: 16.775390625
Maximum age in population: 21.566162109375
Average age in population: 19.81548046875
Median age in population: 19.7764892578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5834044
--- Timings ---
Current time: 1559314735394 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.4 seconds, 71.5%
Fitness Testing:      6.3 seconds, 15.8%
Report:               5.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: 97                 
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: 64                 
Correct output: -81                 | Program output: 51                 
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: 60                 
Correct output: -40                 | Program output: 8                  
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: 40                 
Correct output: -56                 | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: 64                 
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: 95                 
Correct output: -51                 | Program output: 22                 
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: 4                  
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: 99                 
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: 99                 
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: 28                 
Correct output: -46                 | Program output: 100                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: 73                 
Correct output: -90                 | Program output: 97                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: 97                 
Correct output: -93                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_xor boolean_frominteger integer_mult integer_swap exec_yankdup integer_dup integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_xor boolean_frominteger integer_mult integer_swap exec_yankdup integer_dup integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 208 528 528 87 208 918 918 918 390)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (87 208 528 528 87 208 918 918 918 390)
Population mean number of perfect (error zero) cases: 4.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop in3 print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop integer_dup_times boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Errors: [1 0 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 59
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 5.21
Median total errors in population: 5
Error averages by case: (0.913 0.792 0.472 0.472 0.913 0.792 0.082 0.082 0.082 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.682
Average program size in population (points): 62.406
Average percent parens in population: 0.217
Minimum age in population: 17.775390625
Maximum age in population: 23.167724609375
Average age in population: 21.20424938964844
Median age in population: 21.26629638671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6115442
--- Timings ---
Current time: 1559314738404 milliseconds
Total Time:          42.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.9 seconds, 72.3%
Fitness Testing:      6.5 seconds, 15.2%
Report:               5.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Lexicase best errors: [0 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Zero cases best errors: [0 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (349 324 1000 256 349 323 349 929 349 321)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (349 324 0 256 349 323 349 929 349 321)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction 68} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y})
Best program: (exec_y_when_autoconstructing (boolean_frominteger integer_yankdup) boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) () tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean boolean_dup_times exec_dup_items) (exec_stackdepth exec_k_when_autoconstructing (exec_yank boolean_shove exec_yankdup boolean_xor boolean_invert_first_then_and) (68 boolean_flush exec_if () (exec_yankdup exec_s_when_autoconstructing (exec_eq) (boolean_yank integer_empty boolean_not) (exec_swap (boolean_eq exec_y ()) ())))))
Errors: [0 1 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.451
Median total errors in population: 6
Error averages by case: (0.651 0.676 1.0 0.744 0.651 0.677 0.651 0.071 0.651 0.679)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 46.956
Average program size in population (points): 60.284
Average percent parens in population: 0.220
Minimum age in population: 19.568359375
Maximum age in population: 24.739501953125
Average age in population: 22.79848089599609
Median age in population: 22.8603515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6410808
--- Timings ---
Current time: 1559314741140 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 72.7%
Fitness Testing:      6.8 seconds, 15.0%
Report:               5.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Lexicase best errors: [1 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Zero cases best errors: [1 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 440 441 111 356 356 111 1 440)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (1 1 440 441 111 356 356 111 1 440)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_435} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank exec_y_when_autoconstructing () exec_when (integer_yankdup) boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer) exec_eq tag_exec_435 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_pop exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Errors: [1 1 0 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.742
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.56 0.559 0.889 0.644 0.644 0.889 0.999 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.492
Average program size in population (points): 59.781
Average percent parens in population: 0.222
Minimum age in population: 22.04656982421875
Maximum age in population: 26.08053588867188
Average age in population: 24.28216619873047
Median age in population: 24.34014892578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6708355
--- Timings ---
Current time: 1559314743738 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.9 seconds, 72.6%
Fitness Testing:      7.0 seconds, 14.6%
Report:               6.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_975} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap tagged_975 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult exec_yankdup exec_eq tag_exec_413 () boolean_yankdup) (exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush) integer_yankdup) ()))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_975} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap tagged_975 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult exec_yankdup exec_eq tag_exec_413 () boolean_yankdup) (exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_gt))) (boolean_flush) integer_yankdup) ()))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 269 186 193 269 187 457 187 187 263)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (193 269 186 193 269 187 457 187 187 263)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_483} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) integer_max exec_y_when_autoconstructing (boolean_invert_second_then_and integer_swap) tagged_880 boolean_stackdepth print_boolean exec_do*while (in2 print_integer) exec_eq tag_exec_413 (exec_eq tag_exec_483 () integer_dup_items) boolean_frominteger exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte) (boolean_shove boolean_frominteger integer_dup_items integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (integer_eq exec_flush integer_dup_items boolean_pop boolean_yankdup boolean_xor exec_empty -28 integer_gt)) () boolean_flush integer_yankdup))
Errors: [1 1 0 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 7.609
Median total errors in population: 8
Error averages by case: (0.807 0.731 0.814 0.807 0.731 0.813 0.543 0.813 0.813 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.054
Average program size in population (points): 59.463
Average percent parens in population: 0.208
Minimum age in population: 23.35546875
Maximum age in population: 27.18849182128906
Average age in population: 25.88080342102051
Median age in population: 25.87511444091797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7005037
--- Timings ---
Current time: 1559314746236 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 72.9%
Fitness Testing:      7.3 seconds, 14.4%
Report:               6.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: false4             
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: true6              
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_lt integer_max exec_y_when_autoconstructing (in2 integer_min boolean_yankdup integer_yankdup integer_lt) exec_y_when_autoconstructing (in2 integer_swap tagged_880 boolean_rot print_boolean integer_pop in2 print_integer) exec_eq tag_exec_413 (integer_inc) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (boolean_dup) (integer_fromboolean integer_max integer_gt exec_pop () boolean_yank exec_flush integer_fromboolean boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items exec_stackdepth) exec_stackdepth) exec_rot (exec_when (exec_flush exec_dup (boolean_shove)) integer_yankdup integer_shove) (boolean_yank boolean_invert_first_then_and -28 integer_gt) ()) (boolean_flush))
Lexicase best errors: [1 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 73
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_lt integer_max exec_y_when_autoconstructing (in2 integer_min boolean_yankdup integer_yankdup integer_lt) exec_y_when_autoconstructing (in2 integer_swap tagged_880 boolean_rot print_boolean integer_pop in2 print_integer) exec_eq tag_exec_413 (integer_inc) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (boolean_dup) (integer_fromboolean integer_max integer_gt exec_pop () boolean_yank exec_flush integer_fromboolean boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items exec_stackdepth) exec_stackdepth) exec_rot (exec_when (exec_flush exec_dup (boolean_shove)) integer_yankdup integer_shove) (boolean_yank boolean_invert_first_then_and -28 integer_gt) ()) (boolean_flush))
Zero cases best errors: [1 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 73
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 402 204 204 402 232 402 232 95 933)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (95 402 204 204 402 232 402 232 95 933)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (integer_lt integer_max exec_y_when_autoconstructing (in2 integer_min exec_yank integer_yankdup integer_lt) exec_y_when_autoconstructing (in2 integer_swap tagged_880 boolean_rot print_boolean integer_pop in2 print_integer) exec_eq tag_exec_413 (boolean_empty) exec_k_when_autoconstructing (integer_gte boolean_shove) (boolean_frominteger integer_mult integer_swap exec_if (boolean_dup) (integer_fromboolean integer_max integer_gt exec_pop () boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items exec_stackdepth) integer_stackdepth) exec_rot (exec_when () exec_flush exec_dup (boolean_shove)) (integer_yankdup integer_shove) (boolean_yank boolean_invert_first_then_and -28 integer_gt)) boolean_flush integer_yankdup)
Errors: [1 0 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 59
Size: 74
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 6.799
Median total errors in population: 7
Error averages by case: (0.905 0.598 0.796 0.796 0.598 0.768 0.598 0.768 0.905 0.067)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.985
Average program size in population (points): 59.562
Average percent parens in population: 0.209
Minimum age in population: 24.42626953125
Maximum age in population: 28.84420776367188
Average age in population: 27.29291234588623
Median age in population: 27.40370178222656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7295202
--- Timings ---
Current time: 1559314749160 milliseconds
Total Time:          53.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.2 seconds, 73.5%
Fitness Testing:      7.5 seconds, 14.0%
Report:               6.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: 38                 
Correct output: -73                 | Program output: 80                 
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: 28                 
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: 7                  
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: 47                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: 85                 
Correct output: -68                 | Program output: 65                 
Correct output: -35                 | Program output: 38                 
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 41                 
Correct output: -95                 | Program output: 83                 
Correct output: -41                 | Program output: 38                 
Correct output: -3                  | Program output: 51                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: 59                 
Correct output: -79                 | Program output: 4                  
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_add in1 boolean_shove boolean_not integer_max boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_pop (integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) boolean_flush integer_yankdup) ()) ())
Lexicase best errors: [0 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_add in1 boolean_shove boolean_not integer_max boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_pop (integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) boolean_flush integer_yankdup) ()) ())
Zero cases best errors: [0 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 913 186 307 215 186 913 215 307 186)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (186 913 186 307 215 186 913 215 307 186)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 4, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (integer_add in1 boolean_shove boolean_not integer_max boolean_dup boolean_dup exec_y_when_autoconstructing () tagged_266 integer_swap tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 (boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) () boolean_flush integer_yankdup) ())
Errors: [0 0 0 1 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.386
Median total errors in population: 6
Error averages by case: (0.814 0.087 0.814 0.693 0.785 0.814 0.087 0.785 0.693 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.547
Average program size in population (points): 59.311
Average percent parens in population: 0.213
Minimum age in population: 25.90185546875
Maximum age in population: 30.63581466674805
Average age in population: 28.76594502258301
Median age in population: 28.80189514160156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7592793
--- Timings ---
Current time: 1559314752098 milliseconds
Total Time:          56.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.7 seconds, 73.9%
Fitness Testing:      7.8 seconds, 13.8%
Report:               6.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot boolean_yank exec_flush integer_lt integer_min boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 exec_noop)) () boolean_flush integer_yankdup))) ())
Lexicase best errors: [0 1 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot boolean_yank exec_flush integer_lt integer_min boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 exec_noop)) () boolean_flush integer_yankdup))) ())
Zero cases best errors: [0 1 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 9 228 452 229 228 9 228 9 467)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (227 9 228 452 229 228 9 228 9 467)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec})
Best program: (integer_empty exec_y_when_autoconstructing () integer_pop in2 print_integer exec_eq tag_exec_413 (boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_flush exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup integer_mult integer_dec)) ()) ())
Errors: [0 1 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.914
Median total errors in population: 9
Error averages by case: (0.773 0.991 0.772 0.548 0.771 0.772 0.991 0.772 0.991 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.689
Average program size in population (points): 58.632
Average percent parens in population: 0.202
Minimum age in population: 27.3590087890625
Maximum age in population: 32.09432220458984
Average age in population: 30.29228041648865
Median age in population: 30.39717769622803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7903591
--- Timings ---
Current time: 1559314754979 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.1 seconds, 74.3%
Fitness Testing:      8.0 seconds, 13.5%
Report:               7.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 3, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop integer_dup boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult exec_dup_items boolean_invert_first_then_and boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and integer_yank integer_gt)) () integer_dup_times integer_yankdup)
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 3, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop integer_dup boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult exec_dup_items boolean_invert_first_then_and boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and integer_yank integer_gt)) () integer_dup_times integer_yankdup)
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (421 420 317 419 96 419 421 420 599 421)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (421 420 317 419 96 419 421 420 599 421)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_898} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction tag_integer_924} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) integer_swap tagged_898 boolean_stackdepth print_boolean integer_pop exec_s (print_integer) (exec_eq tag_exec_413 () boolean_yankdup) (exec_k_when_autoconstructing (integer_gte exec_if (boolean_frominteger exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (integer_mult integer_yank integer_swap) integer_gte boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot) exec_empty -28 integer_gt) ()) (tag_integer_924 integer_yankdup)) ()) ()))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 53
Size: 71
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.047
Median total errors in population: 8
Error averages by case: (0.579 0.58 0.683 0.581 0.904 0.581 0.579 0.58 0.401 0.579)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.671
Average program size in population (points): 59.97
Average percent parens in population: 0.220
Minimum age in population: 29.27530670166016
Maximum age in population: 33.74958515167236
Average age in population: 31.81578946208954
Median age in population: 31.91359424591064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8190706
--- Timings ---
Current time: 1559314757439 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.0 seconds, 74.6%
Fitness Testing:      8.3 seconds, 13.4%
Report:               7.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_swap} {:close 0, :instruction tagged_927} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup) (boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) () tagged_927 boolean_stackdepth print_boolean integer_pop print_integer) (exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup integer_fromboolean boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) (boolean_flush exec_rot () () ())) ())
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_swap} {:close 0, :instruction tagged_927} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup) (boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) () tagged_927 boolean_stackdepth print_boolean integer_pop print_integer) (exec_eq tag_exec_413 () boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup integer_fromboolean boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) (boolean_flush exec_rot () () ())) ())
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 104 735 91 734 734 91 92 930 104)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (91 104 735 91 734 734 91 92 930 104)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_swap} {:close 0, :instruction tagged_927} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) () tagged_927 boolean_stackdepth print_boolean integer_pop print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup integer_fromboolean boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 46
Size: 59
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.294
Median total errors in population: 6
Error averages by case: (0.909 0.896 0.265 0.909 0.266 0.266 0.909 0.908 0.07 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.728
Average program size in population (points): 59.709
Average percent parens in population: 0.215
Minimum age in population: 30.6634521484375
Maximum age in population: 35.16302394866943
Average age in population: 33.27478096485138
Median age in population: 33.38426065444946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8469623
--- Timings ---
Current time: 1559314760319 milliseconds
Total Time:          64.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.4 seconds, 74.8%
Fitness Testing:      8.5 seconds, 13.2%
Report:               7.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: 38                 
Correct output: -73                 | Program output: 80                 
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: 28                 
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: 7                  
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: 47                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: 85                 
Correct output: -68                 | Program output: 65                 
Correct output: -35                 | Program output: 38                 
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 41                 
Correct output: -95                 | Program output: 83                 
Correct output: -41                 | Program output: 38                 
Correct output: -3                  | Program output: 51                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: 59                 
Correct output: -79                 | Program output: 4                  
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_add in1 boolean_shove boolean_not integer_max boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove exec_eq tag_exec_413 () boolean_yankdup) (exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap () ())) ()) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_add in1 boolean_shove boolean_not integer_max boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove exec_eq tag_exec_413 () boolean_yankdup) (exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap () ())) ()) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 1 189 189 1 322 372 189 372 189)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (191 1 189 189 1 322 372 189 372 189)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_588} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (integer_add in1 boolean_shove boolean_not integer_max boolean_pop boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot tagged_588 integer_max integer_gt exec_pop (boolean_yank in2 integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) (boolean_flush integer_yankdup)) ())
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 7.985
Median total errors in population: 8
Error averages by case: (0.809 0.999 0.811 0.811 0.999 0.678 0.628 0.811 0.628 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.656
Average program size in population (points): 59.857
Average percent parens in population: 0.219
Minimum age in population: 31.6634521484375
Maximum age in population: 36.62244725227356
Average age in population: 34.81002524352074
Median age in population: 34.89202177524567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8756470
--- Timings ---
Current time: 1559314762542 milliseconds
Total Time:          66.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.1 seconds, 74.9%
Fitness Testing:      8.7 seconds, 13.1%
Report:               7.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28})
Lexicase best program: (boolean_dup boolean_dup integer_max integer_add integer_swap tagged_880 boolean_rot print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_yankdup) exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_pop (integer_flush integer_add)) (exec_rot (exec_eq) (boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_shove) exec_dup_items boolean_invert_first_then_and -28) ()))
Lexicase best errors: [1 0 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28})
Zero cases best program: (boolean_dup boolean_dup integer_max integer_add integer_swap tagged_880 boolean_rot print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_yankdup) exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_pop (integer_flush integer_add)) (exec_rot (exec_eq) (boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28 integer_shove) exec_dup_items boolean_invert_first_then_and -28) ()))
Zero cases best errors: [1 0 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 92 166 928 208 166 92 209 167 92)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (441 92 166 928 208 166 92 209 167 92)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger boolean_not in2 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte) (integer_mod boolean_frominteger integer_mult integer_swap) exec_if (integer_gt in2 boolean_yank exec_flush boolean_shove exec_do*while (exec_when (integer_gt exec_pop (boolean_yankdup exec_flush boolean_and boolean_pop boolean_yankdup boolean_xor integer_gt boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_y_when_autoconstructing (exec_rot () () ()))))) ())
Errors: [1 0 1 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.439
Median total errors in population: 8
Error averages by case: (0.559 0.908 0.834 0.072 0.792 0.834 0.908 0.791 0.833 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.109
Average program size in population (points): 58.81
Average percent parens in population: 0.197
Minimum age in population: 33.07327651977539
Maximum age in population: 38.0230450630188
Average age in population: 35.92709930276871
Median age in population: 35.99592113494873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9050329
--- Timings ---
Current time: 1559314765059 milliseconds
Total Time:          69.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.1 seconds, 75.1%
Fitness Testing:      9.0 seconds, 13.0%
Report:               8.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: 38                 
Correct output: -73                 | Program output: 80                 
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: 28                 
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: 7                  
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: 47                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: 85                 
Correct output: -68                 | Program output: 65                 
Correct output: -35                 | Program output: 38                 
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 41                 
Correct output: -95                 | Program output: 83                 
Correct output: -41                 | Program output: 38                 
Correct output: -3                  | Program output: 51                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: 59                 
Correct output: -79                 | Program output: 4                  
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_integer_908} {:close 1, :instruction tag_boolean_155} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in2 integer_dup_times integer_swap) (boolean_flush print_integer) (exec_eq tag_exec_413 () exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_inc integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_rot (exec_when ()) (in2) (exec_dup (boolean_shove)) tag_integer_908 tag_boolean_155) exec_dup_items boolean_invert_first_then_and -28) (integer_gt)) () boolean_or) ()))
Lexicase best errors: [1 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_integer_908} {:close 1, :instruction tag_boolean_155} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (integer_lt in2 integer_dup_times integer_swap) (boolean_flush print_integer) (exec_eq tag_exec_413 () exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_inc integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_rot (exec_when ()) (in2) (exec_dup (boolean_shove)) tag_integer_908 tag_boolean_155) exec_dup_items boolean_invert_first_then_and -28) (integer_gt)) () boolean_or) ()))
Zero cases best errors: [1 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 96 187 97 97 331 331 331 331 97)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (186 96 187 97 97 331 331 331 331 97)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup})
Best program: (integer_add in1 boolean_shove boolean_not boolean_not boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 tagged_880 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult exec_pop (exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty -28 integer_gt))) (in1 integer_yankdup))) ())
Errors: [1 0 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.916
Median total errors in population: 8
Error averages by case: (0.814 0.904 0.813 0.903 0.903 0.669 0.669 0.669 0.669 0.903)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.724
Average program size in population (points): 58.614
Average percent parens in population: 0.218
Minimum age in population: 34.07327651977539
Maximum age in population: 39.79663348197937
Average age in population: 37.42016758000851
Median age in population: 37.48465088009834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9325854
--- Timings ---
Current time: 1559314767876 milliseconds
Total Time:          72.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        54.4 seconds, 75.5%
Fitness Testing:      9.2 seconds, 12.8%
Report:               8.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_898} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank})
Lexicase best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_898 boolean_stackdepth print_boolean integer_pop boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank)) ()) ()) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_898} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank})
Zero cases best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_898 boolean_stackdepth print_boolean integer_pop boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_max integer_gt exec_pop (boolean_yank exec_flush boolean_yankdup) exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_gt exec_pop (boolean_yank)) ()) ()) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 919 1000 172 386 386 1000 1000 386 386)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (386 919 0 172 386 386 0 0 386 386)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer exec_eq tag_exec_413 () integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot integer_shove) (boolean_rot exec_empty exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup))
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 38
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 6.979
Median total errors in population: 8
Error averages by case: (0.614 0.081 1.0 0.828 0.614 0.614 1.0 1.0 0.614 0.614)
Error minima by case: (0 0 1 0 0 0 1 1 0 0)
Average genome size in population (length): 46.399
Average program size in population (points): 58.601
Average percent parens in population: 0.206
Minimum age in population: 36.0036940574646
Maximum age in population: 41.21109089255333
Average age in population: 38.84538232177496
Median age in population: 38.92284789681435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9602647
--- Timings ---
Current time: 1559314770435 milliseconds
Total Time:          74.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 75.7%
Fitness Testing:      9.5 seconds, 12.6%
Report:               8.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_880} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_595} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 3, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_flush integer_max exec_y_when_autoconstructing (in4 boolean_and) tagged_880 boolean_stackdepth print_boolean integer_pop integer_empty print_integer exec_eq tag_exec_595 () boolean_yankdup integer_dup integer_gte boolean_shove boolean_frominteger integer_mult exec_k (exec_if (integer_rot boolean_or integer_max integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot (integer_eq exec_flush exec_dup (integer_gt)) () (boolean_flush) integer_yankdup)) ()) ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_880} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_595} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 3, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_flush integer_max exec_y_when_autoconstructing (in4 boolean_and) tagged_880 boolean_stackdepth print_boolean integer_pop integer_empty print_integer exec_eq tag_exec_595 () boolean_yankdup integer_dup integer_gte boolean_shove boolean_frominteger integer_mult exec_k (exec_if (integer_rot boolean_or integer_max integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot (integer_eq exec_flush exec_dup (integer_gt)) () (boolean_flush) integer_yankdup)) ()) ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 796 2 797 5 2 936 133 797)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (2 2 796 2 797 5 2 936 133 797)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction tag_boolean_484} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 integer_swap) tagged_880 in2 integer_swap tagged_880 tag_boolean_484 print_boolean boolean_invert_second_then_and in1 print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup)) ()) ())
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.528
Median total errors in population: 6
Error averages by case: (0.998 0.998 0.204 0.998 0.203 0.995 0.998 0.064 0.867 0.203)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.418
Average program size in population (points): 58.773
Average percent parens in population: 0.225
Minimum age in population: 37.59248185157776
Maximum age in population: 42.71666777133942
Average age in population: 40.35154500469565
Median age in population: 40.41141606122255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9863107
--- Timings ---
Current time: 1559314772904 milliseconds
Total Time:          77.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.5 seconds, 75.8%
Fitness Testing:      9.7 seconds, 12.6%
Report:               8.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction tag_boolean_484} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 integer_swap) tagged_880 in2 integer_swap tagged_880 tag_boolean_484 print_boolean boolean_invert_second_then_and in1 print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup)) ()) ())
Lexicase best errors: [1 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 57
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction tag_boolean_484} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 integer_swap) tagged_880 in2 integer_swap tagged_880 tag_boolean_484 print_boolean boolean_invert_second_then_and in1 print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup)) ()) ())
Zero cases best errors: [1 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 825 414 414 924 316 94 316 100 99)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (94 825 414 414 924 316 94 316 100 99)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction -37} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction -28} {:close 3, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove})
Best program: (exec_yank in3 in2 print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove exec_eq integer_gt exec_pop (boolean_yank exec_flush boolean_and boolean_pop boolean_yankdup exec_stackdepth exec_stackdepth) exec_rot (exec_when () -37) (exec_dup (integer_inc) integer_gt exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_or boolean_rot integer_shove) boolean_rot exec_empty -28 integer_yankdup) ()) (boolean_flush boolean_shove))
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.404
Median total errors in population: 6
Error averages by case: (0.906 0.175 0.586 0.586 0.076 0.684 0.906 0.684 0.9 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.925
Average program size in population (points): 58.225
Average percent parens in population: 0.227
Minimum age in population: 39.08439254760742
Maximum age in population: 44.02468572556973
Average age in population: 41.941541845873
Median age in population: 41.86013615131378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10124153
--- Timings ---
Current time: 1559314774832 milliseconds
Total Time:          79.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.0 seconds, 75.8%
Fitness Testing:      9.9 seconds, 12.5%
Report:               9.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: 49                 
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: 98                 
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: 55                 
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: 2                  
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: 41                 
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: 87                 
Correct output: -78                 | Program output: 66                 
Correct output: -53                 | Program output: 88                 
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: 61                 
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: 58                 
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: 45                 
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: 88                 
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction tag_boolean_484} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 exec_do*range () tagged_880 in2 integer_swap) tagged_880 tag_boolean_484 print_boolean boolean_invert_second_then_and in1 print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () exec_if (integer_rot integer_fromboolean integer_max exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup)) ()) ()) ())
Lexicase best errors: [0 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction tag_boolean_484} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 exec_do*range () tagged_880 in2 integer_swap) tagged_880 tag_boolean_484 print_boolean boolean_invert_second_then_and in1 print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () exec_if (integer_rot integer_fromboolean integer_max exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup)) ()) ()) ())
Zero cases best errors: [0 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 225 220 224 227 223 929 223 224 226)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (221 225 220 224 227 223 929 223 224 226)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_880} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_595} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div})
Best program: (integer_flush integer_max exec_y_when_autoconstructing (in4 boolean_and) tagged_880 boolean_stackdepth print_boolean integer_pop integer_empty print_integer exec_eq tag_exec_595 () boolean_yankdup integer_dup integer_gte boolean_shove boolean_frominteger integer_mult exec_k (exec_if (integer_rot boolean_or integer_max integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div) ()) ()) ())
Errors: [0 1 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.058
Median total errors in population: 8
Error averages by case: (0.779 0.775 0.78 0.776 0.773 0.777 0.071 0.777 0.776 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.828
Average program size in population (points): 57.645
Average percent parens in population: 0.219
Minimum age in population: 40.40458846092224
Maximum age in population: 45.34795767441392
Average age in population: 43.28814428171888
Median age in population: 43.37928210571408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10399482
--- Timings ---
Current time: 1559314777243 milliseconds
Total Time:          81.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.0 seconds, 76.0%
Fitness Testing:     10.2 seconds, 12.5%
Report:               9.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 316 12 483 317 11 115 12 316 12)
Population mean number of elite cases: 1.71
Count of perfect (error zero) individuals by case: (115 316 12 483 317 11 115 12 316 12)
Population mean number of perfect (error zero) cases: 1.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup integer_yank boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Errors: [0 1 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 8.291
Median total errors in population: 9
Error averages by case: (0.885 0.684 0.988 0.517 0.683 0.989 0.885 0.988 0.684 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.739
Average program size in population (points): 58.989
Average percent parens in population: 0.223
Minimum age in population: 42.34546804428101
Maximum age in population: 46.78018890693784
Average age in population: 44.90358528179675
Median age in population: 44.9515365101397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10667249
--- Timings ---
Current time: 1559314780364 milliseconds
Total Time:          84.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 76.2%
Fitness Testing:     10.4 seconds, 12.3%
Report:               9.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: 53                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 27                 
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: 84                 
Correct output: -73                 | Program output: 65                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 47                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: 29                 
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: 59                 
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 51                 
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 37                 
Correct output: -79                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_lt integer_mod boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer) (tagged_880 boolean_stackdepth print_boolean integer_rot integer_fromboolean integer_max integer_gt) exec_pop (exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot boolean_yank exec_flush integer_lt integer_min boolean_yankdup integer_pop exec_swap (boolean_rot integer_shove) (exec_dup_items) integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush exec_pop (boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup))) ()))) () ())
Lexicase best errors: [0 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_yank exec_y_when_autoconstructing () boolean_frominteger integer_yankdup boolean_frominteger exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_lt integer_mod boolean_invert_second_then_and integer_swap) (tagged_880 boolean_stackdepth print_boolean integer_pop in2 print_integer) (tagged_880 boolean_stackdepth print_boolean integer_rot integer_fromboolean integer_max integer_gt) exec_pop (exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor exec_swap (boolean_rot boolean_yank exec_flush integer_lt integer_min boolean_yankdup integer_pop exec_swap (boolean_rot integer_shove) (exec_dup_items) integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush exec_pop (boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup))) ()))) () ())
Zero cases best errors: [0 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (267 97 920 459 527 268 899 14 267 528)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (267 97 920 459 527 268 899 14 267 528)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_413} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup})
Best program: (boolean_dup integer_max exec_y_when_autoconstructing (in2 integer_swap) print_boolean boolean_invert_second_then_and in1 print_boolean integer_pop boolean_flush print_integer exec_eq tag_exec_413 () boolean_yankdup exec_k_when_autoconstructing (integer_gte boolean_shove boolean_frominteger integer_mult integer_swap exec_if (integer_rot integer_fromboolean integer_max integer_dup_items exec_pop (boolean_yank exec_pop (boolean_yank exec_flush integer_lt boolean_pop exec_stackdepth exec_stackdepth) print_newline exec_when () integer_yankdup)) ()) ())
Errors: [0 1 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.754
Median total errors in population: 6
Error averages by case: (0.733 0.903 0.08 0.541 0.473 0.732 0.101 0.986 0.733 0.472)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.385
Average program size in population (points): 55.222
Average percent parens in population: 0.213
Minimum age in population: 43.78140151500702
Maximum age in population: 48.42516242153943
Average age in population: 46.60658957082219
Median age in population: 46.57890183012933
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11194148
--- Timings ---
Current time: 1559314782767 milliseconds
Total Time:          87.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 76.0%
Fitness Testing:     10.8 seconds, 12.4%
Report:              10.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [1 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [1 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 443 599 111 191 875 8 443 919 114)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (187 443 599 111 191 875 8 443 919 114)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_875 exec_when () tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Errors: [1 0 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.11
Median total errors in population: 6
Error averages by case: (0.813 0.557 0.401 0.889 0.809 0.125 0.992 0.557 0.081 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.965
Average program size in population (points): 54.504
Average percent parens in population: 0.210
Minimum age in population: 45.41264918446541
Maximum age in population: 49.80173321161419
Average age in population: 48.33839335356466
Median age in population: 48.28102753963321
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11851568
--- Timings ---
Current time: 1559314785442 milliseconds
Total Time:          89.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.1 seconds, 76.0%
Fitness Testing:     11.2 seconds, 12.5%
Report:              10.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 boolean_rot) tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor in2 boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 boolean_rot) tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor in2 boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (686 16 352 328 431 915 339 403 387 352)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (686 16 352 328 431 915 339 403 387 352)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Best program: (integer_add in1 boolean_shove boolean_not in3 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_dup_items boolean_invert_first_then_and -28 integer_gt) boolean_flush integer_yankdup)
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 45
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 5.791
Median total errors in population: 6
Error averages by case: (0.314 0.984 0.648 0.672 0.569 0.085 0.661 0.597 0.613 0.648)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.27
Average program size in population (points): 54.594
Average percent parens in population: 0.206
Minimum age in population: 48.00770096108317
Maximum age in population: 51.34946371801198
Average age in population: 50.03178592442535
Median age in population: 50.14433722337708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12566198
--- Timings ---
Current time: 1559314788116 milliseconds
Total Time:          92.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.8 seconds, 75.7%
Fitness Testing:     11.6 seconds, 12.6%
Report:              10.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_add in1 boolean_shove boolean_not in3 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_k (integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush) (integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_dup_items) exec_dup_items boolean_invert_first_then_and -28 integer_gt) () boolean_flush integer_yankdup)
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_add in1 boolean_shove boolean_not in3 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_k (integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush) (integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth exec_dup_items) exec_dup_items boolean_invert_first_then_and -28 integer_gt) () boolean_flush integer_yankdup)
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 396 542 308 238 239 238 304 307 903)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (320 396 542 308 238 239 238 304 307 903)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction boolean_pop} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28})
Best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_875 boolean_pop tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_frominteger integer_eq integer_swap exec_if (integer_inc integer_fromboolean integer_fromboolean integer_max exec_yankdup exec_pop (boolean_yank exec_flush integer_lt boolean_pop boolean_yankdup integer_pop exec_swap (boolean_rot integer_shove) (exec_dup_items boolean_invert_first_then_and -28))) ())
Errors: [1 0 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 50
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 6.205
Median total errors in population: 5
Error averages by case: (0.68 0.604 0.458 0.692 0.762 0.761 0.762 0.696 0.693 0.097)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.892
Average program size in population (points): 52.36
Average percent parens in population: 0.218
Minimum age in population: 49.01663931459188
Maximum age in population: 53.16068773856387
Average age in population: 51.41555164607102
Median age in population: 51.47497803810984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 13464188
--- Timings ---
Current time: 1559314790855 milliseconds
Total Time:          95.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.6 seconds, 75.4%
Fitness Testing:     12.2 seconds, 12.9%
Report:              11.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_flush integer_max exec_y_when_autoconstructing (in4 exec_k_when_autoconstructing () (tagged_880 integer_swap) tagged_880 in2 integer_swap) tagged_880 boolean_dup exec_y_when_autoconstructing (boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor in2 boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ())))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_flush integer_max exec_y_when_autoconstructing (in4 exec_k_when_autoconstructing () (tagged_880 integer_swap) tagged_880 in2 integer_swap) tagged_880 boolean_dup exec_y_when_autoconstructing (boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup boolean_xor in2 boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ())))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 401 397 6 226 227 278 930 421 892)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (227 401 397 6 226 227 278 930 421 892)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and boolean_not) (in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min boolean_invert_second_then_and exec_k_when_autoconstructing (exec_pop () integer_inc integer_lt boolean_pop boolean_yankdup boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 56
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 5.995
Median total errors in population: 6
Error averages by case: (0.773 0.599 0.603 0.994 0.774 0.773 0.722 0.07 0.579 0.108)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.589
Average program size in population (points): 52.572
Average percent parens in population: 0.208
Minimum age in population: 50.01663931459188
Maximum age in population: 54.94288420915836
Average age in population: 53.02664286929899
Median age in population: 53.11767621524632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 14188969
--- Timings ---
Current time: 1559314793560 milliseconds
Total Time:          97.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.4 seconds, 75.2%
Fitness Testing:     12.7 seconds, 13.0%
Report:              11.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 375 234 7 766 331 9 751 8 572)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (9 375 234 7 766 331 9 751 8 572)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.938
Median total errors in population: 7
Error averages by case: (0.991 0.625 0.766 0.993 0.234 0.669 0.991 0.249 0.992 0.428)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.445
Average program size in population (points): 52.562
Average percent parens in population: 0.230
Minimum age in population: 51.87275161431171
Maximum age in population: 56.64577052072855
Average age in population: 54.6962931872489
Median age in population: 54.74363703935524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 14875660
--- Timings ---
Current time: 1559314796210 milliseconds
Total Time:         100.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.1 seconds, 74.9%
Fitness Testing:     13.1 seconds, 13.1%
Report:              11.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 integer_swap) integer_div in2 tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) integer_gte integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup integer_yank boolean_pop boolean_rot integer_div exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop exec_do*range (integer_yank boolean_pop exec_do*range (integer_yank boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) exec_rot () () ())) ()) ())
Lexicase best errors: [1 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 integer_swap) integer_div in2 tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) integer_gte integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup integer_yank boolean_pop boolean_rot integer_div exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop exec_do*range (integer_yank boolean_pop exec_do*range (integer_yank boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) exec_rot () () ())) ()) ())
Zero cases best errors: [1 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 446 311 311 567 77 438 882 77 929)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (454 446 311 311 567 77 438 882 77 929)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -28} {:close 3, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 integer_swap) tagged_880 in2 integer_swap boolean_rot tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_flush print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_dup_items boolean_invert_first_then_and -28 integer_gt exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [1 0 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 5.508
Median total errors in population: 5
Error averages by case: (0.546 0.554 0.689 0.689 0.433 0.923 0.562 0.118 0.923 0.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.355
Average program size in population (points): 52.642
Average percent parens in population: 0.213
Minimum age in population: 53.17890564957634
Maximum age in population: 57.78284269964206
Average age in population: 56.42640431871953
Median age in population: 56.39132740837522
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 15885888
--- Timings ---
Current time: 1559314799004 milliseconds
Total Time:         103.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.9 seconds, 74.6%
Fitness Testing:     13.7 seconds, 13.3%
Report:              12.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 156 564 293 841 185 181 293 458 131)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (182 156 564 293 841 185 181 293 458 131)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 1, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap tagged_880 integer_swap tagged_875 integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop (boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) exec_rot () () ()) ())
Errors: [1 0 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.716
Median total errors in population: 6
Error averages by case: (0.818 0.844 0.436 0.707 0.159 0.815 0.819 0.707 0.542 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.866
Average program size in population (points): 55.681
Average percent parens in population: 0.229
Minimum age in population: 54.17890564957634
Maximum age in population: 59.53111920996889
Average age in population: 57.83187011521374
Median age in population: 57.87969856999553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 16923352
--- Timings ---
Current time: 1559314801871 milliseconds
Total Time:         106.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.7 seconds, 74.3%
Fitness Testing:     14.3 seconds, 13.5%
Report:              12.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: 75                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: 43                 
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 70                 
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -28                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup integer_yank boolean_pop boolean_rot integer_div exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop exec_stackdepth integer_stackdepth) (exec_rot () () ())) ())
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop boolean_yankdup integer_yank boolean_pop boolean_rot integer_div exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop exec_stackdepth integer_stackdepth) (exec_rot () () ())) ())
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 670 205 674 558 675 214 334 295 885)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (7 670 205 674 558 675 214 334 295 885)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 boolean_shove boolean_not in3 boolean_dup integer_swap boolean_dup boolean_dup exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.483
Median total errors in population: 5
Error averages by case: (0.993 0.33 0.795 0.326 0.442 0.325 0.786 0.666 0.705 0.115)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.479
Average program size in population (points): 49.856
Average percent parens in population: 0.207
Minimum age in population: 55.85912613733672
Maximum age in population: 61.18065797354939
Average age in population: 59.00988129584073
Median age in population: 59.02912191864016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 17772275
--- Timings ---
Current time: 1559314804579 milliseconds
Total Time:         108.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.4 seconds, 74.0%
Fitness Testing:     14.9 seconds, 13.7%
Report:              13.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: 38                 
Correct output: -73                 | Program output: 80                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 28                 
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 38                 
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 83                 
Correct output: -41                 | Program output: 38                 
Correct output: -3                  | Program output: 51                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 59                 
Correct output: -79                 | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap boolean_rot exec_y_when_autoconstructing (tagged_266 integer_swap) integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap boolean_rot exec_y_when_autoconstructing (tagged_266 integer_swap) integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 573 309 840 134 275 153 194 580 580)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (194 573 309 840 134 275 153 194 580 580)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 in3 boolean_dup boolean_invert_first_then_and exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.168
Median total errors in population: 5
Error averages by case: (0.806 0.427 0.691 0.16 0.866 0.725 0.847 0.806 0.42 0.42)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.257
Average program size in population (points): 53.531
Average percent parens in population: 0.210
Minimum age in population: 58.21225633987342
Maximum age in population: 62.51348626602703
Average age in population: 60.82759831302982
Median age in population: 60.90624643123101
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 18550428
--- Timings ---
Current time: 1559314807280 milliseconds
Total Time:         111.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.2 seconds, 73.8%
Fitness Testing:     15.4 seconds, 13.8%
Report:              13.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 87                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 37                 
Correct output: 52                  | Program output: 83                 
Correct output: 40                  | Program output: 81                 
Correct output: 2                   | Program output: 72                 
Correct output: 6                   | Program output: 46                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 93                 
Correct output: 19                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 97                 
Correct output: 40                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 31                 
Correct output: 21                  | Program output: 48                 
Correct output: 7                   | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 93                 
Correct output: 5                   | Program output: 72                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 98                 
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: 38                 
Correct output: -73                 | Program output: 80                 
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 28                 
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: 18                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 5                  
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 39                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 80                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 38                 
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 37                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: 83                 
Correct output: -41                 | Program output: 38                 
Correct output: -3                  | Program output: 51                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: 59                 
Correct output: -79                 | Program output: 4                  
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (boolean_swap in4) (boolean_invert_second_then_and integer_swap) (tagged_880 in2 integer_swap) tagged_875 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (tagged_266 boolean_rot) tagged_875 integer_swap tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (boolean_swap in4) (boolean_invert_second_then_and integer_swap) (tagged_880 in2 integer_swap) tagged_875 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (tagged_266 boolean_rot) tagged_875 integer_swap tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (503 911 828 855 324 864 5 308 7 528)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (503 911 828 855 324 864 5 308 7 528)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap boolean_rot exec_y_when_autoconstructing (tagged_266 integer_swap) integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Errors: [0 0 0 0 1 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 57
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 4.867
Median total errors in population: 4
Error averages by case: (0.497 0.089 0.172 0.145 0.676 0.136 0.995 0.692 0.993 0.472)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.147
Average program size in population (points): 55.946
Average percent parens in population: 0.211
Minimum age in population: 61.07584732577743
Maximum age in population: 63.78959402472356
Average age in population: 62.74706062510875
Median age in population: 62.78959402472356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 19578788
--- Timings ---
Current time: 1559314810164 milliseconds
Total Time:         114.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.9 seconds, 73.5%
Fitness Testing:     16.0 seconds, 14.0%
Report:              14.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: 46                 
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 25                 
Correct output: 52                  | Program output: 75                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 15                 
Correct output: 6                   | Program output: 41                 
Correct output: 7                   | Program output: 34                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 61                 
Correct output: 7                   | Program output: 87                 
Correct output: 16                  | Program output: 38                 
Correct output: 40                  | Program output: 60                 
Correct output: 4                   | Program output: 85                 
Correct output: 17                  | Program output: 83                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 73                 
Correct output: 14                  | Program output: 24                 
Correct output: 23                  | Program output: 87                 
Correct output: 56                  | Program output: 100                
Correct output: 42                  | Program output: 65                 
Correct output: 5                   | Program output: 44                 
Correct output: -85                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: 31                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 20                 
Correct output: -98                 | Program output: 66                 
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -44                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 11                 
Correct output: -82                 | Program output: -8                 
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: 13                 
Correct output: -18                 | Program output: -5                 
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 63                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -12                
Correct output: -92                 | Program output: -34                
Correct output: -68                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -38                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: 99                 
Correct output: -40                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -3                 
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 71                 
Correct output: -78                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -26                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -30                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_add in1 in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_pop (integer_pop in2 exec_swap () (tagged_875 integer_rot) tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap) boolean_rot) exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot exec_pop () exec_flush integer_lt exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_add in1 in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_pop (integer_pop in2 exec_swap () (tagged_875 integer_rot) tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap) boolean_rot) exec_y_when_autoconstructing (tagged_266 integer_swap) tagged_880 integer_swap tagged_875 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot exec_pop () exec_flush integer_lt exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (428 24 185 519 15 351 427 283 484 24)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (428 24 185 519 15 351 427 283 484 24)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_727} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in1 in3 boolean_dup boolean_dup tagged_880 boolean_dup exec_y_when_autoconstructing (boolean_stackdepth print_boolean integer_pop tagged_875 integer_swap) tagged_727 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop exec_do*while (integer_div print_boolean exec_stackdepth exec_rot () () ())) ())
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.26
Median total errors in population: 8
Error averages by case: (0.572 0.976 0.815 0.481 0.985 0.649 0.573 0.717 0.516 0.976)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.47
Average program size in population (points): 52.979
Average percent parens in population: 0.216
Minimum age in population: 62.07584732577743
Maximum age in population: 65.78959402472356
Average age in population: 64.40025313375733
Median age in population: 64.50179564000973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 20406419
--- Timings ---
Current time: 1559314812916 milliseconds
Total Time:         117.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.7 seconds, 73.2%
Fitness Testing:     16.5 seconds, 14.1%
Report:              14.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -42                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -46                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -24                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -69                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_exec_322} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 in2 integer_swap) tagged_875 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (tagged_266 boolean_rot) tag_exec_322 (integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Lexicase best errors: [1 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_exec_322} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 in2 integer_swap) tagged_875 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (tagged_266 boolean_rot) tag_exec_322 (integer_swap) tagged_880 integer_swap tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) (exec_rot () () ()))
Zero cases best errors: [1 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 426 494 334 13 14 335 426 13 343)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (330 426 494 334 13 14 335 426 13 343)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 in2 integer_swap) tagged_875 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (tagged_266 boolean_rot) tagged_875 integer_swap tagged_880 print_boolean tagged_880 boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth) () exec_rot () () ())
Errors: [1 0 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 43
Size: 56
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 7.272
Median total errors in population: 8
Error averages by case: (0.67 0.574 0.506 0.666 0.987 0.986 0.665 0.574 0.987 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.69
Average program size in population (points): 54.32
Average percent parens in population: 0.232
Minimum age in population: 63.58927743626191
Maximum age in population: 67.78959402472356
Average age in population: 65.8047625814056
Median age in population: 65.8087312030591
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 21409813
--- Timings ---
Current time: 1559314815823 milliseconds
Total Time:         119.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.5 seconds, 73.0%
Fitness Testing:     17.2 seconds, 14.3%
Report:              15.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 23                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 67                 
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 11                 
Correct output: 7                   | Program output: 82                 
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 44                 
Correct output: 40                  | Program output: 93                 
Correct output: 4                   | Program output: 40                 
Correct output: 17                  | Program output: 52                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 70                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 93                 
Correct output: 42                  | Program output: 69                 
Correct output: 5                   | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 0                  
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 69                 
Correct output: -35                 | Program output: -2                 
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 37                 
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 56                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 40                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 72                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_flush integer_max exec_y_when_autoconstructing (in4 integer_swap) tagged_880 integer_swap tagged_880 in2 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (boolean_stackdepth integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_stackdepth exec_rot () () ()) ()))
Lexicase best errors: [0 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_flush integer_max exec_y_when_autoconstructing (in4 integer_swap) tagged_880 integer_swap tagged_880 in2 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (boolean_stackdepth integer_pop exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop boolean_rot integer_div print_boolean exec_stackdepth exec_rot () () ()) ()))
Zero cases best errors: [0 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (461 339 886 310 168 310 168 339 541 771)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (461 339 886 310 168 310 168 339 541 771)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 in2 integer_swap) tagged_875 integer_swap tagged_880 boolean_dup exec_y_when_autoconstructing (tagged_266 exec_y_when_autoconstructing (boolean_stackdepth print_boolean integer_pop exec_do*times (print_integer) integer_gt exec_k_when_autoconstructing (exec_eq integer_rot exec_eq integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_gt exec_k_when_autoconstructing (exec_pop () exec_flush integer_lt boolean_pop exec_do*range (integer_yank boolean_pop boolean_rot integer_div integer_pop exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_eq) exec_rot () () ()) ()) ()) ())))
Errors: [0 0 0 1 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 68
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 5.707
Median total errors in population: 5
Error averages by case: (0.539 0.661 0.114 0.69 0.832 0.69 0.832 0.661 0.459 0.229)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.406
Average program size in population (points): 52.539
Average percent parens in population: 0.232
Minimum age in population: 64.72200122619506
Maximum age in population: 68.99397649499838
Average age in population: 67.1238524902155
Median age in population: 67.2178268503684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 22203650
--- Timings ---
Current time: 1559314818523 milliseconds
Total Time:         122.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.3 seconds, 72.8%
Fitness Testing:     17.7 seconds, 14.4%
Report:              15.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 488
Test mean error for best: 0.48800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 86                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 50                 
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 64                 
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) print_integer exec_eq integer_rot boolean_or exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop) (boolean_rot) integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) print_integer exec_eq integer_rot boolean_or exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop) (boolean_rot) integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 378 379 525 633 30 32 379 358 496)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (408 378 379 525 633 30 32 379 358 496)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and integer_swap) (tagged_880 in2 integer_swap) tagged_880 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean exec_dup (integer_rot integer_swap) in2 integer_swap) tagged_875 integer_rot tagged_880 boolean_dup integer_swap tagged_880 integer_min tagged_875 exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.382
Median total errors in population: 6
Error averages by case: (0.592 0.622 0.621 0.475 0.367 0.97 0.968 0.621 0.642 0.504)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.96
Average program size in population (points): 55.369
Average percent parens in population: 0.224
Minimum age in population: 65.72200122619506
Maximum age in population: 70.99397649499838
Average age in population: 68.71347340324083
Median age in population: 68.79683282357337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 23031526
--- Timings ---
Current time: 1559314821284 milliseconds
Total Time:         125.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.0 seconds, 72.6%
Fitness Testing:     18.2 seconds, 14.5%
Report:              16.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (504 894 712 1000 766 1000 1000 818 342 517)
Population mean number of elite cases: 7.55
Count of perfect (error zero) individuals by case: (504 894 712 0 766 0 0 818 342 517)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or exec_while (integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot) integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 0 1 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 5.447
Median total errors in population: 5
Error averages by case: (0.496 0.106 0.288 1.0 0.234 1.0 1.0 0.182 0.658 0.483)
Error minima by case: (0 0 0 1 0 1 1 0 0 0)
Average genome size in population (length): 44.97
Average program size in population (points): 57.592
Average percent parens in population: 0.219
Minimum age in population: 68.14849308552891
Maximum age in population: 71.7681073725258
Average age in population: 70.2422927368758
Median age in population: 70.308767696192
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 23796075
--- Timings ---
Current time: 1559314823875 milliseconds
Total Time:         128.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.8 seconds, 72.5%
Fitness Testing:     18.7 seconds, 14.6%
Report:              16.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 469
Test mean error for best: 0.46900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 63                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: 80                 
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 72                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 47                 
Correct output: 19                  | Program output: 56                 
Correct output: 7                   | Program output: 72                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 100                
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: -24                
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -48                
Correct output: -87                 | Program output: 81                 
Correct output: -81                 | Program output: 60                 
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -47                
Correct output: -91                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: 32                 
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -8                 
Correct output: -45                 | Program output: 61                 
Correct output: -82                 | Program output: -70                
Correct output: -40                 | Program output: 46                 
Correct output: -4                  | Program output: 34                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 59                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: 84                 
Correct output: 29                  | Program output: 78                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -15                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: 57                 
Correct output: -95                 | Program output: -21                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 88                 
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 51                 
Correct output: -78                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -64                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 exec_y_when_autoconstructing (integer_rot) tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap) (boolean_rot) exec_y_when_autoconstructing (tagged_266 exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 exec_y_when_autoconstructing (integer_rot) tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap) (boolean_rot) exec_y_when_autoconstructing (tagged_266 exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (503 823 823 415 834 1000 825 1 536 405)
Population mean number of elite cases: 6.16
Count of perfect (error zero) individuals by case: (503 823 823 415 834 0 825 1 536 405)
Population mean number of perfect (error zero) cases: 5.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_266} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (integer_add in3 in2 integer_swap tagged_875 integer_rot tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_swap) tagged_880 boolean_stackdepth print_boolean integer_pop integer_swap) boolean_rot exec_y_when_autoconstructing (tagged_266 exec_dup (integer_rot integer_swap) in2 integer_swap) tagged_875 integer_rot tagged_880 boolean_dup integer_swap tagged_880 integer_min tagged_875 exec_do*times (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 68
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 4.835
Median total errors in population: 5
Error averages by case: (0.497 0.177 0.177 0.585 0.166 1.0 0.175 0.999 0.464 0.595)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 45.978
Average program size in population (points): 59.655
Average percent parens in population: 0.229
Minimum age in population: 69.2379551067869
Maximum age in population: 73.52199949880723
Average age in population: 72.03798660646012
Median age in population: 72.18351968836838
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 24608926
--- Timings ---
Current time: 1559314826689 milliseconds
Total Time:         130.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.6 seconds, 72.3%
Fitness Testing:     19.3 seconds, 14.7%
Report:              16.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 137 676 754 673 754 12 754 23 22)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (138 137 676 754 673 754 12 754 23 22)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.057
Median total errors in population: 5
Error averages by case: (0.862 0.863 0.324 0.246 0.327 0.246 0.988 0.246 0.977 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.709
Average program size in population (points): 63.016
Average percent parens in population: 0.210
Minimum age in population: 71.56127369838336
Maximum age in population: 75.26574125951969
Average age in population: 73.67533696671767
Median age in population: 73.71782597925117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 25285239
--- Timings ---
Current time: 1559314829268 milliseconds
Total Time:         133.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.4 seconds, 72.2%
Fitness Testing:     19.7 seconds, 14.8%
Report:              17.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: 82                 
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 15                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 46                 
Correct output: 23                  | Program output: 79                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: 16                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -64                
Correct output: -43                 | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -59                
Correct output: -87                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 52                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: 2                  
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: 7                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -63                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 66                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -70                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -64                
Correct output: -46                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 16                 
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: 42                 
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_880 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (882 513 881 510 878 512 281 878 283 882)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (882 513 881 510 878 512 281 878 283 882)
Population mean number of perfect (error zero) cases: 6.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_807} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in4) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (exec_y_when_autoconstructing (print_boolean integer_pop in2 integer_swap) tagged_875 integer_rot) tagged_880 boolean_dup integer_swap) (tagged_807 integer_min) tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or exec_if (integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot) (print_integer) exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing (exec_pop () boolean_xor boolean_pop) (boolean_rot) integer_div exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 70
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 3.5
Median total errors in population: 3
Error averages by case: (0.118 0.487 0.119 0.49 0.122 0.488 0.719 0.122 0.717 0.118)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.982
Average program size in population (points): 56.216
Average percent parens in population: 0.236
Minimum age in population: 73.39995806576194
Maximum age in population: 76.7521918463301
Average age in population: 75.78166372980817
Median age in population: 75.72265981421117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 301
Genome diversity (% unique genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 314
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 25748454
--- Timings ---
Current time: 1559314831792 milliseconds
Total Time:         136.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.2 seconds, 72.2%
Fitness Testing:     20.1 seconds, 14.8%
Report:              17.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 837 8 9 71 844 365 9 630 632)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (473 837 8 9 71 844 365 9 630 632)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.122
Median total errors in population: 5
Error averages by case: (0.527 0.163 0.992 0.991 0.929 0.156 0.635 0.991 0.37 0.368)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.497
Average program size in population (points): 55.572
Average percent parens in population: 0.235
Minimum age in population: 74.39995806576194
Maximum age in population: 78.7300428222409
Average age in population: 77.1477687672389
Median age in population: 77.22265981421117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 26368499
--- Timings ---
Current time: 1559314834410 milliseconds
Total Time:         138.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.1 seconds, 72.2%
Fitness Testing:     20.5 seconds, 14.8%
Report:              17.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 5                  
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -1                 
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -64                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: 27                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: 35                 
Correct output: -3                  | Program output: 2                  
Correct output: -68                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 57
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (649 554 649 452 551 924 516 553 552 544)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (649 554 649 452 551 924 516 553 552 544)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 4.056
Median total errors in population: 4
Error averages by case: (0.351 0.446 0.351 0.548 0.449 0.076 0.484 0.447 0.448 0.456)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.147
Average program size in population (points): 53.554
Average percent parens in population: 0.233
Minimum age in population: 77.91155341220734
Maximum age in population: 80.41155341220734
Average age in population: 79.01305667718186
Median age in population: 79.20587797509504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 26836090
--- Timings ---
Current time: 1559314836845 milliseconds
Total Time:         141.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.8 seconds, 72.2%
Fitness Testing:     20.9 seconds, 14.8%
Report:              18.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 64
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 64
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (758 759 275 721 275 790 724 275 275 791)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (758 759 275 721 275 790 724 275 275 791)
Population mean number of perfect (error zero) cases: 5.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_880} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_880} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_875} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot})
Best program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 52
Size: 64
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 4.357
Median total errors in population: 4
Error averages by case: (0.242 0.241 0.725 0.279 0.725 0.21 0.276 0.725 0.725 0.209)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.69
Average program size in population (points): 56.801
Average percent parens in population: 0.214
Minimum age in population: 78.91155341220734
Maximum age in population: 81.95587797509504
Average age in population: 80.31571216012037
Median age in population: 80.41554025653888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 195
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 215
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 27273000
--- Timings ---
Current time: 1559314839332 milliseconds
Total Time:         143.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.6 seconds, 72.2%
Fitness Testing:     21.2 seconds, 14.8%
Report:              18.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 52
Successful program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 64


Auto-simplifying with starting size: 64
step: 0
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 500
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 1000
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 1500
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 2000
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 2500
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 3000
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 3500
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 4000
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 4500
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 5000
program: (exec_s_when_autoconstructing (integer_lt in1) (boolean_invert_second_then_and in3 boolean_dup boolean_dup exec_y_when_autoconstructing (print_boolean boolean_invert_second_then_and in3 boolean_dup boolean_dup boolean_dup print_boolean integer_pop in4 in2 integer_swap) tagged_875 integer_rot) (tagged_880 boolean_dup integer_swap) tagged_880 integer_min integer_min tagged_875 integer_swap tagged_880 integer_min tagged_875 integer_shove print_integer exec_eq integer_rot boolean_or integer_max integer_min integer_gt exec_k_when_autoconstructing () (exec_pop () boolean_xor) boolean_pop boolean_rot integer_div print_boolean exec_y_when_autoconstructing (exec_dup_items) exec_stackdepth integer_stackdepth exec_rot () () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -60                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 5                   | Program output: 5                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: -73                 | Program output: -73                
Correct output: -1                  | Program output: -1                 
Correct output: 79                  | Program output: 79                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: -56                 | Program output: -56                
Correct output: 40                  | Program output: 40                 
Correct output: 82                  | Program output: 82                 
Correct output: -31                 | Program output: -31                
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 40                  | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: 3                   | Program output: 3                  
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -82                 | Program output: -82                
Correct output: -40                 | Program output: -40                
Correct output: -4                  | Program output: -4                 
Correct output: -18                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: 29                  | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -35                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -40                 | Program output: -40                
Correct output: -44                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -81                 | Program output: -81                
Correct output: -74                 | Program output: -74                
Correct output: 23                  | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -41                 | Program output: -41                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -93                
;;******************************
