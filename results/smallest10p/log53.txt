Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-57 -57 -57 26] -57] [[68 68 68 62] 62] [[-56 -56 -56 46] -56] [[-50 26 26 26] -50] [[67 67 67 -66] -66] [[-18 -18 -47 -18] -47] [[68 -81 -81 -81] -81] [[-82 -60 -60 -60] -82] [[61 61 61 -71] -71] [[24 24 6 24] 6] [(-89 -89 -89 -89) -89] [(-95 -95 -95 -95) -95] [(77 77 77 77) 77] [(56 56 56 56) 56] [(34 34 34 34) 34] [(6 32 6 9) 6] [(90 62 7 39) 7] [(10 19 29 44) 10] [(56 56 100 5) 5] [(6 66 26 28) 6] [(14 90 84 7) 7] [(54 9 11 53) 9] [(43 40 31 24) 24] [(98 65 3 59) 3] [(68 97 94 30) 30] [(53 25 75 13) 13] [(97 16 72 83) 16] [(26 88 83 44) 26] [(11 54 34 26) 11] [(90 92 69 11) 11] [(73 51 0 87) 0] [(90 47 20 72) 20] [(51 18 5 67) 5] [(80 76 61 57) 57] [(19 3 78 0) 0] [(59 35 -57 -29) -57] [(66 -66 -9 14) -66] [(99 -42 -18 -93) -93] [(-85 -82 -6 67) -85] [(-61 -54 44 -16) -61] [(-23 -7 -75 89) -75] [(-34 -21 -68 71) -68] [(92 -99 19 66) -99] [(28 -15 -59 88) -59] [(-51 99 -19 -43) -51] [(29 -33 -95 -15) -95] [(41 94 14 -36) -36] [(-67 -67 96 90) -67] [(-23 19 31 59) -23] [(95 -42 -3 76) -42] [(-89 -25 -80 8) -89] [(68 42 -96 -35) -96] [(82 -81 -84 79) -84] [(97 -20 72 -64) -64] [(-81 85 58 -49) -81] [(15 -67 1 72) -67] [(-19 63 16 46) -19] [(17 4 95 -11) -11] [(-31 -48 62 47) -48] [(38 -66 -39 -62) -66] [(-99 -68 -30 -3) -99] [(19 76 21 39) 19] [(62 92 -65 -35) -65] [(1 15 77 91) 1] [(-6 74 -88 -96) -96] [(-47 -3 71 -40) -47] [(69 -65 -31 -15) -65] [(88 41 83 -41) -41] [(23 -85 52 -19) -85] [(95 36 -36 67) -36] [(98 -91 86 34) -91] [(29 85 53 -19) -19] [(56 -52 36 84) -52] [(64 -96 10 -73) -96] [(-80 -68 31 39) -80] [(11 69 -52 -68) -68] [(-91 83 5 63) -91] [(-73 46 -35 -44) -73] [(-4 -12 97 62) -12] [(-64 29 85 -15) -64] [(4 -49 -57 30) -57] [(84 -87 14 -79) -87] [(-77 64 71 -57) -77] [(33 32 48 -9) -9] [(91 -44 73 -46) -46] [(53 -12 20 -82) -82] [(22 -77 81 -53) -77] [(65 17 46 -7) -7] [(-100 -16 -90 -3) -100] [(32 -93 -72 33) -93] [(-85 57 -57 70) -85] [(66 11 -64 -66) -66] [(95 72 -45 93) -45] [(-74 28 -10 58) -74] [(-23 -22 62 -84) -84])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-57 -57 -57 26] -57]
Train Case:   6 | Input/Output: [[68 68 68 62] 62]
Train Case:   7 | Input/Output: [[-56 -56 -56 46] -56]
Train Case:   8 | Input/Output: [[-50 26 26 26] -50]
Train Case:   9 | Input/Output: [[67 67 67 -66] -66]
Train Case:  10 | Input/Output: [[-18 -18 -47 -18] -47]
Train Case:  11 | Input/Output: [[68 -81 -81 -81] -81]
Train Case:  12 | Input/Output: [[-82 -60 -60 -60] -82]
Train Case:  13 | Input/Output: [[61 61 61 -71] -71]
Train Case:  14 | Input/Output: [[24 24 6 24] 6]
Train Case:  15 | Input/Output: [(-89 -89 -89 -89) -89]
Train Case:  16 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  17 | Input/Output: [(77 77 77 77) 77]
Train Case:  18 | Input/Output: [(56 56 56 56) 56]
Train Case:  19 | Input/Output: [(34 34 34 34) 34]
Train Case:  20 | Input/Output: [(6 32 6 9) 6]
Train Case:  21 | Input/Output: [(90 62 7 39) 7]
Train Case:  22 | Input/Output: [(10 19 29 44) 10]
Train Case:  23 | Input/Output: [(56 56 100 5) 5]
Train Case:  24 | Input/Output: [(6 66 26 28) 6]
Train Case:  25 | Input/Output: [(14 90 84 7) 7]
Train Case:  26 | Input/Output: [(54 9 11 53) 9]
Train Case:  27 | Input/Output: [(43 40 31 24) 24]
Train Case:  28 | Input/Output: [(98 65 3 59) 3]
Train Case:  29 | Input/Output: [(68 97 94 30) 30]
Train Case:  30 | Input/Output: [(53 25 75 13) 13]
Train Case:  31 | Input/Output: [(97 16 72 83) 16]
Train Case:  32 | Input/Output: [(26 88 83 44) 26]
Train Case:  33 | Input/Output: [(11 54 34 26) 11]
Train Case:  34 | Input/Output: [(90 92 69 11) 11]
Train Case:  35 | Input/Output: [(73 51 0 87) 0]
Train Case:  36 | Input/Output: [(90 47 20 72) 20]
Train Case:  37 | Input/Output: [(51 18 5 67) 5]
Train Case:  38 | Input/Output: [(80 76 61 57) 57]
Train Case:  39 | Input/Output: [(19 3 78 0) 0]
Train Case:  40 | Input/Output: [(59 35 -57 -29) -57]
Train Case:  41 | Input/Output: [(66 -66 -9 14) -66]
Train Case:  42 | Input/Output: [(99 -42 -18 -93) -93]
Train Case:  43 | Input/Output: [(-85 -82 -6 67) -85]
Train Case:  44 | Input/Output: [(-61 -54 44 -16) -61]
Train Case:  45 | Input/Output: [(-23 -7 -75 89) -75]
Train Case:  46 | Input/Output: [(-34 -21 -68 71) -68]
Train Case:  47 | Input/Output: [(92 -99 19 66) -99]
Train Case:  48 | Input/Output: [(28 -15 -59 88) -59]
Train Case:  49 | Input/Output: [(-51 99 -19 -43) -51]
Train Case:  50 | Input/Output: [(29 -33 -95 -15) -95]
Train Case:  51 | Input/Output: [(41 94 14 -36) -36]
Train Case:  52 | Input/Output: [(-67 -67 96 90) -67]
Train Case:  53 | Input/Output: [(-23 19 31 59) -23]
Train Case:  54 | Input/Output: [(95 -42 -3 76) -42]
Train Case:  55 | Input/Output: [(-89 -25 -80 8) -89]
Train Case:  56 | Input/Output: [(68 42 -96 -35) -96]
Train Case:  57 | Input/Output: [(82 -81 -84 79) -84]
Train Case:  58 | Input/Output: [(97 -20 72 -64) -64]
Train Case:  59 | Input/Output: [(-81 85 58 -49) -81]
Train Case:  60 | Input/Output: [(15 -67 1 72) -67]
Train Case:  61 | Input/Output: [(-19 63 16 46) -19]
Train Case:  62 | Input/Output: [(17 4 95 -11) -11]
Train Case:  63 | Input/Output: [(-31 -48 62 47) -48]
Train Case:  64 | Input/Output: [(38 -66 -39 -62) -66]
Train Case:  65 | Input/Output: [(-99 -68 -30 -3) -99]
Train Case:  66 | Input/Output: [(19 76 21 39) 19]
Train Case:  67 | Input/Output: [(62 92 -65 -35) -65]
Train Case:  68 | Input/Output: [(1 15 77 91) 1]
Train Case:  69 | Input/Output: [(-6 74 -88 -96) -96]
Train Case:  70 | Input/Output: [(-47 -3 71 -40) -47]
Train Case:  71 | Input/Output: [(69 -65 -31 -15) -65]
Train Case:  72 | Input/Output: [(88 41 83 -41) -41]
Train Case:  73 | Input/Output: [(23 -85 52 -19) -85]
Train Case:  74 | Input/Output: [(95 36 -36 67) -36]
Train Case:  75 | Input/Output: [(98 -91 86 34) -91]
Train Case:  76 | Input/Output: [(29 85 53 -19) -19]
Train Case:  77 | Input/Output: [(56 -52 36 84) -52]
Train Case:  78 | Input/Output: [(64 -96 10 -73) -96]
Train Case:  79 | Input/Output: [(-80 -68 31 39) -80]
Train Case:  80 | Input/Output: [(11 69 -52 -68) -68]
Train Case:  81 | Input/Output: [(-91 83 5 63) -91]
Train Case:  82 | Input/Output: [(-73 46 -35 -44) -73]
Train Case:  83 | Input/Output: [(-4 -12 97 62) -12]
Train Case:  84 | Input/Output: [(-64 29 85 -15) -64]
Train Case:  85 | Input/Output: [(4 -49 -57 30) -57]
Train Case:  86 | Input/Output: [(84 -87 14 -79) -87]
Train Case:  87 | Input/Output: [(-77 64 71 -57) -77]
Train Case:  88 | Input/Output: [(33 32 48 -9) -9]
Train Case:  89 | Input/Output: [(91 -44 73 -46) -46]
Train Case:  90 | Input/Output: [(53 -12 20 -82) -82]
Train Case:  91 | Input/Output: [(22 -77 81 -53) -77]
Train Case:  92 | Input/Output: [(65 17 46 -7) -7]
Train Case:  93 | Input/Output: [(-100 -16 -90 -3) -100]
Train Case:  94 | Input/Output: [(32 -93 -72 33) -93]
Train Case:  95 | Input/Output: [(-85 57 -57 70) -85]
Train Case:  96 | Input/Output: [(66 11 -64 -66) -66]
Train Case:  97 | Input/Output: [(95 72 -45 93) -45]
Train Case:  98 | Input/Output: [(-74 28 -10 58) -74]
Train Case:  99 | Input/Output: [(-23 -22 62 -84) -84]
Test Case:   0 | Input/Output: [[-100 -100 -100 -31] -100]
Test Case:   1 | Input/Output: [[27 36 27 27] 27]
Test Case:   2 | Input/Output: [[44 -1 -1 -1] -1]
Test Case:   3 | Input/Output: [[72 72 72 28] 28]
Test Case:   4 | Input/Output: [[-11 1 -11 -11] -11]
Test Case:   5 | Input/Output: [[-90 -90 -68 -90] -90]
Test Case:   6 | Input/Output: [[-70 -70 -70 -96] -96]
Test Case:   7 | Input/Output: [[99 99 -36 99] -36]
Test Case:   8 | Input/Output: [[7 7 50 7] 7]
Test Case:   9 | Input/Output: [[-14 -14 -45 -14] -45]
Test Case:  10 | Input/Output: [[11 15 11 11] 11]
Test Case:  11 | Input/Output: [[-24 -24 -24 -79] -79]
Test Case:  12 | Input/Output: [[79 79 -13 79] -13]
Test Case:  13 | Input/Output: [[-58 77 77 77] -58]
Test Case:  14 | Input/Output: [[28 80 80 80] 28]
Test Case:  15 | Input/Output: [[73 73 -70 73] -70]
Test Case:  16 | Input/Output: [[-49 -9 -9 -9] -49]
Test Case:  17 | Input/Output: [[22 59 59 59] 22]
Test Case:  18 | Input/Output: [[-42 -42 -42 17] -42]
Test Case:  19 | Input/Output: [[-31 -50 -50 -50] -50]
Test Case:  20 | Input/Output: [[3 3 3 10] 3]
Test Case:  21 | Input/Output: [[-41 70 70 70] -41]
Test Case:  22 | Input/Output: [[-40 -40 -40 -70] -70]
Test Case:  23 | Input/Output: [[-96 -73 -96 -96] -96]
Test Case:  24 | Input/Output: [[55 44 44 44] 44]
Test Case:  25 | Input/Output: [[-8 75 -8 -8] -8]
Test Case:  26 | Input/Output: [[1 -85 1 1] -85]
Test Case:  27 | Input/Output: [[-90 -90 -90 -22] -90]
Test Case:  28 | Input/Output: [[76 88 76 76] 76]
Test Case:  29 | Input/Output: [[-54 63 -54 -54] -54]
Test Case:  30 | Input/Output: [[69 84 69 69] 69]
Test Case:  31 | Input/Output: [[-82 -82 -82 -51] -82]
Test Case:  32 | Input/Output: [[37 37 37 37] 37]
Test Case:  33 | Input/Output: [[-17 88 88 88] -17]
Test Case:  34 | Input/Output: [[11 -41 -41 -41] -41]
Test Case:  35 | Input/Output: [[-25 -25 -90 -25] -90]
Test Case:  36 | Input/Output: [[-67 -5 -67 -67] -67]
Test Case:  37 | Input/Output: [[29 10 29 29] 10]
Test Case:  38 | Input/Output: [[-68 15 15 15] -68]
Test Case:  39 | Input/Output: [[-56 99 -56 -56] -56]
Test Case:  40 | Input/Output: [[-48 -48 -48 -1] -48]
Test Case:  41 | Input/Output: [[88 88 88 -30] -30]
Test Case:  42 | Input/Output: [[17 17 75 17] 17]
Test Case:  43 | Input/Output: [[-63 43 -63 -63] -63]
Test Case:  44 | Input/Output: [[37 78 78 78] 37]
Test Case:  45 | Input/Output: [[-66 -66 81 -66] -66]
Test Case:  46 | Input/Output: [[-53 85 85 85] -53]
Test Case:  47 | Input/Output: [[-93 -93 -93 87] -93]
Test Case:  48 | Input/Output: [[-4 -4 -4 82] -4]
Test Case:  49 | Input/Output: [[-91 78 78 78] -91]
Test Case:  50 | Input/Output: [[54 54 54 13] 13]
Test Case:  51 | Input/Output: [[-2 35 -2 -2] -2]
Test Case:  52 | Input/Output: [[35 -69 -69 -69] -69]
Test Case:  53 | Input/Output: [[39 88 88 88] 39]
Test Case:  54 | Input/Output: [[-45 -45 -45 -50] -50]
Test Case:  55 | Input/Output: [[87 87 14 87] 14]
Test Case:  56 | Input/Output: [[-42 -42 -42 -91] -91]
Test Case:  57 | Input/Output: [[-94 -94 -15 -94] -94]
Test Case:  58 | Input/Output: [[-23 -23 30 -23] -23]
Test Case:  59 | Input/Output: [[64 64 64 -39] -39]
Test Case:  60 | Input/Output: [[-79 -79 -79 34] -79]
Test Case:  61 | Input/Output: [[-99 -28 -28 -28] -99]
Test Case:  62 | Input/Output: [[85 -96 85 85] -96]
Test Case:  63 | Input/Output: [[-45 -45 55 -45] -45]
Test Case:  64 | Input/Output: [[34 34 34 84] 34]
Test Case:  65 | Input/Output: [[6 -33 6 6] -33]
Test Case:  66 | Input/Output: [[-67 41 -67 -67] -67]
Test Case:  67 | Input/Output: [[21 -85 21 21] -85]
Test Case:  68 | Input/Output: [[99 99 36 99] 36]
Test Case:  69 | Input/Output: [[-64 -64 -100 -64] -100]
Test Case:  70 | Input/Output: [[21 21 41 21] 21]
Test Case:  71 | Input/Output: [[4 4 4 -20] -20]
Test Case:  72 | Input/Output: [[80 80 50 80] 50]
Test Case:  73 | Input/Output: [[-42 -42 -80 -42] -80]
Test Case:  74 | Input/Output: [[-10 32 -10 -10] -10]
Test Case:  75 | Input/Output: [[96 -37 -37 -37] -37]
Test Case:  76 | Input/Output: [[72 72 -30 72] -30]
Test Case:  77 | Input/Output: [[-85 -29 -85 -85] -85]
Test Case:  78 | Input/Output: [[-12 -12 -86 -12] -86]
Test Case:  79 | Input/Output: [[-20 -20 -39 -20] -39]
Test Case:  80 | Input/Output: [[22 22 22 -33] -33]
Test Case:  81 | Input/Output: [[-16 -73 -73 -73] -73]
Test Case:  82 | Input/Output: [[69 69 69 12] 12]
Test Case:  83 | Input/Output: [[1 1 1 72] 1]
Test Case:  84 | Input/Output: [[61 -54 -54 -54] -54]
Test Case:  85 | Input/Output: [[18 -4 -4 -4] -4]
Test Case:  86 | Input/Output: [[50 50 50 -91] -91]
Test Case:  87 | Input/Output: [[8 8 8 -78] -78]
Test Case:  88 | Input/Output: [[-67 -67 -67 85] -67]
Test Case:  89 | Input/Output: [[98 73 98 98] 73]
Test Case:  90 | Input/Output: [[-40 -31 -31 -31] -40]
Test Case:  91 | Input/Output: [[-48 -48 -48 -57] -57]
Test Case:  92 | Input/Output: [[-33 -24 -33 -33] -33]
Test Case:  93 | Input/Output: [[29 -17 29 29] -17]
Test Case:  94 | Input/Output: [[-25 -25 -25 92] -25]
Test Case:  95 | Input/Output: [[-50 3 -50 -50] -50]
Test Case:  96 | Input/Output: [[-70 -30 -30 -30] -70]
Test Case:  97 | Input/Output: [[-77 -16 -77 -77] -77]
Test Case:  98 | Input/Output: [[-37 -13 -13 -13] -37]
Test Case:  99 | Input/Output: [[-1 29 29 29] -1]
Test Case: 100 | Input/Output: [(76 76 76 76) 76]
Test Case: 101 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 102 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 103 | Input/Output: [(90 90 90 90) 90]
Test Case: 104 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 105 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 106 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 107 | Input/Output: [(63 63 63 63) 63]
Test Case: 108 | Input/Output: [(100 100 100 100) 100]
Test Case: 109 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 110 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 111 | Input/Output: [(99 99 99 99) 99]
Test Case: 112 | Input/Output: [(38 38 38 38) 38]
Test Case: 113 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 114 | Input/Output: [(94 94 94 94) 94]
Test Case: 115 | Input/Output: [(6 6 6 6) 6]
Test Case: 116 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 117 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 118 | Input/Output: [(81 81 81 81) 81]
Test Case: 119 | Input/Output: [(15 15 15 15) 15]
Test Case: 120 | Input/Output: [(0 0 0 0) 0]
Test Case: 121 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 122 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 123 | Input/Output: [(59 59 59 59) 59]
Test Case: 124 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 125 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 126 | Input/Output: [(37 37 37 37) 37]
Test Case: 127 | Input/Output: [(7 7 7 7) 7]
Test Case: 128 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 129 | Input/Output: [(74 74 74 74) 74]
Test Case: 130 | Input/Output: [(64 64 64 64) 64]
Test Case: 131 | Input/Output: [(25 25 25 25) 25]
Test Case: 132 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 133 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 134 | Input/Output: [(8 8 8 8) 8]
Test Case: 135 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 136 | Input/Output: [(0 0 0 0) 0]
Test Case: 137 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 138 | Input/Output: [(35 35 35 35) 35]
Test Case: 139 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 140 | Input/Output: [(73 73 73 73) 73]
Test Case: 141 | Input/Output: [(12 12 12 12) 12]
Test Case: 142 | Input/Output: [(34 34 34 34) 34]
Test Case: 143 | Input/Output: [(46 46 46 46) 46]
Test Case: 144 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 145 | Input/Output: [(32 32 32 32) 32]
Test Case: 146 | Input/Output: [(70 70 70 70) 70]
Test Case: 147 | Input/Output: [(41 41 41 41) 41]
Test Case: 148 | Input/Output: [(93 93 93 93) 93]
Test Case: 149 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 150 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 151 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 152 | Input/Output: [(70 70 70 70) 70]
Test Case: 153 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 154 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 155 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 156 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 157 | Input/Output: [(4 4 4 4) 4]
Test Case: 158 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 159 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 160 | Input/Output: [(56 56 56 56) 56]
Test Case: 161 | Input/Output: [(57 57 57 57) 57]
Test Case: 162 | Input/Output: [(5 5 5 5) 5]
Test Case: 163 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 164 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 165 | Input/Output: [(51 51 51 51) 51]
Test Case: 166 | Input/Output: [(8 8 8 8) 8]
Test Case: 167 | Input/Output: [(77 77 77 77) 77]
Test Case: 168 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 169 | Input/Output: [(25 25 25 25) 25]
Test Case: 170 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 171 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 172 | Input/Output: [(24 24 24 24) 24]
Test Case: 173 | Input/Output: [(96 96 96 96) 96]
Test Case: 174 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 175 | Input/Output: [(84 84 84 84) 84]
Test Case: 176 | Input/Output: [(16 16 16 16) 16]
Test Case: 177 | Input/Output: [(18 18 18 18) 18]
Test Case: 178 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 179 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 180 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 181 | Input/Output: [(77 77 77 77) 77]
Test Case: 182 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 183 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 184 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 185 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 186 | Input/Output: [(32 32 32 32) 32]
Test Case: 187 | Input/Output: [(86 86 86 86) 86]
Test Case: 188 | Input/Output: [(0 0 0 0) 0]
Test Case: 189 | Input/Output: [(65 65 65 65) 65]
Test Case: 190 | Input/Output: [(76 76 76 76) 76]
Test Case: 191 | Input/Output: [(38 38 38 38) 38]
Test Case: 192 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 193 | Input/Output: [(58 58 58 58) 58]
Test Case: 194 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 195 | Input/Output: [(63 63 63 63) 63]
Test Case: 196 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 197 | Input/Output: [(5 5 5 5) 5]
Test Case: 198 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 199 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 200 | Input/Output: [(77 46 1 57) 1]
Test Case: 201 | Input/Output: [(15 5 23 4) 4]
Test Case: 202 | Input/Output: [(63 25 34 54) 25]
Test Case: 203 | Input/Output: [(27 63 97 91) 27]
Test Case: 204 | Input/Output: [(31 9 12 9) 9]
Test Case: 205 | Input/Output: [(46 82 96 78) 46]
Test Case: 206 | Input/Output: [(22 39 50 3) 3]
Test Case: 207 | Input/Output: [(38 44 92 99) 38]
Test Case: 208 | Input/Output: [(89 32 83 17) 17]
Test Case: 209 | Input/Output: [(15 17 20 20) 15]
Test Case: 210 | Input/Output: [(72 92 97 33) 33]
Test Case: 211 | Input/Output: [(86 0 71 50) 0]
Test Case: 212 | Input/Output: [(12 16 92 58) 12]
Test Case: 213 | Input/Output: [(56 32 41 75) 32]
Test Case: 214 | Input/Output: [(45 26 44 81) 26]
Test Case: 215 | Input/Output: [(14 3 55 36) 3]
Test Case: 216 | Input/Output: [(5 42 66 36) 5]
Test Case: 217 | Input/Output: [(68 5 40 38) 5]
Test Case: 218 | Input/Output: [(97 56 92 52) 52]
Test Case: 219 | Input/Output: [(37 37 25 40) 25]
Test Case: 220 | Input/Output: [(67 68 58 41) 41]
Test Case: 221 | Input/Output: [(16 20 75 34) 16]
Test Case: 222 | Input/Output: [(73 8 43 70) 8]
Test Case: 223 | Input/Output: [(95 15 27 100) 15]
Test Case: 224 | Input/Output: [(89 25 22 93) 22]
Test Case: 225 | Input/Output: [(80 18 13 33) 13]
Test Case: 226 | Input/Output: [(46 31 87 33) 31]
Test Case: 227 | Input/Output: [(98 84 3 45) 3]
Test Case: 228 | Input/Output: [(81 61 80 70) 61]
Test Case: 229 | Input/Output: [(89 96 16 73) 16]
Test Case: 230 | Input/Output: [(11 24 36 35) 11]
Test Case: 231 | Input/Output: [(77 88 71 45) 45]
Test Case: 232 | Input/Output: [(79 78 36 24) 24]
Test Case: 233 | Input/Output: [(36 96 68 6) 6]
Test Case: 234 | Input/Output: [(64 13 64 7) 7]
Test Case: 235 | Input/Output: [(5 87 21 70) 5]
Test Case: 236 | Input/Output: [(64 65 56 49) 49]
Test Case: 237 | Input/Output: [(70 76 87 2) 2]
Test Case: 238 | Input/Output: [(46 94 55 78) 46]
Test Case: 239 | Input/Output: [(13 38 10 34) 10]
Test Case: 240 | Input/Output: [(85 9 53 86) 9]
Test Case: 241 | Input/Output: [(66 55 74 80) 55]
Test Case: 242 | Input/Output: [(60 52 43 84) 43]
Test Case: 243 | Input/Output: [(26 83 71 38) 26]
Test Case: 244 | Input/Output: [(45 83 58 72) 45]
Test Case: 245 | Input/Output: [(34 50 47 72) 34]
Test Case: 246 | Input/Output: [(76 60 71 76) 60]
Test Case: 247 | Input/Output: [(34 99 18 96) 18]
Test Case: 248 | Input/Output: [(46 97 70 28) 28]
Test Case: 249 | Input/Output: [(26 37 33 15) 15]
Test Case: 250 | Input/Output: [(76 17 33 72) 17]
Test Case: 251 | Input/Output: [(98 71 84 83) 71]
Test Case: 252 | Input/Output: [(79 41 68 23) 23]
Test Case: 253 | Input/Output: [(42 64 84 32) 32]
Test Case: 254 | Input/Output: [(58 61 50 12) 12]
Test Case: 255 | Input/Output: [(93 74 74 13) 13]
Test Case: 256 | Input/Output: [(50 55 71 14) 14]
Test Case: 257 | Input/Output: [(38 33 98 61) 33]
Test Case: 258 | Input/Output: [(54 58 46 37) 37]
Test Case: 259 | Input/Output: [(94 48 11 62) 11]
Test Case: 260 | Input/Output: [(14 71 12 96) 12]
Test Case: 261 | Input/Output: [(77 76 41 70) 41]
Test Case: 262 | Input/Output: [(95 56 51 85) 51]
Test Case: 263 | Input/Output: [(70 56 89 31) 31]
Test Case: 264 | Input/Output: [(8 24 36 21) 8]
Test Case: 265 | Input/Output: [(54 16 8 64) 8]
Test Case: 266 | Input/Output: [(6 85 53 91) 6]
Test Case: 267 | Input/Output: [(58 54 8 24) 8]
Test Case: 268 | Input/Output: [(14 76 15 47) 14]
Test Case: 269 | Input/Output: [(17 60 70 54) 17]
Test Case: 270 | Input/Output: [(18 37 77 90) 18]
Test Case: 271 | Input/Output: [(41 33 75 3) 3]
Test Case: 272 | Input/Output: [(7 78 34 100) 7]
Test Case: 273 | Input/Output: [(34 90 85 15) 15]
Test Case: 274 | Input/Output: [(36 59 95 77) 36]
Test Case: 275 | Input/Output: [(59 84 33 9) 9]
Test Case: 276 | Input/Output: [(50 74 86 28) 28]
Test Case: 277 | Input/Output: [(97 35 7 36) 7]
Test Case: 278 | Input/Output: [(11 28 4 26) 4]
Test Case: 279 | Input/Output: [(49 4 63 6) 4]
Test Case: 280 | Input/Output: [(79 32 100 47) 32]
Test Case: 281 | Input/Output: [(95 26 62 61) 26]
Test Case: 282 | Input/Output: [(79 33 89 60) 33]
Test Case: 283 | Input/Output: [(82 60 87 45) 45]
Test Case: 284 | Input/Output: [(14 62 39 41) 14]
Test Case: 285 | Input/Output: [(58 52 81 73) 52]
Test Case: 286 | Input/Output: [(34 28 90 84) 28]
Test Case: 287 | Input/Output: [(87 20 6 97) 6]
Test Case: 288 | Input/Output: [(90 87 12 72) 12]
Test Case: 289 | Input/Output: [(48 99 82 32) 32]
Test Case: 290 | Input/Output: [(47 5 21 52) 5]
Test Case: 291 | Input/Output: [(3 91 43 72) 3]
Test Case: 292 | Input/Output: [(1 32 97 39) 1]
Test Case: 293 | Input/Output: [(92 28 33 65) 28]
Test Case: 294 | Input/Output: [(76 86 6 59) 6]
Test Case: 295 | Input/Output: [(5 64 95 37) 5]
Test Case: 296 | Input/Output: [(93 60 90 11) 11]
Test Case: 297 | Input/Output: [(31 91 71 42) 31]
Test Case: 298 | Input/Output: [(56 38 55 19) 19]
Test Case: 299 | Input/Output: [(47 25 84 52) 25]
Test Case: 300 | Input/Output: [(96 33 29 94) 29]
Test Case: 301 | Input/Output: [(94 76 6 12) 6]
Test Case: 302 | Input/Output: [(55 80 79 56) 55]
Test Case: 303 | Input/Output: [(79 3 85 12) 3]
Test Case: 304 | Input/Output: [(80 15 44 75) 15]
Test Case: 305 | Input/Output: [(6 42 30 34) 6]
Test Case: 306 | Input/Output: [(44 4 0 59) 0]
Test Case: 307 | Input/Output: [(50 58 60 64) 50]
Test Case: 308 | Input/Output: [(88 22 72 33) 22]
Test Case: 309 | Input/Output: [(3 95 48 12) 3]
Test Case: 310 | Input/Output: [(78 34 15 47) 15]
Test Case: 311 | Input/Output: [(43 57 74 12) 12]
Test Case: 312 | Input/Output: [(19 17 40 59) 17]
Test Case: 313 | Input/Output: [(89 87 47 67) 47]
Test Case: 314 | Input/Output: [(56 73 55 66) 55]
Test Case: 315 | Input/Output: [(45 79 41 1) 1]
Test Case: 316 | Input/Output: [(57 60 39 0) 0]
Test Case: 317 | Input/Output: [(97 35 96 76) 35]
Test Case: 318 | Input/Output: [(35 64 65 22) 22]
Test Case: 319 | Input/Output: [(43 3 93 5) 3]
Test Case: 320 | Input/Output: [(14 61 80 12) 12]
Test Case: 321 | Input/Output: [(3 72 86 78) 3]
Test Case: 322 | Input/Output: [(43 30 5 29) 5]
Test Case: 323 | Input/Output: [(44 88 89 53) 44]
Test Case: 324 | Input/Output: [(91 22 77 86) 22]
Test Case: 325 | Input/Output: [(61 82 40 57) 40]
Test Case: 326 | Input/Output: [(94 38 88 37) 37]
Test Case: 327 | Input/Output: [(71 2 94 89) 2]
Test Case: 328 | Input/Output: [(7 72 76 89) 7]
Test Case: 329 | Input/Output: [(88 62 74 35) 35]
Test Case: 330 | Input/Output: [(76 23 87 14) 14]
Test Case: 331 | Input/Output: [(83 61 85 97) 61]
Test Case: 332 | Input/Output: [(78 70 22 49) 22]
Test Case: 333 | Input/Output: [(83 28 26 34) 26]
Test Case: 334 | Input/Output: [(29 26 35 86) 26]
Test Case: 335 | Input/Output: [(76 29 96 42) 29]
Test Case: 336 | Input/Output: [(9 2 20 6) 2]
Test Case: 337 | Input/Output: [(60 4 23 93) 4]
Test Case: 338 | Input/Output: [(29 80 58 0) 0]
Test Case: 339 | Input/Output: [(56 47 27 43) 27]
Test Case: 340 | Input/Output: [(86 97 98 16) 16]
Test Case: 341 | Input/Output: [(2 86 37 5) 2]
Test Case: 342 | Input/Output: [(8 2 53 82) 2]
Test Case: 343 | Input/Output: [(79 31 90 23) 23]
Test Case: 344 | Input/Output: [(77 99 18 93) 18]
Test Case: 345 | Input/Output: [(89 66 47 19) 19]
Test Case: 346 | Input/Output: [(26 54 61 96) 26]
Test Case: 347 | Input/Output: [(59 53 45 83) 45]
Test Case: 348 | Input/Output: [(83 45 61 12) 12]
Test Case: 349 | Input/Output: [(7 4 62 33) 4]
Test Case: 350 | Input/Output: [(29 1 66 51) 1]
Test Case: 351 | Input/Output: [(63 56 62 85) 56]
Test Case: 352 | Input/Output: [(39 33 19 99) 19]
Test Case: 353 | Input/Output: [(37 39 0 43) 0]
Test Case: 354 | Input/Output: [(76 74 33 20) 20]
Test Case: 355 | Input/Output: [(92 74 71 69) 69]
Test Case: 356 | Input/Output: [(69 17 52 16) 16]
Test Case: 357 | Input/Output: [(91 100 41 92) 41]
Test Case: 358 | Input/Output: [(30 37 19 16) 16]
Test Case: 359 | Input/Output: [(63 38 39 63) 38]
Test Case: 360 | Input/Output: [(19 80 25 78) 19]
Test Case: 361 | Input/Output: [(68 47 96 36) 36]
Test Case: 362 | Input/Output: [(9 19 42 76) 9]
Test Case: 363 | Input/Output: [(37 0 3 14) 0]
Test Case: 364 | Input/Output: [(4 54 27 82) 4]
Test Case: 365 | Input/Output: [(95 96 45 24) 24]
Test Case: 366 | Input/Output: [(9 66 62 61) 9]
Test Case: 367 | Input/Output: [(66 23 42 50) 23]
Test Case: 368 | Input/Output: [(80 6 14 29) 6]
Test Case: 369 | Input/Output: [(71 3 84 18) 3]
Test Case: 370 | Input/Output: [(16 47 76 83) 16]
Test Case: 371 | Input/Output: [(18 27 18 100) 18]
Test Case: 372 | Input/Output: [(8 81 93 49) 8]
Test Case: 373 | Input/Output: [(88 71 26 78) 26]
Test Case: 374 | Input/Output: [(78 41 24 67) 24]
Test Case: 375 | Input/Output: [(46 89 24 19) 19]
Test Case: 376 | Input/Output: [(4 23 26 44) 4]
Test Case: 377 | Input/Output: [(81 96 28 63) 28]
Test Case: 378 | Input/Output: [(78 92 91 56) 56]
Test Case: 379 | Input/Output: [(36 90 100 70) 36]
Test Case: 380 | Input/Output: [(43 40 98 64) 40]
Test Case: 381 | Input/Output: [(11 20 39 79) 11]
Test Case: 382 | Input/Output: [(21 28 11 37) 11]
Test Case: 383 | Input/Output: [(97 22 56 33) 22]
Test Case: 384 | Input/Output: [(27 47 90 100) 27]
Test Case: 385 | Input/Output: [(43 84 88 37) 37]
Test Case: 386 | Input/Output: [(86 31 51 23) 23]
Test Case: 387 | Input/Output: [(19 67 79 46) 19]
Test Case: 388 | Input/Output: [(85 34 79 96) 34]
Test Case: 389 | Input/Output: [(13 40 71 25) 13]
Test Case: 390 | Input/Output: [(30 63 65 43) 30]
Test Case: 391 | Input/Output: [(51 27 53 93) 27]
Test Case: 392 | Input/Output: [(89 71 3 2) 2]
Test Case: 393 | Input/Output: [(44 58 92 94) 44]
Test Case: 394 | Input/Output: [(4 30 5 38) 4]
Test Case: 395 | Input/Output: [(90 34 22 29) 22]
Test Case: 396 | Input/Output: [(19 30 90 94) 19]
Test Case: 397 | Input/Output: [(61 15 51 24) 15]
Test Case: 398 | Input/Output: [(33 50 86 47) 33]
Test Case: 399 | Input/Output: [(19 37 22 24) 19]
Test Case: 400 | Input/Output: [(23 83 -49 -48) -49]
Test Case: 401 | Input/Output: [(37 86 55 -75) -75]
Test Case: 402 | Input/Output: [(79 -58 90 -24) -58]
Test Case: 403 | Input/Output: [(-35 -39 -79 -46) -79]
Test Case: 404 | Input/Output: [(48 80 51 -25) -25]
Test Case: 405 | Input/Output: [(37 65 100 47) 37]
Test Case: 406 | Input/Output: [(91 38 -29 6) -29]
Test Case: 407 | Input/Output: [(57 -57 -78 60) -78]
Test Case: 408 | Input/Output: [(75 -98 37 52) -98]
Test Case: 409 | Input/Output: [(53 74 -6 -89) -89]
Test Case: 410 | Input/Output: [(34 -72 -98 -68) -98]
Test Case: 411 | Input/Output: [(-1 86 -19 -2) -19]
Test Case: 412 | Input/Output: [(14 24 -31 50) -31]
Test Case: 413 | Input/Output: [(-15 38 18 -68) -68]
Test Case: 414 | Input/Output: [(73 68 -74 -92) -92]
Test Case: 415 | Input/Output: [(24 -3 29 13) -3]
Test Case: 416 | Input/Output: [(93 -16 -30 73) -30]
Test Case: 417 | Input/Output: [(29 -98 97 -26) -98]
Test Case: 418 | Input/Output: [(88 78 -35 -44) -44]
Test Case: 419 | Input/Output: [(21 54 -90 -26) -90]
Test Case: 420 | Input/Output: [(69 -97 80 89) -97]
Test Case: 421 | Input/Output: [(100 98 6 76) 6]
Test Case: 422 | Input/Output: [(-73 88 40 -70) -73]
Test Case: 423 | Input/Output: [(54 -46 -41 -52) -52]
Test Case: 424 | Input/Output: [(71 13 -36 34) -36]
Test Case: 425 | Input/Output: [(-82 76 57 59) -82]
Test Case: 426 | Input/Output: [(71 -57 -89 -64) -89]
Test Case: 427 | Input/Output: [(-28 -83 30 24) -83]
Test Case: 428 | Input/Output: [(78 30 4 73) 4]
Test Case: 429 | Input/Output: [(-88 -39 -92 -59) -92]
Test Case: 430 | Input/Output: [(69 -43 56 -71) -71]
Test Case: 431 | Input/Output: [(45 100 -74 -65) -74]
Test Case: 432 | Input/Output: [(64 37 -64 -19) -64]
Test Case: 433 | Input/Output: [(-11 -53 90 21) -53]
Test Case: 434 | Input/Output: [(52 23 14 46) 14]
Test Case: 435 | Input/Output: [(-39 73 60 57) -39]
Test Case: 436 | Input/Output: [(-55 56 -8 48) -55]
Test Case: 437 | Input/Output: [(-27 -55 -84 -31) -84]
Test Case: 438 | Input/Output: [(58 -86 15 98) -86]
Test Case: 439 | Input/Output: [(-25 93 -87 -34) -87]
Test Case: 440 | Input/Output: [(-26 -25 -80 -20) -80]
Test Case: 441 | Input/Output: [(-86 0 -86 75) -86]
Test Case: 442 | Input/Output: [(-54 53 81 -17) -54]
Test Case: 443 | Input/Output: [(-42 15 92 -44) -44]
Test Case: 444 | Input/Output: [(11 2 -70 51) -70]
Test Case: 445 | Input/Output: [(5 14 72 80) 5]
Test Case: 446 | Input/Output: [(42 -75 -76 -80) -80]
Test Case: 447 | Input/Output: [(0 -15 -25 -98) -98]
Test Case: 448 | Input/Output: [(-59 -68 -23 81) -68]
Test Case: 449 | Input/Output: [(6 -100 -22 9) -100]
Test Case: 450 | Input/Output: [(-43 -15 50 -49) -49]
Test Case: 451 | Input/Output: [(29 -64 31 27) -64]
Test Case: 452 | Input/Output: [(-71 55 10 27) -71]
Test Case: 453 | Input/Output: [(-44 24 34 9) -44]
Test Case: 454 | Input/Output: [(29 28 37 -34) -34]
Test Case: 455 | Input/Output: [(28 15 -46 7) -46]
Test Case: 456 | Input/Output: [(-76 69 79 100) -76]
Test Case: 457 | Input/Output: [(98 24 80 -88) -88]
Test Case: 458 | Input/Output: [(42 -69 -70 4) -70]
Test Case: 459 | Input/Output: [(26 -11 -44 44) -44]
Test Case: 460 | Input/Output: [(31 -83 80 -100) -100]
Test Case: 461 | Input/Output: [(21 1 28 33) 1]
Test Case: 462 | Input/Output: [(41 -53 -3 -35) -53]
Test Case: 463 | Input/Output: [(-47 71 3 62) -47]
Test Case: 464 | Input/Output: [(58 65 -67 -82) -82]
Test Case: 465 | Input/Output: [(-24 -65 98 -38) -65]
Test Case: 466 | Input/Output: [(-7 -26 -5 21) -26]
Test Case: 467 | Input/Output: [(85 -66 -63 66) -66]
Test Case: 468 | Input/Output: [(-42 61 -88 -51) -88]
Test Case: 469 | Input/Output: [(-75 -19 -53 -5) -75]
Test Case: 470 | Input/Output: [(-68 29 -88 67) -88]
Test Case: 471 | Input/Output: [(48 -91 25 -96) -96]
Test Case: 472 | Input/Output: [(-96 43 63 72) -96]
Test Case: 473 | Input/Output: [(-33 61 58 -44) -44]
Test Case: 474 | Input/Output: [(59 22 -62 -95) -95]
Test Case: 475 | Input/Output: [(43 -96 77 40) -96]
Test Case: 476 | Input/Output: [(50 69 23 -65) -65]
Test Case: 477 | Input/Output: [(-34 60 -9 -24) -34]
Test Case: 478 | Input/Output: [(13 11 -95 22) -95]
Test Case: 479 | Input/Output: [(-60 -93 46 11) -93]
Test Case: 480 | Input/Output: [(35 -34 -92 -50) -92]
Test Case: 481 | Input/Output: [(-89 -65 26 -55) -89]
Test Case: 482 | Input/Output: [(-70 34 39 86) -70]
Test Case: 483 | Input/Output: [(-13 -75 59 -19) -75]
Test Case: 484 | Input/Output: [(-12 69 27 -41) -41]
Test Case: 485 | Input/Output: [(-6 100 84 33) -6]
Test Case: 486 | Input/Output: [(-22 5 4 -68) -68]
Test Case: 487 | Input/Output: [(84 -51 -22 -65) -65]
Test Case: 488 | Input/Output: [(47 -12 47 87) -12]
Test Case: 489 | Input/Output: [(-20 -54 -89 60) -89]
Test Case: 490 | Input/Output: [(-59 29 -7 -62) -62]
Test Case: 491 | Input/Output: [(-52 58 -66 -19) -66]
Test Case: 492 | Input/Output: [(85 77 -31 -66) -66]
Test Case: 493 | Input/Output: [(-74 -66 -15 -75) -75]
Test Case: 494 | Input/Output: [(-35 63 9 -100) -100]
Test Case: 495 | Input/Output: [(-10 29 22 71) -10]
Test Case: 496 | Input/Output: [(-12 12 -82 84) -82]
Test Case: 497 | Input/Output: [(46 92 30 99) 30]
Test Case: 498 | Input/Output: [(-19 -60 -88 27) -88]
Test Case: 499 | Input/Output: [(7 -18 -23 84) -23]
Test Case: 500 | Input/Output: [(-51 -34 85 -33) -51]
Test Case: 501 | Input/Output: [(-48 66 -45 -7) -48]
Test Case: 502 | Input/Output: [(-35 72 12 -47) -47]
Test Case: 503 | Input/Output: [(-18 26 35 -77) -77]
Test Case: 504 | Input/Output: [(-65 -10 -68 -50) -68]
Test Case: 505 | Input/Output: [(34 -99 -72 -59) -99]
Test Case: 506 | Input/Output: [(-77 7 92 -93) -93]
Test Case: 507 | Input/Output: [(-4 -77 -79 -100) -100]
Test Case: 508 | Input/Output: [(0 -28 19 51) -28]
Test Case: 509 | Input/Output: [(80 41 59 65) 41]
Test Case: 510 | Input/Output: [(-46 72 -54 -39) -54]
Test Case: 511 | Input/Output: [(15 88 -42 24) -42]
Test Case: 512 | Input/Output: [(-22 42 -47 -39) -47]
Test Case: 513 | Input/Output: [(100 40 68 -43) -43]
Test Case: 514 | Input/Output: [(-15 -12 -61 -8) -61]
Test Case: 515 | Input/Output: [(-1 -74 -37 74) -74]
Test Case: 516 | Input/Output: [(-4 29 -25 -19) -25]
Test Case: 517 | Input/Output: [(-50 88 27 -31) -50]
Test Case: 518 | Input/Output: [(-60 -38 -43 -41) -60]
Test Case: 519 | Input/Output: [(-58 41 -87 -100) -100]
Test Case: 520 | Input/Output: [(84 -21 -62 -71) -71]
Test Case: 521 | Input/Output: [(78 97 37 -46) -46]
Test Case: 522 | Input/Output: [(-63 -84 85 -51) -84]
Test Case: 523 | Input/Output: [(-85 20 -72 -17) -85]
Test Case: 524 | Input/Output: [(18 52 35 -61) -61]
Test Case: 525 | Input/Output: [(59 37 -27 -98) -98]
Test Case: 526 | Input/Output: [(-5 -51 71 -48) -51]
Test Case: 527 | Input/Output: [(49 37 78 31) 31]
Test Case: 528 | Input/Output: [(13 -68 -98 -46) -98]
Test Case: 529 | Input/Output: [(-89 14 27 97) -89]
Test Case: 530 | Input/Output: [(52 -41 -66 -48) -66]
Test Case: 531 | Input/Output: [(-76 -56 -10 12) -76]
Test Case: 532 | Input/Output: [(50 -73 48 71) -73]
Test Case: 533 | Input/Output: [(43 -39 -44 40) -44]
Test Case: 534 | Input/Output: [(0 82 -43 20) -43]
Test Case: 535 | Input/Output: [(-38 15 -88 -84) -88]
Test Case: 536 | Input/Output: [(-8 31 -43 -93) -93]
Test Case: 537 | Input/Output: [(69 -19 4 59) -19]
Test Case: 538 | Input/Output: [(-97 0 55 -41) -97]
Test Case: 539 | Input/Output: [(-69 49 11 64) -69]
Test Case: 540 | Input/Output: [(-28 39 -52 -22) -52]
Test Case: 541 | Input/Output: [(84 69 80 62) 62]
Test Case: 542 | Input/Output: [(-19 71 -52 -42) -52]
Test Case: 543 | Input/Output: [(-47 11 -89 -67) -89]
Test Case: 544 | Input/Output: [(50 -65 0 66) -65]
Test Case: 545 | Input/Output: [(73 -92 4 -6) -92]
Test Case: 546 | Input/Output: [(-48 68 43 -18) -48]
Test Case: 547 | Input/Output: [(17 -68 77 -37) -68]
Test Case: 548 | Input/Output: [(3 62 -87 55) -87]
Test Case: 549 | Input/Output: [(60 -85 36 -81) -85]
Test Case: 550 | Input/Output: [(-65 33 69 -58) -65]
Test Case: 551 | Input/Output: [(27 -23 77 -60) -60]
Test Case: 552 | Input/Output: [(60 28 -33 51) -33]
Test Case: 553 | Input/Output: [(27 56 25 -56) -56]
Test Case: 554 | Input/Output: [(86 -25 -60 100) -60]
Test Case: 555 | Input/Output: [(-30 -32 49 -88) -88]
Test Case: 556 | Input/Output: [(3 -69 89 55) -69]
Test Case: 557 | Input/Output: [(92 -53 77 3) -53]
Test Case: 558 | Input/Output: [(-82 46 95 -92) -92]
Test Case: 559 | Input/Output: [(-1 10 -45 20) -45]
Test Case: 560 | Input/Output: [(85 -39 97 90) -39]
Test Case: 561 | Input/Output: [(-1 -76 61 -7) -76]
Test Case: 562 | Input/Output: [(-78 90 -6 -32) -78]
Test Case: 563 | Input/Output: [(-79 -68 -32 92) -79]
Test Case: 564 | Input/Output: [(12 -38 -78 -58) -78]
Test Case: 565 | Input/Output: [(-39 -77 50 -93) -93]
Test Case: 566 | Input/Output: [(-8 74 55 -96) -96]
Test Case: 567 | Input/Output: [(-60 -49 6 63) -60]
Test Case: 568 | Input/Output: [(-62 77 36 31) -62]
Test Case: 569 | Input/Output: [(93 -6 -25 43) -25]
Test Case: 570 | Input/Output: [(-95 -53 1 -97) -97]
Test Case: 571 | Input/Output: [(77 -50 40 -95) -95]
Test Case: 572 | Input/Output: [(20 84 77 -55) -55]
Test Case: 573 | Input/Output: [(-23 49 -99 80) -99]
Test Case: 574 | Input/Output: [(57 -63 66 -18) -63]
Test Case: 575 | Input/Output: [(97 66 40 -66) -66]
Test Case: 576 | Input/Output: [(-7 31 25 -47) -47]
Test Case: 577 | Input/Output: [(64 99 -60 25) -60]
Test Case: 578 | Input/Output: [(36 -15 -6 -6) -15]
Test Case: 579 | Input/Output: [(14 -8 -42 92) -42]
Test Case: 580 | Input/Output: [(60 89 -76 -50) -76]
Test Case: 581 | Input/Output: [(-50 -100 -12 -36) -100]
Test Case: 582 | Input/Output: [(3 -55 -65 85) -65]
Test Case: 583 | Input/Output: [(21 -79 82 82) -79]
Test Case: 584 | Input/Output: [(59 96 40 -15) -15]
Test Case: 585 | Input/Output: [(-60 84 65 65) -60]
Test Case: 586 | Input/Output: [(78 -86 41 89) -86]
Test Case: 587 | Input/Output: [(-5 -27 1 75) -27]
Test Case: 588 | Input/Output: [(-35 -97 64 -76) -97]
Test Case: 589 | Input/Output: [(-3 70 96 63) -3]
Test Case: 590 | Input/Output: [(76 -88 12 0) -88]
Test Case: 591 | Input/Output: [(-37 -19 -46 -65) -65]
Test Case: 592 | Input/Output: [(-10 42 95 -94) -94]
Test Case: 593 | Input/Output: [(9 -45 12 81) -45]
Test Case: 594 | Input/Output: [(45 -82 -12 -97) -97]
Test Case: 595 | Input/Output: [(-74 49 -69 53) -74]
Test Case: 596 | Input/Output: [(65 16 44 84) 16]
Test Case: 597 | Input/Output: [(-56 36 63 92) -56]
Test Case: 598 | Input/Output: [(9 -49 -13 -24) -49]
Test Case: 599 | Input/Output: [(95 -48 6 67) -48]
Test Case: 600 | Input/Output: [(-93 24 12 -27) -93]
Test Case: 601 | Input/Output: [(98 -90 -53 -18) -90]
Test Case: 602 | Input/Output: [(8 57 -9 40) -9]
Test Case: 603 | Input/Output: [(-31 98 -79 -64) -79]
Test Case: 604 | Input/Output: [(34 48 61 -55) -55]
Test Case: 605 | Input/Output: [(-60 -45 76 58) -60]
Test Case: 606 | Input/Output: [(27 -77 81 -86) -86]
Test Case: 607 | Input/Output: [(-82 -30 -76 -62) -82]
Test Case: 608 | Input/Output: [(-28 -85 18 -1) -85]
Test Case: 609 | Input/Output: [(6 -92 40 -85) -92]
Test Case: 610 | Input/Output: [(-72 -12 41 0) -72]
Test Case: 611 | Input/Output: [(25 -3 -76 -9) -76]
Test Case: 612 | Input/Output: [(-68 93 -40 -27) -68]
Test Case: 613 | Input/Output: [(83 5 -51 62) -51]
Test Case: 614 | Input/Output: [(7 -58 -5 93) -58]
Test Case: 615 | Input/Output: [(45 98 23 -82) -82]
Test Case: 616 | Input/Output: [(24 6 52 90) 6]
Test Case: 617 | Input/Output: [(-55 -43 -48 2) -55]
Test Case: 618 | Input/Output: [(58 -75 -79 80) -79]
Test Case: 619 | Input/Output: [(-30 16 -91 95) -91]
Test Case: 620 | Input/Output: [(-75 24 -2 -65) -75]
Test Case: 621 | Input/Output: [(-54 -2 24 14) -54]
Test Case: 622 | Input/Output: [(72 100 70 71) 70]
Test Case: 623 | Input/Output: [(74 72 31 72) 31]
Test Case: 624 | Input/Output: [(46 -42 68 67) -42]
Test Case: 625 | Input/Output: [(65 46 -57 -50) -57]
Test Case: 626 | Input/Output: [(74 -46 -14 -71) -71]
Test Case: 627 | Input/Output: [(-6 3 9 -77) -77]
Test Case: 628 | Input/Output: [(32 20 79 12) 12]
Test Case: 629 | Input/Output: [(-23 -44 56 90) -44]
Test Case: 630 | Input/Output: [(-12 -30 -1 -3) -30]
Test Case: 631 | Input/Output: [(93 16 27 28) 16]
Test Case: 632 | Input/Output: [(-29 89 59 85) -29]
Test Case: 633 | Input/Output: [(-25 30 44 61) -25]
Test Case: 634 | Input/Output: [(8 -45 -40 -73) -73]
Test Case: 635 | Input/Output: [(44 27 75 29) 27]
Test Case: 636 | Input/Output: [(60 -89 -28 55) -89]
Test Case: 637 | Input/Output: [(-62 -47 -50 53) -62]
Test Case: 638 | Input/Output: [(-92 -50 -31 46) -92]
Test Case: 639 | Input/Output: [(69 63 -83 23) -83]
Test Case: 640 | Input/Output: [(6 -65 -90 97) -90]
Test Case: 641 | Input/Output: [(81 4 16 56) 4]
Test Case: 642 | Input/Output: [(-87 -83 37 97) -87]
Test Case: 643 | Input/Output: [(54 -18 -56 -9) -56]
Test Case: 644 | Input/Output: [(-83 -56 -32 -96) -96]
Test Case: 645 | Input/Output: [(87 -22 6 52) -22]
Test Case: 646 | Input/Output: [(78 36 40 -10) -10]
Test Case: 647 | Input/Output: [(32 -43 -44 98) -44]
Test Case: 648 | Input/Output: [(-65 81 61 78) -65]
Test Case: 649 | Input/Output: [(-80 -67 -66 -47) -80]
Test Case: 650 | Input/Output: [(-49 68 77 -85) -85]
Test Case: 651 | Input/Output: [(-97 -93 -77 -84) -97]
Test Case: 652 | Input/Output: [(-21 -48 96 -3) -48]
Test Case: 653 | Input/Output: [(11 -69 -98 -36) -98]
Test Case: 654 | Input/Output: [(15 69 -31 36) -31]
Test Case: 655 | Input/Output: [(-6 -37 80 -99) -99]
Test Case: 656 | Input/Output: [(-47 23 -59 -36) -59]
Test Case: 657 | Input/Output: [(-52 -54 20 24) -54]
Test Case: 658 | Input/Output: [(-43 -75 4 -44) -75]
Test Case: 659 | Input/Output: [(21 -50 -89 77) -89]
Test Case: 660 | Input/Output: [(-78 -74 24 85) -78]
Test Case: 661 | Input/Output: [(-8 -96 18 -81) -96]
Test Case: 662 | Input/Output: [(-28 21 -52 70) -52]
Test Case: 663 | Input/Output: [(26 -36 -93 85) -93]
Test Case: 664 | Input/Output: [(92 -29 32 10) -29]
Test Case: 665 | Input/Output: [(5 4 42 -89) -89]
Test Case: 666 | Input/Output: [(78 46 86 -31) -31]
Test Case: 667 | Input/Output: [(-56 -50 62 44) -56]
Test Case: 668 | Input/Output: [(-31 -72 -65 -90) -90]
Test Case: 669 | Input/Output: [(38 -20 -8 55) -20]
Test Case: 670 | Input/Output: [(11 -47 -31 -37) -47]
Test Case: 671 | Input/Output: [(32 -48 -19 -100) -100]
Test Case: 672 | Input/Output: [(62 -7 27 -18) -18]
Test Case: 673 | Input/Output: [(-52 87 77 -6) -52]
Test Case: 674 | Input/Output: [(-53 6 73 -90) -90]
Test Case: 675 | Input/Output: [(31 93 -18 92) -18]
Test Case: 676 | Input/Output: [(-22 6 33 51) -22]
Test Case: 677 | Input/Output: [(69 -10 64 -4) -10]
Test Case: 678 | Input/Output: [(-85 -19 -90 77) -90]
Test Case: 679 | Input/Output: [(56 -11 74 96) -11]
Test Case: 680 | Input/Output: [(-91 23 -84 5) -91]
Test Case: 681 | Input/Output: [(82 52 -52 -44) -52]
Test Case: 682 | Input/Output: [(81 -2 36 -96) -96]
Test Case: 683 | Input/Output: [(44 69 47 -3) -3]
Test Case: 684 | Input/Output: [(14 52 -17 17) -17]
Test Case: 685 | Input/Output: [(74 4 -97 86) -97]
Test Case: 686 | Input/Output: [(61 51 31 42) 31]
Test Case: 687 | Input/Output: [(49 79 80 -4) -4]
Test Case: 688 | Input/Output: [(38 89 42 -25) -25]
Test Case: 689 | Input/Output: [(16 -7 -48 57) -48]
Test Case: 690 | Input/Output: [(-58 -79 5 27) -79]
Test Case: 691 | Input/Output: [(66 -52 -84 -75) -84]
Test Case: 692 | Input/Output: [(5 58 -52 -81) -81]
Test Case: 693 | Input/Output: [(-44 -46 33 -50) -50]
Test Case: 694 | Input/Output: [(23 57 69 -7) -7]
Test Case: 695 | Input/Output: [(-28 -55 6 -84) -84]
Test Case: 696 | Input/Output: [(71 -75 -76 -52) -76]
Test Case: 697 | Input/Output: [(0 -8 99 60) -8]
Test Case: 698 | Input/Output: [(-9 52 95 -2) -9]
Test Case: 699 | Input/Output: [(100 15 -40 34) -40]
Test Case: 700 | Input/Output: [(48 -46 70 -5) -46]
Test Case: 701 | Input/Output: [(77 -44 -6 -87) -87]
Test Case: 702 | Input/Output: [(-62 -50 19 60) -62]
Test Case: 703 | Input/Output: [(-36 -34 -93 -58) -93]
Test Case: 704 | Input/Output: [(-13 88 -74 93) -74]
Test Case: 705 | Input/Output: [(-33 9 -72 -43) -72]
Test Case: 706 | Input/Output: [(-23 83 -85 4) -85]
Test Case: 707 | Input/Output: [(-12 46 -41 89) -41]
Test Case: 708 | Input/Output: [(95 -99 -42 63) -99]
Test Case: 709 | Input/Output: [(39 -35 -90 13) -90]
Test Case: 710 | Input/Output: [(29 32 -68 -75) -75]
Test Case: 711 | Input/Output: [(-83 -37 77 -23) -83]
Test Case: 712 | Input/Output: [(12 -60 -3 -9) -60]
Test Case: 713 | Input/Output: [(91 -35 -84 29) -84]
Test Case: 714 | Input/Output: [(-7 -90 62 -54) -90]
Test Case: 715 | Input/Output: [(-71 92 -43 86) -71]
Test Case: 716 | Input/Output: [(54 -53 -53 -23) -53]
Test Case: 717 | Input/Output: [(28 50 -48 67) -48]
Test Case: 718 | Input/Output: [(59 -41 -8 98) -41]
Test Case: 719 | Input/Output: [(-47 27 -2 -4) -47]
Test Case: 720 | Input/Output: [(83 -97 -38 -77) -97]
Test Case: 721 | Input/Output: [(16 67 88 -6) -6]
Test Case: 722 | Input/Output: [(40 -98 -9 -76) -98]
Test Case: 723 | Input/Output: [(3 57 -49 -23) -49]
Test Case: 724 | Input/Output: [(24 -88 74 -66) -88]
Test Case: 725 | Input/Output: [(56 33 -91 -44) -91]
Test Case: 726 | Input/Output: [(-67 4 -25 29) -67]
Test Case: 727 | Input/Output: [(-4 80 -75 80) -75]
Test Case: 728 | Input/Output: [(-87 92 -4 95) -87]
Test Case: 729 | Input/Output: [(12 -19 13 -23) -23]
Test Case: 730 | Input/Output: [(14 31 -99 -29) -99]
Test Case: 731 | Input/Output: [(48 -81 68 -88) -88]
Test Case: 732 | Input/Output: [(84 3 9 26) 3]
Test Case: 733 | Input/Output: [(28 16 2 -53) -53]
Test Case: 734 | Input/Output: [(-91 -80 91 61) -91]
Test Case: 735 | Input/Output: [(92 -83 82 76) -83]
Test Case: 736 | Input/Output: [(-23 -29 40 -20) -29]
Test Case: 737 | Input/Output: [(-44 91 29 73) -44]
Test Case: 738 | Input/Output: [(-25 -96 5 -10) -96]
Test Case: 739 | Input/Output: [(-42 15 45 -65) -65]
Test Case: 740 | Input/Output: [(-86 85 51 -46) -86]
Test Case: 741 | Input/Output: [(-5 -22 6 -60) -60]
Test Case: 742 | Input/Output: [(14 80 -67 89) -67]
Test Case: 743 | Input/Output: [(98 -8 -9 -9) -9]
Test Case: 744 | Input/Output: [(-43 10 28 78) -43]
Test Case: 745 | Input/Output: [(-20 2 71 -17) -20]
Test Case: 746 | Input/Output: [(-72 1 34 3) -72]
Test Case: 747 | Input/Output: [(-62 37 -3 -47) -62]
Test Case: 748 | Input/Output: [(-2 36 -69 11) -69]
Test Case: 749 | Input/Output: [(19 -45 31 -84) -84]
Test Case: 750 | Input/Output: [(96 -31 21 -67) -67]
Test Case: 751 | Input/Output: [(-50 10 -7 29) -50]
Test Case: 752 | Input/Output: [(-71 13 53 -3) -71]
Test Case: 753 | Input/Output: [(-2 0 -97 5) -97]
Test Case: 754 | Input/Output: [(2 -83 54 -69) -83]
Test Case: 755 | Input/Output: [(-43 -88 26 52) -88]
Test Case: 756 | Input/Output: [(-40 -99 -9 10) -99]
Test Case: 757 | Input/Output: [(58 3 1 -36) -36]
Test Case: 758 | Input/Output: [(83 32 43 -12) -12]
Test Case: 759 | Input/Output: [(-44 -87 67 -83) -87]
Test Case: 760 | Input/Output: [(-85 83 67 91) -85]
Test Case: 761 | Input/Output: [(55 32 -82 49) -82]
Test Case: 762 | Input/Output: [(-64 -9 58 32) -64]
Test Case: 763 | Input/Output: [(38 -18 -30 48) -30]
Test Case: 764 | Input/Output: [(-23 93 19 -16) -23]
Test Case: 765 | Input/Output: [(-53 66 27 78) -53]
Test Case: 766 | Input/Output: [(-65 60 -26 46) -65]
Test Case: 767 | Input/Output: [(-61 -44 -65 -14) -65]
Test Case: 768 | Input/Output: [(-44 -30 1 -26) -44]
Test Case: 769 | Input/Output: [(4 -9 -33 -41) -41]
Test Case: 770 | Input/Output: [(-92 -51 -64 -69) -92]
Test Case: 771 | Input/Output: [(-32 -29 58 6) -32]
Test Case: 772 | Input/Output: [(-77 -33 86 49) -77]
Test Case: 773 | Input/Output: [(46 -55 -15 56) -55]
Test Case: 774 | Input/Output: [(99 27 32 22) 22]
Test Case: 775 | Input/Output: [(-26 -27 -3 -13) -27]
Test Case: 776 | Input/Output: [(-66 58 -99 -60) -99]
Test Case: 777 | Input/Output: [(-32 62 -66 -32) -66]
Test Case: 778 | Input/Output: [(23 62 -90 -86) -90]
Test Case: 779 | Input/Output: [(-85 -58 -69 19) -85]
Test Case: 780 | Input/Output: [(37 -49 -98 -20) -98]
Test Case: 781 | Input/Output: [(-52 54 34 -78) -78]
Test Case: 782 | Input/Output: [(-43 54 -31 -50) -50]
Test Case: 783 | Input/Output: [(92 61 80 -19) -19]
Test Case: 784 | Input/Output: [(28 -80 -97 94) -97]
Test Case: 785 | Input/Output: [(55 -47 -20 -43) -47]
Test Case: 786 | Input/Output: [(70 -24 -56 15) -56]
Test Case: 787 | Input/Output: [(-57 -80 -87 80) -87]
Test Case: 788 | Input/Output: [(-20 -58 -7 -75) -75]
Test Case: 789 | Input/Output: [(88 -62 -25 -47) -62]
Test Case: 790 | Input/Output: [(91 64 7 -9) -9]
Test Case: 791 | Input/Output: [(0 93 -37 -77) -77]
Test Case: 792 | Input/Output: [(-59 74 49 87) -59]
Test Case: 793 | Input/Output: [(37 -66 -100 -73) -100]
Test Case: 794 | Input/Output: [(-13 63 -40 70) -40]
Test Case: 795 | Input/Output: [(92 -27 69 20) -27]
Test Case: 796 | Input/Output: [(-41 -51 -86 35) -86]
Test Case: 797 | Input/Output: [(-53 -42 8 -99) -99]
Test Case: 798 | Input/Output: [(-23 74 -60 -64) -64]
Test Case: 799 | Input/Output: [(40 12 -72 -65) -72]
Test Case: 800 | Input/Output: [(-77 82 59 -90) -90]
Test Case: 801 | Input/Output: [(-23 9 -18 -37) -37]
Test Case: 802 | Input/Output: [(88 -65 -3 6) -65]
Test Case: 803 | Input/Output: [(-21 -90 59 78) -90]
Test Case: 804 | Input/Output: [(-33 76 97 91) -33]
Test Case: 805 | Input/Output: [(31 -51 -17 -40) -51]
Test Case: 806 | Input/Output: [(96 75 -37 -55) -55]
Test Case: 807 | Input/Output: [(-94 -92 44 70) -94]
Test Case: 808 | Input/Output: [(-44 -29 -70 59) -70]
Test Case: 809 | Input/Output: [(4 -6 94 -93) -93]
Test Case: 810 | Input/Output: [(35 -47 -99 81) -99]
Test Case: 811 | Input/Output: [(-60 -63 -81 -68) -81]
Test Case: 812 | Input/Output: [(-7 75 2 41) -7]
Test Case: 813 | Input/Output: [(-99 -39 -90 77) -99]
Test Case: 814 | Input/Output: [(-13 -73 -33 -17) -73]
Test Case: 815 | Input/Output: [(25 71 62 37) 25]
Test Case: 816 | Input/Output: [(45 0 -16 -22) -22]
Test Case: 817 | Input/Output: [(-61 12 -47 -62) -62]
Test Case: 818 | Input/Output: [(-59 -55 -16 -31) -59]
Test Case: 819 | Input/Output: [(86 -98 23 6) -98]
Test Case: 820 | Input/Output: [(71 22 52 -52) -52]
Test Case: 821 | Input/Output: [(-41 -56 -94 14) -94]
Test Case: 822 | Input/Output: [(91 -91 -13 86) -91]
Test Case: 823 | Input/Output: [(-79 60 45 -34) -79]
Test Case: 824 | Input/Output: [(-35 29 -38 47) -38]
Test Case: 825 | Input/Output: [(-32 27 83 82) -32]
Test Case: 826 | Input/Output: [(91 -7 -30 -69) -69]
Test Case: 827 | Input/Output: [(-51 29 -67 24) -67]
Test Case: 828 | Input/Output: [(35 -36 40 -66) -66]
Test Case: 829 | Input/Output: [(45 56 -76 -76) -76]
Test Case: 830 | Input/Output: [(74 80 -6 -71) -71]
Test Case: 831 | Input/Output: [(-85 29 -5 33) -85]
Test Case: 832 | Input/Output: [(-65 -15 80 -17) -65]
Test Case: 833 | Input/Output: [(52 -91 -79 22) -91]
Test Case: 834 | Input/Output: [(98 -95 -91 -99) -99]
Test Case: 835 | Input/Output: [(-75 -24 -23 -71) -75]
Test Case: 836 | Input/Output: [(-98 -88 98 -67) -98]
Test Case: 837 | Input/Output: [(19 -92 63 17) -92]
Test Case: 838 | Input/Output: [(-12 -71 -76 4) -76]
Test Case: 839 | Input/Output: [(87 73 -63 71) -63]
Test Case: 840 | Input/Output: [(1 -78 63 -76) -78]
Test Case: 841 | Input/Output: [(84 51 -5 57) -5]
Test Case: 842 | Input/Output: [(85 31 2 -55) -55]
Test Case: 843 | Input/Output: [(84 -31 100 -50) -50]
Test Case: 844 | Input/Output: [(83 -16 77 75) -16]
Test Case: 845 | Input/Output: [(54 -32 -25 -62) -62]
Test Case: 846 | Input/Output: [(38 -74 5 59) -74]
Test Case: 847 | Input/Output: [(-29 -100 -34 -4) -100]
Test Case: 848 | Input/Output: [(-52 49 7 60) -52]
Test Case: 849 | Input/Output: [(-13 67 -43 -39) -43]
Test Case: 850 | Input/Output: [(41 -93 82 -8) -93]
Test Case: 851 | Input/Output: [(83 -64 -33 28) -64]
Test Case: 852 | Input/Output: [(9 -42 82 64) -42]
Test Case: 853 | Input/Output: [(-66 -81 -72 -98) -98]
Test Case: 854 | Input/Output: [(-6 56 98 -38) -38]
Test Case: 855 | Input/Output: [(9 -51 48 -28) -51]
Test Case: 856 | Input/Output: [(-66 -62 -100 29) -100]
Test Case: 857 | Input/Output: [(39 -51 0 40) -51]
Test Case: 858 | Input/Output: [(93 16 -23 53) -23]
Test Case: 859 | Input/Output: [(-74 -89 -45 84) -89]
Test Case: 860 | Input/Output: [(-74 71 88 83) -74]
Test Case: 861 | Input/Output: [(-25 16 58 39) -25]
Test Case: 862 | Input/Output: [(60 -78 -72 68) -78]
Test Case: 863 | Input/Output: [(-98 -28 9 96) -98]
Test Case: 864 | Input/Output: [(83 26 27 71) 26]
Test Case: 865 | Input/Output: [(-81 -24 59 48) -81]
Test Case: 866 | Input/Output: [(-47 77 60 -94) -94]
Test Case: 867 | Input/Output: [(28 78 43 59) 28]
Test Case: 868 | Input/Output: [(-73 -80 -58 -19) -80]
Test Case: 869 | Input/Output: [(2 73 -54 -43) -54]
Test Case: 870 | Input/Output: [(-64 7 26 17) -64]
Test Case: 871 | Input/Output: [(-10 88 -13 78) -13]
Test Case: 872 | Input/Output: [(17 47 96 19) 17]
Test Case: 873 | Input/Output: [(-2 100 34 -4) -4]
Test Case: 874 | Input/Output: [(-20 84 -100 -4) -100]
Test Case: 875 | Input/Output: [(-54 60 -12 78) -54]
Test Case: 876 | Input/Output: [(32 -31 44 -68) -68]
Test Case: 877 | Input/Output: [(55 39 -39 -27) -39]
Test Case: 878 | Input/Output: [(-34 -2 -15 -77) -77]
Test Case: 879 | Input/Output: [(-42 -75 -54 -88) -88]
Test Case: 880 | Input/Output: [(-17 -22 -36 58) -36]
Test Case: 881 | Input/Output: [(51 54 -10 47) -10]
Test Case: 882 | Input/Output: [(-62 -23 -62 -93) -93]
Test Case: 883 | Input/Output: [(44 -34 90 92) -34]
Test Case: 884 | Input/Output: [(-36 -58 -52 -90) -90]
Test Case: 885 | Input/Output: [(87 -87 27 53) -87]
Test Case: 886 | Input/Output: [(24 72 -51 68) -51]
Test Case: 887 | Input/Output: [(2 48 88 -67) -67]
Test Case: 888 | Input/Output: [(19 -82 43 44) -82]
Test Case: 889 | Input/Output: [(-98 6 94 92) -98]
Test Case: 890 | Input/Output: [(-64 11 -31 69) -64]
Test Case: 891 | Input/Output: [(60 33 43 100) 33]
Test Case: 892 | Input/Output: [(-81 31 -2 -28) -81]
Test Case: 893 | Input/Output: [(7 32 60 -81) -81]
Test Case: 894 | Input/Output: [(16 -85 -82 -5) -85]
Test Case: 895 | Input/Output: [(32 -18 -22 -8) -22]
Test Case: 896 | Input/Output: [(-61 31 -18 -36) -61]
Test Case: 897 | Input/Output: [(-90 2 27 -63) -90]
Test Case: 898 | Input/Output: [(-100 -52 -11 67) -100]
Test Case: 899 | Input/Output: [(86 24 37 3) 3]
Test Case: 900 | Input/Output: [(-22 -71 -36 -82) -82]
Test Case: 901 | Input/Output: [(24 -29 68 36) -29]
Test Case: 902 | Input/Output: [(55 -74 41 -13) -74]
Test Case: 903 | Input/Output: [(-78 92 35 -93) -93]
Test Case: 904 | Input/Output: [(11 17 88 27) 11]
Test Case: 905 | Input/Output: [(64 55 -52 19) -52]
Test Case: 906 | Input/Output: [(72 -33 -26 -57) -57]
Test Case: 907 | Input/Output: [(-1 0 93 -64) -64]
Test Case: 908 | Input/Output: [(97 -46 18 100) -46]
Test Case: 909 | Input/Output: [(-42 -64 18 -47) -64]
Test Case: 910 | Input/Output: [(23 -63 39 -63) -63]
Test Case: 911 | Input/Output: [(-17 3 100 -55) -55]
Test Case: 912 | Input/Output: [(-86 93 -58 93) -86]
Test Case: 913 | Input/Output: [(6 -44 -43 99) -44]
Test Case: 914 | Input/Output: [(65 7 -72 39) -72]
Test Case: 915 | Input/Output: [(-14 13 -79 31) -79]
Test Case: 916 | Input/Output: [(1 -62 82 23) -62]
Test Case: 917 | Input/Output: [(-17 -84 35 99) -84]
Test Case: 918 | Input/Output: [(-39 -65 -80 19) -80]
Test Case: 919 | Input/Output: [(72 -81 19 30) -81]
Test Case: 920 | Input/Output: [(1 -58 73 34) -58]
Test Case: 921 | Input/Output: [(-64 -15 -72 -10) -72]
Test Case: 922 | Input/Output: [(86 -93 73 91) -93]
Test Case: 923 | Input/Output: [(-89 -38 -66 -98) -98]
Test Case: 924 | Input/Output: [(-51 59 -32 2) -51]
Test Case: 925 | Input/Output: [(60 -7 -13 -97) -97]
Test Case: 926 | Input/Output: [(52 60 51 -47) -47]
Test Case: 927 | Input/Output: [(13 -43 -61 -97) -97]
Test Case: 928 | Input/Output: [(26 40 16 45) 16]
Test Case: 929 | Input/Output: [(-47 -30 6 26) -47]
Test Case: 930 | Input/Output: [(67 79 -85 39) -85]
Test Case: 931 | Input/Output: [(34 -75 -96 95) -96]
Test Case: 932 | Input/Output: [(7 15 88 28) 7]
Test Case: 933 | Input/Output: [(-87 78 3 5) -87]
Test Case: 934 | Input/Output: [(-48 58 0 -52) -52]
Test Case: 935 | Input/Output: [(51 -5 -100 91) -100]
Test Case: 936 | Input/Output: [(34 -59 -37 32) -59]
Test Case: 937 | Input/Output: [(-12 -35 -60 -10) -60]
Test Case: 938 | Input/Output: [(-84 -69 -34 6) -84]
Test Case: 939 | Input/Output: [(9 16 -3 65) -3]
Test Case: 940 | Input/Output: [(-47 32 -64 44) -64]
Test Case: 941 | Input/Output: [(-11 15 98 40) -11]
Test Case: 942 | Input/Output: [(-40 -49 39 5) -49]
Test Case: 943 | Input/Output: [(42 99 74 30) 30]
Test Case: 944 | Input/Output: [(61 -54 -21 -59) -59]
Test Case: 945 | Input/Output: [(33 72 -22 -41) -41]
Test Case: 946 | Input/Output: [(82 14 -43 93) -43]
Test Case: 947 | Input/Output: [(-11 -39 76 -36) -39]
Test Case: 948 | Input/Output: [(17 -32 -28 -17) -32]
Test Case: 949 | Input/Output: [(14 87 53 -21) -21]
Test Case: 950 | Input/Output: [(-23 -37 55 -46) -46]
Test Case: 951 | Input/Output: [(21 64 -49 -37) -49]
Test Case: 952 | Input/Output: [(-7 -57 30 67) -57]
Test Case: 953 | Input/Output: [(96 55 -31 89) -31]
Test Case: 954 | Input/Output: [(36 71 -8 -63) -63]
Test Case: 955 | Input/Output: [(9 -78 99 58) -78]
Test Case: 956 | Input/Output: [(44 68 -80 -62) -80]
Test Case: 957 | Input/Output: [(-66 -72 15 59) -72]
Test Case: 958 | Input/Output: [(5 -86 -23 7) -86]
Test Case: 959 | Input/Output: [(-72 -100 86 54) -100]
Test Case: 960 | Input/Output: [(-88 -54 -27 -52) -88]
Test Case: 961 | Input/Output: [(-71 72 68 19) -71]
Test Case: 962 | Input/Output: [(49 66 15 67) 15]
Test Case: 963 | Input/Output: [(-87 -86 -2 43) -87]
Test Case: 964 | Input/Output: [(-4 19 33 -81) -81]
Test Case: 965 | Input/Output: [(-19 90 -89 93) -89]
Test Case: 966 | Input/Output: [(85 67 95 -73) -73]
Test Case: 967 | Input/Output: [(9 -43 -90 100) -90]
Test Case: 968 | Input/Output: [(75 19 21 24) 19]
Test Case: 969 | Input/Output: [(56 46 52 19) 19]
Test Case: 970 | Input/Output: [(65 1 -53 86) -53]
Test Case: 971 | Input/Output: [(55 33 -46 92) -46]
Test Case: 972 | Input/Output: [(-94 -69 58 -47) -94]
Test Case: 973 | Input/Output: [(87 22 71 -61) -61]
Test Case: 974 | Input/Output: [(-39 64 -77 -67) -77]
Test Case: 975 | Input/Output: [(-76 -14 27 -14) -76]
Test Case: 976 | Input/Output: [(20 73 77 -26) -26]
Test Case: 977 | Input/Output: [(-41 77 91 -62) -62]
Test Case: 978 | Input/Output: [(73 -35 -58 67) -58]
Test Case: 979 | Input/Output: [(8 61 70 -43) -43]
Test Case: 980 | Input/Output: [(53 -26 -13 36) -26]
Test Case: 981 | Input/Output: [(66 -28 -6 -12) -28]
Test Case: 982 | Input/Output: [(-41 -56 22 -13) -56]
Test Case: 983 | Input/Output: [(-40 -48 86 98) -48]
Test Case: 984 | Input/Output: [(-53 -36 60 -81) -81]
Test Case: 985 | Input/Output: [(-5 35 -28 -35) -35]
Test Case: 986 | Input/Output: [(-94 6 -67 38) -94]
Test Case: 987 | Input/Output: [(-29 -25 8 6) -29]
Test Case: 988 | Input/Output: [(-86 37 74 25) -86]
Test Case: 989 | Input/Output: [(-91 69 -68 -57) -91]
Test Case: 990 | Input/Output: [(-79 89 2 10) -79]
Test Case: 991 | Input/Output: [(-80 59 21 -33) -80]
Test Case: 992 | Input/Output: [(90 -69 73 -2) -69]
Test Case: 993 | Input/Output: [(40 -87 50 -70) -87]
Test Case: 994 | Input/Output: [(-23 -25 -76 -77) -77]
Test Case: 995 | Input/Output: [(12 58 88 -28) -28]
Test Case: 996 | Input/Output: [(-73 -82 75 -21) -82]
Test Case: 997 | Input/Output: [(-81 -82 25 -36) -82]
Test Case: 998 | Input/Output: [(-73 27 -69 68) -73]
Test Case: 999 | Input/Output: [(-61 -78 88 33) -78]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -66 78 21 -47 -17 28 25 -12 20 -64 -69 115 -102 -98 6 12
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-57 -57 -57 26] -57] [[68 68 68 62] 62] [[-56 -56 -56 46] -56] [[-50 26 26 26] -50] [[67 67 67 -66] -66] [[-18 -18 -47 -18] -47] [[68 -81 -81 -81] -81] [[-82 -60 -60 -60] -82] [[61 61 61 -71] -71] [[24 24 6 24] 6] [(-89 -89 -89 -89) -89] [(-95 -95 -95 -95) -95] [(77 77 77 77) 77] [(56 56 56 56) 56] [(34 34 34 34) 34] [(6 32 6 9) 6] [(90 62 7 39) 7] [(10 19 29 44) 10] [(56 56 100 5) 5] [(6 66 26 28) 6] [(14 90 84 7) 7] [(54 9 11 53) 9] [(43 40 31 24) 24] [(98 65 3 59) 3] [(68 97 94 30) 30] [(53 25 75 13) 13] [(97 16 72 83) 16] [(26 88 83 44) 26] [(11 54 34 26) 11] [(90 92 69 11) 11] [(73 51 0 87) 0] [(90 47 20 72) 20] [(51 18 5 67) 5] [(80 76 61 57) 57] [(19 3 78 0) 0] [(59 35 -57 -29) -57] [(66 -66 -9 14) -66] [(99 -42 -18 -93) -93] [(-85 -82 -6 67) -85] [(-61 -54 44 -16) -61] [(-23 -7 -75 89) -75] [(-34 -21 -68 71) -68] [(92 -99 19 66) -99] [(28 -15 -59 88) -59] [(-51 99 -19 -43) -51] [(29 -33 -95 -15) -95] [(41 94 14 -36) -36] [(-67 -67 96 90) -67] [(-23 19 31 59) -23] [(95 -42 -3 76) -42] [(-89 -25 -80 8) -89] [(68 42 -96 -35) -96] [(82 -81 -84 79) -84] [(97 -20 72 -64) -64] [(-81 85 58 -49) -81] [(15 -67 1 72) -67] [(-19 63 16 46) -19] [(17 4 95 -11) -11] [(-31 -48 62 47) -48] [(38 -66 -39 -62) -66] [(-99 -68 -30 -3) -99] [(19 76 21 39) 19] [(62 92 -65 -35) -65] [(1 15 77 91) 1] [(-6 74 -88 -96) -96] [(-47 -3 71 -40) -47] [(69 -65 -31 -15) -65] [(88 41 83 -41) -41] [(23 -85 52 -19) -85] [(95 36 -36 67) -36] [(98 -91 86 34) -91] [(29 85 53 -19) -19] [(56 -52 36 84) -52] [(64 -96 10 -73) -96] [(-80 -68 31 39) -80] [(11 69 -52 -68) -68] [(-91 83 5 63) -91] [(-73 46 -35 -44) -73] [(-4 -12 97 62) -12] [(-64 29 85 -15) -64] [(4 -49 -57 30) -57] [(84 -87 14 -79) -87] [(-77 64 71 -57) -77] [(33 32 48 -9) -9] [(91 -44 73 -46) -46] [(53 -12 20 -82) -82] [(22 -77 81 -53) -77] [(65 17 46 -7) -7] [(-100 -16 -90 -3) -100] [(32 -93 -72 33) -93] [(-85 57 -57 70) -85] [(66 11 -64 -66) -66] [(95 72 -45 93) -45] [(-74 28 -10 58) -74] [(-23 -22 62 -84) -84])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot boolean_yankdup exec_flush) boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot boolean_yankdup exec_flush) boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 2 2 2 5 9 1 1 2 6)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (10 2 2 2 5 9 1 1 2 6)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot boolean_yankdup exec_flush) boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.99 0.998 0.998 0.998 0.995 0.991 0.999 0.999 0.998 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.516
Average program size in population (points): 68.317
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466434
--- Timings ---
Current time: 1559314528644 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.9 seconds, 33.8%
Fitness Testing:      1.6 seconds, 61.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k})
Lexicase best program: (integer_eq in2 boolean_xor boolean_yank print_integer exec_k () ())
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 9
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k})
Zero cases best program: (integer_eq in2 boolean_xor boolean_yank print_integer exec_k () ())
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 9
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 940 312 940 129 940 129 129 129 345)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (312 940 312 940 129 940 129 129 129 345)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 3, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Best program: (integer_add integer_div integer_dup_items integer_flush in2 print_integer integer_sub exec_y_when_autoconstructing () exec_dup_items print_boolean boolean_frominteger exec_while (boolean_dup_times) integer_yank boolean_eq exec_stackdepth)
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 5.695
Median total errors in population: 6
Error averages by case: (0.688 0.06 0.688 0.06 0.871 0.06 0.871 0.871 0.871 0.655)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.871
Average program size in population (points): 48.385
Average percent parens in population: 0.220
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.497
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 769182
--- Timings ---
Current time: 1559314530895 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.5 seconds, 50.9%
Fitness Testing:      1.9 seconds, 38.6%
Report:               0.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_755} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_boolean_855} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -95} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_rot})
Lexicase best program: (exec_swap () (in1 integer_eq tagged_755) exec_while () boolean_or exec_y_when_autoconstructing (tag_boolean_855) in4 print_integer in4 boolean_dup_times boolean_empty exec_s (integer_empty integer_dup_items integer_gte) (integer_gt integer_fromboolean exec_dup_times (-95 boolean_flush boolean_flush) exec_dup (integer_pop boolean_invert_first_then_and integer_pop in3 integer_max integer_add)) (exec_flush) boolean_frominteger in1 exec_rot () () ())
Lexicase best errors: [0 0 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_755} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_boolean_855} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -95} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_rot})
Zero cases best program: (exec_swap () (in1 integer_eq tagged_755) exec_while () boolean_or exec_y_when_autoconstructing (tag_boolean_855) in4 print_integer in4 boolean_dup_times boolean_empty exec_s (integer_empty integer_dup_items integer_gte) (integer_gt integer_fromboolean exec_dup_times (-95 boolean_flush boolean_flush) exec_dup (integer_pop boolean_invert_first_then_and integer_pop in3 integer_max integer_add)) (exec_flush) boolean_frominteger in1 exec_rot () () ())
Zero cases best errors: [0 0 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 257 552 144 1000 257 1000 257 552 552)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (257 257 552 144 0 257 0 257 552 552)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 2, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank})
Best program: (boolean_yank print_boolean boolean_flush integer_gte integer_dup_times in4 print_integer boolean_not boolean_xor boolean_shove boolean_yankdup exec_if (exec_if () () integer_div integer_dup_items boolean_frominteger boolean_dup_times) (in3 boolean_dup_items boolean_flush boolean_and boolean_dup_times) boolean_yank boolean_frominteger exec_yankdup integer_eq boolean_swap integer_dup_times -10 boolean_eq boolean_yank)
Errors: [0 0 1 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 36
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 7.172
Median total errors in population: 7
Error averages by case: (0.743 0.743 0.448 0.856 1.0 0.743 1.0 0.743 0.448 0.448)
Error minima by case: (0 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 20.254
Average program size in population (points): 26.159
Average percent parens in population: 0.244
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0315
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 283
Genome diversity (% unique genomes):	 0.378
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 303
Syntactic diversity (% unique Push programs):	 0.356
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 935601
--- Timings ---
Current time: 1559314533693 milliseconds
Total Time:           7.7 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.9 seconds, 63.0%
Fitness Testing:      2.1 seconds, 27.3%
Report:               0.6 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 3, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (integer_add integer_div integer_dup_items integer_flush in2 print_integer integer_sub exec_y_when_autoconstructing () exec_dup_items print_boolean boolean_frominteger exec_while (boolean_dup_times) integer_yank boolean_eq exec_stackdepth)
Lexicase best errors: [1 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 3, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (integer_add integer_div integer_dup_items integer_flush in2 print_integer integer_sub exec_y_when_autoconstructing () exec_dup_items print_boolean boolean_frominteger exec_while (boolean_dup_times) integer_yank boolean_eq exec_stackdepth)
Zero cases best errors: [1 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 374 1000 111 1000 1000 468 374 485 374)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (111 374 0 111 0 0 468 374 485 374)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k})
Best program: (integer_eq in2 boolean_xor boolean_yank print_integer exec_k () ())
Errors: [1 0 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 6
Size: 9
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.703
Median total errors in population: 9
Error averages by case: (0.889 0.626 1.0 0.889 1.0 1.0 0.532 0.626 0.515 0.626)
Error minima by case: (0 0 1 0 1 1 0 0 0 0)
Average genome size in population (length): 23.196
Average program size in population (points): 30.288
Average percent parens in population: 0.245
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.491
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1126320
--- Timings ---
Current time: 1559314535910 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         6.7 seconds, 66.9%
Fitness Testing:      2.3 seconds, 23.1%
Report:               0.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335 in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335 in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (969 969 329 329 823 146 969 146 329 329)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (969 969 329 329 823 146 969 146 329 329)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 2, :instruction print_integer} {:close 3, :instruction tagged_680} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer print_integer tagged_680 exec_y_when_autoconstructing () exec_dup_items print_boolean boolean_frominteger exec_while (boolean_dup_times) integer_yank boolean_eq exec_stackdepth)
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 4.662
Median total errors in population: 6
Error averages by case: (0.031 0.031 0.671 0.671 0.177 0.854 0.031 0.854 0.671 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.163
Average program size in population (points): 27.182
Average percent parens in population: 0.242
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.939625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 242
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1286536
--- Timings ---
Current time: 1559314538119 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         8.6 seconds, 70.3%
Fitness Testing:      2.5 seconds, 20.4%
Report:               1.0 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Lexicase best program: (in1 integer_gt integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub) integer_flush boolean_empty integer_flush exec_rot (tag_boolean_912 integer_yankdup in2) (integer_flush integer_rot boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min)) boolean_dup_times integer_min)
Lexicase best errors: [1 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Zero cases best program: (in1 integer_gt integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub) integer_flush boolean_empty integer_flush exec_rot (tag_boolean_912 integer_yankdup in2) (integer_flush integer_rot boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min)) boolean_dup_times integer_min)
Zero cases best errors: [1 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 1000 667 944 667 667 668 667 1000 667)
Population mean number of elite cases: 7.22
Count of perfect (error zero) individuals by case: (275 0 667 944 667 667 668 667 0 667)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) ())
Errors: [1 1 0 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 4.778
Median total errors in population: 3
Error averages by case: (0.725 1.0 0.333 0.056 0.333 0.333 0.332 0.333 1.0 0.333)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 31.81
Average program size in population (points): 40.539
Average percent parens in population: 0.214
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.4585
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1518269
--- Timings ---
Current time: 1559314540547 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:        10.6 seconds, 72.5%
Fitness Testing:      2.7 seconds, 18.7%
Report:               1.2 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_exec_126} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor in4) exec_k () (integer_sub integer_flush) boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup tag_exec_126 () integer_flush integer_rot boolean_yankdup exec_flush boolean_dup integer_eq exec_y_when_autoconstructing ())
Lexicase best errors: [1 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_exec_126} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor in4) exec_k () (integer_sub integer_flush) boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup tag_exec_126 () integer_flush integer_rot boolean_yankdup exec_flush boolean_dup integer_eq exec_y_when_autoconstructing ())
Zero cases best errors: [1 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 1000 803 144 1000 803 803 1000 1000)
Population mean number of elite cases: 7.55
Count of perfect (error zero) individuals by case: (0 1 0 803 144 0 803 803 0 0)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 2, :instruction print_integer} {:close 3, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer integer_sub exec_y_when_autoconstructing () exec_dup_items print_boolean boolean_frominteger exec_while (boolean_dup_times) integer_yank boolean_eq exec_stackdepth)
Errors: [1 1 1 0 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.446
Median total errors in population: 7
Error averages by case: (1.0 0.999 1.0 0.197 0.856 1.0 0.197 0.197 1.0 1.0)
Error minima by case: (1 0 1 0 0 1 0 0 1 1)
Average genome size in population (length): 31.517
Average program size in population (points): 39.808
Average percent parens in population: 0.207
Minimum age in population: 6.0
Maximum age in population: 11.09375
Average age in population: 8.99046875
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 1734868
--- Timings ---
Current time: 1559314542640 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        12.3 seconds, 73.6%
Fitness Testing:      3.0 seconds, 17.7%
Report:               1.3 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction tagged_755} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_boolean_855} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_rot})
Lexicase best program: (exec_swap () (in1) boolean_or tagged_755 exec_while () boolean_or exec_y_when_autoconstructing (tag_boolean_855) in4 print_integer in4 boolean_dup_times boolean_empty exec_s (integer_empty integer_dup_items integer_gte) (integer_gt integer_fromboolean exec_dup_times (integer_mult boolean_flush boolean_flush) exec_dup (integer_pop boolean_invert_first_then_and integer_pop in3 integer_max integer_add) exec_flush) (boolean_frominteger in1 exec_rot () () ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction tagged_755} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_boolean_855} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_rot})
Zero cases best program: (exec_swap () (in1) boolean_or tagged_755 exec_while () boolean_or exec_y_when_autoconstructing (tag_boolean_855) in4 print_integer in4 boolean_dup_times boolean_empty exec_s (integer_empty integer_dup_items integer_gte) (integer_gt integer_fromboolean exec_dup_times (integer_mult boolean_flush boolean_flush) exec_dup (integer_pop boolean_invert_first_then_and integer_pop in3 integer_max integer_add) exec_flush) (boolean_frominteger in1 exec_rot () () ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 188 550 550 410 189 1000 552 1 188)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (188 188 550 550 410 189 0 552 1 188)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot})
Best program: (boolean_yank print_boolean integer_yankdup integer_gte integer_dup_times in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush) boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items integer_flush integer_rot))
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.184
Median total errors in population: 7
Error averages by case: (0.812 0.812 0.45 0.45 0.59 0.811 1.0 0.448 0.999 0.812)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 30.384
Average program size in population (points): 37.442
Average percent parens in population: 0.183
Minimum age in population: 7.0
Maximum age in population: 12.671875
Average age in population: 10.607671875
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 1958425
--- Timings ---
Current time: 1559314544840 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        14.0 seconds, 74.5%
Fitness Testing:      3.2 seconds, 16.8%
Report:               1.5 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_min integer_pop exec_if (exec_do*times () tag_integer_336) (tag_integer_335) in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min))
Lexicase best errors: [1 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_min integer_pop exec_if (exec_do*times () tag_integer_336) (tag_integer_335) in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min))
Zero cases best errors: [1 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 511 321 322 512 321 113 321 113 1000)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (0 511 321 322 512 321 113 321 113 0)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 2, :instruction print_integer} {:close 3, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer integer_sub exec_y_when_autoconstructing () exec_dup_items print_boolean boolean_frominteger exec_while (boolean_dup_times) integer_yank boolean_eq exec_stackdepth)
Errors: [1 1 0 0 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.466
Median total errors in population: 8
Error averages by case: (1.0 0.489 0.679 0.678 0.488 0.679 0.887 0.679 0.887 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 31.758
Average program size in population (points): 40.494
Average percent parens in population: 0.213
Minimum age in population: 9.125
Maximum age in population: 13.9765625
Average age in population: 12.053390625
Median age in population: 12.140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2208789
--- Timings ---
Current time: 1559314547339 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.1 seconds, 75.2%
Fitness Testing:      3.4 seconds, 15.9%
Report:               1.8 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 29                 
Correct output: 5                   | Program output: 100                
Correct output: 6                   | Program output: 26                 
Correct output: 7                   | Program output: 84                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 94                 
Correct output: 13                  | Program output: 75                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 83                 
Correct output: 11                  | Program output: 34                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 78                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -6                 
Correct output: -61                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: 96                 
Correct output: -23                 | Program output: 31                 
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: 58                 
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: 16                 
Correct output: -11                 | Program output: 95                 
Correct output: -48                 | Program output: 62                 
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -30                
Correct output: 19                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 77                 
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: 71                 
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 52                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 53                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: 31                 
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: 5                  
Correct output: -73                 | Program output: -35                
Correct output: -12                 | Program output: 97                 
Correct output: -64                 | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: 71                 
Correct output: -9                  | Program output: 48                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 81                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -90                
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -57                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -10                
Correct output: -84                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult})
Lexicase best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup exec_dup (integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult) ()))
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult})
Zero cases best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup exec_dup (integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult) ()))
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (716 228 1000 482 482 953 1000 228 1000 228)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (716 228 0 482 482 953 0 228 0 228)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 4, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and) (tag_integer_336 tag_integer_335 in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_flush)) integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup exec_flush) boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.683
Median total errors in population: 6
Error averages by case: (0.284 0.772 1.0 0.518 0.518 0.047 1.0 0.772 1.0 0.772)
Error minima by case: (0 0 1 0 0 0 1 0 1 0)
Average genome size in population (length): 33.476
Average program size in population (points): 41.907
Average percent parens in population: 0.200
Minimum age in population: 10.25
Maximum age in population: 15.41796875
Average age in population: 13.49740234375
Median age in population: 13.5859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2452956
--- Timings ---
Current time: 1559314549703 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        18.0 seconds, 75.8%
Fitness Testing:      3.6 seconds, 15.4%
Report:               2.0 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 29                 
Correct output: 5                   | Program output: 100                
Correct output: 6                   | Program output: 26                 
Correct output: 7                   | Program output: 84                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 94                 
Correct output: 13                  | Program output: 75                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 83                 
Correct output: 11                  | Program output: 34                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 78                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -6                 
Correct output: -61                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: 96                 
Correct output: -23                 | Program output: 31                 
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: 58                 
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: 16                 
Correct output: -11                 | Program output: 95                 
Correct output: -48                 | Program output: 62                 
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -30                
Correct output: 19                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 77                 
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: 71                 
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 52                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 53                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: 31                 
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: 5                  
Correct output: -73                 | Program output: -35                
Correct output: -12                 | Program output: 97                 
Correct output: -64                 | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: 71                 
Correct output: -9                  | Program output: 48                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 81                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -90                
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -57                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -10                
Correct output: -84                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty})
Lexicase best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and) (tag_integer_336 tag_integer_335 in2 exec_stackdepth boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_while () exec_k () (integer_sub integer_flush boolean_empty)))))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty})
Zero cases best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and) (tag_integer_336 tag_integer_335 in2 exec_stackdepth boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_while () exec_k () (integer_sub integer_flush boolean_empty)))))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (568 568 386 955 1000 568 1000 1000 568 386)
Population mean number of elite cases: 7.00
Count of perfect (error zero) individuals by case: (568 568 386 955 0 568 0 0 568 386)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop})
Best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop) ())
Errors: [0 0 1 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.001
Median total errors in population: 5
Error averages by case: (0.432 0.432 0.614 0.045 1.0 0.432 1.0 1.0 0.432 0.614)
Error minima by case: (0 0 0 0 1 0 1 1 0 0)
Average genome size in population (length): 37.309
Average program size in population (points): 45.738
Average percent parens in population: 0.184
Minimum age in population: 11.25
Maximum age in population: 17.091796875
Average age in population: 14.930580078125
Median age in population: 14.994140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2691286
--- Timings ---
Current time: 1559314552222 milliseconds
Total Time:          26.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.1 seconds, 76.3%
Fitness Testing:      3.9 seconds, 14.8%
Report:               2.2 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove exec_if (exec_flush integer_pop exec_if () () integer_div integer_dup_items boolean_frominteger) ())
Lexicase best errors: [1 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove exec_if (exec_flush integer_pop exec_if () () integer_div integer_dup_items boolean_frominteger) ())
Zero cases best errors: [1 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 340 1000 1000 1000 1000 340 625 966)
Population mean number of elite cases: 8.27
Count of perfect (error zero) individuals by case: (0 0 340 0 0 0 0 340 625 966)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty boolean_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush) (integer_pop exec_if (integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot boolean_yankdup exec_flush)) boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.729
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.66 1.0 1.0 1.0 1.0 0.66 0.375 0.034)
Error minima by case: (1 1 0 1 1 1 1 0 0 0)
Average genome size in population (length): 37.549
Average program size in population (points): 45.891
Average percent parens in population: 0.181
Minimum age in population: 13.86328125
Maximum age in population: 18.3037109375
Average age in population: 16.4352734375
Median age in population: 16.50830078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 2934502
--- Timings ---
Current time: 1559314554483 milliseconds
Total Time:          28.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.8 seconds, 76.6%
Fitness Testing:      4.1 seconds, 14.4%
Report:               2.4 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 29                 
Correct output: 5                   | Program output: 100                
Correct output: 6                   | Program output: 26                 
Correct output: 7                   | Program output: 84                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 94                 
Correct output: 13                  | Program output: 75                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 83                 
Correct output: 11                  | Program output: 34                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 78                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -6                 
Correct output: -61                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: 96                 
Correct output: -23                 | Program output: 31                 
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: 58                 
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: 16                 
Correct output: -11                 | Program output: 95                 
Correct output: -48                 | Program output: 62                 
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -30                
Correct output: 19                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 77                 
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: 71                 
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 52                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 53                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: 31                 
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: 5                  
Correct output: -73                 | Program output: -35                
Correct output: -12                 | Program output: 97                 
Correct output: -64                 | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: 71                 
Correct output: -9                  | Program output: 48                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 81                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -90                
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -57                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -10                
Correct output: -84                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_321} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 2, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 4, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (in1 in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and tag_integer_336 tag_integer_321 in2 exec_dup_items boolean_xor exec_while () exec_k () () integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_flush) integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times boolean_dup_times)
Lexicase best errors: [1 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_321} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 2, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 4, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times})
Zero cases best program: (in1 in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and tag_integer_336 tag_integer_321 in2 exec_dup_items boolean_xor exec_while () exec_k () () integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_flush) integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup exec_flush) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times boolean_dup_times)
Zero cases best errors: [1 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (649 649 1000 317 317 967 1000 317 966 1000)
Population mean number of elite cases: 7.18
Count of perfect (error zero) individuals by case: (649 649 0 317 317 967 0 317 966 0)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop})
Best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_eq boolean_dup integer_add boolean_empty integer_min exec_if (exec_flush integer_pop) ())
Errors: [1 1 1 0 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.818
Median total errors in population: 6
Error averages by case: (0.351 0.351 1.0 0.683 0.683 0.033 1.0 0.683 0.034 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 0 1)
Average genome size in population (length): 34.18
Average program size in population (points): 42.174
Average percent parens in population: 0.188
Minimum age in population: 15.125
Maximum age in population: 19.69482421875
Average age in population: 17.84871533203125
Median age in population: 17.91796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3144072
--- Timings ---
Current time: 1559314556752 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        23.7 seconds, 76.9%
Fitness Testing:      4.3 seconds, 14.0%
Report:               2.7 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 29                 
Correct output: 5                   | Program output: 100                
Correct output: 6                   | Program output: 26                 
Correct output: 7                   | Program output: 84                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 94                 
Correct output: 13                  | Program output: 75                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 83                 
Correct output: 11                  | Program output: 34                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 78                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -6                 
Correct output: -61                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: 96                 
Correct output: -23                 | Program output: 31                 
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: 58                 
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: 16                 
Correct output: -11                 | Program output: 95                 
Correct output: -48                 | Program output: 62                 
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -30                
Correct output: 19                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 77                 
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: 71                 
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 52                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 53                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: 31                 
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: 5                  
Correct output: -73                 | Program output: -35                
Correct output: -12                 | Program output: 97                 
Correct output: -64                 | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: 71                 
Correct output: -9                  | Program output: 48                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 81                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -90                
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -57                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -10                
Correct output: -84                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank})
Lexicase best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and) (tag_integer_336) tag_integer_335 in2 exec_dup_items boolean_xor exec_while () exec_k (in4 integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_flush)) (integer_yankdup exec_dup_items integer_flush integer_min) boolean_dup_times exec_yank)
Lexicase best errors: [1 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 51
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank})
Zero cases best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and) (tag_integer_336) tag_integer_335 in2 exec_dup_items boolean_xor exec_while () exec_k (in4 integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_flush)) (integer_yankdup exec_dup_items integer_flush integer_min) boolean_dup_times exec_yank)
Zero cases best errors: [1 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 51
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 394 553 1000 1000 553 1000 553 394 1000)
Population mean number of elite cases: 7.45
Count of perfect (error zero) individuals by case: (0 394 553 0 0 553 0 553 394 0)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove})
Best program: (in1 integer_fromboolean in3 exec_noop print_integer boolean_dup boolean_empty integer_shove integer_shove)
Errors: [1 1 0 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.553
Median total errors in population: 7
Error averages by case: (1.0 0.606 0.447 1.0 1.0 0.447 1.0 0.447 0.606 1.0)
Error minima by case: (1 0 0 1 1 0 1 0 0 1)
Average genome size in population (length): 37.375
Average program size in population (points): 45.739
Average percent parens in population: 0.181
Minimum age in population: 16.15625
Maximum age in population: 21.349853515625
Average age in population: 19.34542846679688
Median age in population: 19.4169921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3387240
--- Timings ---
Current time: 1559314559015 milliseconds
Total Time:          33.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.6 seconds, 77.3%
Fitness Testing:      4.6 seconds, 13.8%
Report:               2.9 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer exec_if (exec_flush integer_pop exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add in2 tag_integer_336) (tag_integer_335) in2 exec_dup_items exec_empty exec_while () boolean_pop integer_sub boolean_swap integer_dup_times -10 boolean_eq boolean_yank)
Lexicase best errors: [0 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.121
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer exec_if (exec_flush integer_pop exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add in2 tag_integer_336) (tag_integer_335) in2 exec_dup_items exec_empty exec_while () boolean_pop integer_sub boolean_swap integer_dup_times -10 boolean_eq boolean_yank)
Zero cases best errors: [0 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.121
--- Lexicase Population Statistics ---
Count of elite individuals by case: (958 582 1000 583 374 374 957 374 1 374)
Population mean number of elite cases: 5.58
Count of perfect (error zero) individuals by case: (958 582 0 583 374 374 957 374 1 374)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Best program: (in1 integer_fromboolean in1 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add integer_empty integer_dup_items integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup exec_flush exec_y (integer_eq exec_y_when_autoconstructing (integer_min)) boolean_dup_times integer_min)
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 27
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.423
Median total errors in population: 6
Error averages by case: (0.042 0.418 1.0 0.417 0.626 0.626 0.043 0.626 0.999 0.626)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 36.961
Average program size in population (points): 45.41
Average percent parens in population: 0.185
Minimum age in population: 18.25
Maximum age in population: 22.806640625
Average age in population: 20.86614074707031
Median age in population: 20.9417724609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3616227
--- Timings ---
Current time: 1559314561413 milliseconds
Total Time:          35.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.6 seconds, 77.7%
Fitness Testing:      4.8 seconds, 13.5%
Report:               3.0 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Lexicase best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Lexicase best errors: [0 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Zero cases best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Zero cases best errors: [0 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 549 548 163 163 163 241 1000 549 241)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (163 549 548 163 163 163 241 0 549 241)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [0 1 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 7.22
Median total errors in population: 7
Error averages by case: (0.837 0.451 0.452 0.837 0.837 0.837 0.759 1.0 0.451 0.759)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 31.963
Average program size in population (points): 39.589
Average percent parens in population: 0.192
Minimum age in population: 19.49658203125
Maximum age in population: 24.17071533203125
Average age in population: 22.42866052246094
Median age in population: 22.50189208984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 3816103
--- Timings ---
Current time: 1559314563565 milliseconds
Total Time:          37.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.4 seconds, 78.0%
Fitness Testing:      5.0 seconds, 13.2%
Report:               3.2 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush})
Lexicase best program: (in1 integer_fromboolean in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup integer_dup_items integer_gte exec_rot (integer_fromboolean exec_dup_times (integer_mult boolean_flush integer_yankdup) exec_dup (boolean_stackdepth boolean_invert_first_then_and integer_pop in3 integer_max integer_add)) (exec_flush) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush})
Zero cases best program: (in1 integer_fromboolean in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup integer_dup_items integer_gte exec_rot (integer_fromboolean exec_dup_times (integer_mult boolean_flush integer_yankdup) exec_dup (boolean_stackdepth boolean_invert_first_then_and integer_pop in3 integer_max integer_add)) (exec_flush) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (416 536 1000 338 1000 338 338 956 416 198)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (416 536 0 338 0 338 338 956 416 198)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_353} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup})
Best program: (in1 integer_fromboolean print_integer boolean_dup boolean_empty integer_eq integer_shove exec_noop integer_min integer_pop exec_if (boolean_empty) (tag_integer_353) tag_integer_335 in2 exec_dup_items boolean_xor exec_if (exec_flush) (integer_pop exec_if (exec_do*count (exec_if (boolean_empty) (tag_integer_336) integer_pop boolean_invert_first_then_and integer_pop in3 integer_yankdup exec_dup_items) integer_flush integer_dup_times) (-10 boolean_eq) integer_flush integer_rot boolean_yankdup))
Errors: [1 0 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.464
Median total errors in population: 7
Error averages by case: (0.584 0.464 1.0 0.662 1.0 0.662 0.662 0.044 0.584 0.802)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 29.115
Average program size in population (points): 35.97
Average percent parens in population: 0.188
Minimum age in population: 20.49658203125
Maximum age in population: 25.85836791992188
Average age in population: 24.00438711547852
Median age in population: 24.10855102539062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 3985645
--- Timings ---
Current time: 1559314565834 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.3 seconds, 78.3%
Fitness Testing:      5.2 seconds, 12.9%
Report:               3.4 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_734} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_317} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 4, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup tagged_734 integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and) (tag_integer_336 tag_integer_317 in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (boolean_and) (integer_flush integer_rot boolean_yankdup exec_flush) integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup in2)) boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_734} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_317} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 4, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup tagged_734 integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush integer_pop integer_mult boolean_invert_second_then_and) (tag_integer_336 tag_integer_317 in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) exec_k (boolean_and) (integer_flush integer_rot boolean_yankdup exec_flush) integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup in2)) boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 971 513 513 176 513 278 690 513)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (1 1 971 513 513 176 513 278 690 513)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_invert_first_then_and) (tag_integer_336) tag_integer_335) (in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup)))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 5.831
Median total errors in population: 4
Error averages by case: (0.999 0.999 0.029 0.487 0.487 0.824 0.487 0.722 0.31 0.487)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.784
Average program size in population (points): 36.891
Average percent parens in population: 0.191
Minimum age in population: 22.185546875
Maximum age in population: 27.31440734863281
Average age in population: 25.47042639160156
Median age in population: 25.55873107910156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4166203
--- Timings ---
Current time: 1559314568775 milliseconds
Total Time:          42.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        33.8 seconds, 78.9%
Fitness Testing:      5.3 seconds, 12.4%
Report:               3.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Lexicase best program: (in1 integer_fromboolean integer_max in1 integer_fromboolean integer_max exec_noop print_integer exec_k (boolean_empty integer_eq integer_shove integer_yank boolean_dup_times boolean_empty exec_s (integer_empty tag_integer_336) (tag_integer_335) (in2 exec_dup_items boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot exec_if (boolean_flush tag_integer_336 tag_integer_335 in2 exec_dup_items integer_yankdup) (integer_min)) () boolean_dup_times integer_min)
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Zero cases best program: (in1 integer_fromboolean integer_max in1 integer_fromboolean integer_max exec_noop print_integer exec_k (boolean_empty integer_eq integer_shove integer_yank boolean_dup_times boolean_empty exec_s (integer_empty tag_integer_336) (tag_integer_335) (in2 exec_dup_items boolean_empty integer_flush exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush integer_rot exec_if (boolean_flush tag_integer_336 tag_integer_335 in2 exec_dup_items integer_yankdup) (integer_min)) () boolean_dup_times integer_min)
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (512 960 512 512 634 213 121 112 213 959)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (512 960 512 512 634 213 121 112 213 959)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush})
Best program: (in1 integer_fromboolean integer_yankdup exec_noop print_integer boolean_dup integer_dup_items integer_gte exec_rot (integer_fromboolean exec_dup_times (integer_mult boolean_flush boolean_flush) exec_dup (boolean_stackdepth integer_eq) integer_pop in3 integer_max integer_add) () (exec_flush))
Errors: [0 0 0 0 0 1 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.252
Median total errors in population: 4
Error averages by case: (0.488 0.04 0.488 0.488 0.366 0.787 0.879 0.888 0.787 0.041)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.666
Average program size in population (points): 35.389
Average percent parens in population: 0.187
Minimum age in population: 23.910888671875
Maximum age in population: 29.05755615234375
Average age in population: 27.18376610565186
Median age in population: 27.24300765991211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4350543
--- Timings ---
Current time: 1559314571048 milliseconds
Total Time:          45.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.8 seconds, 79.1%
Fitness Testing:      5.5 seconds, 12.2%
Report:               3.8 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Lexicase best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_min integer_pop exec_if (exec_do*times () tag_integer_336) (tag_integer_335 in2) exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty) boolean_and) (exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush boolean_yankdup exec_eq boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Lexicase best errors: [1 1 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Zero cases best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_min integer_pop exec_if (exec_do*times () tag_integer_336) (tag_integer_335 in2) exec_dup_items boolean_xor exec_while () exec_k () (integer_sub integer_flush boolean_empty) boolean_and) (exec_do*times (tag_boolean_912) integer_yankdup exec_dup_items) integer_flush boolean_yankdup exec_eq boolean_dup integer_eq exec_y_when_autoconstructing (integer_min) boolean_dup_times integer_min)
Zero cases best errors: [1 1 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 130 446 449 128 129 128 252 252 252)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (130 130 446 449 128 129 128 252 252 252)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [1 1 1 1 1 1 1 0 0 0]
Total: 7
Mean: 0.7
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 7.704
Median total errors in population: 8
Error averages by case: (0.87 0.87 0.554 0.551 0.872 0.871 0.872 0.748 0.748 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.246
Average program size in population (points): 34.9
Average percent parens in population: 0.187
Minimum age in population: 24.910888671875
Maximum age in population: 30.77717208862305
Average age in population: 28.67094240188599
Median age in population: 28.76625442504883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4536428
--- Timings ---
Current time: 1559314573512 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.9 seconds, 79.5%
Fitness Testing:      5.7 seconds, 12.0%
Report:               3.9 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Lexicase best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Zero cases best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (971 281 500 280 192 217 192 277 281 281)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (971 281 500 280 192 217 192 277 281 281)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 6.528
Median total errors in population: 7
Error averages by case: (0.029 0.719 0.5 0.72 0.808 0.783 0.808 0.723 0.719 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.61
Average program size in population (points): 33.94
Average percent parens in population: 0.184
Minimum age in population: 25.910888671875
Maximum age in population: 32.31504821777344
Average age in population: 30.21619651603699
Median age in population: 30.26332473754883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 4712108
--- Timings ---
Current time: 1559314576011 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.0 seconds, 79.9%
Fitness Testing:      5.9 seconds, 11.7%
Report:               4.1 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 2, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 1, :instruction -10} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup exec_empty boolean_not boolean_xor boolean_shove boolean_yankdup exec_if (exec_if () () integer_div integer_dup_items boolean_frominteger boolean_dup_times) () in3 boolean_dup_items boolean_flush exec_if () (integer_yankdup in4) boolean_frominteger exec_yankdup integer_eq boolean_swap integer_dup_times -10 -10 boolean_eq boolean_yank)
Lexicase best errors: [1 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 2, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 1, :instruction -10} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup exec_empty boolean_not boolean_xor boolean_shove boolean_yankdup exec_if (exec_if () () integer_div integer_dup_items boolean_frominteger boolean_dup_times) () in3 boolean_dup_items boolean_flush exec_if () (integer_yankdup in4) boolean_frominteger exec_yankdup integer_eq boolean_swap integer_dup_times -10 -10 boolean_eq boolean_yank)
Zero cases best errors: [1 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 128 128 511 207 207 128 128 741 100)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (207 128 128 511 207 207 128 128 741 100)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush boolean_dup_times integer_mult boolean_invert_second_then_and) (tag_integer_336 tag_integer_335) in2 exec_dup_items boolean_xor)
Errors: [1 0 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 30
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.515
Median total errors in population: 8
Error averages by case: (0.793 0.872 0.872 0.489 0.793 0.793 0.872 0.872 0.259 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.89
Average program size in population (points): 31.816
Average percent parens in population: 0.185
Minimum age in population: 28.89578628540039
Maximum age in population: 33.71197414398193
Average age in population: 31.80506767940521
Median age in population: 31.85499143600464
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 4870901
--- Timings ---
Current time: 1559314578719 milliseconds
Total Time:          52.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.3 seconds, 80.3%
Fitness Testing:      6.1 seconds, 11.5%
Report:               4.3 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Lexicase best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_gte integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Zero cases best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_gte integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 440 114 128 114 274 114 683 274 128)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (440 440 114 128 114 274 114 683 274 128)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [1 1 0 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 26
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 7.291
Median total errors in population: 7
Error averages by case: (0.56 0.56 0.886 0.872 0.886 0.726 0.886 0.317 0.726 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.28
Average program size in population (points): 33.54
Average percent parens in population: 0.184
Minimum age in population: 30.3516845703125
Maximum age in population: 35.22613859176636
Average age in population: 33.19001454877853
Median age in population: 33.23681044578552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5042208
--- Timings ---
Current time: 1559314581108 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.4 seconds, 80.4%
Fitness Testing:      6.2 seconds, 11.3%
Report:               4.5 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank})
Lexicase best program: (in1 exec_eq in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove exec_empty exec_while () exec_k () (integer_sub boolean_empty integer_dup_times) -10 boolean_eq boolean_yank)
Lexicase best errors: [1 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank})
Zero cases best program: (in1 exec_eq in3 exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove exec_empty exec_while () exec_k () (integer_sub boolean_empty integer_dup_times) -10 boolean_eq boolean_yank)
Zero cases best errors: [1 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 205 312 205 218 205 312 205 205 312)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (218 205 312 205 218 205 312 205 205 312)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tagged_755} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_boolean_855} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 3, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_min})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_shove integer_dup_times tagged_755 exec_noop print_integer boolean_dup boolean_empty integer_eq boolean_dup_items integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop boolean_or exec_y_when_autoconstructing (tag_boolean_855) in4 print_integer) (in4 boolean_dup_times boolean_empty boolean_dup_items integer_empty integer_dup_items integer_gte) integer_pop exec_if (boolean_empty) (tag_integer_336) tag_integer_335 in2 exec_dup_items boolean_xor integer_div exec_y_when_autoconstructing () integer_min boolean_dup_times integer_min)
Errors: [1 0 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 52
Percent parens: 0.135
--- Population Statistics ---
Average total errors in population: 7.603
Median total errors in population: 7
Error averages by case: (0.782 0.795 0.688 0.795 0.782 0.795 0.688 0.795 0.795 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.355
Average program size in population (points): 32.322
Average percent parens in population: 0.182
Minimum age in population: 31.92793273925781
Maximum age in population: 36.5145628452301
Average age in population: 34.6525541408062
Median age in population: 34.72794914245605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 5207545
--- Timings ---
Current time: 1559314583744 milliseconds
Total Time:          57.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.6 seconds, 80.7%
Fitness Testing:      6.4 seconds, 11.1%
Report:               4.6 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 4, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_frominteger boolean_flush integer_yankdup in3 boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (integer_dup boolean_frominteger) (tag_integer_335 in2 integer_lt boolean_xor exec_while () exec_k () (integer_sub exec_eq tag_boolean_912) exec_k (exec_s () (integer_flush integer_rot boolean_yankdup exec_flush) () integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup in2) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min))) () boolean_dup_times integer_min)
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_boolean_912} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 4, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_frominteger boolean_flush integer_yankdup in3 boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (integer_dup boolean_frominteger) (tag_integer_335 in2 integer_lt boolean_xor exec_while () exec_k () (integer_sub exec_eq tag_boolean_912) exec_k (exec_s () (integer_flush integer_rot boolean_yankdup exec_flush) () integer_yankdup exec_dup_items integer_flush integer_rot boolean_yankdup in2) () boolean_dup integer_eq exec_y_when_autoconstructing (integer_min))) () boolean_dup_times integer_min)
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (763 1000 454 1000 194 453 454 194 307 454)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (763 0 454 0 194 453 454 194 307 454)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_boolean_846} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_flush})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add integer_gte boolean_rot exec_if (exec_flush integer_pop integer_sub integer_flush exec_yankdup tag_boolean_846 integer_yankdup exec_dup_items) (integer_flush integer_rot boolean_yankdup exec_flush))
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 28
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 6.727
Median total errors in population: 8
Error averages by case: (0.237 1.0 0.546 1.0 0.806 0.547 0.546 0.806 0.693 0.546)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 25.326
Average program size in population (points): 30.913
Average percent parens in population: 0.177
Minimum age in population: 33.30438613891602
Maximum age in population: 38.09678041934967
Average age in population: 36.16873040819168
Median age in population: 36.23775631189346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 5374966
--- Timings ---
Current time: 1559314586323 milliseconds
Total Time:          60.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.8 seconds, 80.8%
Fitness Testing:      6.6 seconds, 10.9%
Report:               4.9 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 2, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -11} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop print_integer exec_if () (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336)) tag_integer_335 in2 exec_dup_items exec_empty exec_while (exec_k () (integer_sub boolean_swap integer_dup_times) -11 boolean_eq) boolean_yank)
Lexicase best errors: [0 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 2, :instruction tag_integer_336} {:close 0, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -11} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop print_integer exec_if () (exec_flush integer_pop exec_if (boolean_empty) (tag_integer_336)) tag_integer_335 in2 exec_dup_items exec_empty exec_while (exec_k () (integer_sub boolean_swap integer_dup_times) -11 boolean_eq) boolean_yank)
Zero cases best errors: [0 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (961 566 567 242 566 148 242 566 148 148)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (961 566 567 242 566 148 242 566 148 148)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction tagged_755} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 2, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Best program: (in1 tagged_755 print_integer boolean_not integer_div print_integer boolean_dup exec_swap (integer_eq integer_shove integer_add exec_if (exec_if () () integer_div integer_dup_items) (boolean_frominteger boolean_dup_times) in3 boolean_eq exec_stackdepth) ())
Errors: [0 0 0 1 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 5.846
Median total errors in population: 5
Error averages by case: (0.039 0.434 0.433 0.758 0.434 0.852 0.758 0.434 0.852 0.852)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.84
Average program size in population (points): 30.466
Average percent parens in population: 0.179
Minimum age in population: 35.07874584197998
Maximum age in population: 39.72482919692993
Average age in population: 37.67657770043612
Median age in population: 37.77073979377747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 5547167
--- Timings ---
Current time: 1559314588843 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.0 seconds, 81.0%
Fitness Testing:      6.7 seconds, 10.7%
Report:               5.1 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (in1 integer_fromboolean integer_max exec_noop in1 print_integer boolean_eq exec_stackdepth)
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 9
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (in1 integer_fromboolean integer_max exec_noop in1 print_integer boolean_eq exec_stackdepth)
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 9
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (418 1 419 211 1 965 418 749 1 418)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (418 1 419 211 1 965 418 749 1 418)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 1, :instruction in3} {:close 0, :instruction exec_yankdup})
Best program: (boolean_not exec_if (in1 integer_fromboolean) (integer_max exec_noop print_integer boolean_invert_first_then_and boolean_empty integer_empty integer_shove integer_add exec_stackdepth boolean_dup boolean_empty integer_eq exec_k (in3) (exec_yankdup)))
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.399
Median total errors in population: 8
Error averages by case: (0.582 0.999 0.581 0.789 0.999 0.035 0.582 0.251 0.999 0.582)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.915
Average program size in population (points): 30.645
Average percent parens in population: 0.182
Minimum age in population: 36.45315837860107
Maximum age in population: 40.9033035337925
Average age in population: 39.14839274987578
Median age in population: 39.23563629388809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 5713630
--- Timings ---
Current time: 1559314591063 milliseconds
Total Time:          65.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.9 seconds, 81.2%
Fitness Testing:      6.9 seconds, 10.6%
Report:               5.3 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (in2 integer_fromboolean integer_max integer_fromboolean boolean_empty exec_noop print_integer boolean_eq boolean_empty integer_eq exec_when () integer_yank boolean_rot exec_if (integer_min integer_pop exec_if (exec_do*times () tag_integer_336) (tag_integer_335) in2 exec_dup_items boolean_rot boolean_eq exec_stackdepth) ())
Lexicase best errors: [0 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (in2 integer_fromboolean integer_max integer_fromboolean boolean_empty exec_noop print_integer boolean_eq boolean_empty integer_eq exec_when () integer_yank boolean_rot exec_if (integer_min integer_pop exec_if (exec_do*times () tag_integer_336) (tag_integer_335) in2 exec_dup_items boolean_rot boolean_eq exec_stackdepth) ())
Zero cases best errors: [0 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 118 3 4 118 835 4 4 118 306)
Population mean number of elite cases: 1.51
Count of perfect (error zero) individuals by case: (4 118 3 4 118 835 4 4 118 306)
Population mean number of perfect (error zero) cases: 1.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [0 1 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 8.486
Median total errors in population: 9
Error averages by case: (0.996 0.882 0.997 0.996 0.882 0.165 0.996 0.996 0.882 0.694)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.82
Average program size in population (points): 31.012
Average percent parens in population: 0.195
Minimum age in population: 37.61724603176117
Maximum age in population: 42.65079998970032
Average age in population: 40.96903807678819
Median age in population: 41.16436344385147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 5878094
--- Timings ---
Current time: 1559314593411 milliseconds
Total Time:          67.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        54.9 seconds, 81.3%
Fitness Testing:      7.1 seconds, 10.5%
Report:               5.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Lexicase best program: (in2 print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Lexicase best errors: [1 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Zero cases best program: (in2 print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Zero cases best errors: [1 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 484 484 193 484 193 281 281 484 1000)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (193 484 484 193 484 193 281 281 484 0)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth})
Best program: (in2 integer_fromboolean integer_max print_integer print_integer boolean_eq boolean_empty integer_eq exec_when () integer_yank boolean_rot exec_if (integer_min integer_pop exec_if (exec_do*times () tag_integer_336) (tag_integer_335) in2 exec_dup_items boolean_rot boolean_eq exec_stackdepth) ())
Errors: [1 0 0 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.923
Median total errors in population: 7
Error averages by case: (0.807 0.516 0.516 0.807 0.516 0.807 0.719 0.719 0.516 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 25.552
Average program size in population (points): 32.803
Average percent parens in population: 0.219
Minimum age in population: 39.12710976600647
Maximum age in population: 44.26365672796965
Average age in population: 42.85700572732836
Median age in population: 43.04596525430679
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 6236664
--- Timings ---
Current time: 1559314595992 milliseconds
Total Time:          70.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        57.0 seconds, 81.3%
Fitness Testing:      7.4 seconds, 10.5%
Report:               5.6 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_335} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Lexicase best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq exec_flush integer_add boolean_empty boolean_or boolean_pop exec_flush integer_min tag_integer_335 boolean_invert_first_then_and boolean_dup exec_dup_items boolean_xor exec_while (exec_k () (integer_sub integer_flush boolean_empty) integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10))
Lexicase best errors: [1 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_335} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Zero cases best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq exec_flush integer_add boolean_empty boolean_or boolean_pop exec_flush integer_min tag_integer_335 boolean_invert_first_then_and boolean_dup exec_dup_items boolean_xor exec_while (exec_k () (integer_sub integer_flush boolean_empty) integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10))
Zero cases best errors: [1 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 437 329 1000 968 441 1000 196 196 1000)
Population mean number of elite cases: 5.90
Count of perfect (error zero) individuals by case: (330 437 329 0 968 441 0 196 196 0)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 print_integer boolean_dup exec_yankdup integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [1 0 1 1 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.103
Median total errors in population: 7
Error averages by case: (0.67 0.563 0.671 1.0 0.032 0.559 1.0 0.804 0.804 1.0)
Error minima by case: (0 0 0 1 0 0 1 0 0 1)
Average genome size in population (length): 25.374
Average program size in population (points): 32.602
Average percent parens in population: 0.219
Minimum age in population: 41.48272790014744
Maximum age in population: 46.1627420373261
Average age in population: 44.38003346961364
Median age in population: 44.45953493006527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 6552813
--- Timings ---
Current time: 1559314598443 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        59.0 seconds, 81.3%
Fitness Testing:      7.6 seconds, 10.5%
Report:               5.8 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 29                 
Correct output: 5                   | Program output: 100                
Correct output: 6                   | Program output: 26                 
Correct output: 7                   | Program output: 84                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 94                 
Correct output: 13                  | Program output: 75                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 83                 
Correct output: 11                  | Program output: 34                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 78                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -6                 
Correct output: -61                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: 96                 
Correct output: -23                 | Program output: 31                 
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: 58                 
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: 16                 
Correct output: -11                 | Program output: 95                 
Correct output: -48                 | Program output: 62                 
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -30                
Correct output: 19                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 77                 
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: 71                 
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 52                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 53                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: 31                 
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: 5                  
Correct output: -73                 | Program output: -35                
Correct output: -12                 | Program output: 97                 
Correct output: -64                 | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: 71                 
Correct output: -9                  | Program output: 48                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 81                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -90                
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -57                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -10                
Correct output: -84                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Lexicase best program: (in2 integer_fromboolean integer_max in3 print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () exec_if (integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ()) ())
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Zero cases best program: (in2 integer_fromboolean integer_max in3 print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () exec_if (integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ()) ())
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 2 324 2 327 324 2 2 324 324)
Population mean number of elite cases: 1.93
Count of perfect (error zero) individuals by case: (304 2 324 2 327 324 2 2 324 324)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 integer_fromboolean integer_max in3 print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () integer_mod exec_flush integer_pop exec_if (boolean_empty) () integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 8.065
Median total errors in population: 9
Error averages by case: (0.696 0.998 0.676 0.998 0.673 0.676 0.998 0.998 0.676 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.141
Average program size in population (points): 32.078
Average percent parens in population: 0.212
Minimum age in population: 42.63968496024609
Maximum age in population: 47.78936913609505
Average age in population: 45.82657234024256
Median age in population: 45.86977345589548
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 6830594
--- Timings ---
Current time: 1559314600784 milliseconds
Total Time:          74.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 81.3%
Fitness Testing:      7.9 seconds, 10.5%
Report:               6.0 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 29                 
Correct output: 5                   | Program output: 100                
Correct output: 6                   | Program output: 26                 
Correct output: 7                   | Program output: 84                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 94                 
Correct output: 13                  | Program output: 75                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 83                 
Correct output: 11                  | Program output: 34                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 78                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -6                 
Correct output: -61                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: 96                 
Correct output: -23                 | Program output: 31                 
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: 58                 
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: 16                 
Correct output: -11                 | Program output: 95                 
Correct output: -48                 | Program output: 62                 
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -30                
Correct output: 19                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 77                 
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: 71                 
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 52                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 53                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: 31                 
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: 5                  
Correct output: -73                 | Program output: -35                
Correct output: -12                 | Program output: 97                 
Correct output: -64                 | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: 71                 
Correct output: -9                  | Program output: 48                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 81                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -90                
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -57                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -10                
Correct output: -84                 | Program output: 62                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in2 integer_fromboolean in1 print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (integer_flush integer_fromboolean integer_dup_items boolean_frominteger boolean_dup_items) (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup boolean_xor exec_dup_items exec_pop (integer_div integer_dup_items boolean_frominteger)))) ())
Lexicase best errors: [1 1 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in2 integer_fromboolean in1 print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (integer_flush integer_fromboolean integer_dup_items boolean_frominteger boolean_dup_items) (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup boolean_xor exec_dup_items exec_pop (integer_div integer_dup_items boolean_frominteger)))) ())
Zero cases best errors: [1 1 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 92 352 108 403 403 92 403 108 352)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (352 92 352 108 403 403 92 403 108 352)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 integer_fromboolean integer_max in3 print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if (boolean_empty) () integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10) ())
Errors: [0 1 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 7.335
Median total errors in population: 7
Error averages by case: (0.648 0.908 0.648 0.892 0.597 0.597 0.908 0.597 0.892 0.648)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.926
Average program size in population (points): 30.58
Average percent parens in population: 0.215
Minimum age in population: 44.62468126416206
Maximum age in population: 49.31951697636396
Average age in population: 47.37724274191726
Median age in population: 47.51066247234121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 7014066
--- Timings ---
Current time: 1559314603123 milliseconds
Total Time:          77.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 81.5%
Fitness Testing:      8.1 seconds, 10.4%
Report:               6.1 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Lexicase best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_gt integer_fromboolean boolean_empty boolean_rot exec_if (boolean_invert_second_then_and integer_pop exec_if (in4 exec_yankdup integer_eq boolean_swap integer_dup_times) (-10)) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Zero cases best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_gt integer_fromboolean boolean_empty boolean_rot exec_if (boolean_invert_second_then_and integer_pop exec_if (in4 exec_yankdup integer_eq boolean_swap integer_dup_times) (-10)) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (305 185 192 185 192 185 185 185 185 277)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (305 185 192 185 192 185 185 185 185 277)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in4 integer_fromboolean integer_max integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty) exec_yankdup -10 boolean_swap) ())
Errors: [1 0 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.924
Median total errors in population: 9
Error averages by case: (0.695 0.815 0.808 0.815 0.808 0.815 0.815 0.815 0.815 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.386
Average program size in population (points): 31.165
Average percent parens in population: 0.214
Minimum age in population: 45.79463475942612
Maximum age in population: 50.89384160004556
Average age in population: 48.85191934646666
Median age in population: 48.94822543603368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 7241917
--- Timings ---
Current time: 1559314605615 milliseconds
Total Time:          79.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 81.6%
Fitness Testing:      8.3 seconds, 10.4%
Report:               6.3 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap})
Lexicase best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup integer_dec integer_eq integer_shove integer_add boolean_empty exec_yank integer_add boolean_empty exec_if () (exec_if (exec_flush boolean_swap exec_if (boolean_empty exec_yankdup integer_eq boolean_swap) ()) ()))
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap})
Zero cases best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup integer_dec integer_eq integer_shove integer_add boolean_empty exec_yank integer_add boolean_empty exec_if () (exec_if (exec_flush boolean_swap exec_if (boolean_empty exec_yankdup integer_eq boolean_swap) ()) ()))
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 181 575 108 575 89 957 575 575 89)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (108 181 575 108 575 89 957 575 575 89)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_integer_336} {:close 1, :instruction tag_integer_335} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction -10})
Best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_shove integer_add boolean_empty integer_mod exec_if (exec_flush integer_pop tag_integer_336) (tag_integer_335) in2 exec_dup_items boolean_xor exec_while () exec_k () (integer_sub -10))
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 29
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 6.168
Median total errors in population: 5
Error averages by case: (0.892 0.819 0.425 0.892 0.425 0.911 0.043 0.425 0.425 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.853
Average program size in population (points): 30.238
Average percent parens in population: 0.206
Minimum age in population: 47.66538504511118
Maximum age in population: 52.25208707712591
Average age in population: 50.3663554641935
Median age in population: 50.39931285695639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 7479035
--- Timings ---
Current time: 1559314608523 milliseconds
Total Time:          82.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 81.8%
Fitness Testing:      8.5 seconds, 10.3%
Report:               6.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap})
Lexicase best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_gt integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop) (exec_if (in4) (exec_yankdup integer_eq boolean_swap)))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap})
Zero cases best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_gt integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop) (exec_if (in4) (exec_yankdup integer_eq boolean_swap)))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (429 260 182 96 429 443 96 429 429 429)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (429 260 182 96 429 443 96 429 429 429)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in4 integer_fromboolean integer_max integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () () boolean_empty) (exec_yankdup -10 boolean_swap))
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.778
Median total errors in population: 8
Error averages by case: (0.571 0.74 0.818 0.904 0.571 0.557 0.904 0.571 0.571 0.571)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.857
Average program size in population (points): 30.318
Average percent parens in population: 0.208
Minimum age in population: 48.7809873893857
Maximum age in population: 53.77959093556274
Average age in population: 51.86439342425601
Median age in population: 51.91143999807537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 7678278
--- Timings ---
Current time: 1559314611023 milliseconds
Total Time:          85.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 81.9%
Fitness Testing:      8.7 seconds, 10.2%
Report:               6.6 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in2 integer_fromboolean in1 print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (integer_flush integer_fromboolean integer_dup_items boolean_frominteger boolean_dup_items) (exec_flush integer_pop exec_if (print_newline) (exec_yankdup boolean_xor exec_dup_items exec_pop (integer_div integer_dup_items boolean_frominteger)))) ())
Lexicase best errors: [0 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in2 integer_fromboolean in1 print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (integer_flush integer_fromboolean integer_dup_items boolean_frominteger boolean_dup_items) (exec_flush integer_pop exec_if (print_newline) (exec_yankdup boolean_xor exec_dup_items exec_pop (integer_div integer_dup_items boolean_frominteger)))) ())
Zero cases best errors: [0 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (956 158 182 440 331 157 159 158 182 182)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (956 158 182 440 331 157 159 158 182 182)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Best program: (in2 integer_fromboolean in1 print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (integer_flush integer_fromboolean integer_dup_items boolean_frominteger boolean_dup_items) (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup boolean_xor exec_dup_items exec_pop (integer_div integer_dup_items boolean_frominteger)))) ())
Errors: [0 0 1 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.095
Median total errors in population: 8
Error averages by case: (0.044 0.842 0.818 0.56 0.669 0.843 0.841 0.842 0.818 0.818)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.55
Average program size in population (points): 29.915
Average percent parens in population: 0.206
Minimum age in population: 50.13629473000765
Maximum age in population: 55.2171588880592
Average age in population: 53.34694529676525
Median age in population: 53.40168576219003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 7902561
--- Timings ---
Current time: 1559314613521 milliseconds
Total Time:          87.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.8 seconds, 82.0%
Fitness Testing:      8.9 seconds, 10.1%
Report:               6.8 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction tag_integer_335} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 1, :instruction -10})
Lexicase best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_pop tag_integer_335 integer_gt exec_dup_items boolean_xor exec_while (exec_k () (integer_sub integer_flush boolean_empty) boolean_swap exec_yank) -10)
Lexicase best errors: [1 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction tag_integer_335} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 1, :instruction -10})
Zero cases best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_pop tag_integer_335 integer_gt exec_dup_items boolean_xor exec_while (exec_k () (integer_sub integer_flush boolean_empty) boolean_swap exec_yank) -10)
Zero cases best errors: [1 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 960 127 1000 1000 1000 299 127 127 960)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (531 960 127 0 0 0 299 127 127 960)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq exec_while (exec_k () (integer_sub integer_flush boolean_empty) integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10))
Errors: [1 0 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 33
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.869
Median total errors in population: 7
Error averages by case: (0.469 0.04 0.873 1.0 1.0 1.0 0.701 0.873 0.873 0.04)
Error minima by case: (0 0 0 1 1 1 0 0 0 0)
Average genome size in population (length): 23.184
Average program size in population (points): 29.881
Average percent parens in population: 0.218
Minimum age in population: 52.26219042763114
Maximum age in population: 56.61791853528121
Average age in population: 54.8472799564499
Median age in population: 54.89599874625856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 8136504
--- Timings ---
Current time: 1559314616038 milliseconds
Total Time:          90.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.0 seconds, 82.1%
Fitness Testing:      9.1 seconds, 10.1%
Report:               7.0 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: 68                 
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 54                 
Correct output: 24                  | Program output: 43                 
Correct output: 3                   | Program output: 98                 
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 97                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 90                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 90                 
Correct output: 5                   | Program output: 51                 
Correct output: 57                  | Program output: 80                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: 59                 
Correct output: -66                 | Program output: 66                 
Correct output: -93                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 92                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: 29                 
Correct output: -36                 | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: 68                 
Correct output: -84                 | Program output: 82                 
Correct output: -64                 | Program output: 97                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: 69                 
Correct output: -41                 | Program output: 88                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: 95                 
Correct output: -91                 | Program output: 98                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: 64                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: 84                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 91                 
Correct output: -82                 | Program output: 53                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 65                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: 66                 
Correct output: -45                 | Program output: 95                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in2 integer_fromboolean in1 print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (integer_flush integer_fromboolean integer_dup_items boolean_frominteger boolean_dup_items) (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup boolean_xor exec_dup_items exec_pop (integer_div integer_dup_items boolean_frominteger)))) ())
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in2 integer_fromboolean in1 print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (integer_flush integer_fromboolean integer_dup_items boolean_frominteger boolean_dup_items) (exec_flush integer_pop exec_if (boolean_empty) (exec_yankdup boolean_xor exec_dup_items exec_pop (integer_div integer_dup_items boolean_frominteger)))) ())
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (557 209 197 197 197 197 209 197 209 1000)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (557 209 197 197 197 197 209 197 209 0)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if})
Best program: (in1 integer_fromboolean integer_max exec_noop print_integer boolean_dup exec_dup_times (integer_eq integer_shove integer_add boolean_empty exec_noop) exec_if (integer_shove integer_add boolean_empty exec_while (exec_if (exec_if () ()) ())) ())
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.831
Median total errors in population: 9
Error averages by case: (0.443 0.791 0.803 0.803 0.803 0.803 0.791 0.803 0.791 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 22.868
Average program size in population (points): 29.0
Average percent parens in population: 0.203
Minimum age in population: 54.04346779675689
Maximum age in population: 58.39848032730515
Average age in population: 56.41365845486491
Median age in population: 56.49004769007297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 8361471
--- Timings ---
Current time: 1559314618344 milliseconds
Total Time:          92.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.9 seconds, 82.1%
Fitness Testing:      9.3 seconds, 10.1%
Report:               7.1 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: 26                 
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: 46                 
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 44                 
Correct output: 11                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 87                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 67                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 67                 
Correct output: -61                 | Program output: -16                
Correct output: -75                 | Program output: 89                 
Correct output: -68                 | Program output: 71                 
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 88                 
Correct output: -51                 | Program output: -43                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: 59                 
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: 8                  
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -49                
Correct output: -67                 | Program output: 72                 
Correct output: -19                 | Program output: 46                 
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: 47                 
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -3                 
Correct output: 19                  | Program output: 39                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -40                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: 39                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 63                 
Correct output: -73                 | Program output: -44                
Correct output: -12                 | Program output: 62                 
Correct output: -64                 | Program output: -15                
Correct output: -57                 | Program output: 30                 
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -57                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -3                 
Correct output: -93                 | Program output: 33                 
Correct output: -85                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush})
Lexicase best program: (in4 integer_fromboolean integer_max integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush) ())
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush})
Zero cases best program: (in4 integer_fromboolean integer_max integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty integer_min exec_if (exec_flush) ())
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (123 123 848 123 321 123 123 1000 321 847)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (123 123 848 123 321 123 123 0 321 847)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in4 integer_fromboolean integer_max exec_noop print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty exec_k_when_autoconstructing (exec_if (exec_flush integer_pop exec_s_when_autoconstructing (exec_rot () (exec_yankdup) (integer_eq boolean_swap integer_dup_times -10)) () ()) ()) ())
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.048
Median total errors in population: 8
Error averages by case: (0.877 0.877 0.152 0.877 0.679 0.877 0.877 1.0 0.679 0.153)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 23.347
Average program size in population (points): 29.916
Average percent parens in population: 0.212
Minimum age in population: 55.13998716953211
Maximum age in population: 59.86757777199819
Average age in population: 57.91654588332657
Median age in population: 58.00834719214254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 8605880
--- Timings ---
Current time: 1559314620693 milliseconds
Total Time:          94.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.9 seconds, 82.1%
Fitness Testing:      9.5 seconds, 10.1%
Report:               7.3 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub})
Lexicase best program: (in2 print_integer integer_max print_integer exec_k (boolean_empty integer_eq integer_shove) (integer_dup_times) boolean_empty integer_dup_times exec_if (integer_pop) (integer_mod) integer_gt exec_dup_items boolean_xor exec_while (exec_k () (integer_sub)))
Lexicase best errors: [0 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub})
Zero cases best program: (in2 print_integer integer_max print_integer exec_k (boolean_empty integer_eq integer_shove) (integer_dup_times) boolean_empty integer_dup_times exec_if (integer_pop) (integer_mod) integer_gt exec_dup_items boolean_xor exec_while (exec_k () (integer_sub)))
Zero cases best errors: [0 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (961 1000 559 559 1 396 396 396 1000 1000)
Population mean number of elite cases: 6.27
Count of perfect (error zero) individuals by case: (961 0 559 559 1 396 396 396 0 0)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 1, :instruction integer_pop} {:close 1, :instruction tag_integer_335} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction -10})
Best program: (in2 integer_fromboolean integer_max print_integer boolean_eq boolean_empty integer_eq integer_shove integer_dup_times boolean_empty boolean_rot exec_if () (integer_pop) tag_integer_335 integer_gt exec_dup_items boolean_xor exec_while (exec_k () (integer_sub integer_flush) boolean_empty) integer_mod integer_pop exec_if (boolean_empty) (exec_yankdup integer_eq boolean_swap integer_dup_times) -10)
Errors: [0 1 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.732
Median total errors in population: 7
Error averages by case: (0.039 1.0 0.441 0.441 0.999 0.604 0.604 0.604 1.0 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 1 1)
Average genome size in population (length): 23.408
Average program size in population (points): 29.656
Average percent parens in population: 0.200
Minimum age in population: 56.15278665360529
Maximum age in population: 61.26707575333421
Average age in population: 59.39351035206763
Median age in population: 59.47834348235483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 8868702
--- Timings ---
Current time: 1559314623629 milliseconds
Total Time:          97.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.9 seconds, 82.2%
Fitness Testing:      9.8 seconds, 10.1%
Report:               7.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 32                 
Correct output: 7                   | Program output: 62                 
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 66                 
Correct output: 7                   | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 40                 
Correct output: 3                   | Program output: 65                 
Correct output: 30                  | Program output: 97                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 88                 
Correct output: 11                  | Program output: 54                 
Correct output: 11                  | Program output: 92                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 76                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -7                 
Correct output: -68                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: 99                 
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: 94                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -25                
Correct output: -96                 | Program output: 42                 
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 63                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 76                 
Correct output: -65                 | Program output: 92                 
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: 74                 
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 85                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: 69                 
Correct output: -91                 | Program output: 83                 
Correct output: -73                 | Program output: 46                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 57                 
Correct output: -66                 | Program output: 11                 
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: 28                 
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Lexicase best program: (in2 integer_fromboolean integer_max print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (boolean_rot exec_flush integer_pop exec_if () (boolean_empty) exec_yankdup -10 boolean_swap) ()) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Zero cases best program: (in2 integer_fromboolean integer_max print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times exec_if (boolean_rot exec_flush integer_pop exec_if () (boolean_empty) exec_yankdup -10 boolean_swap) ()) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (458 458 178 178 1000 458 178 458 458 178)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (458 458 178 178 0 458 178 458 458 178)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 1, :instruction integer_pop})
Best program: (in2 integer_fromboolean integer_max print_integer exec_k (boolean_empty integer_eq integer_shove integer_dup_times boolean_empty boolean_rot exec_k () (integer_pop)) ())
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 18
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.998
Median total errors in population: 6
Error averages by case: (0.542 0.542 0.822 0.822 1.0 0.542 0.822 0.542 0.542 0.822)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 23.001
Average program size in population (points): 29.334
Average percent parens in population: 0.208
Minimum age in population: 57.15278665360529
Maximum age in population: 62.85936977114216
Average age in population: 60.85152334277828
Median age in population: 60.90712502743372
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 9131994
--- Timings ---
Current time: 1559314625840 milliseconds
Total Time:         100.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.7 seconds, 81.7%
Fitness Testing:     10.0 seconds, 10.0%
Report:               8.1 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Lexicase best errors: [0 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Zero cases best errors: [0 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1000 1 961 1000 433 527 1000 433)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (1 1 0 1 961 0 433 527 0 433)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Errors: [0 0 1 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.643
Median total errors in population: 8
Error averages by case: (0.999 0.999 1.0 0.999 0.039 1.0 0.567 0.473 1.0 0.567)
Error minima by case: (0 0 1 0 0 1 0 0 1 0)
Average genome size in population (length): 22.835
Average program size in population (points): 29.297
Average percent parens in population: 0.216
Minimum age in population: 60.06372671909048
Maximum age in population: 64.51165177430357
Average age in population: 62.35867110511118
Median age in population: 62.39916534324493
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 9390515
--- Timings ---
Current time: 1559314628120 milliseconds
Total Time:         102.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.6 seconds, 81.8%
Fitness Testing:     10.2 seconds, 10.0%
Report:               8.3 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_k (-10 boolean_swap) ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_k (-10 boolean_swap) ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (958 1 793 1 158 1 795 787 787 1)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (958 1 793 1 158 1 795 787 787 1)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Errors: [0 1 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.718
Median total errors in population: 5
Error averages by case: (0.042 0.999 0.207 0.999 0.842 0.999 0.205 0.213 0.213 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.735
Average program size in population (points): 26.191
Average percent parens in population: 0.206
Minimum age in population: 61.1402976103418
Maximum age in population: 65.50464177065669
Average age in population: 64.37443123644572
Median age in population: 64.13885362208339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 601
Genome diversity (% unique genomes):	 0.36
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 617
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 9582314
--- Timings ---
Current time: 1559314630259 milliseconds
Total Time:         104.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.4 seconds, 81.8%
Fitness Testing:     10.4 seconds, 10.0%
Report:               8.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: 26                 
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -60                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 19                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 26                 
Correct output: 7                   | Program output: 84                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 94                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 83                 
Correct output: 11                  | Program output: 34                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -82                
Correct output: -61                 | Program output: -54                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: 16                 
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -68                
Correct output: 19                  | Program output: 21                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 15                 
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 53                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -68                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: 5                  
Correct output: -73                 | Program output: -35                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 29                 
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: 64                 
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -57                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -10                
Correct output: -84                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Lexicase best program: (in2 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Zero cases best program: (in2 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 390 368 954 188 188 955 557 368 557)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (188 390 368 954 188 188 955 557 368 557)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in2 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.287
Median total errors in population: 4
Error averages by case: (0.812 0.61 0.632 0.046 0.812 0.812 0.045 0.443 0.632 0.443)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.952
Average program size in population (points): 24.962
Average percent parens in population: 0.200
Minimum age in population: 63.56062781187211
Maximum age in population: 67.16917224981398
Average age in population: 66.27517387114509
Median age in population: 65.98095801340241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 291
Genome diversity (% unique genomes):	 0.33
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 303
Syntactic diversity (% unique Push programs):	 0.297
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 9733500
--- Timings ---
Current time: 1559314632347 milliseconds
Total Time:         106.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.2 seconds, 81.9%
Fitness Testing:     10.6 seconds,  9.9%
Report:               8.6 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 3, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) () boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 3, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) () boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (822 822 331 822 823 823 331 491 331 131)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (822 822 331 822 823 823 331 491 331 131)
Population mean number of perfect (error zero) cases: 5.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.273
Median total errors in population: 4
Error averages by case: (0.178 0.178 0.669 0.178 0.177 0.177 0.669 0.509 0.669 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.83
Average program size in population (points): 24.795
Average percent parens in population: 0.199
Minimum age in population: 65.27079291263726
Maximum age in population: 68.98095801340241
Average age in population: 67.77265240911305
Median age in population: 67.98095801340241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.403
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 287
Syntactic diversity (% unique Push programs):	 0.36
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 9887037
--- Timings ---
Current time: 1559314634744 milliseconds
Total Time:         108.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.3 seconds, 82.0%
Fitness Testing:     10.7 seconds,  9.9%
Report:               8.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 848 113 848 848 632 202 632 854 848)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (113 848 113 848 848 632 202 632 854 848)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Errors: [1 0 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.062
Median total errors in population: 3
Error averages by case: (0.887 0.152 0.887 0.152 0.152 0.368 0.798 0.368 0.146 0.152)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.849
Average program size in population (points): 24.804
Average percent parens in population: 0.198
Minimum age in population: 66.27079291263726
Maximum age in population: 70.98095801340241
Average age in population: 69.24122748726992
Median age in population: 69.23095801340241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 224
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 10040225
--- Timings ---
Current time: 1559314637159 milliseconds
Total Time:         111.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.4 seconds, 82.1%
Fitness Testing:     10.9 seconds,  9.8%
Report:               8.9 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Lexicase best program: (in2 integer_fromboolean in3 integer_min print_integer boolean_dup print_boolean integer_eq integer_shove exec_s (boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap)) () ())
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Zero cases best program: (in2 integer_fromboolean in3 integer_min print_integer boolean_dup print_boolean integer_eq integer_shove exec_s (boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap)) () ())
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 197 197 370 369 947 946 370 381 381)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (197 197 197 370 369 947 946 370 381 381)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Errors: [1 1 1 0 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.645
Median total errors in population: 5
Error averages by case: (0.803 0.803 0.803 0.63 0.631 0.053 0.054 0.63 0.619 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.532
Average program size in population (points): 27.718
Average percent parens in population: 0.218
Minimum age in population: 67.98095801340241
Maximum age in population: 72.65002867725292
Average age in population: 71.09720083638807
Median age in population: 71.10595801340241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 289
Genome diversity (% unique genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 294
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 10209091
--- Timings ---
Current time: 1559314639423 milliseconds
Total Time:         113.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.3 seconds, 82.2%
Fitness Testing:     11.1 seconds,  9.8%
Report:               9.1 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 53                 
Correct output: 16                  | Program output: 72                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 19                 
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -9                 
Correct output: -93                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -3                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 1                  
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 17                 
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -31                
Correct output: -41                 | Program output: 83                 
Correct output: -85                 | Program output: 23                 
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: 86                 
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: 36                 
Correct output: -96                 | Program output: 10                 
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 33                 
Correct output: -46                 | Program output: 73                 
Correct output: -82                 | Program output: 20                 
Correct output: -77                 | Program output: 22                 
Correct output: -7                  | Program output: 46                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction integer_yank})
Lexicase best program: (in1 integer_fromboolean in3 in1 integer_fromboolean integer_lt in4 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 integer_yank))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction integer_yank})
Zero cases best program: (in1 integer_fromboolean in3 in1 integer_fromboolean integer_lt in4 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 integer_yank))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (451 371 716 371 362 717 451 960 450 451)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (451 371 716 371 362 717 451 960 450 451)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction boolean_swap})
Best program: (in1 integer_fromboolean in3 integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (exec_flush integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 boolean_swap))
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.7
Median total errors in population: 5
Error averages by case: (0.549 0.629 0.284 0.629 0.638 0.283 0.549 0.04 0.55 0.549)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.628
Average program size in population (points): 27.672
Average percent parens in population: 0.212
Minimum age in population: 68.98095801340241
Maximum age in population: 74.29345801340241
Average age in population: 72.61717359400166
Median age in population: 72.69970801340241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 10382457
--- Timings ---
Current time: 1559314641741 milliseconds
Total Time:         115.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.3 seconds, 82.2%
Fitness Testing:     11.3 seconds,  9.7%
Report:               9.2 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 9                  
Correct output: 7                   | Program output: 90                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 53                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 73                 
Correct output: 20                  | Program output: 72                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: 66                 
Correct output: -59                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: 15                 
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: -31                
Correct output: -66                 | Program output: -62                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -19                
Correct output: -36                 | Program output: 67                 
Correct output: -91                 | Program output: 34                 
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: 56                 
Correct output: -96                 | Program output: -73                
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -4                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: 4                  
Correct output: -87                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -53                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: 32                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 93                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction exec_s})
Lexicase best program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 exec_s () () ()))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction exec_s})
Zero cases best program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 exec_s () () ()))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 440 499 440 735 439 499 735 501 734)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (200 440 499 440 735 439 499 735 501 734)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup})
Best program: (in1 integer_fromboolean in3 exec_yank integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in4 integer_min print_integer boolean_dup)
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 4.778
Median total errors in population: 4
Error averages by case: (0.8 0.56 0.501 0.56 0.265 0.561 0.501 0.265 0.499 0.266)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.107
Average program size in population (points): 29.871
Average percent parens in population: 0.222
Minimum age in population: 71.23095801340241
Maximum age in population: 76.29345801340241
Average age in population: 74.45305717922935
Median age in population: 74.57470801340241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 10572681
--- Timings ---
Current time: 1559314644078 milliseconds
Total Time:         118.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.2 seconds, 82.3%
Fitness Testing:     11.5 seconds,  9.7%
Report:               9.4 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 223
Test mean error for best: 0.22300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 68                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: 67                 
Correct output: -47                 | Program output: -47                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 30                  | Program output: 68                 
Correct output: 13                  | Program output: 25                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 57                  | Program output: 61                 
Correct output: 0                   | Program output: 3                  
Correct output: -57                 | Program output: -57                
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -59                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -36                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: -64                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: 41                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: 29                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -52                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: 32                 
Correct output: -46                 | Program output: -44                
Correct output: -82                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction exec_s})
Lexicase best program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in4 integer_min integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove exec_s_when_autoconstructing (boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 exec_s () () ())) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction exec_s})
Zero cases best program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in4 integer_min integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove exec_s_when_autoconstructing (boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 exec_s () () ())) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (730 732 555 590 557 346 346 903 734 589)
Population mean number of elite cases: 6.08
Count of perfect (error zero) individuals by case: (730 732 555 590 557 346 346 903 734 589)
Population mean number of perfect (error zero) cases: 6.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -10} {:close 0, :instruction exec_s})
Best program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min integer_min print_integer boolean_dup boolean_empty integer_eq integer_shove integer_add boolean_empty boolean_rot exec_if (integer_sub integer_pop exec_if () (boolean_empty)) (exec_yankdup -10 exec_s () () ()))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 3.918
Median total errors in population: 4
Error averages by case: (0.27 0.268 0.445 0.41 0.443 0.654 0.654 0.097 0.266 0.411)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.822
Average program size in population (points): 25.787
Average percent parens in population: 0.164
Minimum age in population: 73.29345801340241
Maximum age in population: 78.10595801340241
Average age in population: 76.68588109517623
Median age in population: 76.87158301340241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 319
Genome diversity (% unique genomes):	 0.336
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.291
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 10762928
--- Timings ---
Current time: 1559314646412 milliseconds
Total Time:         120.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.2 seconds, 82.3%
Fitness Testing:     11.7 seconds,  9.7%
Report:               9.5 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup})
Lexicase best program: (in1 in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 17
Percent parens: 0.059
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup})
Zero cases best program: (in1 in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 17
Percent parens: 0.059
--- Lexicase Population Statistics ---
Count of elite individuals by case: (666 676 955 675 681 661 945 675 675 672)
Population mean number of elite cases: 7.28
Count of perfect (error zero) individuals by case: (666 676 955 675 681 661 945 675 675 672)
Population mean number of perfect (error zero) cases: 7.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup})
Best program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 2.719
Median total errors in population: 2
Error averages by case: (0.334 0.324 0.045 0.325 0.319 0.339 0.055 0.325 0.325 0.328)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.129
Average program size in population (points): 28.493
Average percent parens in population: 0.167
Minimum age in population: 77.01220801340241
Maximum age in population: 80.01220801340241
Average age in population: 78.68921205911295
Median age in population: 78.64697363840241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 183
Genome diversity (% unique genomes):	 0.359
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.317
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 10968799
--- Timings ---
Current time: 1559314648734 milliseconds
Total Time:         122.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.1 seconds, 82.3%
Fitness Testing:     11.9 seconds,  9.7%
Report:               9.7 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 50
Successful program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 16


Auto-simplifying with starting size: 16
step: 0
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 500
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 1000
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 1500
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 2000
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 2500
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 3000
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 3500
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 4000
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 4500
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 5000
program: (in1 integer_fromboolean in3 in1 integer_fromboolean in3 in1 integer_fromboolean boolean_yankdup in2 integer_min in4 integer_min print_integer boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -57                 | Program output: -57                
Correct output: 62                  | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -82                 | Program output: -82                
Correct output: -71                 | Program output: -71                
Correct output: 6                   | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: 56                  | Program output: 56                 
Correct output: 34                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 39                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 51                 
Correct output: 20                  | Program output: 47                 
Correct output: 5                   | Program output: 18                 
Correct output: 57                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: -57                 | Program output: -29                
Correct output: -66                 | Program output: -66                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -23                
Correct output: -68                 | Program output: -34                
Correct output: -99                 | Program output: -99                
Correct output: -59                 | Program output: -15                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -33                
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -35                
Correct output: -84                 | Program output: -81                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -67                
Correct output: -19                 | Program output: -19                
Correct output: -11                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -65                 | Program output: -35                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -41                 | Program output: -41                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 36                 
Correct output: -91                 | Program output: -91                
Correct output: -19                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -80                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -7                  | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: 72                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
;;******************************
