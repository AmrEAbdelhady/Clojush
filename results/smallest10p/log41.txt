Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 7 56 56] 7] [[36 99 99 99] 36] [[94 94 94 50] 50] [[-100 -82 -100 -100] -100] [[81 72 72 72] 72] [[100 -44 -44 -44] -44] [[-91 -91 -80 -91] -91] [[41 41 82 41] 41] [[-42 -42 -42 -61] -61] [[57 57 -48 57] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[56 7 56 56] 7]
Train Case:   6 | Input/Output: [[36 99 99 99] 36]
Train Case:   7 | Input/Output: [[94 94 94 50] 50]
Train Case:   8 | Input/Output: [[-100 -82 -100 -100] -100]
Train Case:   9 | Input/Output: [[81 72 72 72] 72]
Train Case:  10 | Input/Output: [[100 -44 -44 -44] -44]
Train Case:  11 | Input/Output: [[-91 -91 -80 -91] -91]
Train Case:  12 | Input/Output: [[41 41 82 41] 41]
Train Case:  13 | Input/Output: [[-42 -42 -42 -61] -61]
Train Case:  14 | Input/Output: [[57 57 -48 57] -48]
Train Case:  15 | Input/Output: [(59 59 59 59) 59]
Train Case:  16 | Input/Output: [(-76 -76 -76 -76) -76]
Train Case:  17 | Input/Output: [(83 83 83 83) 83]
Train Case:  18 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  19 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  20 | Input/Output: [(48 81 5 69) 5]
Train Case:  21 | Input/Output: [(25 6 50 21) 6]
Train Case:  22 | Input/Output: [(59 51 51 55) 51]
Train Case:  23 | Input/Output: [(13 38 11 58) 11]
Train Case:  24 | Input/Output: [(35 44 1 87) 1]
Train Case:  25 | Input/Output: [(60 22 12 100) 12]
Train Case:  26 | Input/Output: [(93 39 11 15) 11]
Train Case:  27 | Input/Output: [(58 77 58 99) 58]
Train Case:  28 | Input/Output: [(37 28 20 73) 20]
Train Case:  29 | Input/Output: [(48 59 32 55) 32]
Train Case:  30 | Input/Output: [(94 32 5 80) 5]
Train Case:  31 | Input/Output: [(33 97 17 57) 17]
Train Case:  32 | Input/Output: [(13 70 63 90) 13]
Train Case:  33 | Input/Output: [(29 86 87 6) 6]
Train Case:  34 | Input/Output: [(67 90 21 41) 21]
Train Case:  35 | Input/Output: [(30 28 86 82) 28]
Train Case:  36 | Input/Output: [(3 56 32 64) 3]
Train Case:  37 | Input/Output: [(53 67 59 12) 12]
Train Case:  38 | Input/Output: [(51 44 10 11) 10]
Train Case:  39 | Input/Output: [(53 9 29 5) 5]
Train Case:  40 | Input/Output: [(-20 77 -86 39) -86]
Train Case:  41 | Input/Output: [(22 1 52 -6) -6]
Train Case:  42 | Input/Output: [(58 -27 -47 57) -47]
Train Case:  43 | Input/Output: [(99 -19 24 60) -19]
Train Case:  44 | Input/Output: [(99 80 -42 54) -42]
Train Case:  45 | Input/Output: [(-2 49 -33 35) -33]
Train Case:  46 | Input/Output: [(-24 -86 -71 -47) -86]
Train Case:  47 | Input/Output: [(23 -37 -93 78) -93]
Train Case:  48 | Input/Output: [(54 -13 -55 -69) -69]
Train Case:  49 | Input/Output: [(-61 -6 86 17) -61]
Train Case:  50 | Input/Output: [(95 28 48 -94) -94]
Train Case:  51 | Input/Output: [(-95 22 69 -2) -95]
Train Case:  52 | Input/Output: [(93 69 98 -100) -100]
Train Case:  53 | Input/Output: [(56 -43 -21 40) -43]
Train Case:  54 | Input/Output: [(82 -40 -35 -82) -82]
Train Case:  55 | Input/Output: [(-9 -81 -5 3) -81]
Train Case:  56 | Input/Output: [(77 -73 45 19) -73]
Train Case:  57 | Input/Output: [(16 -70 -11 -89) -89]
Train Case:  58 | Input/Output: [(-78 -16 -14 -98) -98]
Train Case:  59 | Input/Output: [(-91 -27 71 -63) -91]
Train Case:  60 | Input/Output: [(-57 -97 -18 -52) -97]
Train Case:  61 | Input/Output: [(11 74 -95 -15) -95]
Train Case:  62 | Input/Output: [(-35 64 -70 -32) -70]
Train Case:  63 | Input/Output: [(-27 18 60 54) -27]
Train Case:  64 | Input/Output: [(82 -99 80 -24) -99]
Train Case:  65 | Input/Output: [(-86 76 22 -25) -86]
Train Case:  66 | Input/Output: [(84 80 -30 96) -30]
Train Case:  67 | Input/Output: [(-81 -60 -98 61) -98]
Train Case:  68 | Input/Output: [(-32 96 78 83) -32]
Train Case:  69 | Input/Output: [(39 11 -71 99) -71]
Train Case:  70 | Input/Output: [(-100 26 86 84) -100]
Train Case:  71 | Input/Output: [(3 -13 52 -90) -90]
Train Case:  72 | Input/Output: [(95 70 -96 -52) -96]
Train Case:  73 | Input/Output: [(-87 14 5 -95) -95]
Train Case:  74 | Input/Output: [(-19 62 -81 -34) -81]
Train Case:  75 | Input/Output: [(-11 10 -49 75) -49]
Train Case:  76 | Input/Output: [(-41 -29 67 -83) -83]
Train Case:  77 | Input/Output: [(68 -26 -51 47) -51]
Train Case:  78 | Input/Output: [(44 27 70 -85) -85]
Train Case:  79 | Input/Output: [(59 -36 -32 81) -36]
Train Case:  80 | Input/Output: [(-24 30 -75 -36) -75]
Train Case:  81 | Input/Output: [(-80 43 -76 -92) -92]
Train Case:  82 | Input/Output: [(-20 -53 -8 -26) -53]
Train Case:  83 | Input/Output: [(-94 60 -55 77) -94]
Train Case:  84 | Input/Output: [(-5 28 -2 80) -5]
Train Case:  85 | Input/Output: [(-28 -66 -47 -23) -66]
Train Case:  86 | Input/Output: [(55 -36 98 -27) -36]
Train Case:  87 | Input/Output: [(80 56 73 -85) -85]
Train Case:  88 | Input/Output: [(-38 50 -53 51) -53]
Train Case:  89 | Input/Output: [(-55 42 32 -41) -55]
Train Case:  90 | Input/Output: [(-48 73 2 74) -48]
Train Case:  91 | Input/Output: [(95 -86 -35 62) -86]
Train Case:  92 | Input/Output: [(48 -73 45 89) -73]
Train Case:  93 | Input/Output: [(-73 -79 50 27) -79]
Train Case:  94 | Input/Output: [(-83 -53 -44 25) -83]
Train Case:  95 | Input/Output: [(12 82 -33 -21) -33]
Train Case:  96 | Input/Output: [(91 -65 38 -11) -65]
Train Case:  97 | Input/Output: [(-50 -64 -93 -10) -93]
Train Case:  98 | Input/Output: [(-21 -46 15 14) -46]
Train Case:  99 | Input/Output: [(50 95 93 -68) -68]
Test Case:   0 | Input/Output: [[-52 -21 -21 -21] -52]
Test Case:   1 | Input/Output: [[65 7 65 65] 7]
Test Case:   2 | Input/Output: [[-21 29 -21 -21] -21]
Test Case:   3 | Input/Output: [[27 15 15 15] 15]
Test Case:   4 | Input/Output: [[33 79 79 79] 33]
Test Case:   5 | Input/Output: [[-57 -57 -57 94] -57]
Test Case:   6 | Input/Output: [[21 42 42 42] 21]
Test Case:   7 | Input/Output: [[-91 -91 -91 -52] -91]
Test Case:   8 | Input/Output: [[-40 -40 -40 7] -40]
Test Case:   9 | Input/Output: [[-84 -84 -84 25] -84]
Test Case:  10 | Input/Output: [[-56 84 -56 -56] -56]
Test Case:  11 | Input/Output: [[86 86 -98 86] -98]
Test Case:  12 | Input/Output: [[9 54 54 54] 9]
Test Case:  13 | Input/Output: [[-17 -17 -17 -1] -17]
Test Case:  14 | Input/Output: [[-27 -45 -45 -45] -45]
Test Case:  15 | Input/Output: [[-84 76 76 76] -84]
Test Case:  16 | Input/Output: [[61 25 61 61] 25]
Test Case:  17 | Input/Output: [[-94 -77 -94 -94] -94]
Test Case:  18 | Input/Output: [[85 48 85 85] 48]
Test Case:  19 | Input/Output: [[40 -62 -62 -62] -62]
Test Case:  20 | Input/Output: [[38 -100 38 38] -100]
Test Case:  21 | Input/Output: [[-34 80 -34 -34] -34]
Test Case:  22 | Input/Output: [[64 64 68 64] 64]
Test Case:  23 | Input/Output: [[6 6 -71 6] -71]
Test Case:  24 | Input/Output: [[27 27 27 31] 27]
Test Case:  25 | Input/Output: [[-29 -29 -29 -33] -33]
Test Case:  26 | Input/Output: [[55 55 28 55] 28]
Test Case:  27 | Input/Output: [[90 90 90 -35] -35]
Test Case:  28 | Input/Output: [[-98 -98 -98 -57] -98]
Test Case:  29 | Input/Output: [[-13 28 28 28] -13]
Test Case:  30 | Input/Output: [[-36 -36 95 -36] -36]
Test Case:  31 | Input/Output: [[-33 -22 -33 -33] -33]
Test Case:  32 | Input/Output: [[-29 -29 -55 -29] -55]
Test Case:  33 | Input/Output: [[-35 -35 -25 -35] -35]
Test Case:  34 | Input/Output: [[-26 -46 -26 -26] -46]
Test Case:  35 | Input/Output: [[43 43 -1 43] -1]
Test Case:  36 | Input/Output: [[76 76 8 76] 8]
Test Case:  37 | Input/Output: [[7 7 -52 7] -52]
Test Case:  38 | Input/Output: [[31 31 77 31] 31]
Test Case:  39 | Input/Output: [[-31 -5 -5 -5] -31]
Test Case:  40 | Input/Output: [[-60 45 -60 -60] -60]
Test Case:  41 | Input/Output: [[86 86 13 86] 13]
Test Case:  42 | Input/Output: [[-81 -81 -81 15] -81]
Test Case:  43 | Input/Output: [[79 79 79 50] 50]
Test Case:  44 | Input/Output: [[-18 -18 20 -18] -18]
Test Case:  45 | Input/Output: [[-82 -82 -82 93] -82]
Test Case:  46 | Input/Output: [[-64 -41 -41 -41] -64]
Test Case:  47 | Input/Output: [[-90 -90 47 -90] -90]
Test Case:  48 | Input/Output: [[8 8 8 51] 8]
Test Case:  49 | Input/Output: [[56 -26 56 56] -26]
Test Case:  50 | Input/Output: [[3 77 77 77] 3]
Test Case:  51 | Input/Output: [[75 -72 75 75] -72]
Test Case:  52 | Input/Output: [[65 55 65 65] 55]
Test Case:  53 | Input/Output: [[69 69 69 -99] -99]
Test Case:  54 | Input/Output: [[0 -17 -17 -17] -17]
Test Case:  55 | Input/Output: [[-37 -37 -55 -37] -55]
Test Case:  56 | Input/Output: [[16 -13 16 16] -13]
Test Case:  57 | Input/Output: [[67 -12 67 67] -12]
Test Case:  58 | Input/Output: [[-42 -35 -42 -42] -42]
Test Case:  59 | Input/Output: [[-9 -9 35 -9] -9]
Test Case:  60 | Input/Output: [[92 61 92 92] 61]
Test Case:  61 | Input/Output: [[-71 -71 -53 -71] -71]
Test Case:  62 | Input/Output: [[-36 -36 -92 -36] -92]
Test Case:  63 | Input/Output: [[47 47 47 47] 47]
Test Case:  64 | Input/Output: [[48 -98 48 48] -98]
Test Case:  65 | Input/Output: [[31 -41 31 31] -41]
Test Case:  66 | Input/Output: [[-69 -69 -69 -39] -69]
Test Case:  67 | Input/Output: [[87 -99 -99 -99] -99]
Test Case:  68 | Input/Output: [[-48 86 86 86] -48]
Test Case:  69 | Input/Output: [[7 8 7 7] 7]
Test Case:  70 | Input/Output: [[58 58 58 -2] -2]
Test Case:  71 | Input/Output: [[48 73 73 73] 48]
Test Case:  72 | Input/Output: [[-24 -1 -1 -1] -24]
Test Case:  73 | Input/Output: [[29 -99 -99 -99] -99]
Test Case:  74 | Input/Output: [[-86 55 55 55] -86]
Test Case:  75 | Input/Output: [[90 -60 90 90] -60]
Test Case:  76 | Input/Output: [[66 66 66 -63] -63]
Test Case:  77 | Input/Output: [[90 -8 90 90] -8]
Test Case:  78 | Input/Output: [[45 45 -54 45] -54]
Test Case:  79 | Input/Output: [[-32 -49 -49 -49] -49]
Test Case:  80 | Input/Output: [[-36 10 -36 -36] -36]
Test Case:  81 | Input/Output: [[-41 41 -41 -41] -41]
Test Case:  82 | Input/Output: [[66 -99 66 66] -99]
Test Case:  83 | Input/Output: [[-27 -27 -27 -27] -27]
Test Case:  84 | Input/Output: [[-82 -82 -82 69] -82]
Test Case:  85 | Input/Output: [[-39 -84 -39 -39] -84]
Test Case:  86 | Input/Output: [[49 -33 49 49] -33]
Test Case:  87 | Input/Output: [[2 2 2 79] 2]
Test Case:  88 | Input/Output: [[79 79 44 79] 44]
Test Case:  89 | Input/Output: [[62 62 62 -13] -13]
Test Case:  90 | Input/Output: [[5 5 5 -54] -54]
Test Case:  91 | Input/Output: [[-31 -34 -34 -34] -34]
Test Case:  92 | Input/Output: [[-15 -85 -85 -85] -85]
Test Case:  93 | Input/Output: [[-13 -13 -97 -13] -97]
Test Case:  94 | Input/Output: [[14 14 -61 14] -61]
Test Case:  95 | Input/Output: [[-18 16 -18 -18] -18]
Test Case:  96 | Input/Output: [[89 -15 -15 -15] -15]
Test Case:  97 | Input/Output: [[-70 34 -70 -70] -70]
Test Case:  98 | Input/Output: [[77 -26 -26 -26] -26]
Test Case:  99 | Input/Output: [[48 -40 48 48] -40]
Test Case: 100 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 101 | Input/Output: [(18 18 18 18) 18]
Test Case: 102 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 103 | Input/Output: [(38 38 38 38) 38]
Test Case: 104 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 105 | Input/Output: [(25 25 25 25) 25]
Test Case: 106 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 107 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 108 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 109 | Input/Output: [(95 95 95 95) 95]
Test Case: 110 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 111 | Input/Output: [(68 68 68 68) 68]
Test Case: 112 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 113 | Input/Output: [(34 34 34 34) 34]
Test Case: 114 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 115 | Input/Output: [(27 27 27 27) 27]
Test Case: 116 | Input/Output: [(9 9 9 9) 9]
Test Case: 117 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 118 | Input/Output: [(90 90 90 90) 90]
Test Case: 119 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 120 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 121 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 122 | Input/Output: [(65 65 65 65) 65]
Test Case: 123 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 124 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 125 | Input/Output: [(94 94 94 94) 94]
Test Case: 126 | Input/Output: [(81 81 81 81) 81]
Test Case: 127 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 128 | Input/Output: [(28 28 28 28) 28]
Test Case: 129 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 130 | Input/Output: [(16 16 16 16) 16]
Test Case: 131 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 132 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 133 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 134 | Input/Output: [(60 60 60 60) 60]
Test Case: 135 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 136 | Input/Output: [(21 21 21 21) 21]
Test Case: 137 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 138 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 139 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 140 | Input/Output: [(53 53 53 53) 53]
Test Case: 141 | Input/Output: [(86 86 86 86) 86]
Test Case: 142 | Input/Output: [(16 16 16 16) 16]
Test Case: 143 | Input/Output: [(61 61 61 61) 61]
Test Case: 144 | Input/Output: [(30 30 30 30) 30]
Test Case: 145 | Input/Output: [(96 96 96 96) 96]
Test Case: 146 | Input/Output: [(24 24 24 24) 24]
Test Case: 147 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 148 | Input/Output: [(52 52 52 52) 52]
Test Case: 149 | Input/Output: [(43 43 43 43) 43]
Test Case: 150 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 151 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 152 | Input/Output: [(19 19 19 19) 19]
Test Case: 153 | Input/Output: [(24 24 24 24) 24]
Test Case: 154 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 155 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 156 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 157 | Input/Output: [(38 38 38 38) 38]
Test Case: 158 | Input/Output: [(21 21 21 21) 21]
Test Case: 159 | Input/Output: [(11 11 11 11) 11]
Test Case: 160 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 161 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 162 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 163 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 164 | Input/Output: [(54 54 54 54) 54]
Test Case: 165 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 166 | Input/Output: [(10 10 10 10) 10]
Test Case: 167 | Input/Output: [(52 52 52 52) 52]
Test Case: 168 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 169 | Input/Output: [(66 66 66 66) 66]
Test Case: 170 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 171 | Input/Output: [(47 47 47 47) 47]
Test Case: 172 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 173 | Input/Output: [(65 65 65 65) 65]
Test Case: 174 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 175 | Input/Output: [(68 68 68 68) 68]
Test Case: 176 | Input/Output: [(37 37 37 37) 37]
Test Case: 177 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 178 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 179 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 180 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 181 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 182 | Input/Output: [(10 10 10 10) 10]
Test Case: 183 | Input/Output: [(78 78 78 78) 78]
Test Case: 184 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 185 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 186 | Input/Output: [(95 95 95 95) 95]
Test Case: 187 | Input/Output: [(12 12 12 12) 12]
Test Case: 188 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 189 | Input/Output: [(53 53 53 53) 53]
Test Case: 190 | Input/Output: [(75 75 75 75) 75]
Test Case: 191 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 192 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 193 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 194 | Input/Output: [(91 91 91 91) 91]
Test Case: 195 | Input/Output: [(59 59 59 59) 59]
Test Case: 196 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 197 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 198 | Input/Output: [(25 25 25 25) 25]
Test Case: 199 | Input/Output: [(46 46 46 46) 46]
Test Case: 200 | Input/Output: [(15 46 55 84) 15]
Test Case: 201 | Input/Output: [(1 44 40 79) 1]
Test Case: 202 | Input/Output: [(46 12 90 88) 12]
Test Case: 203 | Input/Output: [(83 50 85 20) 20]
Test Case: 204 | Input/Output: [(83 46 43 86) 43]
Test Case: 205 | Input/Output: [(18 1 98 95) 1]
Test Case: 206 | Input/Output: [(2 35 0 34) 0]
Test Case: 207 | Input/Output: [(77 16 66 37) 16]
Test Case: 208 | Input/Output: [(71 56 46 72) 46]
Test Case: 209 | Input/Output: [(32 66 20 21) 20]
Test Case: 210 | Input/Output: [(2 48 24 31) 2]
Test Case: 211 | Input/Output: [(86 50 90 2) 2]
Test Case: 212 | Input/Output: [(4 12 98 89) 4]
Test Case: 213 | Input/Output: [(25 62 24 59) 24]
Test Case: 214 | Input/Output: [(9 84 64 98) 9]
Test Case: 215 | Input/Output: [(25 14 28 50) 14]
Test Case: 216 | Input/Output: [(89 12 50 26) 12]
Test Case: 217 | Input/Output: [(7 34 87 67) 7]
Test Case: 218 | Input/Output: [(13 73 40 5) 5]
Test Case: 219 | Input/Output: [(7 2 29 51) 2]
Test Case: 220 | Input/Output: [(52 52 26 87) 26]
Test Case: 221 | Input/Output: [(56 47 50 91) 47]
Test Case: 222 | Input/Output: [(7 74 15 77) 7]
Test Case: 223 | Input/Output: [(64 38 25 79) 25]
Test Case: 224 | Input/Output: [(56 29 5 61) 5]
Test Case: 225 | Input/Output: [(16 58 51 88) 16]
Test Case: 226 | Input/Output: [(14 22 33 85) 14]
Test Case: 227 | Input/Output: [(50 94 70 43) 43]
Test Case: 228 | Input/Output: [(88 68 91 68) 68]
Test Case: 229 | Input/Output: [(20 5 59 96) 5]
Test Case: 230 | Input/Output: [(50 89 8 31) 8]
Test Case: 231 | Input/Output: [(91 85 64 27) 27]
Test Case: 232 | Input/Output: [(81 34 36 53) 34]
Test Case: 233 | Input/Output: [(81 80 61 53) 53]
Test Case: 234 | Input/Output: [(70 68 19 98) 19]
Test Case: 235 | Input/Output: [(49 42 57 33) 33]
Test Case: 236 | Input/Output: [(99 19 41 34) 19]
Test Case: 237 | Input/Output: [(75 45 19 6) 6]
Test Case: 238 | Input/Output: [(26 52 4 34) 4]
Test Case: 239 | Input/Output: [(71 87 0 7) 0]
Test Case: 240 | Input/Output: [(32 72 80 30) 30]
Test Case: 241 | Input/Output: [(23 78 34 98) 23]
Test Case: 242 | Input/Output: [(26 93 49 59) 26]
Test Case: 243 | Input/Output: [(32 61 40 37) 32]
Test Case: 244 | Input/Output: [(38 77 22 57) 22]
Test Case: 245 | Input/Output: [(79 74 59 35) 35]
Test Case: 246 | Input/Output: [(57 95 91 87) 57]
Test Case: 247 | Input/Output: [(52 22 67 33) 22]
Test Case: 248 | Input/Output: [(71 18 75 42) 18]
Test Case: 249 | Input/Output: [(6 15 9 35) 6]
Test Case: 250 | Input/Output: [(73 6 46 14) 6]
Test Case: 251 | Input/Output: [(19 96 14 58) 14]
Test Case: 252 | Input/Output: [(66 81 72 77) 66]
Test Case: 253 | Input/Output: [(54 6 25 90) 6]
Test Case: 254 | Input/Output: [(98 68 54 29) 29]
Test Case: 255 | Input/Output: [(9 83 60 35) 9]
Test Case: 256 | Input/Output: [(42 49 98 70) 42]
Test Case: 257 | Input/Output: [(36 12 81 33) 12]
Test Case: 258 | Input/Output: [(37 6 21 50) 6]
Test Case: 259 | Input/Output: [(14 24 16 76) 14]
Test Case: 260 | Input/Output: [(94 79 9 32) 9]
Test Case: 261 | Input/Output: [(59 2 5 50) 2]
Test Case: 262 | Input/Output: [(30 45 30 93) 30]
Test Case: 263 | Input/Output: [(50 74 96 69) 50]
Test Case: 264 | Input/Output: [(94 37 29 73) 29]
Test Case: 265 | Input/Output: [(16 56 98 18) 16]
Test Case: 266 | Input/Output: [(51 60 12 45) 12]
Test Case: 267 | Input/Output: [(42 78 9 18) 9]
Test Case: 268 | Input/Output: [(46 52 76 4) 4]
Test Case: 269 | Input/Output: [(89 100 99 61) 61]
Test Case: 270 | Input/Output: [(73 29 54 35) 29]
Test Case: 271 | Input/Output: [(52 95 23 44) 23]
Test Case: 272 | Input/Output: [(2 6 11 55) 2]
Test Case: 273 | Input/Output: [(4 32 44 89) 4]
Test Case: 274 | Input/Output: [(18 48 43 88) 18]
Test Case: 275 | Input/Output: [(6 63 98 20) 6]
Test Case: 276 | Input/Output: [(98 53 59 38) 38]
Test Case: 277 | Input/Output: [(9 47 0 2) 0]
Test Case: 278 | Input/Output: [(12 47 31 4) 4]
Test Case: 279 | Input/Output: [(24 4 2 61) 2]
Test Case: 280 | Input/Output: [(61 35 61 100) 35]
Test Case: 281 | Input/Output: [(80 94 13 18) 13]
Test Case: 282 | Input/Output: [(57 79 59 93) 57]
Test Case: 283 | Input/Output: [(3 91 23 20) 3]
Test Case: 284 | Input/Output: [(6 66 41 46) 6]
Test Case: 285 | Input/Output: [(46 53 59 89) 46]
Test Case: 286 | Input/Output: [(33 78 100 74) 33]
Test Case: 287 | Input/Output: [(37 93 52 86) 37]
Test Case: 288 | Input/Output: [(63 53 55 3) 3]
Test Case: 289 | Input/Output: [(9 46 19 3) 3]
Test Case: 290 | Input/Output: [(26 58 67 48) 26]
Test Case: 291 | Input/Output: [(20 48 4 21) 4]
Test Case: 292 | Input/Output: [(79 53 95 39) 39]
Test Case: 293 | Input/Output: [(87 71 91 29) 29]
Test Case: 294 | Input/Output: [(34 12 61 71) 12]
Test Case: 295 | Input/Output: [(48 30 90 59) 30]
Test Case: 296 | Input/Output: [(32 72 19 57) 19]
Test Case: 297 | Input/Output: [(71 38 66 27) 27]
Test Case: 298 | Input/Output: [(16 69 92 83) 16]
Test Case: 299 | Input/Output: [(71 10 21 17) 10]
Test Case: 300 | Input/Output: [(60 67 21 51) 21]
Test Case: 301 | Input/Output: [(57 9 22 26) 9]
Test Case: 302 | Input/Output: [(30 48 52 93) 30]
Test Case: 303 | Input/Output: [(73 58 1 90) 1]
Test Case: 304 | Input/Output: [(21 2 89 50) 2]
Test Case: 305 | Input/Output: [(84 90 19 47) 19]
Test Case: 306 | Input/Output: [(46 60 46 4) 4]
Test Case: 307 | Input/Output: [(23 42 12 85) 12]
Test Case: 308 | Input/Output: [(17 93 29 35) 17]
Test Case: 309 | Input/Output: [(39 67 16 56) 16]
Test Case: 310 | Input/Output: [(77 18 90 26) 18]
Test Case: 311 | Input/Output: [(20 52 84 19) 19]
Test Case: 312 | Input/Output: [(33 66 40 21) 21]
Test Case: 313 | Input/Output: [(4 83 45 36) 4]
Test Case: 314 | Input/Output: [(29 88 52 55) 29]
Test Case: 315 | Input/Output: [(83 71 79 41) 41]
Test Case: 316 | Input/Output: [(17 63 63 93) 17]
Test Case: 317 | Input/Output: [(35 48 63 57) 35]
Test Case: 318 | Input/Output: [(68 67 94 82) 67]
Test Case: 319 | Input/Output: [(85 59 82 99) 59]
Test Case: 320 | Input/Output: [(50 35 72 62) 35]
Test Case: 321 | Input/Output: [(52 5 90 28) 5]
Test Case: 322 | Input/Output: [(76 91 11 25) 11]
Test Case: 323 | Input/Output: [(50 47 25 32) 25]
Test Case: 324 | Input/Output: [(29 83 47 19) 19]
Test Case: 325 | Input/Output: [(92 98 4 59) 4]
Test Case: 326 | Input/Output: [(60 28 65 85) 28]
Test Case: 327 | Input/Output: [(90 14 82 88) 14]
Test Case: 328 | Input/Output: [(38 22 85 22) 22]
Test Case: 329 | Input/Output: [(48 10 85 68) 10]
Test Case: 330 | Input/Output: [(33 78 56 65) 33]
Test Case: 331 | Input/Output: [(58 32 5 6) 5]
Test Case: 332 | Input/Output: [(96 30 44 40) 30]
Test Case: 333 | Input/Output: [(60 83 25 43) 25]
Test Case: 334 | Input/Output: [(23 45 67 97) 23]
Test Case: 335 | Input/Output: [(59 39 90 56) 39]
Test Case: 336 | Input/Output: [(32 4 98 17) 4]
Test Case: 337 | Input/Output: [(40 4 50 74) 4]
Test Case: 338 | Input/Output: [(43 43 7 84) 7]
Test Case: 339 | Input/Output: [(77 23 77 91) 23]
Test Case: 340 | Input/Output: [(72 58 95 15) 15]
Test Case: 341 | Input/Output: [(83 67 23 32) 23]
Test Case: 342 | Input/Output: [(48 24 14 81) 14]
Test Case: 343 | Input/Output: [(21 23 62 49) 21]
Test Case: 344 | Input/Output: [(41 44 63 32) 32]
Test Case: 345 | Input/Output: [(24 36 52 35) 24]
Test Case: 346 | Input/Output: [(3 70 76 95) 3]
Test Case: 347 | Input/Output: [(9 26 69 29) 9]
Test Case: 348 | Input/Output: [(12 97 76 96) 12]
Test Case: 349 | Input/Output: [(58 35 25 84) 25]
Test Case: 350 | Input/Output: [(40 17 72 56) 17]
Test Case: 351 | Input/Output: [(77 31 33 51) 31]
Test Case: 352 | Input/Output: [(24 61 97 32) 24]
Test Case: 353 | Input/Output: [(24 94 55 64) 24]
Test Case: 354 | Input/Output: [(81 31 50 89) 31]
Test Case: 355 | Input/Output: [(88 40 34 23) 23]
Test Case: 356 | Input/Output: [(94 63 11 33) 11]
Test Case: 357 | Input/Output: [(71 51 30 76) 30]
Test Case: 358 | Input/Output: [(60 42 10 88) 10]
Test Case: 359 | Input/Output: [(99 51 100 55) 51]
Test Case: 360 | Input/Output: [(85 16 14 38) 14]
Test Case: 361 | Input/Output: [(43 96 87 85) 43]
Test Case: 362 | Input/Output: [(61 32 33 80) 32]
Test Case: 363 | Input/Output: [(2 35 92 43) 2]
Test Case: 364 | Input/Output: [(40 100 7 34) 7]
Test Case: 365 | Input/Output: [(69 18 59 46) 18]
Test Case: 366 | Input/Output: [(17 2 77 47) 2]
Test Case: 367 | Input/Output: [(15 26 100 1) 1]
Test Case: 368 | Input/Output: [(43 44 78 60) 43]
Test Case: 369 | Input/Output: [(53 75 70 5) 5]
Test Case: 370 | Input/Output: [(72 53 70 1) 1]
Test Case: 371 | Input/Output: [(51 36 80 81) 36]
Test Case: 372 | Input/Output: [(78 77 63 36) 36]
Test Case: 373 | Input/Output: [(26 10 11 10) 10]
Test Case: 374 | Input/Output: [(33 45 54 69) 33]
Test Case: 375 | Input/Output: [(57 74 20 35) 20]
Test Case: 376 | Input/Output: [(68 33 12 7) 7]
Test Case: 377 | Input/Output: [(10 95 88 83) 10]
Test Case: 378 | Input/Output: [(85 38 36 52) 36]
Test Case: 379 | Input/Output: [(37 91 46 49) 37]
Test Case: 380 | Input/Output: [(73 68 77 31) 31]
Test Case: 381 | Input/Output: [(26 86 3 36) 3]
Test Case: 382 | Input/Output: [(45 27 28 40) 27]
Test Case: 383 | Input/Output: [(12 97 9 11) 9]
Test Case: 384 | Input/Output: [(67 52 83 96) 52]
Test Case: 385 | Input/Output: [(26 15 22 30) 15]
Test Case: 386 | Input/Output: [(96 45 5 76) 5]
Test Case: 387 | Input/Output: [(85 79 56 37) 37]
Test Case: 388 | Input/Output: [(89 23 95 41) 23]
Test Case: 389 | Input/Output: [(24 68 30 16) 16]
Test Case: 390 | Input/Output: [(76 44 22 25) 22]
Test Case: 391 | Input/Output: [(19 68 91 33) 19]
Test Case: 392 | Input/Output: [(29 7 97 77) 7]
Test Case: 393 | Input/Output: [(30 66 100 81) 30]
Test Case: 394 | Input/Output: [(43 12 26 28) 12]
Test Case: 395 | Input/Output: [(97 98 95 65) 65]
Test Case: 396 | Input/Output: [(32 14 3 80) 3]
Test Case: 397 | Input/Output: [(41 4 50 16) 4]
Test Case: 398 | Input/Output: [(27 21 5 68) 5]
Test Case: 399 | Input/Output: [(44 90 43 0) 0]
Test Case: 400 | Input/Output: [(64 -46 -38 90) -46]
Test Case: 401 | Input/Output: [(-82 51 73 83) -82]
Test Case: 402 | Input/Output: [(-50 -5 37 41) -50]
Test Case: 403 | Input/Output: [(-22 -47 69 -10) -47]
Test Case: 404 | Input/Output: [(77 74 -55 1) -55]
Test Case: 405 | Input/Output: [(-3 78 -95 -75) -95]
Test Case: 406 | Input/Output: [(82 74 -39 -36) -39]
Test Case: 407 | Input/Output: [(-92 -86 24 27) -92]
Test Case: 408 | Input/Output: [(81 60 29 -9) -9]
Test Case: 409 | Input/Output: [(-12 -7 16 -44) -44]
Test Case: 410 | Input/Output: [(-57 -73 -76 58) -76]
Test Case: 411 | Input/Output: [(78 -36 -45 75) -45]
Test Case: 412 | Input/Output: [(23 23 91 -55) -55]
Test Case: 413 | Input/Output: [(32 2 -79 -14) -79]
Test Case: 414 | Input/Output: [(-69 68 -25 93) -69]
Test Case: 415 | Input/Output: [(71 -66 -69 48) -69]
Test Case: 416 | Input/Output: [(24 89 -64 -55) -64]
Test Case: 417 | Input/Output: [(58 4 -30 73) -30]
Test Case: 418 | Input/Output: [(-85 -68 60 74) -85]
Test Case: 419 | Input/Output: [(42 -38 16 -52) -52]
Test Case: 420 | Input/Output: [(-13 -76 44 -76) -76]
Test Case: 421 | Input/Output: [(-66 -41 23 -45) -66]
Test Case: 422 | Input/Output: [(-36 53 -28 8) -36]
Test Case: 423 | Input/Output: [(-61 -59 -19 -52) -61]
Test Case: 424 | Input/Output: [(77 14 -74 40) -74]
Test Case: 425 | Input/Output: [(-40 3 -100 -25) -100]
Test Case: 426 | Input/Output: [(-18 -3 99 36) -18]
Test Case: 427 | Input/Output: [(-4 -13 24 89) -13]
Test Case: 428 | Input/Output: [(-100 -75 33 -4) -100]
Test Case: 429 | Input/Output: [(-68 76 9 59) -68]
Test Case: 430 | Input/Output: [(-83 91 47 86) -83]
Test Case: 431 | Input/Output: [(-93 -29 -68 -54) -93]
Test Case: 432 | Input/Output: [(91 60 -10 -29) -29]
Test Case: 433 | Input/Output: [(15 -45 78 -65) -65]
Test Case: 434 | Input/Output: [(-41 -9 0 29) -41]
Test Case: 435 | Input/Output: [(-72 99 -30 -15) -72]
Test Case: 436 | Input/Output: [(-52 24 -7 -96) -96]
Test Case: 437 | Input/Output: [(-65 64 79 -91) -91]
Test Case: 438 | Input/Output: [(32 -2 -68 -16) -68]
Test Case: 439 | Input/Output: [(16 22 1 -61) -61]
Test Case: 440 | Input/Output: [(-24 -75 25 43) -75]
Test Case: 441 | Input/Output: [(21 8 42 -20) -20]
Test Case: 442 | Input/Output: [(59 70 85 26) 26]
Test Case: 443 | Input/Output: [(27 73 -84 -65) -84]
Test Case: 444 | Input/Output: [(51 32 -1 29) -1]
Test Case: 445 | Input/Output: [(13 -3 72 -19) -19]
Test Case: 446 | Input/Output: [(17 -94 -83 15) -94]
Test Case: 447 | Input/Output: [(14 -86 18 4) -86]
Test Case: 448 | Input/Output: [(-7 50 31 -23) -23]
Test Case: 449 | Input/Output: [(46 86 -75 61) -75]
Test Case: 450 | Input/Output: [(25 -21 -16 -44) -44]
Test Case: 451 | Input/Output: [(26 54 23 79) 23]
Test Case: 452 | Input/Output: [(47 -25 81 89) -25]
Test Case: 453 | Input/Output: [(98 -4 -25 -51) -51]
Test Case: 454 | Input/Output: [(4 -32 -2 -92) -92]
Test Case: 455 | Input/Output: [(23 3 -28 -4) -28]
Test Case: 456 | Input/Output: [(-62 42 -27 -57) -62]
Test Case: 457 | Input/Output: [(9 -39 -82 -11) -82]
Test Case: 458 | Input/Output: [(-27 -23 1 -9) -27]
Test Case: 459 | Input/Output: [(56 -17 32 55) -17]
Test Case: 460 | Input/Output: [(4 59 -97 66) -97]
Test Case: 461 | Input/Output: [(-81 -74 96 40) -81]
Test Case: 462 | Input/Output: [(98 96 -43 -41) -43]
Test Case: 463 | Input/Output: [(-34 -8 18 50) -34]
Test Case: 464 | Input/Output: [(-75 80 -67 78) -75]
Test Case: 465 | Input/Output: [(-9 -24 -64 -19) -64]
Test Case: 466 | Input/Output: [(28 -80 69 15) -80]
Test Case: 467 | Input/Output: [(-63 46 40 5) -63]
Test Case: 468 | Input/Output: [(-40 82 -48 -61) -61]
Test Case: 469 | Input/Output: [(8 77 -52 -14) -52]
Test Case: 470 | Input/Output: [(62 56 -11 76) -11]
Test Case: 471 | Input/Output: [(88 84 -90 -52) -90]
Test Case: 472 | Input/Output: [(90 -12 -97 84) -97]
Test Case: 473 | Input/Output: [(1 -54 62 -72) -72]
Test Case: 474 | Input/Output: [(-98 37 42 100) -98]
Test Case: 475 | Input/Output: [(-95 -58 66 -49) -95]
Test Case: 476 | Input/Output: [(88 -52 91 -9) -52]
Test Case: 477 | Input/Output: [(-68 -16 -88 -6) -88]
Test Case: 478 | Input/Output: [(100 -23 -22 -84) -84]
Test Case: 479 | Input/Output: [(97 66 89 -97) -97]
Test Case: 480 | Input/Output: [(-68 84 81 -7) -68]
Test Case: 481 | Input/Output: [(-29 -24 -27 97) -29]
Test Case: 482 | Input/Output: [(87 -24 7 66) -24]
Test Case: 483 | Input/Output: [(-46 -43 -91 71) -91]
Test Case: 484 | Input/Output: [(99 -79 43 72) -79]
Test Case: 485 | Input/Output: [(-64 -89 25 27) -89]
Test Case: 486 | Input/Output: [(-24 82 -81 85) -81]
Test Case: 487 | Input/Output: [(7 -24 53 32) -24]
Test Case: 488 | Input/Output: [(-35 -83 9 65) -83]
Test Case: 489 | Input/Output: [(76 26 -25 -86) -86]
Test Case: 490 | Input/Output: [(-86 87 19 -29) -86]
Test Case: 491 | Input/Output: [(-8 56 61 -77) -77]
Test Case: 492 | Input/Output: [(-21 63 -17 -51) -51]
Test Case: 493 | Input/Output: [(-65 -78 26 -54) -78]
Test Case: 494 | Input/Output: [(-3 62 -79 -12) -79]
Test Case: 495 | Input/Output: [(-94 5 48 16) -94]
Test Case: 496 | Input/Output: [(-31 -77 -49 -10) -77]
Test Case: 497 | Input/Output: [(42 47 67 82) 42]
Test Case: 498 | Input/Output: [(67 11 68 -89) -89]
Test Case: 499 | Input/Output: [(-23 -3 0 -58) -58]
Test Case: 500 | Input/Output: [(56 61 -58 -62) -62]
Test Case: 501 | Input/Output: [(-96 -67 8 -52) -96]
Test Case: 502 | Input/Output: [(88 -78 34 35) -78]
Test Case: 503 | Input/Output: [(-92 77 37 84) -92]
Test Case: 504 | Input/Output: [(57 8 -38 69) -38]
Test Case: 505 | Input/Output: [(8 -19 32 -74) -74]
Test Case: 506 | Input/Output: [(-66 42 46 69) -66]
Test Case: 507 | Input/Output: [(92 26 -92 -82) -92]
Test Case: 508 | Input/Output: [(-5 -95 9 80) -95]
Test Case: 509 | Input/Output: [(-27 16 61 -53) -53]
Test Case: 510 | Input/Output: [(42 -5 -25 -55) -55]
Test Case: 511 | Input/Output: [(73 -6 46 -2) -6]
Test Case: 512 | Input/Output: [(15 -9 33 38) -9]
Test Case: 513 | Input/Output: [(-91 -3 -40 68) -91]
Test Case: 514 | Input/Output: [(-66 -36 81 -1) -66]
Test Case: 515 | Input/Output: [(-79 96 -55 50) -79]
Test Case: 516 | Input/Output: [(69 88 -91 -35) -91]
Test Case: 517 | Input/Output: [(11 43 -29 96) -29]
Test Case: 518 | Input/Output: [(95 33 -22 37) -22]
Test Case: 519 | Input/Output: [(-21 37 -97 -59) -97]
Test Case: 520 | Input/Output: [(5 83 -94 54) -94]
Test Case: 521 | Input/Output: [(-33 57 -95 -88) -95]
Test Case: 522 | Input/Output: [(67 -16 -18 -34) -34]
Test Case: 523 | Input/Output: [(-26 43 -68 54) -68]
Test Case: 524 | Input/Output: [(65 97 -45 60) -45]
Test Case: 525 | Input/Output: [(29 -56 -3 21) -56]
Test Case: 526 | Input/Output: [(-54 -3 -72 -40) -72]
Test Case: 527 | Input/Output: [(-40 75 86 -73) -73]
Test Case: 528 | Input/Output: [(-8 77 1 -58) -58]
Test Case: 529 | Input/Output: [(11 -88 5 -16) -88]
Test Case: 530 | Input/Output: [(-20 97 36 -44) -44]
Test Case: 531 | Input/Output: [(-67 -17 83 -100) -100]
Test Case: 532 | Input/Output: [(-23 -23 -43 -32) -43]
Test Case: 533 | Input/Output: [(-7 7 -8 67) -8]
Test Case: 534 | Input/Output: [(93 37 2 -30) -30]
Test Case: 535 | Input/Output: [(32 -88 39 56) -88]
Test Case: 536 | Input/Output: [(-2 48 83 82) -2]
Test Case: 537 | Input/Output: [(61 -30 -14 -84) -84]
Test Case: 538 | Input/Output: [(-8 -25 33 81) -25]
Test Case: 539 | Input/Output: [(89 55 -14 -34) -34]
Test Case: 540 | Input/Output: [(99 -66 -21 95) -66]
Test Case: 541 | Input/Output: [(-91 6 -73 -73) -91]
Test Case: 542 | Input/Output: [(82 73 10 -84) -84]
Test Case: 543 | Input/Output: [(-63 -93 -60 -49) -93]
Test Case: 544 | Input/Output: [(86 0 -32 47) -32]
Test Case: 545 | Input/Output: [(-22 24 -29 -41) -41]
Test Case: 546 | Input/Output: [(73 -71 81 -50) -71]
Test Case: 547 | Input/Output: [(-25 0 -42 57) -42]
Test Case: 548 | Input/Output: [(-57 -54 4 31) -57]
Test Case: 549 | Input/Output: [(-47 15 15 51) -47]
Test Case: 550 | Input/Output: [(-84 -84 94 2) -84]
Test Case: 551 | Input/Output: [(-85 11 -81 -33) -85]
Test Case: 552 | Input/Output: [(-61 -13 4 -35) -61]
Test Case: 553 | Input/Output: [(38 -3 54 56) -3]
Test Case: 554 | Input/Output: [(-14 -54 39 -71) -71]
Test Case: 555 | Input/Output: [(-32 -12 59 -38) -38]
Test Case: 556 | Input/Output: [(85 -27 -9 -2) -27]
Test Case: 557 | Input/Output: [(-37 85 39 -42) -42]
Test Case: 558 | Input/Output: [(-24 -7 -49 -74) -74]
Test Case: 559 | Input/Output: [(65 -40 -89 49) -89]
Test Case: 560 | Input/Output: [(79 -66 -90 -8) -90]
Test Case: 561 | Input/Output: [(-41 82 33 51) -41]
Test Case: 562 | Input/Output: [(77 18 51 39) 18]
Test Case: 563 | Input/Output: [(75 -42 -15 66) -42]
Test Case: 564 | Input/Output: [(97 98 2 42) 2]
Test Case: 565 | Input/Output: [(-54 -71 -43 98) -71]
Test Case: 566 | Input/Output: [(-33 -80 93 -66) -80]
Test Case: 567 | Input/Output: [(14 -36 -48 74) -48]
Test Case: 568 | Input/Output: [(-88 30 41 67) -88]
Test Case: 569 | Input/Output: [(-9 64 -79 -4) -79]
Test Case: 570 | Input/Output: [(-46 -27 92 -9) -46]
Test Case: 571 | Input/Output: [(29 48 -5 94) -5]
Test Case: 572 | Input/Output: [(-69 -42 24 72) -69]
Test Case: 573 | Input/Output: [(-19 -81 -42 46) -81]
Test Case: 574 | Input/Output: [(-3 17 29 66) -3]
Test Case: 575 | Input/Output: [(88 85 31 60) 31]
Test Case: 576 | Input/Output: [(0 -61 -16 49) -61]
Test Case: 577 | Input/Output: [(-63 -52 -100 -47) -100]
Test Case: 578 | Input/Output: [(-38 16 -65 -83) -83]
Test Case: 579 | Input/Output: [(88 -66 56 -6) -66]
Test Case: 580 | Input/Output: [(79 -95 56 -59) -95]
Test Case: 581 | Input/Output: [(15 -92 62 -43) -92]
Test Case: 582 | Input/Output: [(63 59 -42 -47) -47]
Test Case: 583 | Input/Output: [(10 -42 65 -80) -80]
Test Case: 584 | Input/Output: [(71 72 62 -75) -75]
Test Case: 585 | Input/Output: [(-2 -78 -6 -1) -78]
Test Case: 586 | Input/Output: [(36 -42 26 -2) -42]
Test Case: 587 | Input/Output: [(-47 -95 -74 -89) -95]
Test Case: 588 | Input/Output: [(28 74 -91 58) -91]
Test Case: 589 | Input/Output: [(82 89 -5 23) -5]
Test Case: 590 | Input/Output: [(-38 28 -9 -90) -90]
Test Case: 591 | Input/Output: [(61 -6 90 78) -6]
Test Case: 592 | Input/Output: [(-46 -12 -50 -34) -50]
Test Case: 593 | Input/Output: [(1 -61 -98 -43) -98]
Test Case: 594 | Input/Output: [(80 -48 -64 5) -64]
Test Case: 595 | Input/Output: [(73 -18 55 -95) -95]
Test Case: 596 | Input/Output: [(-45 54 -75 41) -75]
Test Case: 597 | Input/Output: [(45 -40 98 33) -40]
Test Case: 598 | Input/Output: [(87 -33 79 -76) -76]
Test Case: 599 | Input/Output: [(37 -5 -50 4) -50]
Test Case: 600 | Input/Output: [(26 62 87 63) 26]
Test Case: 601 | Input/Output: [(-81 21 50 27) -81]
Test Case: 602 | Input/Output: [(75 62 -55 81) -55]
Test Case: 603 | Input/Output: [(-57 -8 -28 -91) -91]
Test Case: 604 | Input/Output: [(48 -52 -36 -36) -52]
Test Case: 605 | Input/Output: [(-67 78 21 -41) -67]
Test Case: 606 | Input/Output: [(7 90 -7 25) -7]
Test Case: 607 | Input/Output: [(84 -59 -21 -19) -59]
Test Case: 608 | Input/Output: [(-89 -24 -82 26) -89]
Test Case: 609 | Input/Output: [(-36 2 -16 -18) -36]
Test Case: 610 | Input/Output: [(99 -72 -59 64) -72]
Test Case: 611 | Input/Output: [(16 65 -60 -81) -81]
Test Case: 612 | Input/Output: [(90 86 -5 42) -5]
Test Case: 613 | Input/Output: [(-16 36 25 24) -16]
Test Case: 614 | Input/Output: [(-67 -68 82 11) -68]
Test Case: 615 | Input/Output: [(29 76 66 -78) -78]
Test Case: 616 | Input/Output: [(70 99 85 76) 70]
Test Case: 617 | Input/Output: [(69 58 -9 -26) -26]
Test Case: 618 | Input/Output: [(-91 46 85 -60) -91]
Test Case: 619 | Input/Output: [(99 76 89 37) 37]
Test Case: 620 | Input/Output: [(45 85 13 -86) -86]
Test Case: 621 | Input/Output: [(60 -81 23 -41) -81]
Test Case: 622 | Input/Output: [(78 -60 33 -95) -95]
Test Case: 623 | Input/Output: [(47 55 -29 -7) -29]
Test Case: 624 | Input/Output: [(-16 91 -18 65) -18]
Test Case: 625 | Input/Output: [(-4 -68 -49 -23) -68]
Test Case: 626 | Input/Output: [(96 39 -84 -62) -84]
Test Case: 627 | Input/Output: [(80 -57 -25 -18) -57]
Test Case: 628 | Input/Output: [(-48 -26 9 -76) -76]
Test Case: 629 | Input/Output: [(39 15 -40 -57) -57]
Test Case: 630 | Input/Output: [(-91 60 -59 -94) -94]
Test Case: 631 | Input/Output: [(54 98 76 21) 21]
Test Case: 632 | Input/Output: [(1 20 39 11) 1]
Test Case: 633 | Input/Output: [(-9 -77 40 -62) -77]
Test Case: 634 | Input/Output: [(53 -45 -83 -26) -83]
Test Case: 635 | Input/Output: [(-57 29 -62 -67) -67]
Test Case: 636 | Input/Output: [(-12 -69 58 73) -69]
Test Case: 637 | Input/Output: [(-100 -45 45 65) -100]
Test Case: 638 | Input/Output: [(-91 -14 -21 -98) -98]
Test Case: 639 | Input/Output: [(72 65 -46 -92) -92]
Test Case: 640 | Input/Output: [(-70 7 -47 -52) -70]
Test Case: 641 | Input/Output: [(-98 -57 -29 -79) -98]
Test Case: 642 | Input/Output: [(52 -64 -53 62) -64]
Test Case: 643 | Input/Output: [(80 -85 -71 43) -85]
Test Case: 644 | Input/Output: [(68 27 -2 27) -2]
Test Case: 645 | Input/Output: [(-42 -69 -42 -11) -69]
Test Case: 646 | Input/Output: [(32 -54 -11 33) -54]
Test Case: 647 | Input/Output: [(-4 69 -92 -91) -92]
Test Case: 648 | Input/Output: [(34 44 72 -24) -24]
Test Case: 649 | Input/Output: [(18 -12 57 8) -12]
Test Case: 650 | Input/Output: [(-46 37 -98 19) -98]
Test Case: 651 | Input/Output: [(59 -88 39 -41) -88]
Test Case: 652 | Input/Output: [(18 -76 42 -90) -90]
Test Case: 653 | Input/Output: [(47 100 -55 7) -55]
Test Case: 654 | Input/Output: [(82 70 -14 78) -14]
Test Case: 655 | Input/Output: [(86 -54 -22 92) -54]
Test Case: 656 | Input/Output: [(-14 36 32 94) -14]
Test Case: 657 | Input/Output: [(-23 -42 66 -89) -89]
Test Case: 658 | Input/Output: [(68 59 67 -78) -78]
Test Case: 659 | Input/Output: [(6 79 -78 100) -78]
Test Case: 660 | Input/Output: [(-32 -92 -79 -48) -92]
Test Case: 661 | Input/Output: [(-79 -26 -90 50) -90]
Test Case: 662 | Input/Output: [(-72 4 29 84) -72]
Test Case: 663 | Input/Output: [(-53 89 48 -61) -61]
Test Case: 664 | Input/Output: [(69 95 -15 -65) -65]
Test Case: 665 | Input/Output: [(-62 -15 -84 -99) -99]
Test Case: 666 | Input/Output: [(-82 -53 81 -48) -82]
Test Case: 667 | Input/Output: [(-78 1 70 -20) -78]
Test Case: 668 | Input/Output: [(-27 100 -72 -79) -79]
Test Case: 669 | Input/Output: [(-6 11 -39 85) -39]
Test Case: 670 | Input/Output: [(-40 -72 -32 14) -72]
Test Case: 671 | Input/Output: [(38 -82 9 37) -82]
Test Case: 672 | Input/Output: [(10 -21 64 96) -21]
Test Case: 673 | Input/Output: [(41 34 -70 24) -70]
Test Case: 674 | Input/Output: [(16 20 -9 37) -9]
Test Case: 675 | Input/Output: [(67 -83 33 98) -83]
Test Case: 676 | Input/Output: [(57 -29 -21 -52) -52]
Test Case: 677 | Input/Output: [(-51 14 -93 54) -93]
Test Case: 678 | Input/Output: [(-6 12 -34 12) -34]
Test Case: 679 | Input/Output: [(38 9 -23 87) -23]
Test Case: 680 | Input/Output: [(-20 -82 89 -76) -82]
Test Case: 681 | Input/Output: [(-5 84 -48 98) -48]
Test Case: 682 | Input/Output: [(65 -62 -37 -42) -62]
Test Case: 683 | Input/Output: [(-26 73 -37 11) -37]
Test Case: 684 | Input/Output: [(24 -47 -31 -100) -100]
Test Case: 685 | Input/Output: [(26 -60 -98 -97) -98]
Test Case: 686 | Input/Output: [(-58 -35 -84 -63) -84]
Test Case: 687 | Input/Output: [(-43 -39 12 7) -43]
Test Case: 688 | Input/Output: [(-37 -79 -55 -53) -79]
Test Case: 689 | Input/Output: [(95 29 -44 49) -44]
Test Case: 690 | Input/Output: [(93 28 -92 56) -92]
Test Case: 691 | Input/Output: [(90 -34 -83 -62) -83]
Test Case: 692 | Input/Output: [(-61 50 -83 9) -83]
Test Case: 693 | Input/Output: [(-90 76 -56 60) -90]
Test Case: 694 | Input/Output: [(-91 -91 0 -61) -91]
Test Case: 695 | Input/Output: [(43 -64 31 28) -64]
Test Case: 696 | Input/Output: [(59 55 -51 -54) -54]
Test Case: 697 | Input/Output: [(-55 92 -69 19) -69]
Test Case: 698 | Input/Output: [(-89 -10 -55 -92) -92]
Test Case: 699 | Input/Output: [(33 -59 -100 72) -100]
Test Case: 700 | Input/Output: [(-19 75 14 -35) -35]
Test Case: 701 | Input/Output: [(-92 -24 24 79) -92]
Test Case: 702 | Input/Output: [(36 -76 -46 61) -76]
Test Case: 703 | Input/Output: [(-100 -53 -47 22) -100]
Test Case: 704 | Input/Output: [(38 46 58 9) 9]
Test Case: 705 | Input/Output: [(100 12 14 66) 12]
Test Case: 706 | Input/Output: [(-92 96 -63 -68) -92]
Test Case: 707 | Input/Output: [(87 -33 -4 29) -33]
Test Case: 708 | Input/Output: [(-99 -68 37 85) -99]
Test Case: 709 | Input/Output: [(24 80 -60 -79) -79]
Test Case: 710 | Input/Output: [(-29 -8 58 -1) -29]
Test Case: 711 | Input/Output: [(83 -24 -14 -41) -41]
Test Case: 712 | Input/Output: [(-81 22 -31 -2) -81]
Test Case: 713 | Input/Output: [(-14 -82 -16 -75) -82]
Test Case: 714 | Input/Output: [(-35 32 37 31) -35]
Test Case: 715 | Input/Output: [(51 3 -23 10) -23]
Test Case: 716 | Input/Output: [(8 3 81 14) 3]
Test Case: 717 | Input/Output: [(-71 -71 53 -36) -71]
Test Case: 718 | Input/Output: [(-23 29 12 -88) -88]
Test Case: 719 | Input/Output: [(87 99 -63 90) -63]
Test Case: 720 | Input/Output: [(-62 -79 72 -1) -79]
Test Case: 721 | Input/Output: [(70 -8 -19 95) -19]
Test Case: 722 | Input/Output: [(21 -84 62 -72) -84]
Test Case: 723 | Input/Output: [(43 83 -76 -7) -76]
Test Case: 724 | Input/Output: [(57 22 -40 27) -40]
Test Case: 725 | Input/Output: [(10 -55 11 62) -55]
Test Case: 726 | Input/Output: [(-78 70 75 -48) -78]
Test Case: 727 | Input/Output: [(-87 45 -31 -14) -87]
Test Case: 728 | Input/Output: [(26 -21 83 99) -21]
Test Case: 729 | Input/Output: [(-52 -54 -84 14) -84]
Test Case: 730 | Input/Output: [(9 7 73 -14) -14]
Test Case: 731 | Input/Output: [(-31 -24 37 -75) -75]
Test Case: 732 | Input/Output: [(74 61 -69 73) -69]
Test Case: 733 | Input/Output: [(59 9 91 -94) -94]
Test Case: 734 | Input/Output: [(26 24 77 -48) -48]
Test Case: 735 | Input/Output: [(13 -72 -9 -7) -72]
Test Case: 736 | Input/Output: [(-84 82 1 7) -84]
Test Case: 737 | Input/Output: [(12 65 95 -64) -64]
Test Case: 738 | Input/Output: [(26 -69 71 29) -69]
Test Case: 739 | Input/Output: [(26 -83 -52 -38) -83]
Test Case: 740 | Input/Output: [(-42 -75 -66 96) -75]
Test Case: 741 | Input/Output: [(-96 -42 74 90) -96]
Test Case: 742 | Input/Output: [(-37 -43 -66 -41) -66]
Test Case: 743 | Input/Output: [(-88 83 -31 34) -88]
Test Case: 744 | Input/Output: [(-45 -36 64 -51) -51]
Test Case: 745 | Input/Output: [(59 -78 -45 33) -78]
Test Case: 746 | Input/Output: [(-80 -34 -17 -17) -80]
Test Case: 747 | Input/Output: [(46 94 -79 -25) -79]
Test Case: 748 | Input/Output: [(75 47 -25 77) -25]
Test Case: 749 | Input/Output: [(-6 -79 61 -46) -79]
Test Case: 750 | Input/Output: [(24 75 6 -54) -54]
Test Case: 751 | Input/Output: [(50 46 -87 -90) -90]
Test Case: 752 | Input/Output: [(3 -40 70 -6) -40]
Test Case: 753 | Input/Output: [(-41 43 70 31) -41]
Test Case: 754 | Input/Output: [(-11 -14 -91 -43) -91]
Test Case: 755 | Input/Output: [(-73 -90 68 -18) -90]
Test Case: 756 | Input/Output: [(89 -81 55 -12) -81]
Test Case: 757 | Input/Output: [(-21 -37 -5 37) -37]
Test Case: 758 | Input/Output: [(53 -70 -45 -6) -70]
Test Case: 759 | Input/Output: [(-37 -30 72 3) -37]
Test Case: 760 | Input/Output: [(-51 7 49 60) -51]
Test Case: 761 | Input/Output: [(51 -99 16 -19) -99]
Test Case: 762 | Input/Output: [(-27 -16 -20 -66) -66]
Test Case: 763 | Input/Output: [(-80 -38 80 32) -80]
Test Case: 764 | Input/Output: [(-77 -69 83 10) -77]
Test Case: 765 | Input/Output: [(21 -66 -2 -33) -66]
Test Case: 766 | Input/Output: [(69 36 -60 -87) -87]
Test Case: 767 | Input/Output: [(80 93 -50 63) -50]
Test Case: 768 | Input/Output: [(71 88 15 -16) -16]
Test Case: 769 | Input/Output: [(-1 -24 -4 -15) -24]
Test Case: 770 | Input/Output: [(66 29 25 19) 19]
Test Case: 771 | Input/Output: [(-49 75 -23 8) -49]
Test Case: 772 | Input/Output: [(27 83 -59 -93) -93]
Test Case: 773 | Input/Output: [(88 12 80 -31) -31]
Test Case: 774 | Input/Output: [(-99 -18 -92 -92) -99]
Test Case: 775 | Input/Output: [(16 -30 -10 33) -30]
Test Case: 776 | Input/Output: [(73 16 91 -64) -64]
Test Case: 777 | Input/Output: [(85 -49 26 0) -49]
Test Case: 778 | Input/Output: [(60 37 29 48) 29]
Test Case: 779 | Input/Output: [(95 -26 -11 -17) -26]
Test Case: 780 | Input/Output: [(51 -38 70 85) -38]
Test Case: 781 | Input/Output: [(-32 -98 72 -23) -98]
Test Case: 782 | Input/Output: [(42 30 46 -69) -69]
Test Case: 783 | Input/Output: [(-79 54 35 -27) -79]
Test Case: 784 | Input/Output: [(83 53 -14 29) -14]
Test Case: 785 | Input/Output: [(28 49 -26 -67) -67]
Test Case: 786 | Input/Output: [(-73 23 -56 21) -73]
Test Case: 787 | Input/Output: [(-61 60 96 0) -61]
Test Case: 788 | Input/Output: [(-3 -83 -42 -81) -83]
Test Case: 789 | Input/Output: [(53 18 -94 20) -94]
Test Case: 790 | Input/Output: [(100 -42 30 -67) -67]
Test Case: 791 | Input/Output: [(73 28 91 85) 28]
Test Case: 792 | Input/Output: [(-57 65 96 42) -57]
Test Case: 793 | Input/Output: [(24 -45 47 -47) -47]
Test Case: 794 | Input/Output: [(65 -64 -21 -76) -76]
Test Case: 795 | Input/Output: [(-68 -33 -80 20) -80]
Test Case: 796 | Input/Output: [(-68 -50 -70 -63) -70]
Test Case: 797 | Input/Output: [(-6 -38 -34 -66) -66]
Test Case: 798 | Input/Output: [(18 -32 49 34) -32]
Test Case: 799 | Input/Output: [(8 98 -89 7) -89]
Test Case: 800 | Input/Output: [(-67 100 -11 -63) -67]
Test Case: 801 | Input/Output: [(8 41 79 -89) -89]
Test Case: 802 | Input/Output: [(-40 -84 0 -11) -84]
Test Case: 803 | Input/Output: [(56 -21 64 12) -21]
Test Case: 804 | Input/Output: [(-76 -8 28 71) -76]
Test Case: 805 | Input/Output: [(11 66 -36 51) -36]
Test Case: 806 | Input/Output: [(-51 26 61 -49) -51]
Test Case: 807 | Input/Output: [(-57 -11 69 31) -57]
Test Case: 808 | Input/Output: [(-55 57 -46 -55) -55]
Test Case: 809 | Input/Output: [(-78 80 64 -17) -78]
Test Case: 810 | Input/Output: [(55 33 -98 -45) -98]
Test Case: 811 | Input/Output: [(83 -40 -49 10) -49]
Test Case: 812 | Input/Output: [(-74 26 50 87) -74]
Test Case: 813 | Input/Output: [(-35 22 -54 -18) -54]
Test Case: 814 | Input/Output: [(-60 60 86 -26) -60]
Test Case: 815 | Input/Output: [(-77 81 70 67) -77]
Test Case: 816 | Input/Output: [(-46 52 83 58) -46]
Test Case: 817 | Input/Output: [(-35 76 77 17) -35]
Test Case: 818 | Input/Output: [(1 29 -7 10) -7]
Test Case: 819 | Input/Output: [(-8 59 92 -7) -8]
Test Case: 820 | Input/Output: [(-70 30 27 -84) -84]
Test Case: 821 | Input/Output: [(-96 74 -75 -60) -96]
Test Case: 822 | Input/Output: [(52 -73 -70 2) -73]
Test Case: 823 | Input/Output: [(-87 87 99 10) -87]
Test Case: 824 | Input/Output: [(90 78 -7 -11) -11]
Test Case: 825 | Input/Output: [(-88 89 72 -46) -88]
Test Case: 826 | Input/Output: [(87 -63 16 -77) -77]
Test Case: 827 | Input/Output: [(-87 30 51 73) -87]
Test Case: 828 | Input/Output: [(-63 66 41 -19) -63]
Test Case: 829 | Input/Output: [(31 84 38 73) 31]
Test Case: 830 | Input/Output: [(8 -41 -98 -45) -98]
Test Case: 831 | Input/Output: [(-29 80 -60 -93) -93]
Test Case: 832 | Input/Output: [(2 19 5 -2) -2]
Test Case: 833 | Input/Output: [(5 50 -41 25) -41]
Test Case: 834 | Input/Output: [(-42 49 -7 -63) -63]
Test Case: 835 | Input/Output: [(-84 45 -20 10) -84]
Test Case: 836 | Input/Output: [(-3 -87 -87 55) -87]
Test Case: 837 | Input/Output: [(55 -2 9 81) -2]
Test Case: 838 | Input/Output: [(59 3 95 -78) -78]
Test Case: 839 | Input/Output: [(-35 -75 -43 -86) -86]
Test Case: 840 | Input/Output: [(-31 83 0 40) -31]
Test Case: 841 | Input/Output: [(85 -3 59 86) -3]
Test Case: 842 | Input/Output: [(57 42 -4 11) -4]
Test Case: 843 | Input/Output: [(79 -79 3 13) -79]
Test Case: 844 | Input/Output: [(94 -98 18 62) -98]
Test Case: 845 | Input/Output: [(49 -76 -71 -62) -76]
Test Case: 846 | Input/Output: [(85 -21 -38 -73) -73]
Test Case: 847 | Input/Output: [(-46 48 36 97) -46]
Test Case: 848 | Input/Output: [(45 27 -47 44) -47]
Test Case: 849 | Input/Output: [(-99 58 77 43) -99]
Test Case: 850 | Input/Output: [(-89 -72 -96 -8) -96]
Test Case: 851 | Input/Output: [(33 -30 46 83) -30]
Test Case: 852 | Input/Output: [(89 18 47 -37) -37]
Test Case: 853 | Input/Output: [(65 -74 -4 -49) -74]
Test Case: 854 | Input/Output: [(-78 41 -64 57) -78]
Test Case: 855 | Input/Output: [(-27 24 22 -31) -31]
Test Case: 856 | Input/Output: [(-28 23 -14 -83) -83]
Test Case: 857 | Input/Output: [(58 71 -86 -50) -86]
Test Case: 858 | Input/Output: [(63 73 -100 4) -100]
Test Case: 859 | Input/Output: [(-13 -22 -72 78) -72]
Test Case: 860 | Input/Output: [(-35 -96 4 -85) -96]
Test Case: 861 | Input/Output: [(40 55 91 -8) -8]
Test Case: 862 | Input/Output: [(-59 -91 -83 16) -91]
Test Case: 863 | Input/Output: [(93 -59 -59 99) -59]
Test Case: 864 | Input/Output: [(-26 97 -32 99) -32]
Test Case: 865 | Input/Output: [(33 76 8 92) 8]
Test Case: 866 | Input/Output: [(-56 65 24 -100) -100]
Test Case: 867 | Input/Output: [(13 90 76 -85) -85]
Test Case: 868 | Input/Output: [(87 62 -27 -94) -94]
Test Case: 869 | Input/Output: [(-38 -71 -43 42) -71]
Test Case: 870 | Input/Output: [(59 -15 49 64) -15]
Test Case: 871 | Input/Output: [(16 -79 -35 -11) -79]
Test Case: 872 | Input/Output: [(-36 17 -71 13) -71]
Test Case: 873 | Input/Output: [(-68 -31 -20 -100) -100]
Test Case: 874 | Input/Output: [(44 -34 91 25) -34]
Test Case: 875 | Input/Output: [(-81 36 -73 -53) -81]
Test Case: 876 | Input/Output: [(52 -48 70 -84) -84]
Test Case: 877 | Input/Output: [(-17 -40 51 -84) -84]
Test Case: 878 | Input/Output: [(-6 3 -34 63) -34]
Test Case: 879 | Input/Output: [(63 9 -42 85) -42]
Test Case: 880 | Input/Output: [(75 -59 -16 22) -59]
Test Case: 881 | Input/Output: [(-79 20 9 -60) -79]
Test Case: 882 | Input/Output: [(8 -7 97 -51) -51]
Test Case: 883 | Input/Output: [(79 54 84 0) 0]
Test Case: 884 | Input/Output: [(3 -3 70 78) -3]
Test Case: 885 | Input/Output: [(-21 -56 -34 -57) -57]
Test Case: 886 | Input/Output: [(55 46 74 95) 46]
Test Case: 887 | Input/Output: [(-66 -34 50 34) -66]
Test Case: 888 | Input/Output: [(-49 44 45 -66) -66]
Test Case: 889 | Input/Output: [(95 44 -1 5) -1]
Test Case: 890 | Input/Output: [(-37 -67 -72 -48) -72]
Test Case: 891 | Input/Output: [(-31 -47 69 -51) -51]
Test Case: 892 | Input/Output: [(-56 -70 -76 99) -76]
Test Case: 893 | Input/Output: [(-56 26 78 51) -56]
Test Case: 894 | Input/Output: [(26 72 -49 18) -49]
Test Case: 895 | Input/Output: [(21 61 -24 -63) -63]
Test Case: 896 | Input/Output: [(-94 50 38 48) -94]
Test Case: 897 | Input/Output: [(-3 64 83 21) -3]
Test Case: 898 | Input/Output: [(-60 99 20 -38) -60]
Test Case: 899 | Input/Output: [(-37 -19 91 42) -37]
Test Case: 900 | Input/Output: [(35 -83 64 38) -83]
Test Case: 901 | Input/Output: [(-77 -33 42 -32) -77]
Test Case: 902 | Input/Output: [(89 -95 35 56) -95]
Test Case: 903 | Input/Output: [(54 58 -48 51) -48]
Test Case: 904 | Input/Output: [(12 -8 -6 -32) -32]
Test Case: 905 | Input/Output: [(-52 -14 1 -48) -52]
Test Case: 906 | Input/Output: [(-66 -48 -51 44) -66]
Test Case: 907 | Input/Output: [(69 -63 66 -7) -63]
Test Case: 908 | Input/Output: [(-23 -54 34 54) -54]
Test Case: 909 | Input/Output: [(-5 -54 29 -28) -54]
Test Case: 910 | Input/Output: [(24 -83 -92 -24) -92]
Test Case: 911 | Input/Output: [(-38 -80 57 -92) -92]
Test Case: 912 | Input/Output: [(-59 86 83 43) -59]
Test Case: 913 | Input/Output: [(54 50 -100 -1) -100]
Test Case: 914 | Input/Output: [(66 25 52 63) 25]
Test Case: 915 | Input/Output: [(-31 -89 96 31) -89]
Test Case: 916 | Input/Output: [(-41 -61 47 -33) -61]
Test Case: 917 | Input/Output: [(-62 -35 10 -99) -99]
Test Case: 918 | Input/Output: [(2 60 -96 -48) -96]
Test Case: 919 | Input/Output: [(-29 -6 42 -45) -45]
Test Case: 920 | Input/Output: [(28 33 89 93) 28]
Test Case: 921 | Input/Output: [(28 -3 -30 -81) -81]
Test Case: 922 | Input/Output: [(45 6 100 69) 6]
Test Case: 923 | Input/Output: [(-44 -98 5 -72) -98]
Test Case: 924 | Input/Output: [(-50 -95 -81 34) -95]
Test Case: 925 | Input/Output: [(-26 -2 -16 83) -26]
Test Case: 926 | Input/Output: [(-72 45 0 62) -72]
Test Case: 927 | Input/Output: [(74 -10 0 71) -10]
Test Case: 928 | Input/Output: [(-85 58 -40 62) -85]
Test Case: 929 | Input/Output: [(17 15 -13 -86) -86]
Test Case: 930 | Input/Output: [(-9 -24 98 55) -24]
Test Case: 931 | Input/Output: [(69 -13 -45 -39) -45]
Test Case: 932 | Input/Output: [(10 -11 -41 -29) -41]
Test Case: 933 | Input/Output: [(8 -1 -53 -50) -53]
Test Case: 934 | Input/Output: [(61 42 90 48) 42]
Test Case: 935 | Input/Output: [(40 97 -82 34) -82]
Test Case: 936 | Input/Output: [(-68 54 -94 44) -94]
Test Case: 937 | Input/Output: [(88 30 -20 68) -20]
Test Case: 938 | Input/Output: [(-94 33 73 96) -94]
Test Case: 939 | Input/Output: [(-97 -65 30 -34) -97]
Test Case: 940 | Input/Output: [(-19 28 -52 69) -52]
Test Case: 941 | Input/Output: [(-70 -48 -7 12) -70]
Test Case: 942 | Input/Output: [(-41 23 90 93) -41]
Test Case: 943 | Input/Output: [(26 31 -38 -50) -50]
Test Case: 944 | Input/Output: [(-9 57 -17 -50) -50]
Test Case: 945 | Input/Output: [(-100 -100 93 32) -100]
Test Case: 946 | Input/Output: [(-54 -77 -13 -56) -77]
Test Case: 947 | Input/Output: [(46 -42 46 54) -42]
Test Case: 948 | Input/Output: [(23 74 -31 23) -31]
Test Case: 949 | Input/Output: [(98 -26 -84 99) -84]
Test Case: 950 | Input/Output: [(-6 1 -4 -98) -98]
Test Case: 951 | Input/Output: [(35 39 23 73) 23]
Test Case: 952 | Input/Output: [(-31 77 -29 -74) -74]
Test Case: 953 | Input/Output: [(98 50 -79 54) -79]
Test Case: 954 | Input/Output: [(32 -44 -69 -87) -87]
Test Case: 955 | Input/Output: [(-66 -15 26 -74) -74]
Test Case: 956 | Input/Output: [(46 -33 95 -64) -64]
Test Case: 957 | Input/Output: [(-52 -18 -14 63) -52]
Test Case: 958 | Input/Output: [(69 41 91 51) 41]
Test Case: 959 | Input/Output: [(1 -35 89 15) -35]
Test Case: 960 | Input/Output: [(-95 -39 -79 63) -95]
Test Case: 961 | Input/Output: [(-93 34 -52 74) -93]
Test Case: 962 | Input/Output: [(65 -96 68 41) -96]
Test Case: 963 | Input/Output: [(22 24 46 -83) -83]
Test Case: 964 | Input/Output: [(87 18 35 -77) -77]
Test Case: 965 | Input/Output: [(68 11 -83 -39) -83]
Test Case: 966 | Input/Output: [(-75 -53 -94 42) -94]
Test Case: 967 | Input/Output: [(65 80 -77 55) -77]
Test Case: 968 | Input/Output: [(71 60 -44 -85) -85]
Test Case: 969 | Input/Output: [(49 -14 43 -68) -68]
Test Case: 970 | Input/Output: [(81 2 1 -84) -84]
Test Case: 971 | Input/Output: [(-37 -80 -95 -94) -95]
Test Case: 972 | Input/Output: [(-8 -88 -47 48) -88]
Test Case: 973 | Input/Output: [(-10 -71 -21 15) -71]
Test Case: 974 | Input/Output: [(-7 -51 -79 46) -79]
Test Case: 975 | Input/Output: [(-82 -26 64 -92) -92]
Test Case: 976 | Input/Output: [(-72 48 -63 -9) -72]
Test Case: 977 | Input/Output: [(52 19 -30 64) -30]
Test Case: 978 | Input/Output: [(42 -95 76 8) -95]
Test Case: 979 | Input/Output: [(-72 -100 65 84) -100]
Test Case: 980 | Input/Output: [(79 -58 -91 11) -91]
Test Case: 981 | Input/Output: [(44 63 47 28) 28]
Test Case: 982 | Input/Output: [(-37 -11 66 -89) -89]
Test Case: 983 | Input/Output: [(-52 -27 -33 -68) -68]
Test Case: 984 | Input/Output: [(2 -71 -58 -84) -84]
Test Case: 985 | Input/Output: [(77 85 -17 -97) -97]
Test Case: 986 | Input/Output: [(-66 -24 -24 25) -66]
Test Case: 987 | Input/Output: [(9 59 99 52) 9]
Test Case: 988 | Input/Output: [(90 54 -78 -55) -78]
Test Case: 989 | Input/Output: [(-14 49 12 16) -14]
Test Case: 990 | Input/Output: [(59 -70 -46 40) -70]
Test Case: 991 | Input/Output: [(11 -40 -7 71) -40]
Test Case: 992 | Input/Output: [(-22 59 86 17) -22]
Test Case: 993 | Input/Output: [(0 77 -47 -84) -84]
Test Case: 994 | Input/Output: [(44 -93 -20 53) -93]
Test Case: 995 | Input/Output: [(68 -82 76 63) -82]
Test Case: 996 | Input/Output: [(-70 13 31 -40) -70]
Test Case: 997 | Input/Output: [(-8 -82 -42 -5) -82]
Test Case: 998 | Input/Output: [(-69 88 38 1) -69]
Test Case: 999 | Input/Output: [(-15 -81 66 17) -81]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 86 -94 -108 29 91 114 -49 -88 -115 49 -34 45 51 104 10 -19
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[56 7 56 56] 7] [[36 99 99 99] 36] [[94 94 94 50] 50] [[-100 -82 -100 -100] -100] [[81 72 72 72] 72] [[100 -44 -44 -44] -44] [[-91 -91 -80 -91] -91] [[41 41 82 41] 41] [[-42 -42 -42 -61] -61] [[57 57 -48 57] -48] [(59 59 59 59) 59] [(-76 -76 -76 -76) -76] [(83 83 83 83) 83] [(-73 -73 -73 -73) -73] [(-26 -26 -26 -26) -26] [(48 81 5 69) 5] [(25 6 50 21) 6] [(59 51 51 55) 51] [(13 38 11 58) 11] [(35 44 1 87) 1] [(60 22 12 100) 12] [(93 39 11 15) 11] [(58 77 58 99) 58] [(37 28 20 73) 20] [(48 59 32 55) 32] [(94 32 5 80) 5] [(33 97 17 57) 17] [(13 70 63 90) 13] [(29 86 87 6) 6] [(67 90 21 41) 21] [(30 28 86 82) 28] [(3 56 32 64) 3] [(53 67 59 12) 12] [(51 44 10 11) 10] [(53 9 29 5) 5] [(-20 77 -86 39) -86] [(22 1 52 -6) -6] [(58 -27 -47 57) -47] [(99 -19 24 60) -19] [(99 80 -42 54) -42] [(-2 49 -33 35) -33] [(-24 -86 -71 -47) -86] [(23 -37 -93 78) -93] [(54 -13 -55 -69) -69] [(-61 -6 86 17) -61] [(95 28 48 -94) -94] [(-95 22 69 -2) -95] [(93 69 98 -100) -100] [(56 -43 -21 40) -43] [(82 -40 -35 -82) -82] [(-9 -81 -5 3) -81] [(77 -73 45 19) -73] [(16 -70 -11 -89) -89] [(-78 -16 -14 -98) -98] [(-91 -27 71 -63) -91] [(-57 -97 -18 -52) -97] [(11 74 -95 -15) -95] [(-35 64 -70 -32) -70] [(-27 18 60 54) -27] [(82 -99 80 -24) -99] [(-86 76 22 -25) -86] [(84 80 -30 96) -30] [(-81 -60 -98 61) -98] [(-32 96 78 83) -32] [(39 11 -71 99) -71] [(-100 26 86 84) -100] [(3 -13 52 -90) -90] [(95 70 -96 -52) -96] [(-87 14 5 -95) -95] [(-19 62 -81 -34) -81] [(-11 10 -49 75) -49] [(-41 -29 67 -83) -83] [(68 -26 -51 47) -51] [(44 27 70 -85) -85] [(59 -36 -32 81) -36] [(-24 30 -75 -36) -75] [(-80 43 -76 -92) -92] [(-20 -53 -8 -26) -53] [(-94 60 -55 77) -94] [(-5 28 -2 80) -5] [(-28 -66 -47 -23) -66] [(55 -36 98 -27) -36] [(80 56 73 -85) -85] [(-38 50 -53 51) -53] [(-55 42 32 -41) -55] [(-48 73 2 74) -48] [(95 -86 -35 62) -86] [(48 -73 45 89) -73] [(-73 -79 50 27) -79] [(-83 -53 -44 25) -83] [(12 82 -33 -21) -33] [(91 -65 38 -11) -65] [(-50 -64 -93 -10) -93] [(-21 -46 15 14) -46] [(50 95 93 -68) -68])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_if (exec_do*range (boolean_shove boolean_empty boolean_not in2 print_integer) integer_pop boolean_dup_items exec_stackdepth) ())
Lexicase best errors: [1 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_if (exec_do*range (boolean_shove boolean_empty boolean_not in2 print_integer) integer_pop boolean_dup_items exec_stackdepth) ())
Zero cases best errors: [1 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 3 4 3 3 5 5 5 12 3)
Population mean number of elite cases: 1.04
Count of perfect (error zero) individuals by case: (0 3 4 3 3 5 5 5 12 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq})
Best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when () integer_div) (in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_while (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (boolean_dup integer_dup_items)) exec_dup_times (exec_stackdepth exec_eq) boolean_and boolean_stackdepth integer_yankdup) (integer_dup) integer_yank exec_do*range (print_integer in1) integer_fromboolean integer_empty boolean_or integer_fromboolean boolean_invert_second_then_and boolean_or) integer_dec integer_gt boolean_stackdepth integer_dup_items boolean_dup_items integer_gte print_boolean exec_dup (print_boolean boolean_and boolean_empty print_exec (exec_flush integer_dup) integer_div) boolean_xor integer_min integer_max integer_max integer_dup boolean_yank exec_k_when_autoconstructing (integer_sub exec_do*while ()) (integer_sub print_boolean exec_eq))) () ())))))))) ())
Errors: [1 0 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 85
Size: 118
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (1.0 0.997 0.996 0.997 0.997 0.995 0.995 0.995 0.988 0.997)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.923
Average program size in population (points): 71.32
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 473624
--- Timings ---
Current time: 1559314426361 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.7 seconds, 29.7%
Fitness Testing:      1.6 seconds, 66.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when () integer_div) (in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_while (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (boolean_dup integer_dup_items)) exec_dup_times (exec_stackdepth exec_eq) boolean_and boolean_stackdepth integer_yankdup) (integer_dup) integer_yank exec_do*range (print_integer in1) integer_fromboolean integer_empty boolean_or integer_fromboolean boolean_invert_second_then_and boolean_or) integer_dec integer_gt boolean_stackdepth integer_dup_items boolean_dup_items integer_gte print_boolean exec_dup (print_boolean boolean_and boolean_empty print_exec (exec_flush integer_dup) integer_div) boolean_xor integer_min integer_max integer_max integer_dup boolean_yank exec_k_when_autoconstructing (integer_sub exec_do*while ()) (integer_sub print_boolean exec_eq))) () ())))))))) ())
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 118
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when () integer_div) (in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_while (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (boolean_dup integer_dup_items)) exec_dup_times (exec_stackdepth exec_eq) boolean_and boolean_stackdepth integer_yankdup) (integer_dup) integer_yank exec_do*range (print_integer in1) integer_fromboolean integer_empty boolean_or integer_fromboolean boolean_invert_second_then_and boolean_or) integer_dec integer_gt boolean_stackdepth integer_dup_items boolean_dup_items integer_gte print_boolean exec_dup (print_boolean boolean_and boolean_empty print_exec (exec_flush integer_dup) integer_div) boolean_xor integer_min integer_max integer_max integer_dup boolean_yank exec_k_when_autoconstructing (integer_sub exec_do*while ()) (integer_sub print_boolean exec_eq))) () ())))))))) ())
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 118
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (487 488 1 487 1 1000 402 487 1 487)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (487 488 1 487 1 0 402 487 1 487)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tagged_370} {:close 1, :instruction 77} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor})
Best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 boolean_pop exec_when () integer_div exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 print_integer exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_yank exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () boolean_and boolean_empty integer_yankdup integer_max exec_noop integer_dup boolean_or exec_flush integer_add integer_lte integer_dup_times) tagged_370 77 boolean_not exec_stackdepth exec_swap (integer_gt) (boolean_eq exec_do*while () exec_y_when_autoconstructing (boolean_frominteger boolean_dup integer_div integer_dup_times boolean_flush exec_do*times (integer_min integer_rot) exec_if () (exec_stackdepth boolean_flush integer_eq) integer_min exec_empty exec_empty boolean_dup_items)) boolean_xor)
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 85
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.159
Median total errors in population: 9
Error averages by case: (0.513 0.512 0.999 0.513 0.999 1.0 0.598 0.513 0.999 0.513)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 45.004
Average program size in population (points): 60.971
Average percent parens in population: 0.239
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.508
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 871418
--- Timings ---
Current time: 1559314429941 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 46.1%
Fitness Testing:      2.3 seconds, 45.4%
Report:               0.3 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when () integer_div) (in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or integer_rot) exec_while (exec_while (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (integer_flush integer_dup_items)) exec_dup_times (exec_stackdepth exec_eq) boolean_and boolean_stackdepth integer_yankdup) (integer_dup) integer_yank exec_do*range (print_integer in1) integer_fromboolean integer_empty boolean_or integer_fromboolean boolean_invert_second_then_and boolean_or) integer_dec integer_gt boolean_stackdepth integer_dup_items boolean_dup_items integer_gte print_boolean exec_dup (print_boolean boolean_and boolean_empty print_exec (exec_flush integer_dup) integer_div) boolean_xor integer_min integer_max integer_max integer_dup boolean_yank exec_k_when_autoconstructing (integer_sub exec_do*while ()) (integer_sub print_boolean exec_eq))) () ()))))) () ())) ())
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 120
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when () integer_div) (in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or integer_rot) exec_while (exec_while (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (integer_flush integer_dup_items)) exec_dup_times (exec_stackdepth exec_eq) boolean_and boolean_stackdepth integer_yankdup) (integer_dup) integer_yank exec_do*range (print_integer in1) integer_fromboolean integer_empty boolean_or integer_fromboolean boolean_invert_second_then_and boolean_or) integer_dec integer_gt boolean_stackdepth integer_dup_items boolean_dup_items integer_gte print_boolean exec_dup (print_boolean boolean_and boolean_empty print_exec (exec_flush integer_dup) integer_div) boolean_xor integer_min integer_max integer_max integer_dup boolean_yank exec_k_when_autoconstructing (integer_sub exec_do*while ()) (integer_sub print_boolean exec_eq))) () ()))))) () ())) ())
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 120
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 904 463 103 338 103 463 463 1000 463)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (463 904 463 103 338 103 463 463 0 463)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 1, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while})
Best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when () integer_div) (in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while () exec_while (exec_y_when_autoconstructing (41) boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while ()))) () ())))))) ())
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 56
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 6.237
Median total errors in population: 7
Error averages by case: (0.537 0.096 0.537 0.897 0.662 0.897 0.537 0.537 1.0 0.537)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 62.162
Average program size in population (points): 87.577
Average percent parens in population: 0.261
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1935
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1259976
--- Timings ---
Current time: 1559314432716 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 47.6%
Fitness Testing:      3.0 seconds, 33.4%
Report:               1.6 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max})
Lexicase best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 print_integer exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_lt exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () boolean_and boolean_empty integer_yankdup integer_max))
Lexicase best errors: [1 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max})
Zero cases best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 print_integer exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_lt exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () boolean_and boolean_empty integer_yankdup integer_max))
Zero cases best errors: [1 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 91 607 606 607 1000 94 297 607 606)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (203 91 607 606 607 0 94 297 607 606)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times})
Best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when () integer_div) (in3 print_integer) (integer_rot exec_do*count (exec_do*times ())))) ())
Errors: [1 1 0 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 24
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 6.282
Median total errors in population: 5
Error averages by case: (0.797 0.909 0.393 0.394 0.393 1.0 0.906 0.703 0.393 0.394)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 45.77
Average program size in population (points): 62.692
Average percent parens in population: 0.244
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.57625
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1704083
--- Timings ---
Current time: 1559314435743 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 53.4%
Fitness Testing:      3.6 seconds, 30.1%
Report:               1.9 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction -55} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_145} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_if})
Lexicase best program: (boolean_invert_second_then_and exec_k (integer_yank boolean_yankdup integer_gte print_boolean boolean_xor integer_gte integer_eq) () exec_empty boolean_empty exec_do*count (boolean_or integer_min) exec_dup (boolean_not in2) print_integer boolean_invert_first_then_and exec_while (exec_do*while (integer_yank -55 exec_dup (integer_dup_times exec_yank) tag_boolean_145 exec_if () (integer_min integer_shove) exec_y_when_autoconstructing (boolean_frominteger boolean_dup integer_div exec_rot (boolean_flush exec_do*times (integer_min integer_rot) exec_if () ()) () ()))))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction -55} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_145} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_if})
Zero cases best program: (boolean_invert_second_then_and exec_k (integer_yank boolean_yankdup integer_gte print_boolean boolean_xor integer_gte integer_eq) () exec_empty boolean_empty exec_do*count (boolean_or integer_min) exec_dup (boolean_not in2) print_integer boolean_invert_first_then_and exec_while (exec_do*while (integer_yank -55 exec_dup (integer_dup_times exec_yank) tag_boolean_145 exec_if () (integer_min integer_shove) exec_y_when_autoconstructing (boolean_frominteger boolean_dup integer_div exec_rot (boolean_flush exec_do*times (integer_min integer_rot) exec_if () ()) () ()))))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 551 121 671 550 121 226 350 672 900)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (348 551 121 671 550 121 226 350 672 900)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) () integer_rot integer_eq integer_div exec_noop exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.49
Median total errors in population: 5
Error averages by case: (0.652 0.449 0.879 0.329 0.45 0.879 0.774 0.65 0.328 0.1)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.102
Average program size in population (points): 69.593
Average percent parens in population: 0.253
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.01625
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2125305
--- Timings ---
Current time: 1559314438464 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.3 seconds, 56.7%
Fitness Testing:      4.2 seconds, 28.4%
Report:               2.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tagged_370} {:close 1, :instruction 77} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 print_integer exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_yank exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () boolean_or boolean_and boolean_pop integer_max exec_noop integer_dup boolean_or exec_flush integer_add integer_lte integer_dup_times) tagged_370 77 boolean_not exec_stackdepth exec_swap (integer_gt) (boolean_eq exec_do*while () exec_y_when_autoconstructing (boolean_frominteger boolean_dup integer_div integer_dup_times exec_when (exec_do*times (integer_min integer_rot) integer_div) exec_stackdepth boolean_flush integer_eq) boolean_pop exec_empty exec_empty boolean_dup_items) exec_dup_items)
Lexicase best errors: [0 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tagged_370} {:close 1, :instruction 77} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 print_integer exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_yank exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () boolean_or boolean_and boolean_pop integer_max exec_noop integer_dup boolean_or exec_flush integer_add integer_lte integer_dup_times) tagged_370 77 boolean_not exec_stackdepth exec_swap (integer_gt) (boolean_eq exec_do*while () exec_y_when_autoconstructing (boolean_frominteger boolean_dup integer_div integer_dup_times exec_when (exec_do*times (integer_min integer_rot) integer_div) exec_stackdepth boolean_flush integer_eq) boolean_pop exec_empty exec_empty boolean_dup_items) exec_dup_items)
Zero cases best errors: [0 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 483 141 141 910 141 286 1000 287 286)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (287 483 141 141 910 141 286 0 287 286)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tagged_370} {:close 0, :instruction integer_min} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_500} {:close 0, :instruction exec_yank})
Best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 print_integer exec_stackdepth integer_max exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () boolean_and boolean_empty integer_yankdup integer_max exec_noop) integer_dup boolean_or exec_flush integer_add integer_lte integer_dup_times tagged_370 integer_min exec_k () (integer_empty exec_k (integer_stackdepth integer_lt integer_stackdepth exec_if (integer_yank integer_gte exec_y (boolean_invert_first_then_and exec_yankdup exec_s_when_autoconstructing (integer_yank integer_inc integer_add integer_dup boolean_eq integer_stackdepth) (exec_do*range (boolean_invert_second_then_and)) (integer_flush boolean_shove exec_dup (boolean_yank integer_dup_times) in3) print_integer integer_sub) integer_empty boolean_eq exec_yank print_boolean exec_rot (tag_integer_500 exec_yank) () ()) ()) ()))
Errors: [0 1 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 84
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.038
Median total errors in population: 8
Error averages by case: (0.713 0.517 0.859 0.859 0.09 0.859 0.714 1.0 0.713 0.714)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 36.831
Average program size in population (points): 50.68
Average percent parens in population: 0.258
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.402125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2462877
--- Timings ---
Current time: 1559314441044 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.2 seconds, 59.2%
Fitness Testing:      4.6 seconds, 26.8%
Report:               2.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when (integer_div) in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_while (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (boolean_dup integer_dup_items)) exec_dup_times (exec_stackdepth exec_eq) boolean_and boolean_stackdepth integer_yankdup) (integer_dup) integer_yank exec_do*range () print_integer in1) integer_fromboolean integer_empty boolean_or integer_fromboolean boolean_invert_second_then_and boolean_or) integer_dec integer_gt boolean_stackdepth integer_dup_items boolean_dup_items integer_gte print_boolean exec_dup (print_boolean boolean_and boolean_empty print_exec (exec_flush))) () ())))))) ())) ())
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 101
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (boolean_empty boolean_pop exec_when (integer_div) in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_while (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (boolean_dup integer_dup_items)) exec_dup_times (exec_stackdepth exec_eq) boolean_and boolean_stackdepth integer_yankdup) (integer_dup) integer_yank exec_do*range () print_integer in1) integer_fromboolean integer_empty boolean_or integer_fromboolean boolean_invert_second_then_and boolean_or) integer_dec integer_gt boolean_stackdepth integer_dup_items boolean_dup_items integer_gte print_boolean exec_dup (print_boolean boolean_and boolean_empty print_exec (exec_flush))) () ())))))) ())) ())
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 101
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 111 1000 455 338 1000 449 455 455 455)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (905 111 0 455 338 0 449 455 455 455)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup})
Best program: (integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (exec_s (boolean_pop exec_when () integer_div) (in3 print_integer) (integer_swap exec_do*count (exec_do*times (boolean_yank) boolean_eq exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_y (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank exec_k (exec_do*range (integer_add exec_dup (boolean_dup))) ()))) () ()))))))) () ())) ())
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 69
Percent parens: 0.420
--- Population Statistics ---
Average total errors in population: 6.377
Median total errors in population: 7
Error averages by case: (0.095 0.889 1.0 0.545 0.662 1.0 0.551 0.545 0.545 0.545)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 46.126
Average program size in population (points): 64.085
Average percent parens in population: 0.259
Minimum age in population: 6.0
Maximum age in population: 10.65625
Average age in population: 8.953875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2889337
--- Timings ---
Current time: 1559314444425 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 61.5%
Fitness Testing:      5.2 seconds, 25.4%
Report:               2.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction tag_integer_587} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq})
Lexicase best program: (integer_pop in3 print_integer integer_rot boolean_frominteger exec_do*count () tag_integer_587 integer_dup in3 integer_div boolean_invert_second_then_and boolean_and integer_eq)
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction tag_integer_587} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq})
Zero cases best program: (integer_pop in3 print_integer integer_rot boolean_frominteger exec_do*count () tag_integer_587 integer_dup in3 integer_div boolean_invert_second_then_and boolean_and integer_eq)
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 373 533 533 533 178 533 730 533)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (0 0 373 533 533 533 178 533 730 533)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction 71} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tagged_370} {:close 1, :instruction 77} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor})
Best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and 71 in3 print_integer exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_yank exec_dup (boolean_xor) boolean_or boolean_rot exec_do*range () boolean_and boolean_empty integer_yankdup integer_max exec_noop integer_dup boolean_or exec_flush integer_add integer_lte integer_dup_times tagged_370 77 boolean_not exec_stackdepth exec_swap (integer_gt) (boolean_eq exec_do*while () exec_y_when_autoconstructing (boolean_frominteger boolean_dup integer_div) integer_dup_times boolean_flush exec_do*times (integer_min integer_rot) exec_if () (exec_stackdepth boolean_flush integer_eq) boolean_pop exec_empty exec_empty boolean_dup_items) boolean_xor)
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 72
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.054
Median total errors in population: 4
Error averages by case: (1.0 1.0 0.627 0.467 0.467 0.467 0.822 0.467 0.27 0.467)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.134
Average program size in population (points): 51.281
Average percent parens in population: 0.252
Minimum age in population: 7.5
Maximum age in population: 12.484375
Average age in population: 10.4679375
Median age in population: 10.5234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3303832
--- Timings ---
Current time: 1559314448489 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 62.2%
Fitness Testing:      5.7 seconds, 24.1%
Report:               3.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_invert_second_then_and integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (in3 print_integer) (exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_yank exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_y (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank integer_lte exec_do*range (integer_add exec_dup (boolean_dup))))) () ())))))) ())) ())
Lexicase best errors: [0 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 70
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 41} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_invert_second_then_and integer_swap exec_k (exec_when (exec_empty exec_s_when_autoconstructing (in3 print_integer) (exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_yank exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () exec_shove (boolean_or in4 exec_stackdepth boolean_swap boolean_or exec_k () (exec_while (exec_y (exec_y_when_autoconstructing (41 boolean_rot integer_div) boolean_yankdup exec_s (exec_shove (exec_while (exec_do*while () integer_yank integer_lte exec_do*range (integer_add exec_dup (boolean_dup))))) () ())))))) ())) ())
Zero cases best errors: [0 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 70
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 687 1000 1000 687 687 216 687 61 1000)
Population mean number of elite cases: 6.93
Count of perfect (error zero) individuals by case: (906 687 0 0 687 687 216 687 61 0)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if})
Best program: (exec_do*range (exec_do*range () integer_swap boolean_flush) boolean_invert_first_then_and integer_dup_items in3 print_integer exec_stackdepth integer_max exec_y (in4 exec_shove () boolean_or) integer_inc integer_yank exec_dup (boolean_xor boolean_or boolean_rot exec_do*range () boolean_and boolean_empty integer_yankdup integer_max exec_noop integer_dup boolean_or exec_flush integer_add exec_k () (integer_empty exec_k (integer_stackdepth integer_lt integer_stackdepth exec_if () ()) ())))
Errors: [0 0 1 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.069
Median total errors in population: 5
Error averages by case: (0.094 0.313 1.0 1.0 0.313 0.313 0.784 0.313 0.939 1.0)
Error minima by case: (0 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 35.832
Average program size in population (points): 49.396
Average percent parens in population: 0.247
Minimum age in population: 8.5
Maximum age in population: 13.90625
Average age in population: 11.962203125
Median age in population: 12.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3759483
--- Timings ---
Current time: 1559314452422 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 61.2%
Fitness Testing:      6.3 seconds, 22.5%
Report:               4.4 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer})
Lexicase best program: (exec_k (integer_sub) (exec_eq) boolean_and exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) ())
Lexicase best errors: [1 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer})
Zero cases best program: (exec_k (integer_sub) (exec_eq) boolean_and exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) ())
Zero cases best errors: [1 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 297 1 297 1 1 632 297 633)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (1 1 297 1 297 1 1 632 297 633)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Best program: (exec_if (exec_do*range (boolean_shove exec_s (boolean_not in2 print_integer) (integer_pop boolean_dup_items exec_stackdepth) ())) ())
Errors: [1 1 0 1 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 10
Size: 17
Percent parens: 0.412
--- Population Statistics ---
Average total errors in population: 7.839
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.703 0.999 0.703 0.999 0.999 0.368 0.703 0.367)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.015
Average program size in population (points): 36.79
Average percent parens in population: 0.245
Minimum age in population: 10.96875
Maximum age in population: 15.4609375
Average age in population: 13.4923203125
Median age in population: 13.591796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4192893
--- Timings ---
Current time: 1559314454856 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 60.2%
Fitness Testing:      6.8 seconds, 21.8%
Report:               5.5 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: 39                 
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: 35                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 3                  
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 96                 
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 99                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: 75                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 81                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: 77                 
Correct output: -5                  | Program output: 80                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 51                 
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) in4 exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) () integer_rot integer_eq integer_div exec_noop exec_do*while (boolean_frominteger in3 exec_y_when_autoconstructing () boolean_shove exec_flush))
Lexicase best errors: [1 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) in4 exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) () integer_rot integer_eq integer_div exec_noop exec_do*while (boolean_frominteger in3 exec_y_when_autoconstructing () boolean_shove exec_flush))
Zero cases best errors: [1 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 169 278 168 168 556 933 168 654 276)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (278 169 278 168 168 556 933 168 654 276)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 2, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush})
Best program: (exec_k (integer_sub) () boolean_empty in4 exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) () integer_rot integer_eq integer_div exec_noop exec_do*while (boolean_frominteger in3 exec_y_when_autoconstructing () boolean_shove exec_flush))
Errors: [1 0 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.352
Median total errors in population: 6
Error averages by case: (0.722 0.831 0.722 0.832 0.832 0.444 0.067 0.832 0.346 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.014
Average program size in population (points): 31.996
Average percent parens in population: 0.274
Minimum age in population: 11.96875
Maximum age in population: 16.7265625
Average age in population: 15.123623046875
Median age in population: 15.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4485457
--- Timings ---
Current time: 1559314457126 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.5 seconds, 61.4%
Fitness Testing:      7.1 seconds, 21.4%
Report:               5.6 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (boolean_shove exec_do*range (boolean_shove boolean_empty boolean_not in2 print_integer) integer_pop boolean_dup_items)
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (boolean_shove exec_do*range (boolean_shove boolean_empty boolean_not in2 print_integer) integer_pop boolean_dup_items)
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (450 266 273 199 199 2 271 450 450 267)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (450 266 273 199 199 2 271 450 450 267)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Best program: (exec_do*range () exec_do*range (integer_swap boolean_flush exec_do*range (exec_if () (exec_do*range (exec_do*times (boolean_empty boolean_not in2 print_integer) integer_pop boolean_dup_items exec_stackdepth)))))
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 7.173
Median total errors in population: 7
Error averages by case: (0.55 0.734 0.727 0.801 0.801 0.998 0.729 0.55 0.55 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.207
Average program size in population (points): 28.999
Average percent parens in population: 0.269
Minimum age in population: 13.65625
Maximum age in population: 18.2109375
Average age in population: 16.5861982421875
Median age in population: 16.7109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4707991
--- Timings ---
Current time: 1559314460023 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 63.2%
Fitness Testing:      7.4 seconds, 20.4%
Report:               5.8 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (58 344 205 58 800 58 344 344 57 304)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (58 344 205 58 800 58 344 344 57 304)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.428
Median total errors in population: 7
Error averages by case: (0.942 0.656 0.795 0.942 0.2 0.942 0.656 0.656 0.943 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.428
Average program size in population (points): 28.696
Average percent parens in population: 0.286
Minimum age in population: 14.65625
Maximum age in population: 19.8330078125
Average age in population: 18.19713427734375
Median age in population: 18.2548828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4946421
--- Timings ---
Current time: 1559314462706 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.2 seconds, 64.6%
Fitness Testing:      7.7 seconds, 19.7%
Report:               6.0 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 227 700 326 326 374 374 1 374 374)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (326 227 700 326 326 374 374 1 374 374)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Errors: [1 1 0 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.598
Median total errors in population: 6
Error averages by case: (0.674 0.773 0.3 0.674 0.674 0.626 0.626 0.999 0.626 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.527
Average program size in population (points): 30.497
Average percent parens in population: 0.323
Minimum age in population: 16.3125
Maximum age in population: 21.552001953125
Average age in population: 19.80794995117188
Median age in population: 19.8978271484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 259
Genome diversity (% unique genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5190852
--- Timings ---
Current time: 1559314465508 milliseconds
Total Time:          41.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.5 seconds, 65.8%
Fitness Testing:      8.0 seconds, 19.1%
Report:               6.2 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -82                
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 81                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 38                 
Correct output: 1                   | Program output: 44                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 77                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 59                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 97                 
Correct output: 13                  | Program output: 70                 
Correct output: 6                   | Program output: 86                 
Correct output: 21                  | Program output: 90                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 56                 
Correct output: 12                  | Program output: 67                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: 77                 
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: 49                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -6                 
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: 22                 
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -16                
Correct output: -91                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 74                 
Correct output: -70                 | Program output: 64                 
Correct output: -27                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: 76                 
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -60                
Correct output: -32                 | Program output: 96                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 26                 
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: 14                 
Correct output: -81                 | Program output: 62                 
Correct output: -49                 | Program output: 10                 
Correct output: -83                 | Program output: -29                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: 30                 
Correct output: -92                 | Program output: 43                 
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 60                 
Correct output: -5                  | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: 50                 
Correct output: -55                 | Program output: 42                 
Correct output: -48                 | Program output: 73                 
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -53                
Correct output: -33                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 3, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) () exec_when () integer_eq integer_div exec_noop exec_do*while (boolean_frominteger exec_do*times (exec_y_when_autoconstructing () boolean_shove boolean_xor)))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 3, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer) () exec_when () integer_eq integer_div exec_noop exec_do*while (boolean_frominteger exec_do*times (exec_y_when_autoconstructing () boolean_shove boolean_xor)))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (486 339 341 775 580 339 346 346 147 339)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (486 339 341 775 580 339 346 346 147 339)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_xor})
Best program: (integer_rot in2 boolean_yank integer_yank integer_mod integer_rot print_integer integer_rot integer_eq integer_div exec_noop exec_do*while (boolean_frominteger in3 exec_y_when_autoconstructing () integer_lt boolean_xor))
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 20
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 5.962
Median total errors in population: 6
Error averages by case: (0.514 0.661 0.659 0.225 0.42 0.661 0.654 0.654 0.853 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.853
Average program size in population (points): 30.767
Average percent parens in population: 0.319
Minimum age in population: 17.3125
Maximum age in population: 23.139404296875
Average age in population: 21.2508134765625
Median age in population: 21.3209228515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 214
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5439623
--- Timings ---
Current time: 1559314467935 milliseconds
Total Time:          44.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.5 seconds, 66.7%
Fitness Testing:      8.2 seconds, 18.6%
Report:               6.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 59                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 93                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 94                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 51                 
Correct output: 5                   | Program output: 53                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: 58                 
Correct output: -19                 | Program output: 99                 
Correct output: -42                 | Program output: 99                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -24                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: 56                 
Correct output: -82                 | Program output: 82                 
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 77                 
Correct output: -89                 | Program output: 16                 
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 82                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: 95                 
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: 68                 
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 80                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 95                 
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: 91                 
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction tagged_278} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (integer_rot exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop) tagged_278 boolean_frominteger in3 exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction tagged_278} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (integer_rot exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop) tagged_278 boolean_frominteger in3 exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 483 935 167 288 167 484 167 454 288)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (288 483 935 167 288 167 484 167 454 288)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (exec_k (integer_sub) (boolean_xor) boolean_and exec_swap (integer_rot exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 6.279
Median total errors in population: 7
Error averages by case: (0.712 0.517 0.065 0.833 0.712 0.833 0.516 0.833 0.546 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.005
Average program size in population (points): 29.558
Average percent parens in population: 0.318
Minimum age in population: 19.6279296875
Maximum age in population: 24.61260986328125
Average age in population: 22.74832080078125
Median age in population: 22.83831787109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5703613
--- Timings ---
Current time: 1559314470617 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.7 seconds, 67.6%
Fitness Testing:      8.5 seconds, 18.2%
Report:               6.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 81                 
Correct output: -44                 | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 59                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 93                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 94                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 51                 
Correct output: 5                   | Program output: 53                 
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: 58                 
Correct output: -19                 | Program output: 99                 
Correct output: -42                 | Program output: 99                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -24                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: 56                 
Correct output: -82                 | Program output: 82                 
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 77                 
Correct output: -89                 | Program output: 16                 
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 82                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: 95                 
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: 68                 
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 80                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 95                 
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: 91                 
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) ()) ())
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) ()) ())
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 411 294 294 919 1000 411 295 411 411)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (0 411 294 294 919 0 411 295 411 411)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () ()) ()) ())
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 22
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 6.554
Median total errors in population: 6
Error averages by case: (1.0 0.589 0.706 0.706 0.081 1.0 0.589 0.705 0.589 0.589)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 21.438
Average program size in population (points): 32.322
Average percent parens in population: 0.333
Minimum age in population: 22.0728759765625
Maximum age in population: 26.15399169921875
Average age in population: 24.28873999023438
Median age in population: 24.34486389160156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5953413
--- Timings ---
Current time: 1559314472973 milliseconds
Total Time:          49.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.6 seconds, 68.2%
Fitness Testing:      8.8 seconds, 17.9%
Report:               6.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 69                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 12                  | Program output: 100                
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 99                 
Correct output: 20                  | Program output: 73                 
Correct output: 32                  | Program output: 55                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 57                 
Correct output: 13                  | Program output: 90                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 82                 
Correct output: 3                   | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: 39                 
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: 35                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: 3                  
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -63                
Correct output: -97                 | Program output: -52                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -32                
Correct output: -27                 | Program output: 54                 
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -30                 | Program output: 96                 
Correct output: -98                 | Program output: 61                 
Correct output: -32                 | Program output: 83                 
Correct output: -71                 | Program output: 99                 
Correct output: -100                | Program output: 84                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: 75                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 81                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: 77                 
Correct output: -5                  | Program output: 80                 
Correct output: -66                 | Program output: -23                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 51                 
Correct output: -55                 | Program output: -41                
Correct output: -48                 | Program output: 74                 
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 89                 
Correct output: -79                 | Program output: 27                 
Correct output: -83                 | Program output: 25                 
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -10                
Correct output: -46                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (exec_k (integer_sub) (boolean_xor) boolean_and exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Lexicase best errors: [0 1 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (exec_k (integer_sub) (boolean_xor) boolean_and exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Zero cases best errors: [0 1 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 562 1 355 1 563 1000 1 917 1000)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (1 562 1 355 1 563 0 1 917 0)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (exec_k (integer_sub) (boolean_xor) boolean_and exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Errors: [0 1 0 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.599
Median total errors in population: 7
Error averages by case: (0.999 0.438 0.999 0.645 0.999 0.437 1.0 0.999 0.083 1.0)
Error minima by case: (0 0 0 0 0 0 1 0 0 1)
Average genome size in population (length): 22.348
Average program size in population (points): 34.263
Average percent parens in population: 0.347
Minimum age in population: 23.24383544921875
Maximum age in population: 27.64779663085938
Average age in population: 25.82725308227539
Median age in population: 25.90325164794922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6188247
--- Timings ---
Current time: 1559314475394 milliseconds
Total Time:          51.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.6 seconds, 68.8%
Fitness Testing:      9.1 seconds, 17.6%
Report:               6.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 99                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -80                
Correct output: 41                  | Program output: 82                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 63                 
Correct output: 6                   | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 86                 
Correct output: 3                   | Program output: 32                 
Correct output: 12                  | Program output: 59                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 52                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: 86                 
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: 69                 
Correct output: -100                | Program output: 98                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -5                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -14                
Correct output: -91                 | Program output: 71                 
Correct output: -97                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: 60                 
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: 22                 
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: 78                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 86                 
Correct output: -90                 | Program output: 52                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: 67                 
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 70                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -76                
Correct output: -53                 | Program output: -8                 
Correct output: -94                 | Program output: -55                
Correct output: -5                  | Program output: -2                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 98                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 32                 
Correct output: -48                 | Program output: 2                  
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: 50                 
Correct output: -83                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: 15                 
Correct output: -68                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [1 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [1 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (461 173 174 462 288 461 98 174 173 384)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (461 173 174 462 288 461 98 174 173 384)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_yank integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor))
Errors: [1 0 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.152
Median total errors in population: 7
Error averages by case: (0.539 0.827 0.826 0.538 0.712 0.539 0.902 0.826 0.827 0.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.753
Average program size in population (points): 34.854
Average percent parens in population: 0.347
Minimum age in population: 24.9825439453125
Maximum age in population: 28.89768218994141
Average age in population: 27.05378545379639
Median age in population: 27.180908203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 346
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 346
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6434015
--- Timings ---
Current time: 1559314477986 milliseconds
Total Time:          54.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 69.4%
Fitness Testing:      9.4 seconds, 17.3%
Report:               7.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 1000 279 893 279 453 455 1000 162 443)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (162 0 279 893 279 453 455 0 162 443)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.874
Median total errors in population: 7
Error averages by case: (0.838 1.0 0.721 0.107 0.721 0.547 0.545 1.0 0.838 0.557)
Error minima by case: (0 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 22.692
Average program size in population (points): 34.966
Average percent parens in population: 0.350
Minimum age in population: 26.10205078125
Maximum age in population: 30.33455276489258
Average age in population: 28.5742848777771
Median age in population: 28.67353630065918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6657350
--- Timings ---
Current time: 1559314480500 milliseconds
Total Time:          56.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.7 seconds, 70.0%
Fitness Testing:      9.6 seconds, 17.0%
Report:               7.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (623 621 290 833 621 541 621 540 621 543)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (623 621 290 833 621 541 621 540 621 543)
Population mean number of perfect (error zero) cases: 5.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 4.146
Median total errors in population: 1
Error averages by case: (0.377 0.379 0.71 0.167 0.379 0.459 0.379 0.46 0.379 0.457)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.279
Average program size in population (points): 34.267
Average percent parens in population: 0.350
Minimum age in population: 27.71452331542969
Maximum age in population: 31.3613338470459
Average age in population: 29.58760765266418
Median age in population: 29.8079891204834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 451
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 453
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.008
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6873203
--- Timings ---
Current time: 1559314482929 milliseconds
Total Time:          59.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.6 seconds, 70.4%
Fitness Testing:      9.9 seconds, 16.7%
Report:               7.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (716 1000 1000 718 1000 95 720 720 95 827)
Population mean number of elite cases: 6.89
Count of perfect (error zero) individuals by case: (716 0 0 718 0 95 720 720 95 827)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.109
Median total errors in population: 5
Error averages by case: (0.284 1.0 1.0 0.282 1.0 0.905 0.28 0.28 0.905 0.173)
Error minima by case: (0 1 1 0 1 0 0 0 0 0)
Average genome size in population (length): 22.246
Average program size in population (points): 34.358
Average percent parens in population: 0.352
Minimum age in population: 29.180908203125
Maximum age in population: 32.87513828277588
Average age in population: 31.04059982395172
Median age in population: 30.9400634765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 497
Genome diversity (% unique genomes):	 0.406
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 501
Syntactic diversity (% unique Push programs):	 0.399
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7098654
--- Timings ---
Current time: 1559314485364 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.6 seconds, 70.8%
Fitness Testing:     10.2 seconds, 16.5%
Report:               7.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3) (exec_y_when_autoconstructing () boolean_eq boolean_xor))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3) (exec_y_when_autoconstructing () boolean_eq boolean_xor))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 607 239 239 922 239 239 239 687 607)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (0 607 239 239 922 239 239 239 687 607)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3) (exec_y_when_autoconstructing () boolean_eq boolean_xor))
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.982
Median total errors in population: 6
Error averages by case: (1.0 0.393 0.761 0.761 0.078 0.761 0.761 0.761 0.313 0.393)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.406
Average program size in population (points): 34.578
Average percent parens in population: 0.351
Minimum age in population: 30.56048583984375
Maximum age in population: 34.22490072250366
Average age in population: 32.56225414609909
Median age in population: 32.5975170135498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 352
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7325683
--- Timings ---
Current time: 1559314487911 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 71.2%
Fitness Testing:     10.4 seconds, 16.2%
Report:               8.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (920 920 599 276 276 276 276 919 1000 914)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (920 920 599 276 276 276 276 919 0 914)
Population mean number of perfect (error zero) cases: 5.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 4.624
Median total errors in population: 5
Error averages by case: (0.08 0.08 0.401 0.724 0.724 0.724 0.724 0.081 1.0 0.086)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 24.819
Average program size in population (points): 36.894
Average percent parens in population: 0.328
Minimum age in population: 31.9400634765625
Maximum age in population: 35.48013591766357
Average age in population: 33.69660421514511
Median age in population: 33.80384397506714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 446
Genome diversity (% unique genomes):	 0.381
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 451
Syntactic diversity (% unique Push programs):	 0.373
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7566261
--- Timings ---
Current time: 1559314490221 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.5 seconds, 71.5%
Fitness Testing:     10.7 seconds, 16.1%
Report:               8.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [1 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [1 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 664 660 664 842 181 181 665 1 181)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (1 664 660 664 842 181 181 665 1 181)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [1 0 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 5.96
Median total errors in population: 5
Error averages by case: (0.999 0.336 0.34 0.336 0.158 0.819 0.819 0.335 0.999 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.283
Average program size in population (points): 35.435
Average percent parens in population: 0.343
Minimum age in population: 32.9400634765625
Maximum age in population: 36.99818992614746
Average age in population: 35.26818922245502
Median age in population: 35.30557668209076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 249
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7807296
--- Timings ---
Current time: 1559314492546 milliseconds
Total Time:          68.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.3 seconds, 71.7%
Fitness Testing:     11.0 seconds, 16.0%
Report:               8.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 893 362 920 291 198 361 898 362 897)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (362 893 362 920 291 198 361 898 362 897)
Population mean number of perfect (error zero) cases: 5.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) boolean_not integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 4.456
Median total errors in population: 5
Error averages by case: (0.638 0.107 0.638 0.08 0.709 0.802 0.639 0.102 0.638 0.103)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.499
Average program size in population (points): 34.945
Average percent parens in population: 0.326
Minimum age in population: 34.13110208511353
Maximum age in population: 38.55233931541443
Average age in population: 36.88981682544947
Median age in population: 37.00179022550583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8046063
--- Timings ---
Current time: 1559314494994 milliseconds
Total Time:          71.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 72.0%
Fitness Testing:     11.2 seconds, 15.8%
Report:               8.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_yank integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq integer_stackdepth)
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_yank integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq integer_stackdepth)
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (843 154 901 144 905 688 900 902 544 154)
Population mean number of elite cases: 6.14
Count of perfect (error zero) individuals by case: (843 154 901 144 905 688 900 902 544 154)
Population mean number of perfect (error zero) cases: 6.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 21
Size: 33
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 3.865
Median total errors in population: 3
Error averages by case: (0.157 0.846 0.099 0.856 0.095 0.312 0.1 0.098 0.456 0.846)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.949
Average program size in population (points): 34.554
Average percent parens in population: 0.335
Minimum age in population: 35.4400634765625
Maximum age in population: 40.22343328595161
Average age in population: 38.34291087311506
Median age in population: 38.42127883434296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8288324
--- Timings ---
Current time: 1559314497358 milliseconds
Total Time:          73.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.2 seconds, 72.2%
Fitness Testing:     11.5 seconds, 15.7%
Report:               8.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) print_boolean integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3 integer_div boolean_eq boolean_xor)
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) print_boolean integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3 integer_div boolean_eq boolean_xor)
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 347 347 279 252 255 907 906 252 278)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (278 347 347 279 252 255 907 906 252 278)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) print_boolean integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3 integer_div boolean_eq boolean_xor)
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 5.899
Median total errors in population: 5
Error averages by case: (0.722 0.653 0.653 0.721 0.748 0.745 0.093 0.094 0.748 0.722)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.66
Average program size in population (points): 34.759
Average percent parens in population: 0.318
Minimum age in population: 36.4400634765625
Maximum age in population: 41.80346347391605
Average age in population: 39.86004093132913
Median age in population: 39.95375156402588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8532606
--- Timings ---
Current time: 1559314499747 milliseconds
Total Time:          76.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 72.5%
Fitness Testing:     11.8 seconds, 15.5%
Report:               9.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 215 302 302 911 306 306 303 337 301)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (911 215 302 302 911 306 306 303 337 301)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div exec_noop) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.806
Median total errors in population: 7
Error averages by case: (0.089 0.785 0.698 0.698 0.089 0.694 0.694 0.697 0.663 0.699)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.149
Average program size in population (points): 34.071
Average percent parens in population: 0.319
Minimum age in population: 37.4400634765625
Maximum age in population: 43.22614638507366
Average age in population: 41.39433617053926
Median age in population: 41.44593230634928
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8780718
--- Timings ---
Current time: 1559314502316 milliseconds
Total Time:          78.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 72.7%
Fitness Testing:     12.1 seconds, 15.4%
Report:               9.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s () (in1 integer_min integer_mod integer_rot print_integer) () integer_rot) (integer_eq integer_div exec_noop)) (in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.355
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s () (in1 integer_min integer_mod integer_rot print_integer) () integer_rot) (integer_eq integer_div exec_noop)) (in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.355
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 99 908 903 632 103 633 632 907 102)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (102 99 908 903 632 103 633 632 907 102)
Population mean number of perfect (error zero) cases: 5.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s () (in1 integer_min integer_mod integer_rot print_integer) (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 4.979
Median total errors in population: 4
Error averages by case: (0.898 0.901 0.092 0.097 0.368 0.897 0.367 0.368 0.093 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.811
Average program size in population (points): 34.461
Average percent parens in population: 0.338
Minimum age in population: 38.4400634765625
Maximum age in population: 44.772067617625
Average age in population: 42.77294481860846
Median age in population: 42.849658774212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 139
Genome diversity (% unique genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9023000
--- Timings ---
Current time: 1559314505132 milliseconds
Total Time:          81.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 73.1%
Fitness Testing:     12.4 seconds, 15.2%
Report:               9.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (exec_yankdup) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_yank) integer_shove integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq exec_noop exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [1 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (exec_yankdup) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_yank) integer_shove integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq exec_noop exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [1 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 390 346 134 347 346 390 347 346 896)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (390 390 346 134 347 346 390 347 346 896)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min exec_noop print_boolean print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (in3) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Errors: [1 1 0 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.068
Median total errors in population: 6
Error averages by case: (0.61 0.61 0.654 0.866 0.653 0.654 0.61 0.653 0.654 0.104)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.905
Average program size in population (points): 33.69
Average percent parens in population: 0.319
Minimum age in population: 41.44997942447662
Maximum age in population: 46.16793295554817
Average age in population: 44.35295296290144
Median age in population: 44.4401764953509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 9270304
--- Timings ---
Current time: 1559314507562 milliseconds
Total Time:          83.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.4 seconds, 73.3%
Fitness Testing:     12.7 seconds, 15.1%
Report:               9.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (boolean_yankdup exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3) (exec_y_when_autoconstructing () boolean_eq boolean_xor))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (boolean_yankdup exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3) (exec_y_when_autoconstructing () boolean_eq boolean_xor))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 899 303 886 886 100 100 306 460 458)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (100 899 303 886 886 100 100 306 460 458)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_y_when_autoconstructing ()) boolean_eq boolean_xor)
Errors: [0 0 1 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 36
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 5.502
Median total errors in population: 5
Error averages by case: (0.9 0.101 0.697 0.114 0.114 0.9 0.9 0.694 0.54 0.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.637
Average program size in population (points): 33.608
Average percent parens in population: 0.325
Minimum age in population: 42.44997942447662
Maximum age in population: 47.69945009239018
Average age in population: 45.81833624704648
Median age in population: 45.90130182635039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 9507523
--- Timings ---
Current time: 1559314510097 milliseconds
Total Time:          86.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.4 seconds, 73.5%
Fitness Testing:     12.9 seconds, 15.0%
Report:               9.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 22                 
Correct output: 11                  | Program output: 39                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 28                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 32                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 67                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 44                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -27                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 80                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -37                
Correct output: -69                 | Program output: -13                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 11                 
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 80                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: 70                 
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -19                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -26                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -24                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: 12                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) () integer_rot boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) () integer_rot boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 205 205 268 204 268 268 268 879 879)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (204 205 205 268 204 268 268 268 879 879)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) print_boolean integer_div) (exec_noop) integer_flush boolean_frominteger in3 integer_div boolean_eq boolean_xor)
Errors: [1 1 1 0 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.352
Median total errors in population: 8
Error averages by case: (0.796 0.795 0.795 0.732 0.796 0.732 0.732 0.732 0.121 0.121)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.546
Average program size in population (points): 34.272
Average percent parens in population: 0.311
Minimum age in population: 43.81396691501141
Maximum age in population: 49.33466648496687
Average age in population: 47.29025005810335
Median age in population: 47.38075237069279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9754960
--- Timings ---
Current time: 1559314512528 milliseconds
Total Time:          88.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 73.6%
Fitness Testing:     13.2 seconds, 14.9%
Report:              10.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3})
Lexicase best program: (exec_k (boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3)) ())
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3})
Zero cases best program: (exec_k (boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3)) ())
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 447 448 893 385 385 884 386 385 884)
Population mean number of elite cases: 5.98
Count of perfect (error zero) individuals by case: (884 447 448 893 385 385 884 386 385 884)
Population mean number of perfect (error zero) cases: 5.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing () (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot integer_eq integer_div) exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing (boolean_or boolean_xor))
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 4.019
Median total errors in population: 4
Error averages by case: (0.116 0.553 0.552 0.107 0.615 0.615 0.116 0.614 0.615 0.116)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.463
Average program size in population (points): 33.251
Average percent parens in population: 0.323
Minimum age in population: 44.86246472597122
Maximum age in population: 50.63448741892353
Average age in population: 48.7171542509147
Median age in population: 48.81561566796154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10004224
--- Timings ---
Current time: 1559314515125 milliseconds
Total Time:          91.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.4 seconds, 73.8%
Fitness Testing:     13.5 seconds, 14.8%
Report:              10.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 48                 
Correct output: 6                   | Program output: 21                 
Correct output: 51                  | Program output: 55                 
Correct output: 11                  | Program output: 13                 
Correct output: 1                   | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: 11                  | Program output: 15                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 37                 
Correct output: 32                  | Program output: 48                 
Correct output: 5                   | Program output: 80                 
Correct output: 17                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 41                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -20                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: 57                 
Correct output: -19                 | Program output: 60                 
Correct output: -42                 | Program output: 54                 
Correct output: -33                 | Program output: -2                 
Correct output: -86                 | Program output: -47                
Correct output: -93                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: 40                 
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -15                
Correct output: -70                 | Program output: -35                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 84                 
Correct output: -98                 | Program output: -81                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -34                
Correct output: -49                 | Program output: -11                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 47                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: 59                 
Correct output: -75                 | Program output: -36                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -28                
Correct output: -36                 | Program output: -27                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -73                 | Program output: 48                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -21                
Correct output: -65                 | Program output: -11                
Correct output: -93                 | Program output: -50                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (boolean_yankdup exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div integer_div) (boolean_eq boolean_xor)) ())
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (boolean_yankdup exec_k (exec_k (integer_sub) (boolean_xor) exec_swap (integer_rot exec_s (in4 integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) () (integer_rot) integer_eq integer_div integer_div) (boolean_eq boolean_xor)) ())
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (560 915 8 8 8 562 8 560 915 924)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (560 915 8 8 8 562 8 560 915 924)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_rot exec_s (in4) (integer_yank integer_mod integer_rot in1 integer_min integer_mod boolean_yankdup print_integer) (integer_rot) integer_div) (exec_noop) exec_do*while (boolean_frominteger) in3 integer_div integer_rot integer_eq integer_div exec_noop exec_do*while (boolean_frominteger) in3 exec_y_when_autoconstructing (boolean_eq boolean_xor))
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 5.532
Median total errors in population: 4
Error averages by case: (0.44 0.085 0.992 0.992 0.992 0.438 0.992 0.44 0.085 0.076)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.408
Average program size in population (points): 33.703
Average percent parens in population: 0.334
Minimum age in population: 46.45597578957677
Maximum age in population: 52.35406794305891
Average age in population: 50.19267413805367
Median age in population: 50.24370131333126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 10251289
--- Timings ---
Current time: 1559314517623 milliseconds
Total Time:          93.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.4 seconds, 74.0%
Fitness Testing:     13.8 seconds, 14.7%
Report:              10.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 56                 
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 22                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 48                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 93                 
Correct output: -43                 | Program output: -21                
Correct output: -82                 | Program output: -35                
Correct output: -81                 | Program output: -9                 
Correct output: -73                 | Program output: 45                 
Correct output: -89                 | Program output: -11                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: 80                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 44                 
Correct output: -36                 | Program output: -32                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -47                
Correct output: -36                 | Program output: 55                 
Correct output: -85                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -35                
Correct output: -73                 | Program output: 45                 
Correct output: -79                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -21                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor)
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 884 359 358 1 357 491 883 359 883)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (359 884 359 358 1 357 491 883 359 883)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in3})
Best program: (exec_k (integer_sub) (boolean_empty) exec_noop exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (boolean_frominteger) in3))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 30
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 5.066
Median total errors in population: 6
Error averages by case: (0.641 0.116 0.641 0.642 0.999 0.643 0.509 0.117 0.641 0.117)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.175
Average program size in population (points): 35.645
Average percent parens in population: 0.322
Minimum age in population: 49.07510269246995
Maximum age in population: 53.52753432572354
Average age in population: 51.46936379415949
Median age in population: 51.54211243661121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 10517954
--- Timings ---
Current time: 1559314519868 milliseconds
Total Time:          96.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 74.0%
Fitness Testing:     14.1 seconds, 14.7%
Report:              10.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 199
Test mean error for best: 0.19900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 94                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -42                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 53                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 1                  
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -55                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -70                
Correct output: -98                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: 27                 
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 56                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: 50                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 46
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 46
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 893 567 567 892 136 908 131 908 895)
Population mean number of elite cases: 6.03
Count of perfect (error zero) individuals by case: (130 893 567 567 892 136 908 131 908 895)
Population mean number of perfect (error zero) cases: 6.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in1 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 29
Size: 46
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 3.973
Median total errors in population: 3
Error averages by case: (0.87 0.107 0.433 0.433 0.108 0.864 0.092 0.869 0.092 0.105)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.555
Average program size in population (points): 35.094
Average percent parens in population: 0.357
Minimum age in population: 50.07510269246995
Maximum age in population: 55.1465482628264
Average age in population: 53.1769913351236
Median age in population: 53.28902619720611
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 10758035
--- Timings ---
Current time: 1559314522349 milliseconds
Total Time:          98.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 74.2%
Fitness Testing:     14.4 seconds, 14.6%
Report:              11.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 46
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 46
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (694 627 631 891 175 631 694 694 622 892)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (694 627 631 891 175 631 694 694 622 892)
Population mean number of perfect (error zero) cases: 6.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 2, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor})
Best program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 46
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 3.449
Median total errors in population: 1
Error averages by case: (0.306 0.373 0.369 0.109 0.825 0.369 0.306 0.306 0.378 0.108)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.172
Average program size in population (points): 43.81
Average percent parens in population: 0.354
Minimum age in population: 52.0739501286298
Maximum age in population: 56.21845736108662
Average age in population: 55.24677401730279
Median age in population: 54.97984358528629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 467
Genome diversity (% unique genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 472
Syntactic diversity (% unique Push programs):	 0.4
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 11051832
--- Timings ---
Current time: 1559314524871 milliseconds
Total Time:         101.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 74.2%
Fitness Testing:     14.7 seconds, 14.6%
Report:              11.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 37
Successful program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 46


Auto-simplifying with starting size: 46
step: 0
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 500
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1000
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1500
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2000
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2500
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3000
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3500
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4000
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4500
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 5000
program: (exec_k (integer_sub) (boolean_empty) boolean_and in2 exec_k_when_autoconstructing (exec_s (in1 integer_min integer_mod exec_swap (exec_k_when_autoconstructing (exec_s (in4 integer_min integer_min integer_mult integer_rot print_integer) () (integer_rot) integer_eq integer_div) (exec_noop)) (exec_do*while (integer_gte) in3) exec_y_when_autoconstructing () boolean_eq boolean_xor) () ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 36                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: 72                  | Program output: 72                 
Correct output: -44                 | Program output: -44                
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -48                 | Program output: -48                
Correct output: 59                  | Program output: 59                 
Correct output: -76                 | Program output: -76                
Correct output: 83                  | Program output: 83                 
Correct output: -73                 | Program output: -73                
Correct output: -26                 | Program output: -26                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -47                 | Program output: -47                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -69                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -70                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -49                 | Program output: -49                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -5                  | Program output: -5                 
Correct output: -66                 | Program output: -66                
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -68                 | Program output: -68                
;;******************************
