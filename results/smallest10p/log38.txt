Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-97 100 100 100] -97] [[-62 -62 -6 -62] -62] [[-67 -17 -67 -67] -67] [[21 21 21 -59] -59] [[6 -54 -54 -54] -54] [[81 -41 81 81] -41] [[29 29 50 29] 29] [[-85 45 -85 -85] -85] [[65 65 44 65] 44] [[71 71 49 71] 49] [(-38 -38 -38 -38) -38] [(-4 -4 -4 -4) -4] [(-89 -89 -89 -89) -89] [(17 17 17 17) 17] [(16 16 16 16) 16] [(51 20 49 3) 3] [(1 62 25 23) 1] [(43 66 55 76) 43] [(90 76 62 45) 45] [(85 68 70 11) 11] [(84 68 100 92) 68] [(17 97 90 57) 17] [(27 90 27 14) 14] [(34 22 74 43) 22] [(71 69 1 94) 1] [(53 3 17 26) 3] [(92 20 1 71) 1] [(19 12 39 34) 12] [(92 17 54 79) 17] [(16 75 17 16) 16] [(84 38 88 31) 31] [(92 92 56 65) 56] [(48 42 96 97) 42] [(54 43 63 46) 43] [(87 38 24 36) 24] [(-2 62 -92 -80) -92] [(-83 -82 -10 22) -83] [(-76 -32 73 66) -76] [(-8 90 -54 -52) -54] [(-76 53 86 -47) -76] [(-29 25 -65 12) -65] [(6 -85 58 89) -85] [(-24 -21 69 -20) -24] [(22 -47 -3 56) -47] [(-100 25 -10 12) -100] [(-23 74 80 -63) -63] [(62 -10 -50 -20) -50] [(-5 -38 18 -45) -45] [(100 56 71 -85) -85] [(30 96 -39 -36) -39] [(37 27 -94 64) -94] [(-10 -90 -78 48) -90] [(75 76 -100 -30) -100] [(53 16 -60 -80) -80] [(27 -96 -42 -80) -96] [(1 57 43 -78) -78] [(68 -19 11 -84) -84] [(7 5 19 -39) -39] [(78 50 -31 10) -31] [(28 -12 66 89) -12] [(-29 -77 -25 30) -77] [(-99 48 50 90) -99] [(-28 62 -43 92) -43] [(96 27 -74 -88) -88] [(-96 77 78 73) -96] [(-18 9 -70 4) -70] [(-73 -24 -50 87) -73] [(1 51 -18 -82) -82] [(-57 30 -57 -33) -57] [(73 57 -26 59) -26] [(56 -23 42 57) -23] [(-57 71 -20 35) -57] [(-47 37 84 -35) -47] [(90 -22 13 70) -22] [(-36 26 -60 -30) -60] [(57 42 -42 13) -42] [(46 -86 23 14) -86] [(59 -66 79 3) -66] [(-7 18 8 6) -7] [(35 26 -57 -20) -57] [(19 95 -15 -96) -96] [(82 -76 93 19) -76] [(-60 36 -5 -97) -97] [(-52 -94 66 -88) -94] [(92 -50 -69 -78) -78] [(41 -48 26 -92) -92] [(55 100 37 -70) -70] [(49 91 85 44) 44] [(-93 82 45 -58) -93] [(-68 73 -7 34) -68] [(19 90 62 96) 19] [(63 44 -28 -54) -54] [(50 48 38 76) 38] [(27 -79 -78 -57) -79] [(-25 -3 -65 14) -65])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-97 100 100 100] -97]
Train Case:   6 | Input/Output: [[-62 -62 -6 -62] -62]
Train Case:   7 | Input/Output: [[-67 -17 -67 -67] -67]
Train Case:   8 | Input/Output: [[21 21 21 -59] -59]
Train Case:   9 | Input/Output: [[6 -54 -54 -54] -54]
Train Case:  10 | Input/Output: [[81 -41 81 81] -41]
Train Case:  11 | Input/Output: [[29 29 50 29] 29]
Train Case:  12 | Input/Output: [[-85 45 -85 -85] -85]
Train Case:  13 | Input/Output: [[65 65 44 65] 44]
Train Case:  14 | Input/Output: [[71 71 49 71] 49]
Train Case:  15 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  16 | Input/Output: [(-4 -4 -4 -4) -4]
Train Case:  17 | Input/Output: [(-89 -89 -89 -89) -89]
Train Case:  18 | Input/Output: [(17 17 17 17) 17]
Train Case:  19 | Input/Output: [(16 16 16 16) 16]
Train Case:  20 | Input/Output: [(51 20 49 3) 3]
Train Case:  21 | Input/Output: [(1 62 25 23) 1]
Train Case:  22 | Input/Output: [(43 66 55 76) 43]
Train Case:  23 | Input/Output: [(90 76 62 45) 45]
Train Case:  24 | Input/Output: [(85 68 70 11) 11]
Train Case:  25 | Input/Output: [(84 68 100 92) 68]
Train Case:  26 | Input/Output: [(17 97 90 57) 17]
Train Case:  27 | Input/Output: [(27 90 27 14) 14]
Train Case:  28 | Input/Output: [(34 22 74 43) 22]
Train Case:  29 | Input/Output: [(71 69 1 94) 1]
Train Case:  30 | Input/Output: [(53 3 17 26) 3]
Train Case:  31 | Input/Output: [(92 20 1 71) 1]
Train Case:  32 | Input/Output: [(19 12 39 34) 12]
Train Case:  33 | Input/Output: [(92 17 54 79) 17]
Train Case:  34 | Input/Output: [(16 75 17 16) 16]
Train Case:  35 | Input/Output: [(84 38 88 31) 31]
Train Case:  36 | Input/Output: [(92 92 56 65) 56]
Train Case:  37 | Input/Output: [(48 42 96 97) 42]
Train Case:  38 | Input/Output: [(54 43 63 46) 43]
Train Case:  39 | Input/Output: [(87 38 24 36) 24]
Train Case:  40 | Input/Output: [(-2 62 -92 -80) -92]
Train Case:  41 | Input/Output: [(-83 -82 -10 22) -83]
Train Case:  42 | Input/Output: [(-76 -32 73 66) -76]
Train Case:  43 | Input/Output: [(-8 90 -54 -52) -54]
Train Case:  44 | Input/Output: [(-76 53 86 -47) -76]
Train Case:  45 | Input/Output: [(-29 25 -65 12) -65]
Train Case:  46 | Input/Output: [(6 -85 58 89) -85]
Train Case:  47 | Input/Output: [(-24 -21 69 -20) -24]
Train Case:  48 | Input/Output: [(22 -47 -3 56) -47]
Train Case:  49 | Input/Output: [(-100 25 -10 12) -100]
Train Case:  50 | Input/Output: [(-23 74 80 -63) -63]
Train Case:  51 | Input/Output: [(62 -10 -50 -20) -50]
Train Case:  52 | Input/Output: [(-5 -38 18 -45) -45]
Train Case:  53 | Input/Output: [(100 56 71 -85) -85]
Train Case:  54 | Input/Output: [(30 96 -39 -36) -39]
Train Case:  55 | Input/Output: [(37 27 -94 64) -94]
Train Case:  56 | Input/Output: [(-10 -90 -78 48) -90]
Train Case:  57 | Input/Output: [(75 76 -100 -30) -100]
Train Case:  58 | Input/Output: [(53 16 -60 -80) -80]
Train Case:  59 | Input/Output: [(27 -96 -42 -80) -96]
Train Case:  60 | Input/Output: [(1 57 43 -78) -78]
Train Case:  61 | Input/Output: [(68 -19 11 -84) -84]
Train Case:  62 | Input/Output: [(7 5 19 -39) -39]
Train Case:  63 | Input/Output: [(78 50 -31 10) -31]
Train Case:  64 | Input/Output: [(28 -12 66 89) -12]
Train Case:  65 | Input/Output: [(-29 -77 -25 30) -77]
Train Case:  66 | Input/Output: [(-99 48 50 90) -99]
Train Case:  67 | Input/Output: [(-28 62 -43 92) -43]
Train Case:  68 | Input/Output: [(96 27 -74 -88) -88]
Train Case:  69 | Input/Output: [(-96 77 78 73) -96]
Train Case:  70 | Input/Output: [(-18 9 -70 4) -70]
Train Case:  71 | Input/Output: [(-73 -24 -50 87) -73]
Train Case:  72 | Input/Output: [(1 51 -18 -82) -82]
Train Case:  73 | Input/Output: [(-57 30 -57 -33) -57]
Train Case:  74 | Input/Output: [(73 57 -26 59) -26]
Train Case:  75 | Input/Output: [(56 -23 42 57) -23]
Train Case:  76 | Input/Output: [(-57 71 -20 35) -57]
Train Case:  77 | Input/Output: [(-47 37 84 -35) -47]
Train Case:  78 | Input/Output: [(90 -22 13 70) -22]
Train Case:  79 | Input/Output: [(-36 26 -60 -30) -60]
Train Case:  80 | Input/Output: [(57 42 -42 13) -42]
Train Case:  81 | Input/Output: [(46 -86 23 14) -86]
Train Case:  82 | Input/Output: [(59 -66 79 3) -66]
Train Case:  83 | Input/Output: [(-7 18 8 6) -7]
Train Case:  84 | Input/Output: [(35 26 -57 -20) -57]
Train Case:  85 | Input/Output: [(19 95 -15 -96) -96]
Train Case:  86 | Input/Output: [(82 -76 93 19) -76]
Train Case:  87 | Input/Output: [(-60 36 -5 -97) -97]
Train Case:  88 | Input/Output: [(-52 -94 66 -88) -94]
Train Case:  89 | Input/Output: [(92 -50 -69 -78) -78]
Train Case:  90 | Input/Output: [(41 -48 26 -92) -92]
Train Case:  91 | Input/Output: [(55 100 37 -70) -70]
Train Case:  92 | Input/Output: [(49 91 85 44) 44]
Train Case:  93 | Input/Output: [(-93 82 45 -58) -93]
Train Case:  94 | Input/Output: [(-68 73 -7 34) -68]
Train Case:  95 | Input/Output: [(19 90 62 96) 19]
Train Case:  96 | Input/Output: [(63 44 -28 -54) -54]
Train Case:  97 | Input/Output: [(50 48 38 76) 38]
Train Case:  98 | Input/Output: [(27 -79 -78 -57) -79]
Train Case:  99 | Input/Output: [(-25 -3 -65 14) -65]
Test Case:   0 | Input/Output: [[-75 -75 -75 -96] -96]
Test Case:   1 | Input/Output: [[81 81 63 81] 63]
Test Case:   2 | Input/Output: [[-73 -73 -73 -100] -100]
Test Case:   3 | Input/Output: [[-23 -23 -23 -67] -67]
Test Case:   4 | Input/Output: [[-18 -18 98 -18] -18]
Test Case:   5 | Input/Output: [[99 99 -60 99] -60]
Test Case:   6 | Input/Output: [[66 41 66 66] 41]
Test Case:   7 | Input/Output: [[47 63 47 47] 47]
Test Case:   8 | Input/Output: [[-100 -100 -100 75] -100]
Test Case:   9 | Input/Output: [[68 68 68 38] 38]
Test Case:  10 | Input/Output: [[-50 -79 -50 -50] -79]
Test Case:  11 | Input/Output: [[-53 -53 -53 57] -53]
Test Case:  12 | Input/Output: [[-15 -15 -15 60] -15]
Test Case:  13 | Input/Output: [[44 85 85 85] 44]
Test Case:  14 | Input/Output: [[9 -49 9 9] -49]
Test Case:  15 | Input/Output: [[36 36 18 36] 18]
Test Case:  16 | Input/Output: [[43 43 -42 43] -42]
Test Case:  17 | Input/Output: [[-18 -18 -18 60] -18]
Test Case:  18 | Input/Output: [[-24 -24 -39 -24] -39]
Test Case:  19 | Input/Output: [[34 34 46 34] 34]
Test Case:  20 | Input/Output: [[29 -10 -10 -10] -10]
Test Case:  21 | Input/Output: [[-49 -49 -49 -17] -49]
Test Case:  22 | Input/Output: [[-61 18 -61 -61] -61]
Test Case:  23 | Input/Output: [[51 51 51 -44] -44]
Test Case:  24 | Input/Output: [[-66 -66 -66 12] -66]
Test Case:  25 | Input/Output: [[43 -91 43 43] -91]
Test Case:  26 | Input/Output: [[50 46 46 46] 46]
Test Case:  27 | Input/Output: [[71 -6 -6 -6] -6]
Test Case:  28 | Input/Output: [[39 39 39 -28] -28]
Test Case:  29 | Input/Output: [[-60 -95 -95 -95] -95]
Test Case:  30 | Input/Output: [[60 -74 -74 -74] -74]
Test Case:  31 | Input/Output: [[51 51 51 7] 7]
Test Case:  32 | Input/Output: [[91 91 91 60] 60]
Test Case:  33 | Input/Output: [[-70 -70 -70 -83] -83]
Test Case:  34 | Input/Output: [[-42 -42 -94 -42] -94]
Test Case:  35 | Input/Output: [[-18 -18 -18 -13] -18]
Test Case:  36 | Input/Output: [[67 57 57 57] 57]
Test Case:  37 | Input/Output: [[94 94 22 94] 22]
Test Case:  38 | Input/Output: [[-73 39 -73 -73] -73]
Test Case:  39 | Input/Output: [[39 -96 39 39] -96]
Test Case:  40 | Input/Output: [[-78 -78 -78 89] -78]
Test Case:  41 | Input/Output: [[-6 -6 26 -6] -6]
Test Case:  42 | Input/Output: [[31 31 31 -92] -92]
Test Case:  43 | Input/Output: [[-94 65 65 65] -94]
Test Case:  44 | Input/Output: [[-84 -84 -84 -68] -84]
Test Case:  45 | Input/Output: [[6 6 6 88] 6]
Test Case:  46 | Input/Output: [[95 95 -14 95] -14]
Test Case:  47 | Input/Output: [[78 78 78 -80] -80]
Test Case:  48 | Input/Output: [[60 60 2 60] 2]
Test Case:  49 | Input/Output: [[6 72 6 6] 6]
Test Case:  50 | Input/Output: [[-80 65 -80 -80] -80]
Test Case:  51 | Input/Output: [[53 53 53 -74] -74]
Test Case:  52 | Input/Output: [[-15 -96 -96 -96] -96]
Test Case:  53 | Input/Output: [[13 63 63 63] 13]
Test Case:  54 | Input/Output: [[79 -40 79 79] -40]
Test Case:  55 | Input/Output: [[-27 18 18 18] -27]
Test Case:  56 | Input/Output: [[-44 -44 30 -44] -44]
Test Case:  57 | Input/Output: [[7 -85 -85 -85] -85]
Test Case:  58 | Input/Output: [[-50 40 40 40] -50]
Test Case:  59 | Input/Output: [[-32 -32 -32 68] -32]
Test Case:  60 | Input/Output: [[-50 -50 -80 -50] -80]
Test Case:  61 | Input/Output: [[-42 -42 -42 -42] -42]
Test Case:  62 | Input/Output: [[30 30 30 -42] -42]
Test Case:  63 | Input/Output: [[61 61 -47 61] -47]
Test Case:  64 | Input/Output: [[70 12 70 70] 12]
Test Case:  65 | Input/Output: [[34 34 34 -6] -6]
Test Case:  66 | Input/Output: [[-8 -13 -8 -8] -13]
Test Case:  67 | Input/Output: [[-83 -40 -83 -83] -83]
Test Case:  68 | Input/Output: [[55 55 55 94] 55]
Test Case:  69 | Input/Output: [[30 30 30 30] 30]
Test Case:  70 | Input/Output: [[9 9 9 75] 9]
Test Case:  71 | Input/Output: [[-88 -88 57 -88] -88]
Test Case:  72 | Input/Output: [[-78 -41 -41 -41] -78]
Test Case:  73 | Input/Output: [[-76 -76 -76 40] -76]
Test Case:  74 | Input/Output: [[42 42 30 42] 30]
Test Case:  75 | Input/Output: [[5 5 -88 5] -88]
Test Case:  76 | Input/Output: [[-86 -86 25 -86] -86]
Test Case:  77 | Input/Output: [[-48 -48 -46 -48] -48]
Test Case:  78 | Input/Output: [[42 42 -28 42] -28]
Test Case:  79 | Input/Output: [[-76 59 -76 -76] -76]
Test Case:  80 | Input/Output: [[-76 -76 -76 -23] -76]
Test Case:  81 | Input/Output: [[40 40 40 -43] -43]
Test Case:  82 | Input/Output: [[-53 -53 -53 -77] -77]
Test Case:  83 | Input/Output: [[-47 -79 -79 -79] -79]
Test Case:  84 | Input/Output: [[-87 -87 -96 -87] -96]
Test Case:  85 | Input/Output: [[-92 67 -92 -92] -92]
Test Case:  86 | Input/Output: [[94 94 94 -30] -30]
Test Case:  87 | Input/Output: [[-51 -51 85 -51] -51]
Test Case:  88 | Input/Output: [[23 23 23 23] 23]
Test Case:  89 | Input/Output: [[53 53 53 64] 53]
Test Case:  90 | Input/Output: [[-21 0 -21 -21] -21]
Test Case:  91 | Input/Output: [[57 57 -99 57] -99]
Test Case:  92 | Input/Output: [[78 78 78 -46] -46]
Test Case:  93 | Input/Output: [[99 99 99 99] 99]
Test Case:  94 | Input/Output: [[-8 -8 82 -8] -8]
Test Case:  95 | Input/Output: [[65 65 83 65] 65]
Test Case:  96 | Input/Output: [[70 44 44 44] 44]
Test Case:  97 | Input/Output: [[81 -4 81 81] -4]
Test Case:  98 | Input/Output: [[-9 -12 -12 -12] -12]
Test Case:  99 | Input/Output: [[84 -20 -20 -20] -20]
Test Case: 100 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 101 | Input/Output: [(45 45 45 45) 45]
Test Case: 102 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 103 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 104 | Input/Output: [(13 13 13 13) 13]
Test Case: 105 | Input/Output: [(50 50 50 50) 50]
Test Case: 106 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 107 | Input/Output: [(47 47 47 47) 47]
Test Case: 108 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 109 | Input/Output: [(43 43 43 43) 43]
Test Case: 110 | Input/Output: [(21 21 21 21) 21]
Test Case: 111 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 112 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 113 | Input/Output: [(48 48 48 48) 48]
Test Case: 114 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 115 | Input/Output: [(64 64 64 64) 64]
Test Case: 116 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 117 | Input/Output: [(48 48 48 48) 48]
Test Case: 118 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 119 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 120 | Input/Output: [(13 13 13 13) 13]
Test Case: 121 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 122 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 123 | Input/Output: [(88 88 88 88) 88]
Test Case: 124 | Input/Output: [(41 41 41 41) 41]
Test Case: 125 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 126 | Input/Output: [(58 58 58 58) 58]
Test Case: 127 | Input/Output: [(97 97 97 97) 97]
Test Case: 128 | Input/Output: [(52 52 52 52) 52]
Test Case: 129 | Input/Output: [(69 69 69 69) 69]
Test Case: 130 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 131 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 132 | Input/Output: [(14 14 14 14) 14]
Test Case: 133 | Input/Output: [(92 92 92 92) 92]
Test Case: 134 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 135 | Input/Output: [(82 82 82 82) 82]
Test Case: 136 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 137 | Input/Output: [(27 27 27 27) 27]
Test Case: 138 | Input/Output: [(41 41 41 41) 41]
Test Case: 139 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 140 | Input/Output: [(92 92 92 92) 92]
Test Case: 141 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 142 | Input/Output: [(20 20 20 20) 20]
Test Case: 143 | Input/Output: [(70 70 70 70) 70]
Test Case: 144 | Input/Output: [(55 55 55 55) 55]
Test Case: 145 | Input/Output: [(98 98 98 98) 98]
Test Case: 146 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 147 | Input/Output: [(13 13 13 13) 13]
Test Case: 148 | Input/Output: [(17 17 17 17) 17]
Test Case: 149 | Input/Output: [(66 66 66 66) 66]
Test Case: 150 | Input/Output: [(10 10 10 10) 10]
Test Case: 151 | Input/Output: [(31 31 31 31) 31]
Test Case: 152 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 153 | Input/Output: [(67 67 67 67) 67]
Test Case: 154 | Input/Output: [(84 84 84 84) 84]
Test Case: 155 | Input/Output: [(9 9 9 9) 9]
Test Case: 156 | Input/Output: [(61 61 61 61) 61]
Test Case: 157 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 158 | Input/Output: [(99 99 99 99) 99]
Test Case: 159 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 160 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 161 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 162 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 163 | Input/Output: [(47 47 47 47) 47]
Test Case: 164 | Input/Output: [(41 41 41 41) 41]
Test Case: 165 | Input/Output: [(25 25 25 25) 25]
Test Case: 166 | Input/Output: [(16 16 16 16) 16]
Test Case: 167 | Input/Output: [(92 92 92 92) 92]
Test Case: 168 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 169 | Input/Output: [(40 40 40 40) 40]
Test Case: 170 | Input/Output: [(0 0 0 0) 0]
Test Case: 171 | Input/Output: [(81 81 81 81) 81]
Test Case: 172 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 173 | Input/Output: [(8 8 8 8) 8]
Test Case: 174 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 175 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 176 | Input/Output: [(79 79 79 79) 79]
Test Case: 177 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 178 | Input/Output: [(61 61 61 61) 61]
Test Case: 179 | Input/Output: [(23 23 23 23) 23]
Test Case: 180 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 181 | Input/Output: [(65 65 65 65) 65]
Test Case: 182 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 183 | Input/Output: [(0 0 0 0) 0]
Test Case: 184 | Input/Output: [(74 74 74 74) 74]
Test Case: 185 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 186 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 187 | Input/Output: [(56 56 56 56) 56]
Test Case: 188 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 189 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 190 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 191 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 192 | Input/Output: [(47 47 47 47) 47]
Test Case: 193 | Input/Output: [(47 47 47 47) 47]
Test Case: 194 | Input/Output: [(33 33 33 33) 33]
Test Case: 195 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 196 | Input/Output: [(34 34 34 34) 34]
Test Case: 197 | Input/Output: [(64 64 64 64) 64]
Test Case: 198 | Input/Output: [(77 77 77 77) 77]
Test Case: 199 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 200 | Input/Output: [(44 54 18 84) 18]
Test Case: 201 | Input/Output: [(7 0 36 95) 0]
Test Case: 202 | Input/Output: [(75 86 36 32) 32]
Test Case: 203 | Input/Output: [(89 5 52 41) 5]
Test Case: 204 | Input/Output: [(56 58 99 2) 2]
Test Case: 205 | Input/Output: [(91 35 71 28) 28]
Test Case: 206 | Input/Output: [(64 17 37 28) 17]
Test Case: 207 | Input/Output: [(26 24 74 27) 24]
Test Case: 208 | Input/Output: [(43 23 68 14) 14]
Test Case: 209 | Input/Output: [(67 81 36 22) 22]
Test Case: 210 | Input/Output: [(52 12 76 29) 12]
Test Case: 211 | Input/Output: [(100 79 87 18) 18]
Test Case: 212 | Input/Output: [(66 2 53 15) 2]
Test Case: 213 | Input/Output: [(57 17 51 38) 17]
Test Case: 214 | Input/Output: [(82 30 61 72) 30]
Test Case: 215 | Input/Output: [(34 43 45 85) 34]
Test Case: 216 | Input/Output: [(57 0 81 97) 0]
Test Case: 217 | Input/Output: [(19 20 68 78) 19]
Test Case: 218 | Input/Output: [(16 86 56 11) 11]
Test Case: 219 | Input/Output: [(65 99 37 18) 18]
Test Case: 220 | Input/Output: [(40 50 61 71) 40]
Test Case: 221 | Input/Output: [(18 61 83 27) 18]
Test Case: 222 | Input/Output: [(91 7 86 100) 7]
Test Case: 223 | Input/Output: [(91 30 24 44) 24]
Test Case: 224 | Input/Output: [(87 51 68 1) 1]
Test Case: 225 | Input/Output: [(3 21 7 77) 3]
Test Case: 226 | Input/Output: [(11 68 12 20) 11]
Test Case: 227 | Input/Output: [(85 25 56 5) 5]
Test Case: 228 | Input/Output: [(76 40 87 5) 5]
Test Case: 229 | Input/Output: [(88 10 20 11) 10]
Test Case: 230 | Input/Output: [(10 33 56 26) 10]
Test Case: 231 | Input/Output: [(31 68 8 71) 8]
Test Case: 232 | Input/Output: [(69 47 30 8) 8]
Test Case: 233 | Input/Output: [(20 30 36 68) 20]
Test Case: 234 | Input/Output: [(71 35 46 44) 35]
Test Case: 235 | Input/Output: [(56 26 67 99) 26]
Test Case: 236 | Input/Output: [(46 82 63 28) 28]
Test Case: 237 | Input/Output: [(59 38 11 54) 11]
Test Case: 238 | Input/Output: [(35 9 74 13) 9]
Test Case: 239 | Input/Output: [(71 53 74 76) 53]
Test Case: 240 | Input/Output: [(83 55 69 87) 55]
Test Case: 241 | Input/Output: [(11 34 66 7) 7]
Test Case: 242 | Input/Output: [(52 84 7 19) 7]
Test Case: 243 | Input/Output: [(17 15 91 6) 6]
Test Case: 244 | Input/Output: [(75 20 49 81) 20]
Test Case: 245 | Input/Output: [(93 35 0 82) 0]
Test Case: 246 | Input/Output: [(30 100 97 84) 30]
Test Case: 247 | Input/Output: [(61 6 95 65) 6]
Test Case: 248 | Input/Output: [(7 35 31 100) 7]
Test Case: 249 | Input/Output: [(33 1 59 78) 1]
Test Case: 250 | Input/Output: [(98 96 90 84) 84]
Test Case: 251 | Input/Output: [(71 31 63 6) 6]
Test Case: 252 | Input/Output: [(21 40 38 44) 21]
Test Case: 253 | Input/Output: [(85 35 21 9) 9]
Test Case: 254 | Input/Output: [(78 34 27 63) 27]
Test Case: 255 | Input/Output: [(57 96 12 42) 12]
Test Case: 256 | Input/Output: [(43 11 84 24) 11]
Test Case: 257 | Input/Output: [(48 88 44 35) 35]
Test Case: 258 | Input/Output: [(33 92 71 9) 9]
Test Case: 259 | Input/Output: [(91 7 62 17) 7]
Test Case: 260 | Input/Output: [(0 52 27 47) 0]
Test Case: 261 | Input/Output: [(6 86 90 79) 6]
Test Case: 262 | Input/Output: [(77 74 80 3) 3]
Test Case: 263 | Input/Output: [(84 69 91 46) 46]
Test Case: 264 | Input/Output: [(67 59 67 93) 59]
Test Case: 265 | Input/Output: [(2 76 28 87) 2]
Test Case: 266 | Input/Output: [(72 50 83 64) 50]
Test Case: 267 | Input/Output: [(96 3 30 10) 3]
Test Case: 268 | Input/Output: [(68 25 99 11) 11]
Test Case: 269 | Input/Output: [(97 100 81 91) 81]
Test Case: 270 | Input/Output: [(59 40 98 69) 40]
Test Case: 271 | Input/Output: [(21 88 1 74) 1]
Test Case: 272 | Input/Output: [(58 24 68 62) 24]
Test Case: 273 | Input/Output: [(86 35 91 71) 35]
Test Case: 274 | Input/Output: [(66 98 62 17) 17]
Test Case: 275 | Input/Output: [(5 0 15 89) 0]
Test Case: 276 | Input/Output: [(33 54 38 87) 33]
Test Case: 277 | Input/Output: [(11 69 62 52) 11]
Test Case: 278 | Input/Output: [(100 38 99 13) 13]
Test Case: 279 | Input/Output: [(8 57 96 49) 8]
Test Case: 280 | Input/Output: [(52 35 56 59) 35]
Test Case: 281 | Input/Output: [(29 73 90 35) 29]
Test Case: 282 | Input/Output: [(66 5 90 24) 5]
Test Case: 283 | Input/Output: [(13 98 78 81) 13]
Test Case: 284 | Input/Output: [(80 5 17 34) 5]
Test Case: 285 | Input/Output: [(26 92 89 58) 26]
Test Case: 286 | Input/Output: [(84 86 96 11) 11]
Test Case: 287 | Input/Output: [(5 88 9 19) 5]
Test Case: 288 | Input/Output: [(87 33 45 53) 33]
Test Case: 289 | Input/Output: [(49 90 70 72) 49]
Test Case: 290 | Input/Output: [(72 39 22 80) 22]
Test Case: 291 | Input/Output: [(90 78 80 80) 78]
Test Case: 292 | Input/Output: [(60 51 48 56) 48]
Test Case: 293 | Input/Output: [(42 0 18 25) 0]
Test Case: 294 | Input/Output: [(29 86 44 48) 29]
Test Case: 295 | Input/Output: [(68 59 43 35) 35]
Test Case: 296 | Input/Output: [(22 95 75 57) 22]
Test Case: 297 | Input/Output: [(58 35 93 33) 33]
Test Case: 298 | Input/Output: [(42 56 17 39) 17]
Test Case: 299 | Input/Output: [(72 52 59 11) 11]
Test Case: 300 | Input/Output: [(98 80 72 100) 72]
Test Case: 301 | Input/Output: [(95 55 68 37) 37]
Test Case: 302 | Input/Output: [(62 53 5 94) 5]
Test Case: 303 | Input/Output: [(30 32 25 27) 25]
Test Case: 304 | Input/Output: [(70 11 80 76) 11]
Test Case: 305 | Input/Output: [(57 76 52 92) 52]
Test Case: 306 | Input/Output: [(22 34 58 31) 22]
Test Case: 307 | Input/Output: [(78 86 90 94) 78]
Test Case: 308 | Input/Output: [(69 1 15 9) 1]
Test Case: 309 | Input/Output: [(75 55 21 80) 21]
Test Case: 310 | Input/Output: [(90 3 71 91) 3]
Test Case: 311 | Input/Output: [(18 94 10 96) 10]
Test Case: 312 | Input/Output: [(10 92 7 64) 7]
Test Case: 313 | Input/Output: [(25 46 61 3) 3]
Test Case: 314 | Input/Output: [(61 22 81 71) 22]
Test Case: 315 | Input/Output: [(82 10 42 40) 10]
Test Case: 316 | Input/Output: [(96 71 35 19) 19]
Test Case: 317 | Input/Output: [(26 91 66 68) 26]
Test Case: 318 | Input/Output: [(78 75 94 58) 58]
Test Case: 319 | Input/Output: [(50 24 70 70) 24]
Test Case: 320 | Input/Output: [(33 1 15 65) 1]
Test Case: 321 | Input/Output: [(38 72 53 81) 38]
Test Case: 322 | Input/Output: [(57 76 6 25) 6]
Test Case: 323 | Input/Output: [(44 25 76 78) 25]
Test Case: 324 | Input/Output: [(82 48 28 73) 28]
Test Case: 325 | Input/Output: [(43 87 80 14) 14]
Test Case: 326 | Input/Output: [(35 74 68 84) 35]
Test Case: 327 | Input/Output: [(36 17 58 5) 5]
Test Case: 328 | Input/Output: [(60 82 77 38) 38]
Test Case: 329 | Input/Output: [(100 25 84 3) 3]
Test Case: 330 | Input/Output: [(17 61 74 64) 17]
Test Case: 331 | Input/Output: [(69 26 6 21) 6]
Test Case: 332 | Input/Output: [(55 94 81 95) 55]
Test Case: 333 | Input/Output: [(81 20 41 86) 20]
Test Case: 334 | Input/Output: [(12 44 68 22) 12]
Test Case: 335 | Input/Output: [(4 17 72 73) 4]
Test Case: 336 | Input/Output: [(0 35 56 22) 0]
Test Case: 337 | Input/Output: [(11 45 45 61) 11]
Test Case: 338 | Input/Output: [(68 36 18 3) 3]
Test Case: 339 | Input/Output: [(29 63 62 83) 29]
Test Case: 340 | Input/Output: [(84 97 91 11) 11]
Test Case: 341 | Input/Output: [(16 76 55 56) 16]
Test Case: 342 | Input/Output: [(78 40 93 93) 40]
Test Case: 343 | Input/Output: [(51 53 85 19) 19]
Test Case: 344 | Input/Output: [(45 59 88 17) 17]
Test Case: 345 | Input/Output: [(52 68 83 1) 1]
Test Case: 346 | Input/Output: [(26 9 18 83) 9]
Test Case: 347 | Input/Output: [(97 84 74 33) 33]
Test Case: 348 | Input/Output: [(86 97 72 48) 48]
Test Case: 349 | Input/Output: [(50 93 39 23) 23]
Test Case: 350 | Input/Output: [(92 74 73 17) 17]
Test Case: 351 | Input/Output: [(52 67 34 32) 32]
Test Case: 352 | Input/Output: [(18 96 31 30) 18]
Test Case: 353 | Input/Output: [(11 64 31 69) 11]
Test Case: 354 | Input/Output: [(33 54 46 81) 33]
Test Case: 355 | Input/Output: [(63 61 18 93) 18]
Test Case: 356 | Input/Output: [(42 27 10 38) 10]
Test Case: 357 | Input/Output: [(58 81 78 83) 58]
Test Case: 358 | Input/Output: [(57 85 45 98) 45]
Test Case: 359 | Input/Output: [(35 23 54 43) 23]
Test Case: 360 | Input/Output: [(29 82 65 58) 29]
Test Case: 361 | Input/Output: [(48 97 62 11) 11]
Test Case: 362 | Input/Output: [(21 83 97 85) 21]
Test Case: 363 | Input/Output: [(10 30 98 90) 10]
Test Case: 364 | Input/Output: [(81 47 27 15) 15]
Test Case: 365 | Input/Output: [(53 69 69 7) 7]
Test Case: 366 | Input/Output: [(83 43 13 99) 13]
Test Case: 367 | Input/Output: [(84 50 10 51) 10]
Test Case: 368 | Input/Output: [(44 83 27 76) 27]
Test Case: 369 | Input/Output: [(7 13 10 66) 7]
Test Case: 370 | Input/Output: [(32 16 25 58) 16]
Test Case: 371 | Input/Output: [(66 36 78 36) 36]
Test Case: 372 | Input/Output: [(15 10 47 80) 10]
Test Case: 373 | Input/Output: [(51 59 92 33) 33]
Test Case: 374 | Input/Output: [(82 28 48 99) 28]
Test Case: 375 | Input/Output: [(81 22 13 67) 13]
Test Case: 376 | Input/Output: [(26 97 62 59) 26]
Test Case: 377 | Input/Output: [(84 86 86 15) 15]
Test Case: 378 | Input/Output: [(63 100 12 55) 12]
Test Case: 379 | Input/Output: [(100 95 92 91) 91]
Test Case: 380 | Input/Output: [(29 97 53 54) 29]
Test Case: 381 | Input/Output: [(42 27 28 70) 27]
Test Case: 382 | Input/Output: [(57 63 14 92) 14]
Test Case: 383 | Input/Output: [(22 11 17 92) 11]
Test Case: 384 | Input/Output: [(68 35 97 97) 35]
Test Case: 385 | Input/Output: [(88 53 66 81) 53]
Test Case: 386 | Input/Output: [(96 86 4 79) 4]
Test Case: 387 | Input/Output: [(13 63 89 2) 2]
Test Case: 388 | Input/Output: [(69 69 58 88) 58]
Test Case: 389 | Input/Output: [(37 87 35 68) 35]
Test Case: 390 | Input/Output: [(69 26 99 81) 26]
Test Case: 391 | Input/Output: [(13 41 79 64) 13]
Test Case: 392 | Input/Output: [(97 91 74 45) 45]
Test Case: 393 | Input/Output: [(82 51 19 53) 19]
Test Case: 394 | Input/Output: [(99 34 16 26) 16]
Test Case: 395 | Input/Output: [(85 22 14 54) 14]
Test Case: 396 | Input/Output: [(42 95 72 18) 18]
Test Case: 397 | Input/Output: [(99 0 70 50) 0]
Test Case: 398 | Input/Output: [(56 90 62 32) 32]
Test Case: 399 | Input/Output: [(3 38 18 86) 3]
Test Case: 400 | Input/Output: [(73 -23 33 -97) -97]
Test Case: 401 | Input/Output: [(-6 -72 -32 -35) -72]
Test Case: 402 | Input/Output: [(30 76 -88 -49) -88]
Test Case: 403 | Input/Output: [(-20 59 -36 8) -36]
Test Case: 404 | Input/Output: [(12 -28 59 -29) -29]
Test Case: 405 | Input/Output: [(73 -12 68 73) -12]
Test Case: 406 | Input/Output: [(38 38 16 19) 16]
Test Case: 407 | Input/Output: [(-2 -36 -53 61) -53]
Test Case: 408 | Input/Output: [(-80 -28 16 84) -80]
Test Case: 409 | Input/Output: [(33 81 -82 -100) -100]
Test Case: 410 | Input/Output: [(-60 52 -47 90) -60]
Test Case: 411 | Input/Output: [(56 5 11 76) 5]
Test Case: 412 | Input/Output: [(-65 -97 -46 -51) -97]
Test Case: 413 | Input/Output: [(43 96 -71 95) -71]
Test Case: 414 | Input/Output: [(78 51 -56 30) -56]
Test Case: 415 | Input/Output: [(54 5 0 85) 0]
Test Case: 416 | Input/Output: [(94 -31 3 -75) -75]
Test Case: 417 | Input/Output: [(-70 61 8 -82) -82]
Test Case: 418 | Input/Output: [(-54 22 43 25) -54]
Test Case: 419 | Input/Output: [(-49 -50 7 73) -50]
Test Case: 420 | Input/Output: [(5 64 36 80) 5]
Test Case: 421 | Input/Output: [(-51 55 62 49) -51]
Test Case: 422 | Input/Output: [(31 39 -7 -100) -100]
Test Case: 423 | Input/Output: [(-48 86 -94 -71) -94]
Test Case: 424 | Input/Output: [(92 7 72 87) 7]
Test Case: 425 | Input/Output: [(99 -29 29 -26) -29]
Test Case: 426 | Input/Output: [(-60 46 -98 -68) -98]
Test Case: 427 | Input/Output: [(44 -50 -69 9) -69]
Test Case: 428 | Input/Output: [(-46 68 -38 -79) -79]
Test Case: 429 | Input/Output: [(-57 -57 -59 -34) -59]
Test Case: 430 | Input/Output: [(-76 -53 23 54) -76]
Test Case: 431 | Input/Output: [(54 59 -61 -57) -61]
Test Case: 432 | Input/Output: [(-24 16 -61 48) -61]
Test Case: 433 | Input/Output: [(-73 56 -87 -56) -87]
Test Case: 434 | Input/Output: [(-44 26 -33 14) -44]
Test Case: 435 | Input/Output: [(-41 -71 82 5) -71]
Test Case: 436 | Input/Output: [(-46 -83 54 33) -83]
Test Case: 437 | Input/Output: [(-85 -56 41 -2) -85]
Test Case: 438 | Input/Output: [(56 -54 -76 -93) -93]
Test Case: 439 | Input/Output: [(-20 16 -14 92) -20]
Test Case: 440 | Input/Output: [(-14 70 19 -16) -16]
Test Case: 441 | Input/Output: [(72 -29 47 6) -29]
Test Case: 442 | Input/Output: [(-5 -46 36 28) -46]
Test Case: 443 | Input/Output: [(4 27 -75 29) -75]
Test Case: 444 | Input/Output: [(-18 -58 -24 -49) -58]
Test Case: 445 | Input/Output: [(-49 41 -64 26) -64]
Test Case: 446 | Input/Output: [(22 24 -35 54) -35]
Test Case: 447 | Input/Output: [(79 -25 -84 55) -84]
Test Case: 448 | Input/Output: [(89 49 26 84) 26]
Test Case: 449 | Input/Output: [(-1 -91 -29 87) -91]
Test Case: 450 | Input/Output: [(44 39 10 23) 10]
Test Case: 451 | Input/Output: [(0 77 33 94) 0]
Test Case: 452 | Input/Output: [(31 92 72 59) 31]
Test Case: 453 | Input/Output: [(40 -72 -69 64) -72]
Test Case: 454 | Input/Output: [(-81 -61 -10 -91) -91]
Test Case: 455 | Input/Output: [(19 3 -90 -51) -90]
Test Case: 456 | Input/Output: [(-87 -84 42 9) -87]
Test Case: 457 | Input/Output: [(28 47 46 25) 25]
Test Case: 458 | Input/Output: [(47 52 59 88) 47]
Test Case: 459 | Input/Output: [(41 83 -54 -78) -78]
Test Case: 460 | Input/Output: [(53 49 22 -48) -48]
Test Case: 461 | Input/Output: [(61 59 -98 -93) -98]
Test Case: 462 | Input/Output: [(-93 3 6 91) -93]
Test Case: 463 | Input/Output: [(10 -66 -62 -28) -66]
Test Case: 464 | Input/Output: [(59 -32 -79 -77) -79]
Test Case: 465 | Input/Output: [(-69 -32 89 38) -69]
Test Case: 466 | Input/Output: [(-81 96 -7 41) -81]
Test Case: 467 | Input/Output: [(-38 -5 -79 88) -79]
Test Case: 468 | Input/Output: [(97 5 22 44) 5]
Test Case: 469 | Input/Output: [(67 -2 24 -75) -75]
Test Case: 470 | Input/Output: [(71 -53 -65 16) -65]
Test Case: 471 | Input/Output: [(65 66 -24 -61) -61]
Test Case: 472 | Input/Output: [(-21 56 45 69) -21]
Test Case: 473 | Input/Output: [(72 -38 93 78) -38]
Test Case: 474 | Input/Output: [(92 -27 -12 -59) -59]
Test Case: 475 | Input/Output: [(-48 31 81 -30) -48]
Test Case: 476 | Input/Output: [(-91 48 -14 74) -91]
Test Case: 477 | Input/Output: [(-12 -30 -65 84) -65]
Test Case: 478 | Input/Output: [(-87 69 57 55) -87]
Test Case: 479 | Input/Output: [(-75 -70 58 23) -75]
Test Case: 480 | Input/Output: [(84 86 -69 44) -69]
Test Case: 481 | Input/Output: [(8 89 81 -73) -73]
Test Case: 482 | Input/Output: [(78 -44 -72 2) -72]
Test Case: 483 | Input/Output: [(-63 -20 -66 -31) -66]
Test Case: 484 | Input/Output: [(-11 -76 -52 42) -76]
Test Case: 485 | Input/Output: [(45 64 -7 47) -7]
Test Case: 486 | Input/Output: [(-28 -47 -26 -90) -90]
Test Case: 487 | Input/Output: [(-55 -48 -22 -5) -55]
Test Case: 488 | Input/Output: [(64 -18 -9 30) -18]
Test Case: 489 | Input/Output: [(3 79 -22 -89) -89]
Test Case: 490 | Input/Output: [(-57 -38 -9 -79) -79]
Test Case: 491 | Input/Output: [(35 70 -51 -85) -85]
Test Case: 492 | Input/Output: [(64 -51 -23 87) -51]
Test Case: 493 | Input/Output: [(97 91 79 -87) -87]
Test Case: 494 | Input/Output: [(-10 33 -66 61) -66]
Test Case: 495 | Input/Output: [(-87 100 17 -31) -87]
Test Case: 496 | Input/Output: [(-78 -1 -98 68) -98]
Test Case: 497 | Input/Output: [(-9 34 -11 22) -11]
Test Case: 498 | Input/Output: [(-28 78 -26 -30) -30]
Test Case: 499 | Input/Output: [(20 2 85 -64) -64]
Test Case: 500 | Input/Output: [(-26 -67 -77 -3) -77]
Test Case: 501 | Input/Output: [(-45 96 -77 -24) -77]
Test Case: 502 | Input/Output: [(-40 -91 -11 22) -91]
Test Case: 503 | Input/Output: [(74 67 45 65) 45]
Test Case: 504 | Input/Output: [(79 47 -45 22) -45]
Test Case: 505 | Input/Output: [(-66 55 -27 82) -66]
Test Case: 506 | Input/Output: [(-36 -89 -29 68) -89]
Test Case: 507 | Input/Output: [(80 14 57 80) 14]
Test Case: 508 | Input/Output: [(-87 92 24 -95) -95]
Test Case: 509 | Input/Output: [(93 -54 -66 11) -66]
Test Case: 510 | Input/Output: [(-59 2 -60 -48) -60]
Test Case: 511 | Input/Output: [(-69 85 57 -7) -69]
Test Case: 512 | Input/Output: [(97 82 11 60) 11]
Test Case: 513 | Input/Output: [(-54 -69 -37 -21) -69]
Test Case: 514 | Input/Output: [(-76 0 -32 11) -76]
Test Case: 515 | Input/Output: [(-32 48 -62 -38) -62]
Test Case: 516 | Input/Output: [(82 -19 -67 -85) -85]
Test Case: 517 | Input/Output: [(-7 -55 -45 -27) -55]
Test Case: 518 | Input/Output: [(-78 -65 -10 88) -78]
Test Case: 519 | Input/Output: [(95 34 -83 -19) -83]
Test Case: 520 | Input/Output: [(85 53 69 65) 53]
Test Case: 521 | Input/Output: [(9 -15 38 -53) -53]
Test Case: 522 | Input/Output: [(-35 4 -35 -90) -90]
Test Case: 523 | Input/Output: [(-52 24 65 97) -52]
Test Case: 524 | Input/Output: [(50 -15 -17 81) -17]
Test Case: 525 | Input/Output: [(19 -99 55 -89) -99]
Test Case: 526 | Input/Output: [(41 -75 -29 -35) -75]
Test Case: 527 | Input/Output: [(18 88 37 60) 18]
Test Case: 528 | Input/Output: [(1 39 46 -25) -25]
Test Case: 529 | Input/Output: [(84 -85 66 -43) -85]
Test Case: 530 | Input/Output: [(8 89 -74 -43) -74]
Test Case: 531 | Input/Output: [(37 -70 77 -3) -70]
Test Case: 532 | Input/Output: [(-94 37 54 -94) -94]
Test Case: 533 | Input/Output: [(-37 -40 -62 -15) -62]
Test Case: 534 | Input/Output: [(-96 37 -44 100) -96]
Test Case: 535 | Input/Output: [(-69 91 -11 96) -69]
Test Case: 536 | Input/Output: [(-28 -37 73 96) -37]
Test Case: 537 | Input/Output: [(98 9 -54 8) -54]
Test Case: 538 | Input/Output: [(78 77 -62 91) -62]
Test Case: 539 | Input/Output: [(79 46 6 8) 6]
Test Case: 540 | Input/Output: [(33 32 -59 -24) -59]
Test Case: 541 | Input/Output: [(34 -74 -47 -83) -83]
Test Case: 542 | Input/Output: [(-58 -23 -67 -2) -67]
Test Case: 543 | Input/Output: [(-35 -59 -55 68) -59]
Test Case: 544 | Input/Output: [(-66 -48 -63 23) -66]
Test Case: 545 | Input/Output: [(53 43 78 63) 43]
Test Case: 546 | Input/Output: [(-32 -65 46 -43) -65]
Test Case: 547 | Input/Output: [(3 56 5 -12) -12]
Test Case: 548 | Input/Output: [(-93 16 86 62) -93]
Test Case: 549 | Input/Output: [(64 -51 68 23) -51]
Test Case: 550 | Input/Output: [(-66 -20 23 53) -66]
Test Case: 551 | Input/Output: [(97 57 -34 87) -34]
Test Case: 552 | Input/Output: [(-43 -98 -57 7) -98]
Test Case: 553 | Input/Output: [(-32 22 -37 -6) -37]
Test Case: 554 | Input/Output: [(-55 11 -64 67) -64]
Test Case: 555 | Input/Output: [(41 -15 14 85) -15]
Test Case: 556 | Input/Output: [(54 -87 75 -89) -89]
Test Case: 557 | Input/Output: [(88 -55 7 -20) -55]
Test Case: 558 | Input/Output: [(58 13 61 -44) -44]
Test Case: 559 | Input/Output: [(9 -38 -17 43) -38]
Test Case: 560 | Input/Output: [(12 -27 10 -83) -83]
Test Case: 561 | Input/Output: [(-90 1 73 -48) -90]
Test Case: 562 | Input/Output: [(82 -70 78 -77) -77]
Test Case: 563 | Input/Output: [(86 -87 89 -24) -87]
Test Case: 564 | Input/Output: [(23 -73 20 -97) -97]
Test Case: 565 | Input/Output: [(-42 12 -94 -85) -94]
Test Case: 566 | Input/Output: [(-81 95 -56 -10) -81]
Test Case: 567 | Input/Output: [(53 -19 31 72) -19]
Test Case: 568 | Input/Output: [(9 -41 -4 14) -41]
Test Case: 569 | Input/Output: [(-36 -95 41 61) -95]
Test Case: 570 | Input/Output: [(-57 -62 49 4) -62]
Test Case: 571 | Input/Output: [(-40 57 -67 -97) -97]
Test Case: 572 | Input/Output: [(-29 -85 43 51) -85]
Test Case: 573 | Input/Output: [(67 46 -71 88) -71]
Test Case: 574 | Input/Output: [(7 53 -68 18) -68]
Test Case: 575 | Input/Output: [(-32 54 58 -31) -32]
Test Case: 576 | Input/Output: [(-81 -48 33 6) -81]
Test Case: 577 | Input/Output: [(63 -97 -50 33) -97]
Test Case: 578 | Input/Output: [(42 -71 -97 4) -97]
Test Case: 579 | Input/Output: [(83 -94 13 6) -94]
Test Case: 580 | Input/Output: [(-73 -4 78 -41) -73]
Test Case: 581 | Input/Output: [(36 -37 12 23) -37]
Test Case: 582 | Input/Output: [(-63 -83 48 56) -83]
Test Case: 583 | Input/Output: [(-93 -87 -40 -72) -93]
Test Case: 584 | Input/Output: [(74 -86 -38 62) -86]
Test Case: 585 | Input/Output: [(-26 -50 -49 23) -50]
Test Case: 586 | Input/Output: [(70 -37 0 83) -37]
Test Case: 587 | Input/Output: [(18 -38 -50 -97) -97]
Test Case: 588 | Input/Output: [(-45 -100 54 81) -100]
Test Case: 589 | Input/Output: [(15 17 -40 -57) -57]
Test Case: 590 | Input/Output: [(-17 -54 41 92) -54]
Test Case: 591 | Input/Output: [(-34 39 -92 16) -92]
Test Case: 592 | Input/Output: [(15 -30 -10 70) -30]
Test Case: 593 | Input/Output: [(-32 28 -86 8) -86]
Test Case: 594 | Input/Output: [(-8 -63 -35 89) -63]
Test Case: 595 | Input/Output: [(41 -54 48 87) -54]
Test Case: 596 | Input/Output: [(18 36 -7 37) -7]
Test Case: 597 | Input/Output: [(6 80 64 -23) -23]
Test Case: 598 | Input/Output: [(-25 65 50 88) -25]
Test Case: 599 | Input/Output: [(0 76 -55 46) -55]
Test Case: 600 | Input/Output: [(-84 -95 -8 -24) -95]
Test Case: 601 | Input/Output: [(-14 -32 -36 -59) -59]
Test Case: 602 | Input/Output: [(-96 -82 -39 44) -96]
Test Case: 603 | Input/Output: [(14 -57 -91 -5) -91]
Test Case: 604 | Input/Output: [(42 -34 -29 -64) -64]
Test Case: 605 | Input/Output: [(43 22 -57 32) -57]
Test Case: 606 | Input/Output: [(-53 -20 -5 38) -53]
Test Case: 607 | Input/Output: [(90 16 12 -20) -20]
Test Case: 608 | Input/Output: [(68 -82 -69 20) -82]
Test Case: 609 | Input/Output: [(30 -6 89 22) -6]
Test Case: 610 | Input/Output: [(-55 71 -11 -72) -72]
Test Case: 611 | Input/Output: [(-21 -60 -69 -72) -72]
Test Case: 612 | Input/Output: [(59 -69 -82 42) -82]
Test Case: 613 | Input/Output: [(36 58 5 86) 5]
Test Case: 614 | Input/Output: [(18 97 -23 87) -23]
Test Case: 615 | Input/Output: [(-78 -2 95 79) -78]
Test Case: 616 | Input/Output: [(-95 -1 62 36) -95]
Test Case: 617 | Input/Output: [(0 86 -24 -3) -24]
Test Case: 618 | Input/Output: [(-71 56 52 57) -71]
Test Case: 619 | Input/Output: [(38 -1 -91 -18) -91]
Test Case: 620 | Input/Output: [(-55 -94 -40 51) -94]
Test Case: 621 | Input/Output: [(-86 12 65 6) -86]
Test Case: 622 | Input/Output: [(-89 -45 -41 -34) -89]
Test Case: 623 | Input/Output: [(-72 -62 -37 -78) -78]
Test Case: 624 | Input/Output: [(-60 -70 24 16) -70]
Test Case: 625 | Input/Output: [(74 -74 -35 -88) -88]
Test Case: 626 | Input/Output: [(-77 98 -57 23) -77]
Test Case: 627 | Input/Output: [(-22 -11 13 28) -22]
Test Case: 628 | Input/Output: [(-13 48 -81 -55) -81]
Test Case: 629 | Input/Output: [(-86 -7 -54 87) -86]
Test Case: 630 | Input/Output: [(-29 -23 -25 -24) -29]
Test Case: 631 | Input/Output: [(93 83 97 -88) -88]
Test Case: 632 | Input/Output: [(-96 -75 89 33) -96]
Test Case: 633 | Input/Output: [(0 37 30 -5) -5]
Test Case: 634 | Input/Output: [(72 -61 3 15) -61]
Test Case: 635 | Input/Output: [(-31 55 87 -55) -55]
Test Case: 636 | Input/Output: [(99 74 -51 -51) -51]
Test Case: 637 | Input/Output: [(56 -26 -70 68) -70]
Test Case: 638 | Input/Output: [(-79 -91 6 -51) -91]
Test Case: 639 | Input/Output: [(80 -22 -81 -14) -81]
Test Case: 640 | Input/Output: [(-48 -48 35 96) -48]
Test Case: 641 | Input/Output: [(61 2 15 -89) -89]
Test Case: 642 | Input/Output: [(-41 19 -80 31) -80]
Test Case: 643 | Input/Output: [(-39 12 -31 -59) -59]
Test Case: 644 | Input/Output: [(-87 25 47 4) -87]
Test Case: 645 | Input/Output: [(45 42 -31 84) -31]
Test Case: 646 | Input/Output: [(-86 -92 -77 -85) -92]
Test Case: 647 | Input/Output: [(64 93 10 11) 10]
Test Case: 648 | Input/Output: [(31 18 -92 99) -92]
Test Case: 649 | Input/Output: [(-96 -39 90 11) -96]
Test Case: 650 | Input/Output: [(-57 -20 -75 8) -75]
Test Case: 651 | Input/Output: [(37 -81 -18 -27) -81]
Test Case: 652 | Input/Output: [(52 100 -46 -67) -67]
Test Case: 653 | Input/Output: [(58 41 34 82) 34]
Test Case: 654 | Input/Output: [(35 -84 -32 4) -84]
Test Case: 655 | Input/Output: [(-42 25 -43 -61) -61]
Test Case: 656 | Input/Output: [(-84 -57 70 51) -84]
Test Case: 657 | Input/Output: [(-55 -80 88 20) -80]
Test Case: 658 | Input/Output: [(-6 77 -60 50) -60]
Test Case: 659 | Input/Output: [(-31 -66 76 -21) -66]
Test Case: 660 | Input/Output: [(-23 -59 13 -33) -59]
Test Case: 661 | Input/Output: [(11 -12 -85 0) -85]
Test Case: 662 | Input/Output: [(59 17 29 -2) -2]
Test Case: 663 | Input/Output: [(43 14 -99 -7) -99]
Test Case: 664 | Input/Output: [(37 9 21 -1) -1]
Test Case: 665 | Input/Output: [(35 54 61 49) 35]
Test Case: 666 | Input/Output: [(-45 45 5 -62) -62]
Test Case: 667 | Input/Output: [(-27 2 -32 -14) -32]
Test Case: 668 | Input/Output: [(-51 89 -30 68) -51]
Test Case: 669 | Input/Output: [(-23 9 39 78) -23]
Test Case: 670 | Input/Output: [(43 64 -58 -97) -97]
Test Case: 671 | Input/Output: [(-92 18 -44 65) -92]
Test Case: 672 | Input/Output: [(54 75 -47 -79) -79]
Test Case: 673 | Input/Output: [(4 85 -47 -21) -47]
Test Case: 674 | Input/Output: [(-7 -92 5 11) -92]
Test Case: 675 | Input/Output: [(-84 -95 5 -16) -95]
Test Case: 676 | Input/Output: [(6 8 -16 -9) -16]
Test Case: 677 | Input/Output: [(-53 -33 -92 -97) -97]
Test Case: 678 | Input/Output: [(-37 -77 87 -66) -77]
Test Case: 679 | Input/Output: [(3 -52 -51 -46) -52]
Test Case: 680 | Input/Output: [(48 -90 -16 -69) -90]
Test Case: 681 | Input/Output: [(56 19 26 73) 19]
Test Case: 682 | Input/Output: [(-37 62 5 56) -37]
Test Case: 683 | Input/Output: [(4 87 98 -78) -78]
Test Case: 684 | Input/Output: [(94 -71 3 90) -71]
Test Case: 685 | Input/Output: [(-18 -80 -62 -46) -80]
Test Case: 686 | Input/Output: [(-87 41 77 65) -87]
Test Case: 687 | Input/Output: [(-52 -48 70 69) -52]
Test Case: 688 | Input/Output: [(-7 48 -22 -37) -37]
Test Case: 689 | Input/Output: [(90 -7 66 29) -7]
Test Case: 690 | Input/Output: [(-47 -11 -10 -71) -71]
Test Case: 691 | Input/Output: [(19 -29 -51 -55) -55]
Test Case: 692 | Input/Output: [(-83 67 22 -88) -88]
Test Case: 693 | Input/Output: [(68 -2 73 -69) -69]
Test Case: 694 | Input/Output: [(36 23 -87 -89) -89]
Test Case: 695 | Input/Output: [(51 85 60 -87) -87]
Test Case: 696 | Input/Output: [(73 13 -71 -21) -71]
Test Case: 697 | Input/Output: [(89 100 -72 -77) -77]
Test Case: 698 | Input/Output: [(-47 70 6 62) -47]
Test Case: 699 | Input/Output: [(43 -10 81 40) -10]
Test Case: 700 | Input/Output: [(73 78 -69 82) -69]
Test Case: 701 | Input/Output: [(-48 -82 -76 61) -82]
Test Case: 702 | Input/Output: [(-61 -72 -35 88) -72]
Test Case: 703 | Input/Output: [(34 11 -87 88) -87]
Test Case: 704 | Input/Output: [(-2 32 30 -87) -87]
Test Case: 705 | Input/Output: [(-95 38 55 40) -95]
Test Case: 706 | Input/Output: [(-3 -85 30 83) -85]
Test Case: 707 | Input/Output: [(34 -97 -39 -42) -97]
Test Case: 708 | Input/Output: [(-72 10 -100 -83) -100]
Test Case: 709 | Input/Output: [(96 -31 82 -53) -53]
Test Case: 710 | Input/Output: [(-54 -56 56 -7) -56]
Test Case: 711 | Input/Output: [(-51 67 57 -54) -54]
Test Case: 712 | Input/Output: [(-33 68 22 51) -33]
Test Case: 713 | Input/Output: [(-53 -92 -52 -100) -100]
Test Case: 714 | Input/Output: [(74 1 26 69) 1]
Test Case: 715 | Input/Output: [(0 42 -66 -3) -66]
Test Case: 716 | Input/Output: [(-22 -38 -66 -19) -66]
Test Case: 717 | Input/Output: [(7 -37 -53 15) -53]
Test Case: 718 | Input/Output: [(-62 -47 -27 -61) -62]
Test Case: 719 | Input/Output: [(67 100 -24 26) -24]
Test Case: 720 | Input/Output: [(-76 21 42 -32) -76]
Test Case: 721 | Input/Output: [(-81 -100 40 -47) -100]
Test Case: 722 | Input/Output: [(-70 -82 -16 -42) -82]
Test Case: 723 | Input/Output: [(100 -40 1 94) -40]
Test Case: 724 | Input/Output: [(-89 -75 31 -64) -89]
Test Case: 725 | Input/Output: [(-78 -47 -39 -69) -78]
Test Case: 726 | Input/Output: [(81 -47 61 12) -47]
Test Case: 727 | Input/Output: [(29 -11 -49 -3) -49]
Test Case: 728 | Input/Output: [(82 100 57 -98) -98]
Test Case: 729 | Input/Output: [(-55 71 32 -33) -55]
Test Case: 730 | Input/Output: [(-70 76 10 97) -70]
Test Case: 731 | Input/Output: [(98 -97 37 -82) -97]
Test Case: 732 | Input/Output: [(-17 -47 7 -34) -47]
Test Case: 733 | Input/Output: [(44 -7 -23 12) -23]
Test Case: 734 | Input/Output: [(-15 1 55 -13) -15]
Test Case: 735 | Input/Output: [(16 51 90 -44) -44]
Test Case: 736 | Input/Output: [(30 -34 61 35) -34]
Test Case: 737 | Input/Output: [(-35 28 -32 -68) -68]
Test Case: 738 | Input/Output: [(-57 27 27 36) -57]
Test Case: 739 | Input/Output: [(-14 78 -83 -8) -83]
Test Case: 740 | Input/Output: [(-25 49 -58 30) -58]
Test Case: 741 | Input/Output: [(-30 29 -37 15) -37]
Test Case: 742 | Input/Output: [(81 0 -91 -49) -91]
Test Case: 743 | Input/Output: [(42 -63 -51 56) -63]
Test Case: 744 | Input/Output: [(44 12 67 -69) -69]
Test Case: 745 | Input/Output: [(-81 75 -11 7) -81]
Test Case: 746 | Input/Output: [(68 -76 -65 0) -76]
Test Case: 747 | Input/Output: [(18 38 -52 20) -52]
Test Case: 748 | Input/Output: [(69 75 -42 -88) -88]
Test Case: 749 | Input/Output: [(-17 66 -30 27) -30]
Test Case: 750 | Input/Output: [(-62 -32 -38 20) -62]
Test Case: 751 | Input/Output: [(74 -10 35 -45) -45]
Test Case: 752 | Input/Output: [(-90 15 29 41) -90]
Test Case: 753 | Input/Output: [(4 -78 100 54) -78]
Test Case: 754 | Input/Output: [(-53 -21 -97 -74) -97]
Test Case: 755 | Input/Output: [(-65 -73 68 -97) -97]
Test Case: 756 | Input/Output: [(-20 -93 24 26) -93]
Test Case: 757 | Input/Output: [(-55 -74 21 41) -74]
Test Case: 758 | Input/Output: [(75 -84 84 -46) -84]
Test Case: 759 | Input/Output: [(-32 100 16 35) -32]
Test Case: 760 | Input/Output: [(-83 -76 61 65) -83]
Test Case: 761 | Input/Output: [(-24 97 -24 62) -24]
Test Case: 762 | Input/Output: [(22 -95 -86 -58) -95]
Test Case: 763 | Input/Output: [(10 25 -64 73) -64]
Test Case: 764 | Input/Output: [(54 99 69 -57) -57]
Test Case: 765 | Input/Output: [(95 96 97 -97) -97]
Test Case: 766 | Input/Output: [(85 100 -98 25) -98]
Test Case: 767 | Input/Output: [(55 17 -29 -22) -29]
Test Case: 768 | Input/Output: [(-54 91 3 -30) -54]
Test Case: 769 | Input/Output: [(-68 49 6 -85) -85]
Test Case: 770 | Input/Output: [(-19 31 54 -77) -77]
Test Case: 771 | Input/Output: [(40 -37 46 -76) -76]
Test Case: 772 | Input/Output: [(33 92 -88 -87) -88]
Test Case: 773 | Input/Output: [(-100 -76 -49 20) -100]
Test Case: 774 | Input/Output: [(-35 -69 45 77) -69]
Test Case: 775 | Input/Output: [(23 -14 -10 -76) -76]
Test Case: 776 | Input/Output: [(-49 -82 40 21) -82]
Test Case: 777 | Input/Output: [(80 20 -15 32) -15]
Test Case: 778 | Input/Output: [(-84 20 44 -84) -84]
Test Case: 779 | Input/Output: [(-39 24 98 76) -39]
Test Case: 780 | Input/Output: [(-100 6 28 56) -100]
Test Case: 781 | Input/Output: [(25 -72 -2 -17) -72]
Test Case: 782 | Input/Output: [(89 8 -70 14) -70]
Test Case: 783 | Input/Output: [(-10 38 24 -15) -15]
Test Case: 784 | Input/Output: [(3 44 76 -45) -45]
Test Case: 785 | Input/Output: [(18 -17 35 8) -17]
Test Case: 786 | Input/Output: [(-97 -86 54 95) -97]
Test Case: 787 | Input/Output: [(-66 -10 34 -21) -66]
Test Case: 788 | Input/Output: [(-8 84 23 20) -8]
Test Case: 789 | Input/Output: [(-67 -64 50 57) -67]
Test Case: 790 | Input/Output: [(51 70 33 -99) -99]
Test Case: 791 | Input/Output: [(6 92 -35 -37) -37]
Test Case: 792 | Input/Output: [(-87 76 5 -16) -87]
Test Case: 793 | Input/Output: [(-74 -5 -89 34) -89]
Test Case: 794 | Input/Output: [(-61 59 -57 10) -61]
Test Case: 795 | Input/Output: [(-62 30 80 47) -62]
Test Case: 796 | Input/Output: [(-68 41 -13 -5) -68]
Test Case: 797 | Input/Output: [(-83 95 -14 -81) -83]
Test Case: 798 | Input/Output: [(95 -87 45 35) -87]
Test Case: 799 | Input/Output: [(-77 33 -8 -45) -77]
Test Case: 800 | Input/Output: [(38 -22 4 -96) -96]
Test Case: 801 | Input/Output: [(29 59 -40 -66) -66]
Test Case: 802 | Input/Output: [(95 19 91 83) 19]
Test Case: 803 | Input/Output: [(27 39 -72 63) -72]
Test Case: 804 | Input/Output: [(-45 -63 -95 -27) -95]
Test Case: 805 | Input/Output: [(49 -67 -50 35) -67]
Test Case: 806 | Input/Output: [(-42 66 -8 -69) -69]
Test Case: 807 | Input/Output: [(63 -28 -12 49) -28]
Test Case: 808 | Input/Output: [(-52 -77 -33 89) -77]
Test Case: 809 | Input/Output: [(4 7 -30 30) -30]
Test Case: 810 | Input/Output: [(-3 -73 -37 -29) -73]
Test Case: 811 | Input/Output: [(49 -96 90 -14) -96]
Test Case: 812 | Input/Output: [(-93 -54 -14 -49) -93]
Test Case: 813 | Input/Output: [(-28 -82 -63 -100) -100]
Test Case: 814 | Input/Output: [(80 47 13 -21) -21]
Test Case: 815 | Input/Output: [(17 83 18 -97) -97]
Test Case: 816 | Input/Output: [(38 -2 91 7) -2]
Test Case: 817 | Input/Output: [(-72 -20 -91 100) -91]
Test Case: 818 | Input/Output: [(-30 -92 -31 -37) -92]
Test Case: 819 | Input/Output: [(21 -79 -26 -36) -79]
Test Case: 820 | Input/Output: [(22 -92 30 78) -92]
Test Case: 821 | Input/Output: [(-38 -93 -82 99) -93]
Test Case: 822 | Input/Output: [(96 45 71 29) 29]
Test Case: 823 | Input/Output: [(50 -31 90 -56) -56]
Test Case: 824 | Input/Output: [(-21 62 38 -76) -76]
Test Case: 825 | Input/Output: [(-63 -50 -90 80) -90]
Test Case: 826 | Input/Output: [(65 -2 -68 -28) -68]
Test Case: 827 | Input/Output: [(73 34 -41 0) -41]
Test Case: 828 | Input/Output: [(-3 66 33 -85) -85]
Test Case: 829 | Input/Output: [(-6 68 -89 5) -89]
Test Case: 830 | Input/Output: [(-79 -31 70 62) -79]
Test Case: 831 | Input/Output: [(99 66 36 97) 36]
Test Case: 832 | Input/Output: [(-18 33 73 -21) -21]
Test Case: 833 | Input/Output: [(28 69 52 -78) -78]
Test Case: 834 | Input/Output: [(-83 -7 38 -62) -83]
Test Case: 835 | Input/Output: [(-26 -38 -92 -81) -92]
Test Case: 836 | Input/Output: [(-15 -91 45 1) -91]
Test Case: 837 | Input/Output: [(76 3 30 -25) -25]
Test Case: 838 | Input/Output: [(-53 -65 18 26) -65]
Test Case: 839 | Input/Output: [(61 25 -65 36) -65]
Test Case: 840 | Input/Output: [(79 -16 39 45) -16]
Test Case: 841 | Input/Output: [(33 -7 26 51) -7]
Test Case: 842 | Input/Output: [(-1 -11 -29 -81) -81]
Test Case: 843 | Input/Output: [(-70 -2 -22 65) -70]
Test Case: 844 | Input/Output: [(-69 -86 -26 30) -86]
Test Case: 845 | Input/Output: [(-47 8 -76 -71) -76]
Test Case: 846 | Input/Output: [(-46 -32 -1 69) -46]
Test Case: 847 | Input/Output: [(68 75 -71 14) -71]
Test Case: 848 | Input/Output: [(-70 -75 66 -68) -75]
Test Case: 849 | Input/Output: [(52 36 44 72) 36]
Test Case: 850 | Input/Output: [(100 -2 -40 4) -40]
Test Case: 851 | Input/Output: [(-90 -12 80 70) -90]
Test Case: 852 | Input/Output: [(34 77 15 -51) -51]
Test Case: 853 | Input/Output: [(-59 87 22 9) -59]
Test Case: 854 | Input/Output: [(5 -50 96 6) -50]
Test Case: 855 | Input/Output: [(-43 -29 1 59) -43]
Test Case: 856 | Input/Output: [(30 -1 -3 -78) -78]
Test Case: 857 | Input/Output: [(-51 57 -70 -63) -70]
Test Case: 858 | Input/Output: [(-58 -70 0 24) -70]
Test Case: 859 | Input/Output: [(-37 37 58 -62) -62]
Test Case: 860 | Input/Output: [(-57 -86 71 -36) -86]
Test Case: 861 | Input/Output: [(21 0 96 26) 0]
Test Case: 862 | Input/Output: [(42 17 -66 -1) -66]
Test Case: 863 | Input/Output: [(-58 -65 27 99) -65]
Test Case: 864 | Input/Output: [(-80 -43 53 -37) -80]
Test Case: 865 | Input/Output: [(-48 -88 -21 -35) -88]
Test Case: 866 | Input/Output: [(59 62 -84 -10) -84]
Test Case: 867 | Input/Output: [(98 -70 -62 85) -70]
Test Case: 868 | Input/Output: [(-43 50 59 -10) -43]
Test Case: 869 | Input/Output: [(-69 -80 38 93) -80]
Test Case: 870 | Input/Output: [(-46 39 -56 27) -56]
Test Case: 871 | Input/Output: [(4 27 -50 -43) -50]
Test Case: 872 | Input/Output: [(97 83 99 -12) -12]
Test Case: 873 | Input/Output: [(-34 70 16 3) -34]
Test Case: 874 | Input/Output: [(-96 68 55 71) -96]
Test Case: 875 | Input/Output: [(-52 -32 -44 90) -52]
Test Case: 876 | Input/Output: [(-57 90 74 -64) -64]
Test Case: 877 | Input/Output: [(-27 -38 90 -69) -69]
Test Case: 878 | Input/Output: [(-47 -24 81 43) -47]
Test Case: 879 | Input/Output: [(25 90 26 85) 25]
Test Case: 880 | Input/Output: [(59 57 76 81) 57]
Test Case: 881 | Input/Output: [(-27 32 87 0) -27]
Test Case: 882 | Input/Output: [(62 80 -51 48) -51]
Test Case: 883 | Input/Output: [(-63 43 62 -29) -63]
Test Case: 884 | Input/Output: [(25 -5 -23 -83) -83]
Test Case: 885 | Input/Output: [(-94 60 14 -5) -94]
Test Case: 886 | Input/Output: [(69 -99 -31 21) -99]
Test Case: 887 | Input/Output: [(-58 -58 19 75) -58]
Test Case: 888 | Input/Output: [(-80 72 13 89) -80]
Test Case: 889 | Input/Output: [(-93 -51 11 -76) -93]
Test Case: 890 | Input/Output: [(-15 21 76 20) -15]
Test Case: 891 | Input/Output: [(83 36 -44 70) -44]
Test Case: 892 | Input/Output: [(-91 9 -17 -72) -91]
Test Case: 893 | Input/Output: [(-17 80 -4 -50) -50]
Test Case: 894 | Input/Output: [(-9 45 -32 -70) -70]
Test Case: 895 | Input/Output: [(-59 -28 34 78) -59]
Test Case: 896 | Input/Output: [(-47 69 45 47) -47]
Test Case: 897 | Input/Output: [(-66 -11 57 -23) -66]
Test Case: 898 | Input/Output: [(43 -57 -36 -7) -57]
Test Case: 899 | Input/Output: [(40 79 -57 13) -57]
Test Case: 900 | Input/Output: [(3 -66 99 -4) -66]
Test Case: 901 | Input/Output: [(-76 -59 93 -50) -76]
Test Case: 902 | Input/Output: [(41 6 -38 38) -38]
Test Case: 903 | Input/Output: [(71 94 -16 -74) -74]
Test Case: 904 | Input/Output: [(-84 -48 62 -36) -84]
Test Case: 905 | Input/Output: [(15 -3 76 80) -3]
Test Case: 906 | Input/Output: [(96 -82 -100 98) -100]
Test Case: 907 | Input/Output: [(31 38 -72 -7) -72]
Test Case: 908 | Input/Output: [(-98 -32 -25 -45) -98]
Test Case: 909 | Input/Output: [(-17 -19 -69 -85) -85]
Test Case: 910 | Input/Output: [(-40 -93 77 -55) -93]
Test Case: 911 | Input/Output: [(84 56 -73 77) -73]
Test Case: 912 | Input/Output: [(79 -28 86 10) -28]
Test Case: 913 | Input/Output: [(56 -84 -18 -52) -84]
Test Case: 914 | Input/Output: [(5 -82 65 -6) -82]
Test Case: 915 | Input/Output: [(85 83 -30 98) -30]
Test Case: 916 | Input/Output: [(88 -64 9 37) -64]
Test Case: 917 | Input/Output: [(22 72 -30 84) -30]
Test Case: 918 | Input/Output: [(85 -72 -74 14) -74]
Test Case: 919 | Input/Output: [(-67 -73 79 56) -73]
Test Case: 920 | Input/Output: [(-50 -17 -10 -40) -50]
Test Case: 921 | Input/Output: [(59 99 51 0) 0]
Test Case: 922 | Input/Output: [(56 -47 -83 -36) -83]
Test Case: 923 | Input/Output: [(91 8 79 15) 8]
Test Case: 924 | Input/Output: [(33 48 81 -81) -81]
Test Case: 925 | Input/Output: [(38 -1 -74 0) -74]
Test Case: 926 | Input/Output: [(-54 -86 -94 73) -94]
Test Case: 927 | Input/Output: [(91 25 -89 -95) -95]
Test Case: 928 | Input/Output: [(-65 58 16 -18) -65]
Test Case: 929 | Input/Output: [(-47 -57 59 -60) -60]
Test Case: 930 | Input/Output: [(-5 94 -100 26) -100]
Test Case: 931 | Input/Output: [(-65 36 80 -5) -65]
Test Case: 932 | Input/Output: [(6 -81 -55 -23) -81]
Test Case: 933 | Input/Output: [(-61 -26 -20 47) -61]
Test Case: 934 | Input/Output: [(42 20 75 -7) -7]
Test Case: 935 | Input/Output: [(77 -41 -97 -6) -97]
Test Case: 936 | Input/Output: [(32 -48 -52 22) -52]
Test Case: 937 | Input/Output: [(64 -75 -28 -60) -75]
Test Case: 938 | Input/Output: [(-35 -85 59 -62) -85]
Test Case: 939 | Input/Output: [(-34 -84 97 30) -84]
Test Case: 940 | Input/Output: [(71 77 -73 -82) -82]
Test Case: 941 | Input/Output: [(75 82 -76 74) -76]
Test Case: 942 | Input/Output: [(100 -40 -14 89) -40]
Test Case: 943 | Input/Output: [(-41 22 94 54) -41]
Test Case: 944 | Input/Output: [(99 -75 -44 46) -75]
Test Case: 945 | Input/Output: [(53 20 94 17) 17]
Test Case: 946 | Input/Output: [(-23 -53 -50 31) -53]
Test Case: 947 | Input/Output: [(-8 -14 -58 -29) -58]
Test Case: 948 | Input/Output: [(-16 -76 -99 -47) -99]
Test Case: 949 | Input/Output: [(-37 91 -18 6) -37]
Test Case: 950 | Input/Output: [(-69 37 32 -96) -96]
Test Case: 951 | Input/Output: [(-55 90 -30 75) -55]
Test Case: 952 | Input/Output: [(-47 86 1 5) -47]
Test Case: 953 | Input/Output: [(-38 -4 96 91) -38]
Test Case: 954 | Input/Output: [(33 17 -77 54) -77]
Test Case: 955 | Input/Output: [(66 -88 -60 71) -88]
Test Case: 956 | Input/Output: [(16 -5 -27 32) -27]
Test Case: 957 | Input/Output: [(-14 -73 46 10) -73]
Test Case: 958 | Input/Output: [(-88 -44 -3 90) -88]
Test Case: 959 | Input/Output: [(93 -90 56 63) -90]
Test Case: 960 | Input/Output: [(91 -83 -95 22) -95]
Test Case: 961 | Input/Output: [(100 48 -18 -59) -59]
Test Case: 962 | Input/Output: [(10 74 32 69) 10]
Test Case: 963 | Input/Output: [(86 22 63 -53) -53]
Test Case: 964 | Input/Output: [(-91 93 44 -19) -91]
Test Case: 965 | Input/Output: [(-88 60 -25 27) -88]
Test Case: 966 | Input/Output: [(81 -2 80 99) -2]
Test Case: 967 | Input/Output: [(-60 -55 -29 -73) -73]
Test Case: 968 | Input/Output: [(87 -82 14 59) -82]
Test Case: 969 | Input/Output: [(62 -46 -10 8) -46]
Test Case: 970 | Input/Output: [(-100 21 -36 -89) -100]
Test Case: 971 | Input/Output: [(-93 23 -28 83) -93]
Test Case: 972 | Input/Output: [(33 45 49 21) 21]
Test Case: 973 | Input/Output: [(-55 -68 54 4) -68]
Test Case: 974 | Input/Output: [(13 92 97 -72) -72]
Test Case: 975 | Input/Output: [(-45 -40 80 -3) -45]
Test Case: 976 | Input/Output: [(10 -4 75 68) -4]
Test Case: 977 | Input/Output: [(-72 -3 78 -33) -72]
Test Case: 978 | Input/Output: [(-50 -68 73 52) -68]
Test Case: 979 | Input/Output: [(-22 7 76 -14) -22]
Test Case: 980 | Input/Output: [(-18 47 -85 88) -85]
Test Case: 981 | Input/Output: [(-21 65 48 -69) -69]
Test Case: 982 | Input/Output: [(39 -45 -81 -84) -84]
Test Case: 983 | Input/Output: [(8 -75 -95 91) -95]
Test Case: 984 | Input/Output: [(-14 8 -26 -14) -26]
Test Case: 985 | Input/Output: [(-85 -82 40 30) -85]
Test Case: 986 | Input/Output: [(-10 -92 -19 -19) -92]
Test Case: 987 | Input/Output: [(-24 -57 61 32) -57]
Test Case: 988 | Input/Output: [(-92 -29 91 21) -92]
Test Case: 989 | Input/Output: [(-98 -88 -13 -7) -98]
Test Case: 990 | Input/Output: [(30 -5 -20 -74) -74]
Test Case: 991 | Input/Output: [(-16 -19 99 -96) -96]
Test Case: 992 | Input/Output: [(6 43 -41 -82) -82]
Test Case: 993 | Input/Output: [(25 -19 30 -19) -19]
Test Case: 994 | Input/Output: [(-26 -21 84 -97) -97]
Test Case: 995 | Input/Output: [(10 -7 -94 -7) -94]
Test Case: 996 | Input/Output: [(-59 15 -14 0) -59]
Test Case: 997 | Input/Output: [(-91 44 -17 65) -91]
Test Case: 998 | Input/Output: [(-70 13 89 -71) -71]
Test Case: 999 | Input/Output: [(-61 99 82 47) -61]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
random-screen = false
random-seed = -34 -54 58 -38 5 -39 76 63 -76 35 115 10 -123 -66 -22 26
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-97 100 100 100] -97] [[-62 -62 -6 -62] -62] [[-67 -17 -67 -67] -67] [[21 21 21 -59] -59] [[6 -54 -54 -54] -54] [[81 -41 81 81] -41] [[29 29 50 29] 29] [[-85 45 -85 -85] -85] [[65 65 44 65] 44] [[71 71 49 71] 49] [(-38 -38 -38 -38) -38] [(-4 -4 -4 -4) -4] [(-89 -89 -89 -89) -89] [(17 17 17 17) 17] [(16 16 16 16) 16] [(51 20 49 3) 3] [(1 62 25 23) 1] [(43 66 55 76) 43] [(90 76 62 45) 45] [(85 68 70 11) 11] [(84 68 100 92) 68] [(17 97 90 57) 17] [(27 90 27 14) 14] [(34 22 74 43) 22] [(71 69 1 94) 1] [(53 3 17 26) 3] [(92 20 1 71) 1] [(19 12 39 34) 12] [(92 17 54 79) 17] [(16 75 17 16) 16] [(84 38 88 31) 31] [(92 92 56 65) 56] [(48 42 96 97) 42] [(54 43 63 46) 43] [(87 38 24 36) 24] [(-2 62 -92 -80) -92] [(-83 -82 -10 22) -83] [(-76 -32 73 66) -76] [(-8 90 -54 -52) -54] [(-76 53 86 -47) -76] [(-29 25 -65 12) -65] [(6 -85 58 89) -85] [(-24 -21 69 -20) -24] [(22 -47 -3 56) -47] [(-100 25 -10 12) -100] [(-23 74 80 -63) -63] [(62 -10 -50 -20) -50] [(-5 -38 18 -45) -45] [(100 56 71 -85) -85] [(30 96 -39 -36) -39] [(37 27 -94 64) -94] [(-10 -90 -78 48) -90] [(75 76 -100 -30) -100] [(53 16 -60 -80) -80] [(27 -96 -42 -80) -96] [(1 57 43 -78) -78] [(68 -19 11 -84) -84] [(7 5 19 -39) -39] [(78 50 -31 10) -31] [(28 -12 66 89) -12] [(-29 -77 -25 30) -77] [(-99 48 50 90) -99] [(-28 62 -43 92) -43] [(96 27 -74 -88) -88] [(-96 77 78 73) -96] [(-18 9 -70 4) -70] [(-73 -24 -50 87) -73] [(1 51 -18 -82) -82] [(-57 30 -57 -33) -57] [(73 57 -26 59) -26] [(56 -23 42 57) -23] [(-57 71 -20 35) -57] [(-47 37 84 -35) -47] [(90 -22 13 70) -22] [(-36 26 -60 -30) -60] [(57 42 -42 13) -42] [(46 -86 23 14) -86] [(59 -66 79 3) -66] [(-7 18 8 6) -7] [(35 26 -57 -20) -57] [(19 95 -15 -96) -96] [(82 -76 93 19) -76] [(-60 36 -5 -97) -97] [(-52 -94 66 -88) -94] [(92 -50 -69 -78) -78] [(41 -48 26 -92) -92] [(55 100 37 -70) -70] [(49 91 85 44) 44] [(-93 82 45 -58) -93] [(-68 73 -7 34) -68] [(19 90 62 96) 19] [(63 44 -28 -54) -54] [(50 48 38 76) 38] [(27 -79 -78 -57) -79] [(-25 -3 -65 14) -65])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: 45                 
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 20                 
Correct output: 1                   | Program output: 62                 
Correct output: 43                  | Program output: 66                 
Correct output: 45                  | Program output: 76                 
Correct output: 11                  | Program output: 68                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 97                 
Correct output: 14                  | Program output: 90                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 75                 
Correct output: 31                  | Program output: 38                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 38                 
Correct output: -92                 | Program output: 62                 
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: 90                 
Correct output: -76                 | Program output: 53                 
Correct output: -65                 | Program output: 25                 
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: 25                 
Correct output: -63                 | Program output: 74                 
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 56                 
Correct output: -39                 | Program output: 96                 
Correct output: -94                 | Program output: 27                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: 76                 
Correct output: -80                 | Program output: 16                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 57                 
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 5                  
Correct output: -31                 | Program output: 50                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 48                 
Correct output: -43                 | Program output: 62                 
Correct output: -88                 | Program output: 27                 
Correct output: -96                 | Program output: 77                 
Correct output: -70                 | Program output: 9                  
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: 51                 
Correct output: -57                 | Program output: 30                 
Correct output: -26                 | Program output: 57                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: 71                 
Correct output: -47                 | Program output: 37                 
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: 26                 
Correct output: -42                 | Program output: 42                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 18                 
Correct output: -57                 | Program output: 26                 
Correct output: -96                 | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 100                
Correct output: 44                  | Program output: 91                 
Correct output: -93                 | Program output: 82                 
Correct output: -68                 | Program output: 73                 
Correct output: 19                  | Program output: 90                 
Correct output: -54                 | Program output: 44                 
Correct output: 38                  | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_swap} {:close 1, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction -23} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction -17} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y})
Lexicase best program: (exec_k_when_autoconstructing (exec_do*while () print_integer boolean_dup_items exec_y_when_autoconstructing (integer_swap)) (in2) print_integer integer_sub exec_k_when_autoconstructing () () integer_lt in4 boolean_invert_second_then_and boolean_yank integer_rot in1 exec_k (exec_swap (exec_eq exec_do*while () boolean_pop integer_gt -23 boolean_empty) (boolean_dup integer_yankdup) boolean_and boolean_shove -17 integer_fromboolean integer_dup_items) (exec_pop () integer_dup_times boolean_dup_items boolean_and) integer_gte boolean_rot in4 boolean_pop exec_k_when_autoconstructing (integer_max exec_yank) (boolean_dup_items) integer_flush integer_flush integer_stackdepth exec_empty exec_stackdepth boolean_or boolean_dup_times boolean_yankdup boolean_swap integer_dup exec_flush exec_do*times (boolean_pop boolean_xor integer_lte in4 integer_sub exec_y ()))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 78
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_swap} {:close 1, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 2, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction -23} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction -17} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_y})
Zero cases best program: (exec_k_when_autoconstructing (exec_do*while () print_integer boolean_dup_items exec_y_when_autoconstructing (integer_swap)) (in2) print_integer integer_sub exec_k_when_autoconstructing () () integer_lt in4 boolean_invert_second_then_and boolean_yank integer_rot in1 exec_k (exec_swap (exec_eq exec_do*while () boolean_pop integer_gt -23 boolean_empty) (boolean_dup integer_yankdup) boolean_and boolean_shove -17 integer_fromboolean integer_dup_items) (exec_pop () integer_dup_times boolean_dup_items boolean_and) integer_gte boolean_rot in4 boolean_pop exec_k_when_autoconstructing (integer_max exec_yank) (boolean_dup_items) integer_flush integer_flush integer_stackdepth exec_empty exec_stackdepth boolean_or boolean_dup_times boolean_yankdup boolean_swap integer_dup exec_flush exec_do*times (boolean_pop boolean_xor integer_lte in4 integer_sub exec_y ()))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 78
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 3 3 5 2 3 2 5 4 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (10 3 3 5 2 3 2 5 4 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction -100} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_433} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items})
Best program: (boolean_eq exec_pop () boolean_or exec_s_when_autoconstructing (boolean_and integer_flush exec_stackdepth) (integer_yankdup integer_swap exec_noop) (exec_stackdepth exec_y_when_autoconstructing (boolean_dup exec_shove (exec_stackdepth integer_shove integer_stackdepth boolean_frominteger integer_stackdepth exec_dup_times (exec_empty integer_gte exec_noop integer_eq in2 print_integer boolean_dup exec_flush integer_inc) boolean_rot print_exec (integer_yank boolean_swap exec_when (boolean_yank integer_flush) exec_do*while (integer_swap) exec_shove () integer_sub -100) integer_div exec_flush integer_add print_newline exec_eq integer_yankdup) exec_noop integer_dec tag_exec_433 (exec_pop (integer_empty exec_s_when_autoconstructing (boolean_xor exec_do*count (exec_k_when_autoconstructing () (integer_mult integer_gte) integer_gte exec_dup_times () print_exec (exec_dup_items integer_rot in2 integer_stackdepth exec_shove (exec_do*times () exec_noop in2 integer_dup exec_do*count (exec_yankdup) boolean_dup_times integer_empty boolean_dup_times exec_s_when_autoconstructing (integer_flush integer_stackdepth boolean_dup_items) () ())))) () ())))))
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 79
Size: 107
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.99 0.997 0.997 0.995 0.998 0.997 0.998 0.995 0.996 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.782
Average program size in population (points): 68.448
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462941
--- Timings ---
Current time: 1559314348019 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.7 seconds, 29.3%
Fitness Testing:      1.7 seconds, 66.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_559} {:close 0, :instruction in1} {:close 0, :instruction tagged_787} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq})
Lexicase best program: (print_boolean boolean_or integer_yank exec_do*count () exec_k (tag_boolean_559 in1 tagged_787 print_integer in2 exec_shove () integer_sub exec_yank exec_eq) () integer_shove integer_div integer_rot exec_s_when_autoconstructing (integer_yank) (exec_do*count () exec_dup_items in2 exec_yankdup exec_yank exec_yank boolean_stackdepth integer_eq boolean_pop exec_flush exec_stackdepth integer_empty boolean_empty) (exec_yank integer_shove integer_dup_items exec_eq print_newline) print_newline boolean_flush boolean_swap integer_dup exec_y_when_autoconstructing (exec_rot (print_exec (exec_s_when_autoconstructing () (boolean_shove exec_dup (exec_s (exec_stackdepth integer_fromboolean in2) (boolean_not exec_yankdup exec_dup (exec_dup (print_newline boolean_yankdup boolean_xor) in2 exec_empty exec_noop boolean_not boolean_dup_times boolean_or exec_if (exec_noop) (exec_do*times (exec_while (print_integer integer_gt in2) boolean_yank) print_boolean exec_shove (integer_mod print_integer exec_s_when_autoconstructing (boolean_and in3 boolean_and exec_shove (integer_swap boolean_rot exec_noop exec_noop in2 integer_shove) integer_sub exec_k (boolean_or exec_yankdup exec_dup_times (integer_min boolean_dup_times) exec_flush) (integer_mod exec_dup (exec_eq))) () ())))) ())) ())) () ()))
Lexicase best errors: [1 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 134
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_559} {:close 0, :instruction in1} {:close 0, :instruction tagged_787} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq})
Zero cases best program: (print_boolean boolean_or integer_yank exec_do*count () exec_k (tag_boolean_559 in1 tagged_787 print_integer in2 exec_shove () integer_sub exec_yank exec_eq) () integer_shove integer_div integer_rot exec_s_when_autoconstructing (integer_yank) (exec_do*count () exec_dup_items in2 exec_yankdup exec_yank exec_yank boolean_stackdepth integer_eq boolean_pop exec_flush exec_stackdepth integer_empty boolean_empty) (exec_yank integer_shove integer_dup_items exec_eq print_newline) print_newline boolean_flush boolean_swap integer_dup exec_y_when_autoconstructing (exec_rot (print_exec (exec_s_when_autoconstructing () (boolean_shove exec_dup (exec_s (exec_stackdepth integer_fromboolean in2) (boolean_not exec_yankdup exec_dup (exec_dup (print_newline boolean_yankdup boolean_xor) in2 exec_empty exec_noop boolean_not boolean_dup_times boolean_or exec_if (exec_noop) (exec_do*times (exec_while (print_integer integer_gt in2) boolean_yank) print_boolean exec_shove (integer_mod print_integer exec_s_when_autoconstructing (boolean_and in3 boolean_and exec_shove (integer_swap boolean_rot exec_noop exec_noop in2 integer_shove) integer_sub exec_k (boolean_or exec_yankdup exec_dup_times (integer_min boolean_dup_times) exec_flush) (integer_mod exec_dup (exec_eq))) () ())))) ())) ())) () ()))
Zero cases best errors: [1 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 134
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 158 73 161 62 578 158 73 73 233)
Population mean number of elite cases: 1.80
Count of perfect (error zero) individuals by case: (232 158 73 161 62 578 158 73 73 233)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_559} {:close 0, :instruction in1} {:close 0, :instruction tagged_787} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_while (integer_max integer_fromboolean) exec_when (boolean_shove) exec_k (tag_boolean_559 in1 tagged_787 print_integer in2 exec_shove () integer_sub exec_yank exec_eq) () integer_shove) integer_div integer_rot exec_s_when_autoconstructing (integer_yank) (exec_do*count () exec_dup_items in2 exec_yankdup exec_yank exec_yank boolean_stackdepth integer_eq boolean_pop exec_flush exec_stackdepth integer_empty boolean_empty) (exec_yank integer_shove integer_dup_items exec_eq print_newline) print_newline boolean_flush exec_while (integer_dec print_boolean exec_shove (integer_swap integer_flush) boolean_shove) integer_add integer_add integer_dup_items exec_dup (in4 integer_gte) boolean_invert_first_then_and integer_add integer_dup_times exec_k (integer_stackdepth exec_k_when_autoconstructing (integer_sub exec_shove () exec_if (integer_lt) (integer_lt) boolean_rot integer_shove integer_max integer_dup exec_yankdup in4 exec_when (integer_fromboolean boolean_not print_integer)) ()) ())
Errors: [1 1 0 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 75
Size: 97
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 8.199
Median total errors in population: 9
Error averages by case: (0.768 0.842 0.927 0.839 0.938 0.422 0.842 0.927 0.927 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.255
Average program size in population (points): 75.369
Average percent parens in population: 0.232
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.489
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 937264
--- Timings ---
Current time: 1559314350694 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 46.4%
Fitness Testing:      2.3 seconds, 44.2%
Report:               0.4 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 92                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 43                 
Correct output: 1                   | Program output: 94                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 97                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: 22                 
Correct output: -76                 | Program output: 66                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: 89                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: 56                 
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 64                 
Correct output: -90                 | Program output: 48                 
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: 89                 
Correct output: -77                 | Program output: 30                 
Correct output: -99                 | Program output: 90                 
Correct output: -43                 | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: 87                 
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 59                 
Correct output: -23                 | Program output: 57                 
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 70                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 76                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_yank integer_sub -75 boolean_not boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing () (in4 exec_while () print_integer exec_do*times (exec_pop ()) exec_do*count (boolean_invert_first_then_and integer_empty) boolean_eq exec_do*while (boolean_dup_times exec_if () (boolean_empty exec_do*range (boolean_xor exec_do*times () integer_dup_items integer_gte integer_fromboolean print_exec (exec_s (integer_dup exec_flush integer_sub) (boolean_invert_first_then_and boolean_empty) (boolean_invert_first_then_and integer_stackdepth integer_gt) exec_flush print_exec (exec_swap () () boolean_yankdup) boolean_invert_second_then_and boolean_rot) exec_dup_times ()) boolean_dup integer_dup exec_pop (boolean_or integer_div boolean_dup integer_add integer_lte in3 integer_add exec_do*while (boolean_and print_boolean integer_dec integer_flush) exec_k_when_autoconstructing (integer_mult integer_empty integer_dup boolean_yankdup exec_s (boolean_flush integer_dup_times integer_fromboolean exec_dup_items print_integer integer_max integer_max boolean_eq boolean_dup) () ()) ())))) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 104
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_yank integer_sub -75 boolean_not boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing () (in4 exec_while () print_integer exec_do*times (exec_pop ()) exec_do*count (boolean_invert_first_then_and integer_empty) boolean_eq exec_do*while (boolean_dup_times exec_if () (boolean_empty exec_do*range (boolean_xor exec_do*times () integer_dup_items integer_gte integer_fromboolean print_exec (exec_s (integer_dup exec_flush integer_sub) (boolean_invert_first_then_and boolean_empty) (boolean_invert_first_then_and integer_stackdepth integer_gt) exec_flush print_exec (exec_swap () () boolean_yankdup) boolean_invert_second_then_and boolean_rot) exec_dup_times ()) boolean_dup integer_dup exec_pop (boolean_or integer_div boolean_dup integer_add integer_lte in3 integer_add exec_do*while (boolean_and print_boolean integer_dec integer_flush) exec_k_when_autoconstructing (integer_mult integer_empty integer_dup boolean_yankdup exec_s (boolean_flush integer_dup_times integer_fromboolean exec_dup_items print_integer integer_max integer_max boolean_eq boolean_dup) () ()) ())))) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 104
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (785 403 416 2 255 802 533 1000 256 1000)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (785 403 416 2 255 802 533 0 256 0)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_723} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_while (integer_max integer_fromboolean) exec_when (boolean_shove) boolean_shove) boolean_xor boolean_invert_first_then_and integer_inc print_integer exec_k (exec_s () (boolean_empty exec_if (exec_dup_times (exec_do*range () integer_add boolean_flush boolean_dup_times print_boolean boolean_dup exec_when (tagged_723 exec_rot (integer_add exec_noop integer_mod integer_shove) (exec_shove (exec_if () () exec_while (integer_dec print_boolean exec_shove (integer_swap integer_flush) boolean_shove) integer_add integer_add integer_dup_items) exec_dup (in4 integer_gte) boolean_invert_first_then_and integer_add integer_dup_times exec_k (integer_stackdepth exec_k_when_autoconstructing (integer_sub exec_shove () exec_if (integer_lt) (integer_lt) boolean_rot integer_shove integer_max integer_dup exec_yankdup in4 exec_when (integer_fromboolean boolean_not print_integer)) ()) ()) ()))) ()) ()) ())
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 65
Size: 96
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.548
Median total errors in population: 6
Error averages by case: (0.215 0.597 0.584 0.998 0.745 0.198 0.467 1.0 0.744 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 59.837
Average program size in population (points): 82.673
Average percent parens in population: 0.265
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.938
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1296174
--- Timings ---
Current time: 1559314353972 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.8 seconds, 57.0%
Fitness Testing:      2.8 seconds, 33.1%
Report:               0.7 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 1, :instruction tag_exec_77} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_dup () integer_rot integer_lt in3 boolean_and boolean_not boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_dup exec_s_when_autoconstructing (exec_yank) (boolean_pop integer_gt exec_s (integer_dup_times) () (boolean_dup_items exec_dup_items exec_do*while (boolean_invert_first_then_and boolean_frominteger) integer_gte boolean_empty) boolean_empty exec_pop () exec_dup_times (print_newline integer_lte integer_add exec_do*range (exec_empty boolean_yank boolean_xor integer_min boolean_dup_times) boolean_invert_second_then_and integer_shove integer_stackdepth) boolean_and print_integer) (tag_exec_77 () exec_shove () boolean_eq) boolean_pop boolean_yankdup boolean_empty exec_shove () exec_dup (integer_stackdepth boolean_xor) exec_stackdepth exec_s_when_autoconstructing () (integer_add boolean_not boolean_or print_exec (print_boolean exec_y (integer_dup_times) integer_mult exec_y () integer_div) exec_do*while ()) ())))
Lexicase best errors: [1 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 111
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 1, :instruction tag_exec_77} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_dup () integer_rot integer_lt in3 boolean_and boolean_not boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_dup exec_s_when_autoconstructing (exec_yank) (boolean_pop integer_gt exec_s (integer_dup_times) () (boolean_dup_items exec_dup_items exec_do*while (boolean_invert_first_then_and boolean_frominteger) integer_gte boolean_empty) boolean_empty exec_pop () exec_dup_times (print_newline integer_lte integer_add exec_do*range (exec_empty boolean_yank boolean_xor integer_min boolean_dup_times) boolean_invert_second_then_and integer_shove integer_stackdepth) boolean_and print_integer) (tag_exec_77 () exec_shove () boolean_eq) boolean_pop boolean_yankdup boolean_empty exec_shove () exec_dup (integer_stackdepth boolean_xor) exec_stackdepth exec_s_when_autoconstructing () (integer_add boolean_not boolean_or print_exec (print_boolean exec_y (integer_dup_times) integer_mult exec_y () integer_div) exec_do*while ()) ())))
Zero cases best errors: [1 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 111
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 218 122 216 214 339 341 129 678 554)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (130 218 122 216 214 339 341 129 678 554)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (in1 integer_flush boolean_empty boolean_or in1 integer_mult boolean_empty exec_k_when_autoconstructing (exec_eq boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35) (integer_eq in3 integer_div in2 boolean_rot) exec_y ()) integer_yankdup print_integer) ())
Errors: [1 0 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 7.059
Median total errors in population: 6
Error averages by case: (0.87 0.782 0.878 0.784 0.786 0.661 0.659 0.871 0.322 0.446)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.663
Average program size in population (points): 76.976
Average percent parens in population: 0.266
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.43325
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1773940
--- Timings ---
Current time: 1559314356946 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.1 seconds, 60.6%
Fitness Testing:      3.3 seconds, 28.2%
Report:               1.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank})
Lexicase best program: (boolean_swap integer_div boolean_and integer_max integer_rot exec_do*range () boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_inc exec_s_when_autoconstructing (exec_yank) (boolean_pop exec_swap () (exec_eq exec_k_when_autoconstructing (boolean_invert_first_then_and integer_rot boolean_and exec_yankdup) (exec_do*while (print_integer in2 exec_when (boolean_yank))))) ())))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank})
Zero cases best program: (boolean_swap integer_div boolean_and integer_max integer_rot exec_do*range () boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_inc exec_s_when_autoconstructing (exec_yank) (boolean_pop exec_swap () (exec_eq exec_k_when_autoconstructing (boolean_invert_first_then_and integer_rot boolean_and exec_yankdup) (exec_do*while (print_integer in2 exec_when (boolean_yank))))) ())))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 843 299 355 355 356 357 1 843 1000)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (185 843 299 355 355 356 357 1 843 0)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (in1 integer_flush boolean_empty boolean_or in1 integer_mult boolean_empty exec_k_when_autoconstructing (exec_eq boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35) (integer_eq in3 integer_div in2 boolean_rot) exec_y ()) integer_yankdup print_integer) ())
Errors: [1 0 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 6.406
Median total errors in population: 7
Error averages by case: (0.815 0.157 0.701 0.645 0.645 0.644 0.643 0.999 0.157 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 51.14
Average program size in population (points): 70.013
Average percent parens in population: 0.254
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.918125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2079783
--- Timings ---
Current time: 1559314359575 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.1 seconds, 63.7%
Fitness Testing:      3.6 seconds, 25.5%
Report:               1.4 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_180} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_dup exec_s_when_autoconstructing (exec_yank) (boolean_pop boolean_empty exec_s (integer_dup_times) (boolean_dup_items exec_dup_items exec_do*while (boolean_invert_first_then_and boolean_frominteger) integer_gte boolean_empty) (boolean_empty exec_pop () exec_dup_times (print_newline integer_lte integer_add exec_do*range (exec_empty boolean_yank boolean_xor integer_min boolean_yankdup) boolean_shove integer_shove integer_stackdepth) boolean_and print_integer) tag_exec_180 (exec_shove () boolean_eq) boolean_pop boolean_yankdup boolean_empty exec_shove () exec_dup (integer_stackdepth boolean_xor) exec_stackdepth exec_s_when_autoconstructing () (integer_add boolean_not boolean_or print_exec (print_boolean exec_y (integer_dup_times integer_mult exec_y () integer_div) exec_do*while ())) ()) ())))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 104
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction tag_exec_180} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_dup exec_s_when_autoconstructing (exec_yank) (boolean_pop boolean_empty exec_s (integer_dup_times) (boolean_dup_items exec_dup_items exec_do*while (boolean_invert_first_then_and boolean_frominteger) integer_gte boolean_empty) (boolean_empty exec_pop () exec_dup_times (print_newline integer_lte integer_add exec_do*range (exec_empty boolean_yank boolean_xor integer_min boolean_yankdup) boolean_shove integer_shove integer_stackdepth) boolean_and print_integer) tag_exec_180 (exec_shove () boolean_eq) boolean_pop boolean_yankdup boolean_empty exec_shove () exec_dup (integer_stackdepth boolean_xor) exec_stackdepth exec_s_when_autoconstructing () (integer_add boolean_not boolean_or print_exec (print_boolean exec_y (integer_dup_times integer_mult exec_y () integer_div) exec_do*while ())) ()) ())))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 104
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 616 860 739 478 489 125 487 117 124)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (129 616 860 739 478 489 125 487 117 124)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (in1 integer_flush boolean_empty boolean_or in1 integer_mult boolean_empty exec_k_when_autoconstructing (exec_eq boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35) (integer_eq in3 integer_div in2 boolean_rot) exec_y ()) integer_yankdup print_integer) ())
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.836
Median total errors in population: 6
Error averages by case: (0.871 0.384 0.14 0.261 0.522 0.511 0.875 0.513 0.883 0.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.642
Average program size in population (points): 65.152
Average percent parens in population: 0.259
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.458875
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2371675
--- Timings ---
Current time: 1559314362342 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.3 seconds, 66.5%
Fitness Testing:      4.0 seconds, 23.3%
Report:               1.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: 69                 
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: 18                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: 66                 
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_308} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty})
Lexicase best program: (in3 print_integer boolean_eq in2 exec_rot (tagged_308) (integer_yank exec_noop) () integer_flush integer_stackdepth boolean_dup_times boolean_xor integer_yank exec_y () boolean_invert_second_then_and integer_pop exec_yank in3 in2 in4 boolean_yankdup integer_shove integer_swap in4 exec_eq in4 exec_s (integer_dup exec_flush integer_sub) (boolean_invert_first_then_and boolean_empty) (boolean_invert_first_then_and integer_stackdepth integer_gt) exec_flush print_exec (exec_swap () () boolean_yankdup) boolean_invert_second_then_and boolean_rot exec_dup_times () boolean_dup integer_dup exec_pop (boolean_or integer_div boolean_dup integer_add integer_lte in3 integer_add exec_do*while (boolean_and) print_boolean integer_dec integer_flush) exec_k_when_autoconstructing (integer_mult integer_empty) ())
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_308} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty})
Zero cases best program: (in3 print_integer boolean_eq in2 exec_rot (tagged_308) (integer_yank exec_noop) () integer_flush integer_stackdepth boolean_dup_times boolean_xor integer_yank exec_y () boolean_invert_second_then_and integer_pop exec_yank in3 in2 in4 boolean_yankdup integer_shove integer_swap in4 exec_eq in4 exec_s (integer_dup exec_flush integer_sub) (boolean_invert_first_then_and boolean_empty) (boolean_invert_first_then_and integer_stackdepth integer_gt) exec_flush print_exec (exec_swap () () boolean_yankdup) boolean_invert_second_then_and boolean_rot exec_dup_times () boolean_dup integer_dup exec_pop (boolean_or integer_div boolean_dup integer_add integer_lte in3 integer_add exec_do*while (boolean_and) print_boolean integer_dec integer_flush) exec_k_when_autoconstructing (integer_mult integer_empty) ())
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 143 399 211 447 212 142 211 143 538)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (6 143 399 211 447 212 142 211 143 538)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_swap integer_div boolean_and integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth boolean_dup_items integer_dup integer_fromboolean print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush print_exec (integer_eq boolean_yank boolean_shove boolean_not boolean_and exec_k () (integer_min exec_do*while (integer_div) in4 exec_pop () exec_yank exec_shove (exec_pop () exec_if (boolean_stackdepth exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 62
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.548
Median total errors in population: 8
Error averages by case: (0.994 0.857 0.601 0.789 0.553 0.788 0.858 0.789 0.857 0.462)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.788
Average program size in population (points): 64.43
Average percent parens in population: 0.264
Minimum age in population: 6.375
Maximum age in population: 10.875
Average age in population: 8.920375
Median age in population: 8.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2687314
--- Timings ---
Current time: 1559314364893 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.3 seconds, 67.9%
Fitness Testing:      4.3 seconds, 22.1%
Report:               1.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: 69                 
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: 18                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: 66                 
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth boolean_dup_items integer_dup integer_fromboolean print_integer boolean_flush boolean_flush exec_do*range (exec_empty integer_mod exec_while (boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot (integer_eq boolean_yank boolean_shove boolean_not boolean_and exec_k () (integer_min exec_do*while (exec_do*while () in4 exec_pop () exec_yank print_newline) boolean_flush boolean_swap integer_dup exec_y_when_autoconstructing (exec_rot (print_exec (exec_s_when_autoconstructing () (boolean_shove exec_dup (exec_s (exec_stackdepth integer_fromboolean in3 integer_empty exec_yankdup boolean_swap exec_do*count (exec_flush integer_dec exec_yankdup exec_k (exec_k_when_autoconstructing (boolean_eq integer_gt boolean_not integer_flush boolean_shove exec_while (print_integer integer_gt in2) boolean_yank) (print_boolean exec_shove (integer_mod print_integer exec_s_when_autoconstructing (boolean_and in3 boolean_and exec_shove (integer_swap boolean_rot exec_noop exec_noop in2 integer_shove) integer_sub) () ()))) ())) () ())) ())) () ()))) () ()))
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth boolean_dup_items integer_dup integer_fromboolean print_integer boolean_flush boolean_flush exec_do*range (exec_empty integer_mod exec_while (boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot (integer_eq boolean_yank boolean_shove boolean_not boolean_and exec_k () (integer_min exec_do*while (exec_do*while () in4 exec_pop () exec_yank print_newline) boolean_flush boolean_swap integer_dup exec_y_when_autoconstructing (exec_rot (print_exec (exec_s_when_autoconstructing () (boolean_shove exec_dup (exec_s (exec_stackdepth integer_fromboolean in3 integer_empty exec_yankdup boolean_swap exec_do*count (exec_flush integer_dec exec_yankdup exec_k (exec_k_when_autoconstructing (boolean_eq integer_gt boolean_not integer_flush boolean_shove exec_while (print_integer integer_gt in2) boolean_yank) (print_boolean exec_shove (integer_mod print_integer exec_s_when_autoconstructing (boolean_and in3 boolean_and exec_shove (integer_swap boolean_rot exec_noop exec_noop in2 integer_shove) integer_sub) () ()))) ())) () ())) ())) () ()))) () ()))
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 111 109 416 276 416 803 75 414 415)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (79 111 109 416 276 416 803 75 414 415)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_yankdup integer_inc in3 integer_sub exec_empty print_integer integer_mod boolean_and boolean_swap boolean_dup in3 exec_pop (boolean_empty exec_k_when_autoconstructing (exec_eq boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35) (integer_eq in3 integer_div in2 boolean_rot) exec_y ()) integer_yankdup print_integer) ()))
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 6.886
Median total errors in population: 7
Error averages by case: (0.921 0.889 0.891 0.584 0.724 0.584 0.197 0.925 0.586 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.961
Average program size in population (points): 58.546
Average percent parens in population: 0.255
Minimum age in population: 7.828125
Maximum age in population: 12.328125
Average age in population: 10.394875
Median age in population: 10.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3033330
--- Timings ---
Current time: 1559314367603 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.4 seconds, 69.1%
Fitness Testing:      4.7 seconds, 21.1%
Report:               2.1 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_yankdup integer_inc in3 exec_when (exec_empty) print_integer integer_mod boolean_and boolean_swap boolean_dup in3 exec_pop (boolean_invert_second_then_and boolean_rot boolean_and))
Lexicase best errors: [1 1 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_yankdup integer_inc in3 exec_when (exec_empty) print_integer integer_mod boolean_and boolean_swap boolean_dup in3 exec_pop (boolean_invert_second_then_and boolean_rot boolean_and))
Zero cases best errors: [1 1 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 186 185 412 412 106 171 171 105 413)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (186 186 185 412 412 106 171 171 105 413)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_556} {:close 0, :instruction in1} {:close 0, :instruction tagged_787} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_313} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 1, :instruction exec_if})
Best program: (print_boolean boolean_or integer_yank exec_do*count () exec_k (tag_boolean_556 in1 tagged_787 print_integer in2 exec_shove () integer_sub exec_yank exec_eq) () integer_shove integer_div integer_rot exec_s_when_autoconstructing (integer_yank) (exec_do*count () exec_dup_items in2 exec_yankdup exec_yank exec_yank boolean_stackdepth integer_eq boolean_pop exec_flush exec_stackdepth integer_empty boolean_empty) (exec_yank integer_shove integer_dup_items exec_eq print_newline) print_newline boolean_flush boolean_swap integer_dup exec_y_when_autoconstructing (exec_rot (print_exec (exec_s_when_autoconstructing () (boolean_shove exec_dup (exec_s (exec_stackdepth integer_fromboolean in2) (boolean_not exec_yankdup exec_dup (exec_dup (print_newline boolean_yankdup exec_dup_items) integer_stackdepth boolean_xor) exec_stackdepth exec_s_when_autoconstructing () (integer_add tag_exec_313 (boolean_or print_exec (print_boolean exec_y (integer_dup_times) integer_mult exec_y () exec_if () ()))) ()) ())) ())) () ()))
Errors: [0 0 0 1 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 72
Size: 104
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.653
Median total errors in population: 7
Error averages by case: (0.814 0.814 0.815 0.588 0.588 0.894 0.829 0.829 0.895 0.587)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.619
Average program size in population (points): 54.46
Average percent parens in population: 0.245
Minimum age in population: 8.828125
Maximum age in population: 14.1171875
Average age in population: 11.8419375
Median age in population: 11.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3371729
--- Timings ---
Current time: 1559314370289 milliseconds
Total Time:          25.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 70.0%
Fitness Testing:      5.1 seconds, 20.5%
Report:               2.3 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_swap})
Lexicase best program: (boolean_swap integer_div boolean_and integer_max integer_rot exec_do*range () boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items)) (boolean_or exec_if () (integer_stackdepth) boolean_rot) exec_if () (integer_inc exec_s_when_autoconstructing (in2) (boolean_pop exec_swap () ()) ()))
Lexicase best errors: [0 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_swap})
Zero cases best program: (boolean_swap integer_div boolean_and integer_max integer_rot exec_do*range () boolean_not integer_rot boolean_or in1 print_integer boolean_yankdup in4 boolean_dup integer_mod exec_k (integer_div boolean_dup_times exec_swap () (boolean_frominteger integer_dup_items)) (boolean_or exec_if () (integer_stackdepth) boolean_rot) exec_if () (integer_inc exec_s_when_autoconstructing (in2) (boolean_pop exec_swap () ()) ()))
Zero cases best errors: [0 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 190 266 191 265 177 266 266 191 266)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (265 190 266 191 265 177 266 266 191 266)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (in1 integer_flush boolean_empty integer_sub in1 integer_mult boolean_empty exec_k_when_autoconstructing (exec_eq boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35) (integer_eq in3 integer_div in2 boolean_rot) exec_y ()) integer_yankdup print_integer) ())
Errors: [0 1 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 7.657
Median total errors in population: 9
Error averages by case: (0.735 0.81 0.734 0.809 0.735 0.823 0.734 0.734 0.809 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.963
Average program size in population (points): 55.566
Average percent parens in population: 0.254
Minimum age in population: 10.3125
Maximum age in population: 15.37109375
Average age in population: 13.366265625
Median age in population: 13.470703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3703942
--- Timings ---
Current time: 1559314373338 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.0 seconds, 71.2%
Fitness Testing:      5.5 seconds, 19.5%
Report:               2.5 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 1, :instruction tag_exec_77} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 3, :instruction exec_rot} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_not exec_do*count (boolean_or in1 print_integer boolean_yankdup in4) boolean_dup integer_mod exec_k (integer_div exec_empty exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_dup exec_s_when_autoconstructing (exec_yank) (boolean_pop integer_gt exec_s (integer_dup_times) () (boolean_dup_items boolean_dup_times exec_do*while (boolean_invert_first_then_and boolean_frominteger) integer_gte boolean_empty) boolean_empty exec_pop () exec_dup_times (print_newline integer_lte integer_add exec_do*range (exec_empty boolean_yank integer_inc integer_min boolean_dup_times) boolean_invert_second_then_and boolean_eq integer_stackdepth) boolean_and print_integer) (tag_exec_77 () exec_rot () (boolean_eq boolean_pop boolean_yankdup boolean_empty boolean_xor) (exec_dup (integer_stackdepth boolean_xor) exec_stackdepth exec_s_when_autoconstructing () (integer_add boolean_not boolean_or print_exec (boolean_swap exec_y (integer_dup) integer_dup_items exec_rot () () () integer_swap)) ())))))
Lexicase best errors: [1 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 106
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 1, :instruction tag_exec_77} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 3, :instruction exec_rot} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_not exec_do*count (boolean_or in1 print_integer boolean_yankdup in4) boolean_dup integer_mod exec_k (integer_div exec_empty exec_swap () (boolean_frominteger integer_dup_items) boolean_or exec_if () (integer_stackdepth) boolean_rot) (exec_if () (integer_dup exec_s_when_autoconstructing (exec_yank) (boolean_pop integer_gt exec_s (integer_dup_times) () (boolean_dup_items boolean_dup_times exec_do*while (boolean_invert_first_then_and boolean_frominteger) integer_gte boolean_empty) boolean_empty exec_pop () exec_dup_times (print_newline integer_lte integer_add exec_do*range (exec_empty boolean_yank integer_inc integer_min boolean_dup_times) boolean_invert_second_then_and boolean_eq integer_stackdepth) boolean_and print_integer) (tag_exec_77 () exec_rot () (boolean_eq boolean_pop boolean_yankdup boolean_empty boolean_xor) (exec_dup (integer_stackdepth boolean_xor) exec_stackdepth exec_s_when_autoconstructing () (integer_add boolean_not boolean_or print_exec (boolean_swap exec_y (integer_dup) integer_dup_items exec_rot () () () integer_swap)) ())))))
Zero cases best errors: [1 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 106
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (286 88 440 286 90 445 93 445 443 286)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (286 88 440 286 90 445 93 445 443 286)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_559} {:close 0, :instruction in1} {:close 0, :instruction tagged_787} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty})
Best program: (print_boolean boolean_or integer_yank exec_do*count () exec_k (tag_boolean_559 in1 tagged_787 print_integer in2 exec_shove () integer_sub exec_yank exec_eq) () integer_shove integer_div integer_rot exec_s_when_autoconstructing (integer_yank) (exec_do*count () exec_dup_items in2 exec_yankdup exec_yank exec_yank boolean_stackdepth integer_eq boolean_pop exec_flush exec_stackdepth integer_empty boolean_empty) ())
Errors: [1 1 0 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.098
Median total errors in population: 7
Error averages by case: (0.714 0.912 0.56 0.714 0.91 0.555 0.907 0.555 0.557 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.875
Average program size in population (points): 59.141
Average percent parens in population: 0.269
Minimum age in population: 11.3125
Maximum age in population: 16.740234375
Average age in population: 14.84859765625
Median age in population: 14.9541015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4068611
--- Timings ---
Current time: 1559314376469 milliseconds
Total Time:          31.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.4 seconds, 72.1%
Fitness Testing:      5.9 seconds, 18.9%
Report:               2.7 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 92                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 43                 
Correct output: 1                   | Program output: 94                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 97                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: 22                 
Correct output: -76                 | Program output: 66                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: 89                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: 56                 
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 64                 
Correct output: -90                 | Program output: 48                 
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: 89                 
Correct output: -77                 | Program output: 30                 
Correct output: -99                 | Program output: 90                 
Correct output: -43                 | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: 87                 
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 59                 
Correct output: -23                 | Program output: 57                 
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 70                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 76                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (in1 integer_flush boolean_empty boolean_or in1 integer_mult boolean_empty exec_k_when_autoconstructing (exec_eq boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35) (integer_eq in3 boolean_yank in2 boolean_rot) exec_y ()) integer_yankdup print_integer) ())
Lexicase best errors: [1 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (in1 integer_flush boolean_empty boolean_or in1 integer_mult boolean_empty exec_k_when_autoconstructing (exec_eq boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35) (integer_eq in3 boolean_yank in2 boolean_rot) exec_y ()) integer_yankdup print_integer) ())
Zero cases best errors: [1 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 265 145 108 905 790 385 905 262 385)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (146 265 145 108 905 790 385 905 262 385)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer})
Best program: (print_boolean boolean_or exec_dup_times (integer_empty exec_s_when_autoconstructing () (in4 exec_while () print_integer) (exec_do*times (exec_pop ()) exec_do*count (boolean_invert_first_then_and integer_empty boolean_eq exec_do*while (boolean_dup_times exec_if () (boolean_empty exec_do*range (boolean_xor exec_do*times () integer_dup_items integer_gte integer_fromboolean print_exec (exec_s (in4) (exec_eq in4 exec_while () integer_max) (exec_when (integer_div integer_rot exec_dup_times (boolean_xor integer_dec integer_min) print_exec (boolean_xor exec_yank exec_noop exec_k_when_autoconstructing () (integer_flush boolean_rot boolean_dup_items integer_max integer_dup exec_yankdup in4 exec_when (integer_fromboolean boolean_not print_integer)))))))))))))
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 54
Size: 79
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.704
Median total errors in population: 5
Error averages by case: (0.854 0.735 0.855 0.892 0.095 0.21 0.615 0.095 0.738 0.615)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.028
Average program size in population (points): 55.013
Average percent parens in population: 0.265
Minimum age in population: 13.1796875
Maximum age in population: 18.2353515625
Average age in population: 16.404814453125
Median age in population: 16.47216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4419276
--- Timings ---
Current time: 1559314379037 milliseconds
Total Time:          33.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.4 seconds, 72.3%
Fitness Testing:      6.3 seconds, 18.6%
Report:               3.0 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: 69                 
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: 18                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: 66                 
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dec} {:close 0, :instruction in2} {:close 2, :instruction integer_div} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when})
Lexicase best program: (integer_dup_times exec_do*while (boolean_invert_first_then_and boolean_shove) integer_add exec_shove (boolean_swap integer_div boolean_and integer_max integer_rot exec_do*range () boolean_not integer_rot) boolean_xor in3 print_integer integer_dec in2 integer_div boolean_pop integer_dup_items exec_pop (integer_eq) integer_max integer_mult integer_eq exec_when ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dec} {:close 0, :instruction in2} {:close 2, :instruction integer_div} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when})
Zero cases best program: (integer_dup_times exec_do*while (boolean_invert_first_then_and boolean_shove) integer_add exec_shove (boolean_swap integer_div boolean_and integer_max integer_rot exec_do*range () boolean_not integer_rot) boolean_xor in3 print_integer integer_dec in2 integer_div boolean_pop integer_dup_items exec_pop (integer_eq) integer_max integer_mult integer_eq exec_when ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 122 260 248 250 249 123 395 122 122)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (260 122 260 248 250 249 123 395 122 122)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_yankdup} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and})
Best program: (exec_yankdup integer_inc in3 exec_when (exec_empty print_integer integer_mod) boolean_and boolean_swap integer_lt in3 exec_pop (boolean_invert_second_then_and boolean_rot boolean_and))
Errors: [1 0 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.849
Median total errors in population: 8
Error averages by case: (0.74 0.878 0.74 0.752 0.75 0.751 0.877 0.605 0.878 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.261
Average program size in population (points): 52.53
Average percent parens in population: 0.264
Minimum age in population: 14.1796875
Maximum age in population: 19.68212890625
Average age in population: 17.91359130859375
Median age in population: 17.98583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4768936
--- Timings ---
Current time: 1559314381789 milliseconds
Total Time:          36.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 72.9%
Fitness Testing:      6.7 seconds, 18.2%
Report:               3.1 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 92                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 43                 
Correct output: 1                   | Program output: 94                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 97                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: 22                 
Correct output: -76                 | Program output: 66                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: 89                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: 56                 
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 64                 
Correct output: -90                 | Program output: 48                 
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: 89                 
Correct output: -77                 | Program output: 30                 
Correct output: -99                 | Program output: 90                 
Correct output: -43                 | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: 87                 
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 59                 
Correct output: -23                 | Program output: 57                 
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 70                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 76                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_yank integer_sub -75 boolean_not boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing () (in4 exec_while () print_integer exec_do*times (exec_pop ()) exec_do*count (boolean_invert_first_then_and integer_empty) boolean_eq exec_do*while (exec_flush exec_if () (boolean_empty exec_do*range (exec_s (boolean_empty exec_if (exec_dup_times (exec_do*range () integer_add boolean_flush boolean_dup_times) print_boolean) ()) () ())))) ()))
Lexicase best errors: [1 1 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 52
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_yank integer_sub -75 boolean_not boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing () (in4 exec_while () print_integer exec_do*times (exec_pop ()) exec_do*count (boolean_invert_first_then_and integer_empty) boolean_eq exec_do*while (exec_flush exec_if () (boolean_empty exec_do*range (exec_s (boolean_empty exec_if (exec_dup_times (exec_do*range () integer_add boolean_flush boolean_dup_times) print_boolean) ()) () ())))) ()))
Zero cases best errors: [1 1 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 52
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 472 174 174 1000 174 471 1000 250 251)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (0 472 174 174 0 174 471 0 250 251)
Population mean number of perfect (error zero) cases: 1.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or})
Best program: (exec_yank integer_sub -75 boolean_not boolean_rot exec_yank exec_dup_times (boolean_shove exec_s_when_autoconstructing () (in4 print_boolean) (print_integer exec_do*times (exec_pop ()) exec_rot (boolean_invert_first_then_and integer_empty) (boolean_eq exec_do*while (integer_mod integer_stackdepth boolean_xor exec_do*times () integer_dup_items boolean_empty boolean_invert_first_then_and) integer_stackdepth integer_gt) (exec_flush print_exec (exec_swap () () boolean_yankdup) boolean_invert_second_then_and boolean_rot) exec_dup_times ()) boolean_dup integer_dup exec_pop (boolean_or)))
Errors: [1 1 0 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 39
Size: 56
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 8.034
Median total errors in population: 8
Error averages by case: (1.0 0.528 0.826 0.826 1.0 0.826 0.529 1.0 0.75 0.749)
Error minima by case: (1 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 35.564
Average program size in population (points): 47.736
Average percent parens in population: 0.241
Minimum age in population: 16.796875
Maximum age in population: 21.410888671875
Average age in population: 19.423416015625
Median age in population: 19.4647216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5112410
--- Timings ---
Current time: 1559314384472 milliseconds
Total Time:          39.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.8 seconds, 73.4%
Fitness Testing:      7.0 seconds, 17.9%
Report:               3.3 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: 69                 
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: 18                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: 66                 
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_yankdup integer_inc integer_inc in3 exec_when (exec_empty) print_integer integer_inc boolean_and boolean_swap boolean_dup in3 exec_pop (boolean_invert_second_then_and boolean_rot boolean_and))
Lexicase best errors: [1 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_yankdup integer_inc integer_inc in3 exec_when (exec_empty) print_integer integer_inc boolean_and boolean_swap boolean_dup in3 exec_pop (boolean_invert_second_then_and boolean_rot boolean_and))
Zero cases best errors: [1 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 394 260 260 395 1 260 905 247 902)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (247 394 260 260 395 1 260 905 247 902)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and})
Best program: (exec_yankdup integer_inc in3 exec_when (exec_empty) print_integer integer_mod boolean_and boolean_swap integer_lt in3 exec_pop (boolean_invert_second_then_and boolean_rot boolean_and))
Errors: [1 1 0 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.129
Median total errors in population: 6
Error averages by case: (0.753 0.606 0.74 0.74 0.605 0.999 0.74 0.095 0.753 0.098)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.508
Average program size in population (points): 49.446
Average percent parens in population: 0.269
Minimum age in population: 17.796875
Maximum age in population: 22.7877197265625
Average age in population: 20.90043469238281
Median age in population: 20.9791259765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5451334
--- Timings ---
Current time: 1559314387081 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.9 seconds, 73.7%
Fitness Testing:      7.4 seconds, 17.7%
Report:               3.5 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: 69                 
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: 18                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: 66                 
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dec} {:close 0, :instruction in2} {:close 2, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when})
Lexicase best program: (exec_yankdup integer_div integer_lte boolean_dup integer_dup_times integer_eq boolean_invert_first_then_and boolean_shove integer_add exec_shove (exec_swap (boolean_stackdepth) (boolean_xor in3 print_integer integer_dec)) in2 integer_div integer_min integer_dup_items exec_pop (integer_eq) integer_max integer_mult integer_eq exec_when ())
Lexicase best errors: [1 1 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dec} {:close 0, :instruction in2} {:close 2, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when})
Zero cases best program: (exec_yankdup integer_div integer_lte boolean_dup integer_dup_times integer_eq boolean_invert_first_then_and boolean_shove integer_add exec_shove (exec_swap (boolean_stackdepth) (boolean_xor in3 print_integer integer_dec)) in2 integer_div integer_min integer_dup_items exec_pop (integer_eq) integer_max integer_mult integer_eq exec_when ())
Zero cases best errors: [1 1 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 7 217 334 775 334 8 218 333 120)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (6 7 217 334 775 334 8 218 333 120)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_eq})
Best program: (in3 print_integer boolean_eq in2 exec_rot (boolean_invert_second_then_and) (integer_yank exec_noop) (integer_sub integer_stackdepth boolean_dup_times boolean_xor) in1 exec_y () boolean_invert_second_then_and integer_pop exec_yank in3 in2 in4 boolean_yankdup integer_shove integer_swap exec_do*count (boolean_invert_first_then_and boolean_stackdepth) boolean_eq exec_do*while (boolean_dup_times integer_eq))
Errors: [1 1 1 0 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 7.648
Median total errors in population: 7
Error averages by case: (0.994 0.993 0.783 0.666 0.225 0.666 0.992 0.782 0.667 0.88)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.554
Average program size in population (points): 46.223
Average percent parens in population: 0.262
Minimum age in population: 19.4296875
Maximum age in population: 24.4932861328125
Average age in population: 22.15034625244141
Median age in population: 22.2230224609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5823495
--- Timings ---
Current time: 1559314390422 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 74.3%
Fitness Testing:      7.8 seconds, 17.3%
Report:               3.7 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: 45                 
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 20                 
Correct output: 1                   | Program output: 62                 
Correct output: 43                  | Program output: 66                 
Correct output: 45                  | Program output: 76                 
Correct output: 11                  | Program output: 68                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 97                 
Correct output: 14                  | Program output: 90                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 75                 
Correct output: 31                  | Program output: 38                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 38                 
Correct output: -92                 | Program output: 62                 
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: 90                 
Correct output: -76                 | Program output: 53                 
Correct output: -65                 | Program output: 25                 
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: 25                 
Correct output: -63                 | Program output: 74                 
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 56                 
Correct output: -39                 | Program output: 96                 
Correct output: -94                 | Program output: 27                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: 76                 
Correct output: -80                 | Program output: 16                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 57                 
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 5                  
Correct output: -31                 | Program output: 50                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 48                 
Correct output: -43                 | Program output: 62                 
Correct output: -88                 | Program output: 27                 
Correct output: -96                 | Program output: 77                 
Correct output: -70                 | Program output: 9                  
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: 51                 
Correct output: -57                 | Program output: 30                 
Correct output: -26                 | Program output: 57                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: 71                 
Correct output: -47                 | Program output: 37                 
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: 26                 
Correct output: -42                 | Program output: 42                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 18                 
Correct output: -57                 | Program output: 26                 
Correct output: -96                 | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 100                
Correct output: 44                  | Program output: 91                 
Correct output: -93                 | Program output: 82                 
Correct output: -68                 | Program output: 73                 
Correct output: 19                  | Program output: 90                 
Correct output: -54                 | Program output: 44                 
Correct output: 38                  | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 2, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div})
Lexicase best program: (print_boolean boolean_or integer_yank exec_do*count () in3 exec_when (exec_empty) print_integer integer_mod boolean_and boolean_swap boolean_empty exec_k_when_autoconstructing () (exec_eq) boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35 integer_eq in3 integer_div) ()))
Lexicase best errors: [1 1 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 2, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction 35} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_div})
Zero cases best program: (print_boolean boolean_or integer_yank exec_do*count () in3 exec_when (exec_empty) print_integer integer_mod boolean_and boolean_swap boolean_empty exec_k_when_autoconstructing () (exec_eq) boolean_shove boolean_empty integer_div exec_pop (integer_dup exec_k (integer_gte integer_max integer_sub 35 integer_eq in3 integer_div) ()))
Zero cases best errors: [1 1 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 401 189 329 330 2 396 197 727 189)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (2 401 189 329 330 2 396 197 727 189)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -82} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction in3})
Best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_items print_integer integer_inc in3 boolean_stackdepth boolean_dup_items in2 integer_fromboolean print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 exec_rot (integer_eq boolean_yank boolean_shove boolean_not boolean_and) (exec_k () (integer_min integer_eq in2) in4 exec_pop (exec_yank exec_shove (exec_pop () exec_if (boolean_stackdepth boolean_invert_second_then_and boolean_dup_items exec_s_when_autoconstructing () () (integer_lte integer_stackdepth -82 integer_lt integer_div boolean_dup_times integer_rot integer_pop) integer_gt print_boolean boolean_dup_times) (integer_rot integer_pop) integer_gt integer_mult exec_k_when_autoconstructing () () boolean_yank integer_dup_items boolean_swap integer_dec integer_inc boolean_invert_second_then_and exec_s_when_autoconstructing (print_integer) (in3) ()))) ()))
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 69
Size: 90
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.238
Median total errors in population: 7
Error averages by case: (0.998 0.599 0.811 0.671 0.67 0.998 0.604 0.803 0.273 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.757
Average program size in population (points): 37.625
Average percent parens in population: 0.260
Minimum age in population: 21.056640625
Maximum age in population: 25.6402587890625
Average age in population: 23.58329309082031
Median age in population: 23.62713623046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6231271
--- Timings ---
Current time: 1559314393401 milliseconds
Total Time:          48.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 74.2%
Fitness Testing:      8.2 seconds, 17.0%
Report:               4.1 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth boolean_dup_items in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Lexicase best errors: [1 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth boolean_dup_items in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Zero cases best errors: [1 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 196 206 212 258 315 258 312 199 250)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (212 196 206 212 258 315 258 312 199 250)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth boolean_dup_items in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Errors: [1 1 1 1 0 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.582
Median total errors in population: 7
Error averages by case: (0.788 0.804 0.794 0.788 0.742 0.685 0.742 0.688 0.801 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.958
Average program size in population (points): 38.112
Average percent parens in population: 0.265
Minimum age in population: 22.119140625
Maximum age in population: 27.16105651855469
Average age in population: 25.13221548461914
Median age in population: 25.204833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6596376
--- Timings ---
Current time: 1559314396520 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.3 seconds, 74.6%
Fitness Testing:      8.6 seconds, 16.7%
Report:               4.3 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_dup_times exec_do*while (boolean_invert_first_then_and boolean_shove in3 exec_when (exec_empty) print_integer integer_mod) exec_when (boolean_swap boolean_dup in3 exec_pop (boolean_invert_second_then_and boolean_dup_items boolean_and)))
Lexicase best errors: [1 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_dup_times exec_do*while (boolean_invert_first_then_and boolean_shove in3 exec_when (exec_empty) print_integer integer_mod) exec_when (boolean_swap boolean_dup in3 exec_pop (boolean_invert_second_then_and boolean_dup_items boolean_and)))
Zero cases best errors: [1 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 213 504 510 195 504 214 508 446 944)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (88 213 504 510 195 504 214 508 446 944)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (integer_pop integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth boolean_dup_items in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Errors: [1 1 0 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.874
Median total errors in population: 4
Error averages by case: (0.912 0.787 0.496 0.49 0.805 0.496 0.786 0.492 0.554 0.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.659
Average program size in population (points): 36.774
Average percent parens in population: 0.244
Minimum age in population: 24.01913452148438
Maximum age in population: 28.28338623046875
Average age in population: 26.73175123596191
Median age in population: 26.66635131835938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 228
Genome diversity (% unique genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 236
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6923213
--- Timings ---
Current time: 1559314399028 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.2 seconds, 74.9%
Fitness Testing:      8.9 seconds, 16.6%
Report:               4.5 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 92                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 43                 
Correct output: 1                   | Program output: 94                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 97                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: 22                 
Correct output: -76                 | Program output: 66                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: 89                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: 56                 
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 64                 
Correct output: -90                 | Program output: 48                 
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: 89                 
Correct output: -77                 | Program output: 30                 
Correct output: -99                 | Program output: 90                 
Correct output: -43                 | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: 87                 
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 59                 
Correct output: -23                 | Program output: 57                 
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 70                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 76                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty integer_dup_times in4 print_integer) print_integer exec_dup_times (exec_pop ()) exec_do*count () boolean_invert_first_then_and integer_empty exec_dup_times (boolean_swap integer_eq boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())
Lexicase best errors: [1 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty integer_dup_times in4 print_integer) print_integer exec_dup_times (exec_pop ()) exec_do*count () boolean_invert_first_then_and integer_empty exec_dup_times (boolean_swap integer_eq boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())
Zero cases best errors: [1 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (306 303 608 223 224 603 224 607 224 93)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (306 303 608 223 224 603 224 607 224 93)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq})
Best program: (exec_yank integer_sub integer_dup_times exec_empty integer_pop exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 print_integer) (print_integer exec_dup_times (exec_pop ()) exec_do*count () boolean_invert_first_then_and integer_empty) (boolean_eq)))
Errors: [1 1 1 0 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 6.585
Median total errors in population: 6
Error averages by case: (0.694 0.697 0.392 0.777 0.776 0.397 0.776 0.393 0.776 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.101
Average program size in population (points): 34.7
Average percent parens in population: 0.243
Minimum age in population: 25.823486328125
Maximum age in population: 29.96991729736328
Average age in population: 28.22624652862549
Median age in population: 28.29095840454102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7254732
--- Timings ---
Current time: 1559314401686 milliseconds
Total Time:          56.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.4 seconds, 75.1%
Fitness Testing:      9.3 seconds, 16.4%
Report:               4.7 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: 69                 
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: 18                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: 66                 
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_308} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction tagged_343} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (in3 print_integer boolean_eq in2 exec_rot (tagged_308) (boolean_flush exec_noop) () integer_flush integer_stackdepth boolean_dup_times boolean_xor integer_yank exec_y () boolean_invert_second_then_and integer_pop exec_yank in3 exec_dup_times (in4 boolean_yankdup integer_shove boolean_empty in4) exec_eq in4 tagged_343 exec_dup () exec_when (integer_div integer_rot boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())
Lexicase best errors: [0 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_308} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction tagged_343} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (in3 print_integer boolean_eq in2 exec_rot (tagged_308) (boolean_flush exec_noop) () integer_flush integer_stackdepth boolean_dup_times boolean_xor integer_yank exec_y () boolean_invert_second_then_and integer_pop exec_yank in3 exec_dup_times (in4 boolean_yankdup integer_shove boolean_empty in4) exec_eq in4 tagged_343 exec_dup () exec_when (integer_div integer_rot boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())
Zero cases best errors: [0 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (478 365 367 479 575 97 478 254 478 367)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (478 365 367 479 575 97 478 254 478 367)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (in3 print_integer boolean_eq in2 boolean_pop boolean_invert_second_then_and integer_yank exec_noop exec_stackdepth integer_stackdepth boolean_dup_times boolean_xor in1 boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))
Errors: [0 1 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 31
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.062
Median total errors in population: 7
Error averages by case: (0.522 0.635 0.633 0.521 0.425 0.903 0.522 0.746 0.522 0.633)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.818
Average program size in population (points): 33.565
Average percent parens in population: 0.257
Minimum age in population: 26.823486328125
Maximum age in population: 31.35488128662109
Average age in population: 29.66808234977722
Median age in population: 29.72396087646484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7599092
--- Timings ---
Current time: 1559314404282 milliseconds
Total Time:          59.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.5 seconds, 75.3%
Fitness Testing:      9.6 seconds, 16.3%
Report:               4.9 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 292 291 2 938 101 1 392 2 2)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (291 292 291 2 938 101 1 392 2 2)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.688
Median total errors in population: 9
Error averages by case: (0.709 0.708 0.709 0.998 0.062 0.899 0.999 0.608 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.226
Average program size in population (points): 32.797
Average percent parens in population: 0.256
Minimum age in population: 27.823486328125
Maximum age in population: 32.89938163757324
Average age in population: 31.13131469631195
Median age in population: 31.17769145965576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7937091
--- Timings ---
Current time: 1559314406953 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.6 seconds, 75.5%
Fitness Testing:     10.0 seconds, 16.2%
Report:               5.0 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_yankdup integer_flush exec_rot () () ())))
Lexicase best errors: [1 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_yankdup integer_flush exec_rot () () ())))
Zero cases best errors: [1 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 379 174 1000 384 335 1 2 563 565)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (0 379 174 0 384 335 1 2 563 565)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.597
Median total errors in population: 7
Error averages by case: (1.0 0.621 0.826 1.0 0.616 0.665 0.999 0.998 0.437 0.435)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 27.22
Average program size in population (points): 36.696
Average percent parens in population: 0.257
Minimum age in population: 30.37679290771484
Maximum age in population: 34.27690267562866
Average age in population: 32.6695856628418
Median age in population: 32.59903717041016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8209722
--- Timings ---
Current time: 1559314409345 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.5 seconds, 75.7%
Fitness Testing:     10.3 seconds, 16.0%
Report:               5.2 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 92                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 43                 
Correct output: 1                   | Program output: 94                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 97                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: 22                 
Correct output: -76                 | Program output: 66                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: 89                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: 56                 
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 64                 
Correct output: -90                 | Program output: 48                 
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: 89                 
Correct output: -77                 | Program output: 30                 
Correct output: -99                 | Program output: 90                 
Correct output: -43                 | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: 87                 
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 59                 
Correct output: -23                 | Program output: 57                 
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 70                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 76                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div integer_rot exec_s_when_autoconstructing (integer_pop integer_shove integer_inc in2 exec_do*while (boolean_yankdup integer_shove integer_mult in4) exec_eq print_integer in2 boolean_rot) (boolean_not) () integer_yankdup print_integer))
Lexicase best errors: [1 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div integer_rot exec_s_when_autoconstructing (integer_pop integer_shove integer_inc in2 exec_do*while (boolean_yankdup integer_shove integer_mult in4) exec_eq print_integer in2 boolean_rot) (boolean_not) () integer_yankdup print_integer))
Zero cases best errors: [1 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 4 467 121 123 786 123 531 122 123)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (121 4 467 121 123 786 123 531 122 123)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div integer_rot exec_s_when_autoconstructing (boolean_yankdup integer_shove integer_swap in4) (exec_eq print_integer integer_flush boolean_rot) (boolean_not)) integer_yankdup print_integer)
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.479
Median total errors in population: 7
Error averages by case: (0.879 0.996 0.533 0.879 0.877 0.214 0.877 0.469 0.878 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.143
Average program size in population (points): 36.392
Average percent parens in population: 0.224
Minimum age in population: 32.13668060302734
Maximum age in population: 35.56003165245056
Average age in population: 34.10957211732864
Median age in population: 34.24583625793457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8488098
--- Timings ---
Current time: 1559314411762 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.5 seconds, 75.8%
Fitness Testing:     10.5 seconds, 15.8%
Report:               5.4 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 92                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 43                 
Correct output: 1                   | Program output: 94                 
Correct output: 3                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 79                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 97                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: 22                 
Correct output: -76                 | Program output: 66                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: 89                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: 56                 
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 64                 
Correct output: -90                 | Program output: 48                 
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: 89                 
Correct output: -77                 | Program output: 30                 
Correct output: -99                 | Program output: 90                 
Correct output: -43                 | Program output: 92                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: 87                 
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 59                 
Correct output: -23                 | Program output: 57                 
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 70                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 76                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 print_integer) (print_integer exec_dup_times (exec_pop ()) exec_do*count () boolean_invert_first_then_and integer_empty) (boolean_eq)))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 print_integer) (print_integer exec_dup_times (exec_pop ()) exec_do*count () boolean_invert_first_then_and integer_empty) (boolean_eq)))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 898 331 892 329 331 331 416 329 245)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (317 898 331 892 329 331 331 416 329 245)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 print_integer) (print_integer exec_dup_times (exec_pop ()) exec_do*count () boolean_invert_first_then_and integer_empty) (boolean_eq)))
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 5.581
Median total errors in population: 7
Error averages by case: (0.683 0.102 0.669 0.108 0.671 0.669 0.669 0.584 0.671 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.584
Average program size in population (points): 37.897
Average percent parens in population: 0.270
Minimum age in population: 33.29723167419434
Maximum age in population: 37.0894775390625
Average age in population: 35.65895980870724
Median age in population: 35.74086743593216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8748532
--- Timings ---
Current time: 1559314414393 milliseconds
Total Time:          69.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.6 seconds, 76.1%
Fitness Testing:     10.8 seconds, 15.6%
Report:               5.6 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_do*range (exec_dup_times (exec_while (integer_mult) exec_when (boolean_shove boolean_dup_times print_integer) integer_inc) in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_do*range (exec_dup_times (exec_while (integer_mult) exec_when (boolean_shove boolean_dup_times print_integer) integer_inc) in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 734 101 32 734 32 57 827 792 101)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (88 734 101 32 734 32 57 827 792 101)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) boolean_dup_times print_integer) integer_inc) in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ())
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 42
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.502
Median total errors in population: 6
Error averages by case: (0.912 0.266 0.899 0.968 0.266 0.968 0.943 0.173 0.208 0.899)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.852
Average program size in population (points): 36.201
Average percent parens in population: 0.285
Minimum age in population: 34.29723167419434
Maximum age in population: 38.80347287654877
Average age in population: 37.00104740267992
Median age in population: 37.08892375230789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9004946
--- Timings ---
Current time: 1559314416939 milliseconds
Total Time:          71.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 76.4%
Fitness Testing:     11.1 seconds, 15.5%
Report:               5.8 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_shove boolean_dup_times print_integer integer_inc in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ())
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_shove boolean_dup_times print_integer integer_inc in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ())
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (719 820 897 3 73 350 890 466 464 888)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (719 820 897 3 73 350 890 466 464 888)
Population mean number of perfect (error zero) cases: 5.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()) () ()))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 4.43
Median total errors in population: 4
Error averages by case: (0.281 0.18 0.103 0.997 0.927 0.65 0.11 0.534 0.536 0.112)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.595
Average program size in population (points): 42.233
Average percent parens in population: 0.321
Minimum age in population: 36.25076079368591
Maximum age in population: 40.34883850812912
Average age in population: 38.60535821777582
Median age in population: 38.70069134235382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 193
Genome diversity (% unique genomes):	 0.387
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.378
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9237504
--- Timings ---
Current time: 1559314419309 milliseconds
Total Time:          74.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 76.5%
Fitness Testing:     11.3 seconds, 15.3%
Report:               6.0 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yankdup integer_div integer_lte boolean_yankdup exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yankdup integer_div integer_lte boolean_yankdup exec_yank integer_dup_items boolean_dup_times print_integer integer_inc in3 in3 boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (653 180 512 38 140 734 910 512 397 36)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (653 180 512 38 140 734 910 512 397 36)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items boolean_dup_times print_integer integer_inc integer_sub boolean_stackdepth in1 in2 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor exec_y_when_autoconstructing (exec_flush) in3 boolean_stackdepth))))
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 30
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.888
Median total errors in population: 5
Error averages by case: (0.347 0.82 0.488 0.962 0.86 0.266 0.09 0.488 0.603 0.964)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.888
Average program size in population (points): 41.068
Average percent parens in population: 0.317
Minimum age in population: 37.25076079368591
Maximum age in population: 42.00153507292271
Average age in population: 40.2769931871891
Median age in population: 40.29652690142393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9512395
--- Timings ---
Current time: 1559314421779 milliseconds
Total Time:          76.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.6 seconds, 76.6%
Fitness Testing:     11.6 seconds, 15.2%
Report:               6.2 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times})
Lexicase best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) boolean_dup_times print_integer) integer_inc) in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_dup_times ()))) () ())
Lexicase best errors: [0 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times})
Zero cases best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) boolean_dup_times print_integer) integer_inc) in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_dup_times ()))) () ())
Zero cases best errors: [0 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (668 240 537 611 290 240 287 5 652 5)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (668 240 537 611 290 240 287 5 652 5)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) boolean_dup_times print_integer) integer_inc) in3 in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ())
Errors: [0 1 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 42
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.465
Median total errors in population: 6
Error averages by case: (0.332 0.76 0.463 0.389 0.71 0.76 0.713 0.995 0.348 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.349
Average program size in population (points): 39.224
Average percent parens in population: 0.271
Minimum age in population: 38.25076079368591
Maximum age in population: 43.41873223334551
Average age in population: 41.61210135820508
Median age in population: 41.69867739081383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 9785411
--- Timings ---
Current time: 1559314424259 milliseconds
Total Time:          79.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 76.8%
Fitness Testing:     11.9 seconds, 15.0%
Report:               6.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items integer_add print_integer exec_yankdup integer_div in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth integer_flush exec_rot () () ()))) () ())
Lexicase best errors: [1 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yankdup integer_div integer_lte integer_max exec_yank integer_dup_items integer_add print_integer exec_yankdup integer_div in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth integer_flush exec_rot () () ()))) () ())
Zero cases best errors: [1 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 420 134 252 357 420 893 419 208 758)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (134 420 134 252 357 420 893 419 208 758)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_rot) exec_yankdup exec_when (boolean_shove) integer_dup_times print_integer) integer_inc) integer_max in3 in1 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor integer_mult exec_flush) in3 boolean_stackdepth boolean_not integer_flush exec_rot () () ()))) () ())
Errors: [1 0 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.005
Median total errors in population: 5
Error averages by case: (0.866 0.58 0.866 0.748 0.643 0.58 0.107 0.581 0.792 0.242)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.164
Average program size in population (points): 41.36
Average percent parens in population: 0.318
Minimum age in population: 40.75924587249756
Maximum age in population: 45.14109791815281
Average age in population: 43.4679756382592
Median age in population: 43.50384090840816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9981064
--- Timings ---
Current time: 1559314426616 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 76.9%
Fitness Testing:     12.1 seconds, 14.9%
Report:               6.6 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 integer_min in4 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 integer_min in4 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 488 487 485 38 913 418 129 292 418)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (907 488 487 485 38 913 418 129 292 418)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 boolean_invert_first_then_and in4 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Errors: [0 0 0 0 1 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 40
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 5.425
Median total errors in population: 5
Error averages by case: (0.093 0.512 0.513 0.515 0.962 0.087 0.582 0.871 0.708 0.582)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.93
Average program size in population (points): 40.163
Average percent parens in population: 0.302
Minimum age in population: 42.67709942534566
Maximum age in population: 46.86355651542544
Average age in population: 45.04957219260931
Median age in population: 45.10853517148644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10231342
--- Timings ---
Current time: 1559314429358 milliseconds
Total Time:          84.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.9 seconds, 77.2%
Fitness Testing:     12.4 seconds, 14.7%
Report:               6.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 73                 
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 integer_min in4 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 integer_min in4 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (592 916 600 678 138 5 228 1 137 748)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (592 916 600 678 138 5 228 1 137 748)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) boolean_dup_times print_integer) integer_inc) in3 in3 in4 exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())))
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.957
Median total errors in population: 5
Error averages by case: (0.408 0.084 0.4 0.322 0.862 0.995 0.772 0.999 0.863 0.252)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.228
Average program size in population (points): 37.117
Average percent parens in population: 0.288
Minimum age in population: 44.06172177195549
Maximum age in population: 48.20309629011899
Average age in population: 46.53974007845297
Median age in population: 46.57698385976255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10448367
--- Timings ---
Current time: 1559314431726 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 77.3%
Fitness Testing:     12.6 seconds, 14.6%
Report:               6.9 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: 6                  
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 90                 
Correct output: 11                  | Program output: 85                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 71                 
Correct output: 3                   | Program output: 53                 
Correct output: 1                   | Program output: 92                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 84                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 54                 
Correct output: 24                  | Program output: 87                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: 62                 
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 100                
Correct output: -39                 | Program output: 30                 
Correct output: -94                 | Program output: 37                 
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: 75                 
Correct output: -80                 | Program output: 53                 
Correct output: -96                 | Program output: 27                 
Correct output: -78                 | Program output: 1                  
Correct output: -84                 | Program output: 68                 
Correct output: -39                 | Program output: 7                  
Correct output: -31                 | Program output: 78                 
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: 96                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: 1                  
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: 73                 
Correct output: -23                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: 57                 
Correct output: -86                 | Program output: 46                 
Correct output: -66                 | Program output: 59                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: 35                 
Correct output: -96                 | Program output: 19                 
Correct output: -76                 | Program output: 82                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: 92                 
Correct output: -92                 | Program output: 41                 
Correct output: -70                 | Program output: 55                 
Correct output: 44                  | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: 63                 
Correct output: 38                  | Program output: 50                 
Correct output: -79                 | Program output: 27                 
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 exec_shove (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 exec_shove (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 322 112 321 110 475 110 268 110 110)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (110 322 112 321 110 475 110 268 110 110)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 exec_shove (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()))) () ()))
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 40
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.952
Median total errors in population: 8
Error averages by case: (0.89 0.678 0.888 0.679 0.89 0.525 0.89 0.732 0.89 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.115
Average program size in population (points): 36.851
Average percent parens in population: 0.286
Minimum age in population: 45.06172177195549
Maximum age in population: 49.67243558727205
Average age in population: 48.10517078942573
Median age in population: 48.16635427181609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10680351
--- Timings ---
Current time: 1559314434212 milliseconds
Total Time:          88.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 77.4%
Fitness Testing:     12.8 seconds, 14.4%
Report:               7.1 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -2                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -29                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -23                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -5                 
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -42                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: 11                 
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -28                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -18                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 23                 
Correct output: -66                 | Program output: 79                 
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: 93                 
Correct output: -97                 | Program output: -60                
Correct output: -94                 | Program output: -52                
Correct output: -78                 | Program output: -69                
Correct output: -92                 | Program output: 26                 
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 in3 integer_rot exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor exec_dup (exec_rot () () ())))) () ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 in3 integer_rot exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor exec_dup (exec_rot () () ())))) () ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 691 8 50 926 182 184 160 188 913)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (573 691 8 50 926 182 184 160 188 913)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 in3 integer_rot exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor boolean_dup_items exec_flush) in3 boolean_stackdepth boolean_xor exec_dup (exec_rot () () ())))) () ()) () ()))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.125
Median total errors in population: 6
Error averages by case: (0.427 0.309 0.992 0.95 0.074 0.818 0.816 0.84 0.812 0.087)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.065
Average program size in population (points): 37.766
Average percent parens in population: 0.280
Minimum age in population: 47.31170044839382
Maximum age in population: 51.4594247713685
Average age in population: 49.80501497919206
Median age in population: 49.87172217760235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10915481
--- Timings ---
Current time: 1559314437033 milliseconds
Total Time:          91.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.2 seconds, 77.6%
Fitness Testing:     13.1 seconds, 14.3%
Report:               7.3 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 225
Test mean error for best: 0.22500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 873 416 292 127 681 681 55 455 681)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (277 873 416 292 127 681 681 55 455 681)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.462
Median total errors in population: 5
Error averages by case: (0.723 0.127 0.584 0.708 0.873 0.319 0.319 0.945 0.545 0.319)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.35
Average program size in population (points): 41.667
Average percent parens in population: 0.292
Minimum age in population: 49.33564827544615
Maximum age in population: 52.69241091154981
Average age in population: 51.71300615429087
Median age in population: 51.44370486261323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 283
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 11184030
--- Timings ---
Current time: 1559314439436 milliseconds
Total Time:          94.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 77.7%
Fitness Testing:     13.4 seconds, 14.2%
Report:               7.5 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 20                 
Correct output: 1                   | Program output: 62                 
Correct output: 43                  | Program output: 66                 
Correct output: 45                  | Program output: 76                 
Correct output: 11                  | Program output: 68                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 97                 
Correct output: 14                  | Program output: 90                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 75                 
Correct output: 31                  | Program output: 38                 
Correct output: 56                  | Program output: 92                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 38                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 25                 
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: 25                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 27                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 50                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 48                 
Correct output: -43                 | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 77                 
Correct output: -70                 | Program output: 9                  
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 57                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: 71                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 42                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 18                 
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 91                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 73                 
Correct output: 19                  | Program output: 90                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 48                 
Correct output: -79                 | Program output: -57                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div exec_do*range () exec_s_when_autoconstructing (integer_pop exec_yank print_integer in2 exec_do*while (in4) in4) (exec_eq print_integer in2 boolean_rot) (boolean_not)) integer_yankdup print_integer)
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div exec_do*range () exec_s_when_autoconstructing (integer_pop exec_yank print_integer in2 exec_do*while (in4) in4) (exec_eq print_integer in2 boolean_rot) (boolean_not)) integer_yankdup print_integer)
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (771 213 703 772 213 694 772 144 917 74)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (771 213 703 772 213 694 772 144 917 74)
Population mean number of perfect (error zero) cases: 5.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (integer_mult exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank boolean_invert_first_then_and in2 integer_gte in4) (in4) (exec_eq print_integer in2 boolean_rot) integer_dup) integer_yankdup print_integer)
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.727
Median total errors in population: 4
Error averages by case: (0.229 0.787 0.297 0.228 0.787 0.306 0.228 0.856 0.083 0.926)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.313
Average program size in population (points): 43.585
Average percent parens in population: 0.273
Minimum age in population: 50.41427049925551
Maximum age in population: 54.56805788708152
Average age in population: 53.69960579341085
Median age in population: 53.44370486261323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 492
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 501
Syntactic diversity (% unique Push programs):	 0.373
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 11445308
--- Timings ---
Current time: 1559314442005 milliseconds
Total Time:          96.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.2 seconds, 77.8%
Fitness Testing:     13.6 seconds, 14.1%
Report:               7.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 225
Test mean error for best: 0.22500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (integer_max integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (integer_max integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 739 335 296 556 556 336 739 695 296)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (313 739 335 296 556 556 336 739 695 296)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor) integer_flush exec_rot () () ()) () ()))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.139
Median total errors in population: 5
Error averages by case: (0.687 0.261 0.665 0.704 0.444 0.444 0.664 0.261 0.305 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.088
Average program size in population (points): 41.657
Average percent parens in population: 0.271
Minimum age in population: 51.41427049925551
Maximum age in population: 56.50588137484738
Average age in population: 54.9959916431577
Median age in population: 55.0983182254713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 11691735
--- Timings ---
Current time: 1559314444398 milliseconds
Total Time:          99.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.1 seconds, 77.8%
Fitness Testing:     13.9 seconds, 14.0%
Report:               8.0 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 225
Test mean error for best: 0.22500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty integer_lt exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (boolean_invert_first_then_and integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty integer_lt exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (boolean_invert_first_then_and integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ()) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 759 562 563 564 877 562 670 575 680)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (295 759 562 563 564 877 562 670 575 680)
Population mean number of perfect (error zero) cases: 6.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 3.893
Median total errors in population: 1
Error averages by case: (0.705 0.241 0.438 0.437 0.436 0.123 0.438 0.33 0.425 0.32)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.103
Average program size in population (points): 45.886
Average percent parens in population: 0.287
Minimum age in population: 52.41427049925551
Maximum age in population: 58.28135789887165
Average age in population: 56.63852400916618
Median age in population: 56.69784377579344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 193
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 11963140
--- Timings ---
Current time: 1559314446868 milliseconds
Total Time:         101.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.1 seconds, 77.9%
Fitness Testing:     14.2 seconds, 14.0%
Report:               8.2 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 225
Test mean error for best: 0.22500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 48                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 6                  
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 28                 
Correct output: -77                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer integer_stackdepth boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Lexicase best errors: [0 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer integer_stackdepth boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Zero cases best errors: [0 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (746 797 745 152 151 149 836 55 744 833)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (746 797 745 152 151 149 836 55 744 833)
Population mean number of perfect (error zero) cases: 5.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction -75} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot})
Best program: (exec_yank integer_sub -75 exec_empty boolean_rot exec_yank exec_dup_times (integer_empty exec_s_when_autoconstructing (in4 in3 in3 in1 in4 integer_min integer_min print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in1 exec_flush) in3 boolean_stackdepth boolean_xor integer_flush exec_rot () () ())) () ()))
Errors: [0 0 0 1 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.792
Median total errors in population: 4
Error averages by case: (0.254 0.203 0.255 0.848 0.849 0.851 0.164 0.945 0.256 0.167)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.232
Average program size in population (points): 43.073
Average percent parens in population: 0.266
Minimum age in population: 55.93266567937098
Maximum age in population: 59.81996225745388
Average age in population: 58.12953032237477
Median age in population: 58.19784377579344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 12269286
--- Timings ---
Current time: 1559314449384 milliseconds
Total Time:         104.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.1 seconds, 77.9%
Fitness Testing:     14.5 seconds, 13.9%
Report:               8.4 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -17                
Correct output: -59                 | Program output: 21                 
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 50                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 49                 
Correct output: 1                   | Program output: 25                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 70                 
Correct output: 68                  | Program output: 100                
Correct output: 17                  | Program output: 90                 
Correct output: 14                  | Program output: 27                 
Correct output: 22                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 39                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 17                 
Correct output: 31                  | Program output: 88                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 63                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: 80                 
Correct output: -50                 | Program output: -10                
Correct output: -45                 | Program output: -38                
Correct output: -85                 | Program output: 71                 
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: 43                 
Correct output: -84                 | Program output: -19                
Correct output: -39                 | Program output: 19                 
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -74                
Correct output: -96                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: -18                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: 84                 
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 8                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -50                
Correct output: -92                 | Program output: -48                
Correct output: -70                 | Program output: 37                 
Correct output: 44                  | Program output: 85                 
Correct output: -93                 | Program output: 45                 
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -28                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank exec_k (in2 exec_when (in3 in2 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in4 exec_flush) in3 boolean_stackdepth boolean_xor exec_dup (exec_rot () () ())))) () ())) ()) () ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank exec_k (in2 exec_when (in3 in2 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in4 exec_flush) in3 boolean_stackdepth boolean_xor exec_dup (exec_rot () () ())))) () ())) ()) () ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 860 524 178 620 522 620 394 861 620)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (325 860 524 178 620 522 620 394 861 620)
Population mean number of perfect (error zero) cases: 5.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot})
Best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer integer_dup_items exec_shove () integer_eq exec_k_when_autoconstructing (exec_eq) () integer_shove) integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank exec_k (in2 exec_when (in3 in2 exec_s (exec_do*times (print_integer boolean_flush boolean_flush exec_do*range (exec_y_when_autoconstructing (integer_mod boolean_xor in4 exec_flush) in3 boolean_stackdepth boolean_xor exec_dup (exec_rot () () ())))) () ())) ()) () ())))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 39
Size: 64
Percent parens: 0.391
--- Population Statistics ---
Average total errors in population: 4.476
Median total errors in population: 3
Error averages by case: (0.675 0.14 0.476 0.822 0.38 0.478 0.38 0.606 0.139 0.38)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.794
Average program size in population (points): 47.44
Average percent parens in population: 0.294
Minimum age in population: 57.01952762529254
Maximum age in population: 61.28856571529832
Average age in population: 59.59189432269047
Median age in population: 59.61613863426828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 12528317
--- Timings ---
Current time: 1559314451814 milliseconds
Total Time:         106.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.1 seconds, 78.0%
Fitness Testing:     14.8 seconds, 13.9%
Report:               8.6 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 66                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 27                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 48                 
Correct output: -43                 | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 57                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 90                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_do*while (exec_while (integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc) in3 in3 boolean_yank exec_eq integer_shove integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot) (boolean_not) () integer_yankdup) print_integer)
Lexicase best errors: [1 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_do*while (exec_while (integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc) in3 in3 boolean_yank exec_eq integer_shove integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot) (boolean_not) () integer_yankdup) print_integer)
Zero cases best errors: [1 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (701 10 1000 723 10 1000 835 724 724 815)
Population mean number of elite cases: 6.54
Count of perfect (error zero) individuals by case: (701 10 0 723 10 0 835 724 724 815)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 2, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_do*while (exec_while (integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc) in3 in3 boolean_yank exec_eq integer_shove integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank boolean_invert_first_then_and in2 exec_do*while (in4 integer_min exec_eq print_integer in2 boolean_rot)) (boolean_not) () integer_yankdup print_integer))
Errors: [1 0 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 41
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 5.458
Median total errors in population: 4
Error averages by case: (0.299 0.99 1.0 0.277 0.99 1.0 0.165 0.276 0.276 0.185)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 38.309
Average program size in population (points): 61.522
Average percent parens in population: 0.375
Minimum age in population: 58.890573728444
Maximum age in population: 63.07177375739411
Average age in population: 61.27305480478693
Median age in population: 61.33622991364427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 168
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 12842151
--- Timings ---
Current time: 1559314454394 milliseconds
Total Time:         109.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.1 seconds, 78.0%
Fitness Testing:     15.1 seconds, 13.8%
Report:               8.8 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 65                 
Correct output: 49                  | Program output: 71                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 66                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 65                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 36                 
Correct output: -92                 | Program output: -80                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -52                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -36                
Correct output: -94                 | Program output: 27                 
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -30                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 48                 
Correct output: -43                 | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: 4                  
Correct output: -73                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -33                
Correct output: -26                 | Program output: 57                 
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: 35                 
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -30                
Correct output: -42                 | Program output: 13                 
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -20                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: 34                 
Correct output: 19                  | Program output: 90                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_do*while (exec_while (integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc) in3 in3 boolean_yank exec_eq integer_shove integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot) (boolean_not) () integer_yankdup) print_integer)
Lexicase best errors: [1 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_do*while (exec_while (integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc) in3 in3 boolean_yank exec_eq integer_shove integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot) (boolean_not) () integer_yankdup) print_integer)
Zero cases best errors: [1 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 580 255 843 254 832 579 1000 568)
Population mean number of elite cases: 6.91
Count of perfect (error zero) individuals by case: (0 0 580 255 843 254 832 579 0 568)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_while (exec_while (integer_mult) exec_when (boolean_shove) print_integer boolean_yank exec_eq)) integer_shove integer_div exec_do*range (exec_s_when_autoconstructing (integer_pop exec_yank boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot) (boolean_not) () integer_yankdup) print_integer)
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.089
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.42 0.745 0.157 0.746 0.168 0.421 1.0 0.432)
Error minima by case: (1 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 32.81
Average program size in population (points): 47.156
Average percent parens in population: 0.289
Minimum age in population: 60.59909232885548
Maximum age in population: 64.77601997322563
Average age in population: 63.2807120393824
Median age in population: 63.40205307457609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 262
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 263
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 13119997
--- Timings ---
Current time: 1559314456810 milliseconds
Total Time:         111.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.0 seconds, 78.0%
Fitness Testing:     15.3 seconds, 13.8%
Report:               9.1 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 92                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 54                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 96                 
Correct output: 43                  | Program output: 46                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -10                
Correct output: -76                 | Program output: 66                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: 58                 
Correct output: -24                 | Program output: -20                
Correct output: -47                 | Program output: -3                 
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -78                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: 66                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: 50                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: 42                 
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: 13                 
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: 14                 
Correct output: -66                 | Program output: 3                  
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -88                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -78                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_do*while (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc) in3 in3 boolean_yank exec_eq) boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot in4 boolean_dup_times print_integer)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_do*while (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc) in3 in3 boolean_yank exec_eq) boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot in4 boolean_dup_times print_integer)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 564 508 510 713 508 508 382 502 912)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (329 564 508 510 713 508 508 382 502 912)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank exec_eq boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot integer_fromboolean integer_yankdup print_integer)
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 25
Size: 30
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 4.564
Median total errors in population: 4
Error averages by case: (0.671 0.436 0.492 0.49 0.287 0.492 0.492 0.618 0.498 0.088)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.133
Average program size in population (points): 41.377
Average percent parens in population: 0.249
Minimum age in population: 61.59909232885548
Maximum age in population: 66.63087540225979
Average age in population: 64.93950137311349
Median age in population: 64.89317131225403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 13383789
--- Timings ---
Current time: 1559314459243 milliseconds
Total Time:         114.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.0 seconds, 78.1%
Fitness Testing:     15.6 seconds, 13.7%
Report:               9.3 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank exec_eq boolean_invert_first_then_and in2 exec_do*while (boolean_yank exec_eq) boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank exec_eq boolean_invert_first_then_and in2 exec_do*while (boolean_yank exec_eq) boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 52 1000 1000 343 849 1000 52 633 52)
Population mean number of elite cases: 5.88
Count of perfect (error zero) individuals by case: (899 52 0 0 343 849 0 52 633 52)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 35
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.12
Median total errors in population: 7
Error averages by case: (0.101 0.948 1.0 1.0 0.657 0.151 1.0 0.948 0.367 0.948)
Error minima by case: (0 0 1 1 0 0 1 0 0 0)
Average genome size in population (length): 30.032
Average program size in population (points): 38.315
Average percent parens in population: 0.203
Minimum age in population: 63.94627403829872
Maximum age in population: 68.25557043904246
Average age in population: 66.95627938767242
Median age in population: 66.87192524117154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.387
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.359
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 13679247
--- Timings ---
Current time: 1559314461705 milliseconds
Total Time:         116.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.9 seconds, 78.1%
Fitness Testing:     15.9 seconds, 13.7%
Report:               9.5 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 200
Test mean error for best: 0.20000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 23                 
Correct output: 43                  | Program output: 55                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -82                
Correct output: -76                 | Program output: -32                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -47                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 73                 
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -50                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -20                
Correct output: -47                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -58                
Correct output: -68                 | Program output: -7                 
Correct output: 19                  | Program output: 62                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank exec_eq boolean_invert_first_then_and in2 exec_do*while (boolean_yank exec_eq) boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank exec_eq boolean_invert_first_then_and in2 exec_do*while (boolean_yank exec_eq) boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 888 846 887 885 845 847 3 867 845)
Population mean number of elite cases: 6.92
Count of perfect (error zero) individuals by case: (3 888 846 887 885 845 847 3 867 845)
Population mean number of perfect (error zero) cases: 6.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank exec_eq boolean_invert_first_then_and in2 exec_do*while (boolean_yank exec_eq) boolean_invert_first_then_and in2 exec_do*while (in4 integer_min) exec_eq print_integer exec_do*while (in4 integer_min) exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 40
Size: 47
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 3.084
Median total errors in population: 2
Error averages by case: (0.997 0.112 0.154 0.113 0.115 0.155 0.153 0.997 0.133 0.155)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.668
Average program size in population (points): 38.277
Average percent parens in population: 0.146
Minimum age in population: 66.87975329352275
Maximum age in population: 69.48290793247816
Average age in population: 68.16306909754083
Median age in population: 68.48290793247816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 301
Genome diversity (% unique genomes):	 0.4
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 320
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 13995832
--- Timings ---
Current time: 1559314464234 milliseconds
Total Time:         118.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.9 seconds, 78.1%
Fitness Testing:     16.3 seconds, 13.7%
Report:               9.7 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 42
Percent parens: 0.119
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 42
Percent parens: 0.119
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 302 302 555 302 883 302 926 889 302)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (302 302 302 555 302 883 302 926 889 302)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer})
Best program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 42
Percent parens: 0.119
--- Population Statistics ---
Average total errors in population: 4.935
Median total errors in population: 6
Error averages by case: (0.698 0.698 0.698 0.445 0.698 0.117 0.698 0.074 0.111 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.845
Average program size in population (points): 37.316
Average percent parens in population: 0.146
Minimum age in population: 67.87975329352275
Maximum age in population: 71.48290793247816
Average age in population: 69.77117225217978
Median age in population: 69.68133061300045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.401
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 14311700
--- Timings ---
Current time: 1559314466641 milliseconds
Total Time:         121.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.7 seconds, 78.1%
Fitness Testing:     16.6 seconds, 13.7%
Report:               9.9 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 45
Successful program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 42


Auto-simplifying with starting size: 42
step: 0
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 500
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1000
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1500
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2000
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2500
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3000
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3500
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4000
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4500
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 5000
program: (exec_do*range (exec_do*while (boolean_swap integer_mult)) exec_when (integer_max) boolean_dup_times print_integer integer_inc in3 in3 boolean_yank boolean_frominteger boolean_invert_first_then_and in1 exec_do*while (in4 integer_min) exec_eq boolean_frominteger boolean_invert_first_then_and in2 integer_min in4 integer_min exec_eq print_integer in2 boolean_rot integer_min exec_eq print_integer in2 boolean_rot boolean_not integer_yankdup print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -62                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -41                 | Program output: -41                
Correct output: 29                  | Program output: 29                 
Correct output: -85                 | Program output: -85                
Correct output: 44                  | Program output: 44                 
Correct output: 49                  | Program output: 49                 
Correct output: -38                 | Program output: -38                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 14                  | Program output: 14                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 56                  | Program output: 56                 
Correct output: 42                  | Program output: 42                 
Correct output: 43                  | Program output: 43                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -50                 | Program output: -50                
Correct output: -45                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -78                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -39                 | Program output: -39                
Correct output: -31                 | Program output: -31                
Correct output: -12                 | Program output: -12                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -73                 | Program output: -73                
Correct output: -82                 | Program output: -82                
Correct output: -57                 | Program output: -57                
Correct output: -26                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -57                 | Program output: -57                
Correct output: -47                 | Program output: -47                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -66                 | Program output: -66                
Correct output: -7                  | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: 44                  | Program output: 44                 
Correct output: -93                 | Program output: -93                
Correct output: -68                 | Program output: -68                
Correct output: 19                  | Program output: 19                 
Correct output: -54                 | Program output: -54                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -65                 | Program output: -65                
;;******************************
