Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[74 -79 -79 -79] -79] [[92 92 92 14] 14] [[2 40 2 2] 2] [[74 74 74 86] 74] [[93 -70 93 93] -70] [[-97 -97 13 -97] -97] [[-96 -96 2 -96] -96] [[-51 -30 -30 -30] -51] [[-57 52 -57 -57] -57] [[-10 -10 26 -10] -10] [(-59 -59 -59 -59) -59] [(9 9 9 9) 9] [(-25 -25 -25 -25) -25] [(59 59 59 59) 59] [(-15 -15 -15 -15) -15] [(72 51 56 50) 50] [(7 59 55 17) 7] [(21 64 61 72) 21] [(86 86 67 82) 67] [(29 23 88 56) 23] [(12 34 36 32) 12] [(19 37 16 94) 16] [(38 53 73 6) 6] [(65 57 42 46) 42] [(88 45 14 32) 14] [(33 28 12 63) 12] [(69 59 31 85) 31] [(10 28 6 3) 3] [(7 15 3 38) 3] [(88 26 62 73) 26] [(20 94 64 73) 20] [(18 12 57 41) 12] [(11 42 20 13) 11] [(97 39 73 8) 8] [(47 12 89 15) 12] [(75 64 31 -89) -89] [(68 35 82 -17) -17] [(-32 37 98 71) -32] [(-23 -86 -96 -58) -96] [(-18 -81 -89 93) -89] [(70 -61 -32 -60) -61] [(-9 26 86 18) -9] [(34 83 13 7) 7] [(29 -1 -25 -82) -82] [(6 11 73 87) 6] [(-72 -75 59 -28) -75] [(75 -90 -35 -55) -90] [(4 -84 -25 -21) -84] [(-12 -48 -29 9) -48] [(-59 -69 -94 65) -94] [(9 13 80 -61) -61] [(37 12 1 -32) -32] [(86 52 -28 -69) -69] [(6 51 5 58) 5] [(-11 -91 -81 -81) -91] [(91 90 46 -61) -61] [(65 84 -25 -7) -25] [(-69 -39 -65 46) -69] [(39 41 46 38) 38] [(9 -86 91 55) -86] [(60 51 26 -92) -92] [(22 -82 -58 29) -82] [(26 96 32 -70) -70] [(-77 47 66 -13) -77] [(-36 2 -68 -50) -68] [(-12 -65 -79 94) -79] [(59 39 -2 87) -2] [(62 -51 68 -15) -51] [(39 96 72 91) 39] [(29 -64 51 -99) -99] [(42 -29 55 41) -29] [(100 97 0 35) 0] [(-7 -79 -85 18) -85] [(95 64 63 -18) -18] [(-82 96 -1 29) -82] [(-27 75 -85 -89) -89] [(-14 -14 -3 87) -14] [(-59 -20 -94 25) -94] [(71 -21 -99 -35) -99] [(-99 56 -17 61) -99] [(-58 26 -52 -55) -58] [(-35 15 76 28) -35] [(37 -80 -43 -10) -80] [(-7 -43 40 48) -43] [(-12 -89 38 65) -89] [(41 -31 -28 -24) -31] [(-16 43 90 28) -16] [(76 -27 33 -28) -28] [(-43 -96 -92 5) -96] [(-76 -41 6 -11) -76] [(-83 76 81 30) -83] [(-24 32 67 81) -24] [(56 14 -100 -50) -100] [(43 80 -33 20) -33] [(93 46 31 60) 31])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[74 -79 -79 -79] -79]
Train Case:   6 | Input/Output: [[92 92 92 14] 14]
Train Case:   7 | Input/Output: [[2 40 2 2] 2]
Train Case:   8 | Input/Output: [[74 74 74 86] 74]
Train Case:   9 | Input/Output: [[93 -70 93 93] -70]
Train Case:  10 | Input/Output: [[-97 -97 13 -97] -97]
Train Case:  11 | Input/Output: [[-96 -96 2 -96] -96]
Train Case:  12 | Input/Output: [[-51 -30 -30 -30] -51]
Train Case:  13 | Input/Output: [[-57 52 -57 -57] -57]
Train Case:  14 | Input/Output: [[-10 -10 26 -10] -10]
Train Case:  15 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  16 | Input/Output: [(9 9 9 9) 9]
Train Case:  17 | Input/Output: [(-25 -25 -25 -25) -25]
Train Case:  18 | Input/Output: [(59 59 59 59) 59]
Train Case:  19 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  20 | Input/Output: [(72 51 56 50) 50]
Train Case:  21 | Input/Output: [(7 59 55 17) 7]
Train Case:  22 | Input/Output: [(21 64 61 72) 21]
Train Case:  23 | Input/Output: [(86 86 67 82) 67]
Train Case:  24 | Input/Output: [(29 23 88 56) 23]
Train Case:  25 | Input/Output: [(12 34 36 32) 12]
Train Case:  26 | Input/Output: [(19 37 16 94) 16]
Train Case:  27 | Input/Output: [(38 53 73 6) 6]
Train Case:  28 | Input/Output: [(65 57 42 46) 42]
Train Case:  29 | Input/Output: [(88 45 14 32) 14]
Train Case:  30 | Input/Output: [(33 28 12 63) 12]
Train Case:  31 | Input/Output: [(69 59 31 85) 31]
Train Case:  32 | Input/Output: [(10 28 6 3) 3]
Train Case:  33 | Input/Output: [(7 15 3 38) 3]
Train Case:  34 | Input/Output: [(88 26 62 73) 26]
Train Case:  35 | Input/Output: [(20 94 64 73) 20]
Train Case:  36 | Input/Output: [(18 12 57 41) 12]
Train Case:  37 | Input/Output: [(11 42 20 13) 11]
Train Case:  38 | Input/Output: [(97 39 73 8) 8]
Train Case:  39 | Input/Output: [(47 12 89 15) 12]
Train Case:  40 | Input/Output: [(75 64 31 -89) -89]
Train Case:  41 | Input/Output: [(68 35 82 -17) -17]
Train Case:  42 | Input/Output: [(-32 37 98 71) -32]
Train Case:  43 | Input/Output: [(-23 -86 -96 -58) -96]
Train Case:  44 | Input/Output: [(-18 -81 -89 93) -89]
Train Case:  45 | Input/Output: [(70 -61 -32 -60) -61]
Train Case:  46 | Input/Output: [(-9 26 86 18) -9]
Train Case:  47 | Input/Output: [(34 83 13 7) 7]
Train Case:  48 | Input/Output: [(29 -1 -25 -82) -82]
Train Case:  49 | Input/Output: [(6 11 73 87) 6]
Train Case:  50 | Input/Output: [(-72 -75 59 -28) -75]
Train Case:  51 | Input/Output: [(75 -90 -35 -55) -90]
Train Case:  52 | Input/Output: [(4 -84 -25 -21) -84]
Train Case:  53 | Input/Output: [(-12 -48 -29 9) -48]
Train Case:  54 | Input/Output: [(-59 -69 -94 65) -94]
Train Case:  55 | Input/Output: [(9 13 80 -61) -61]
Train Case:  56 | Input/Output: [(37 12 1 -32) -32]
Train Case:  57 | Input/Output: [(86 52 -28 -69) -69]
Train Case:  58 | Input/Output: [(6 51 5 58) 5]
Train Case:  59 | Input/Output: [(-11 -91 -81 -81) -91]
Train Case:  60 | Input/Output: [(91 90 46 -61) -61]
Train Case:  61 | Input/Output: [(65 84 -25 -7) -25]
Train Case:  62 | Input/Output: [(-69 -39 -65 46) -69]
Train Case:  63 | Input/Output: [(39 41 46 38) 38]
Train Case:  64 | Input/Output: [(9 -86 91 55) -86]
Train Case:  65 | Input/Output: [(60 51 26 -92) -92]
Train Case:  66 | Input/Output: [(22 -82 -58 29) -82]
Train Case:  67 | Input/Output: [(26 96 32 -70) -70]
Train Case:  68 | Input/Output: [(-77 47 66 -13) -77]
Train Case:  69 | Input/Output: [(-36 2 -68 -50) -68]
Train Case:  70 | Input/Output: [(-12 -65 -79 94) -79]
Train Case:  71 | Input/Output: [(59 39 -2 87) -2]
Train Case:  72 | Input/Output: [(62 -51 68 -15) -51]
Train Case:  73 | Input/Output: [(39 96 72 91) 39]
Train Case:  74 | Input/Output: [(29 -64 51 -99) -99]
Train Case:  75 | Input/Output: [(42 -29 55 41) -29]
Train Case:  76 | Input/Output: [(100 97 0 35) 0]
Train Case:  77 | Input/Output: [(-7 -79 -85 18) -85]
Train Case:  78 | Input/Output: [(95 64 63 -18) -18]
Train Case:  79 | Input/Output: [(-82 96 -1 29) -82]
Train Case:  80 | Input/Output: [(-27 75 -85 -89) -89]
Train Case:  81 | Input/Output: [(-14 -14 -3 87) -14]
Train Case:  82 | Input/Output: [(-59 -20 -94 25) -94]
Train Case:  83 | Input/Output: [(71 -21 -99 -35) -99]
Train Case:  84 | Input/Output: [(-99 56 -17 61) -99]
Train Case:  85 | Input/Output: [(-58 26 -52 -55) -58]
Train Case:  86 | Input/Output: [(-35 15 76 28) -35]
Train Case:  87 | Input/Output: [(37 -80 -43 -10) -80]
Train Case:  88 | Input/Output: [(-7 -43 40 48) -43]
Train Case:  89 | Input/Output: [(-12 -89 38 65) -89]
Train Case:  90 | Input/Output: [(41 -31 -28 -24) -31]
Train Case:  91 | Input/Output: [(-16 43 90 28) -16]
Train Case:  92 | Input/Output: [(76 -27 33 -28) -28]
Train Case:  93 | Input/Output: [(-43 -96 -92 5) -96]
Train Case:  94 | Input/Output: [(-76 -41 6 -11) -76]
Train Case:  95 | Input/Output: [(-83 76 81 30) -83]
Train Case:  96 | Input/Output: [(-24 32 67 81) -24]
Train Case:  97 | Input/Output: [(56 14 -100 -50) -100]
Train Case:  98 | Input/Output: [(43 80 -33 20) -33]
Train Case:  99 | Input/Output: [(93 46 31 60) 31]
Test Case:   0 | Input/Output: [[15 15 15 88] 15]
Test Case:   1 | Input/Output: [[81 81 81 -85] -85]
Test Case:   2 | Input/Output: [[-3 36 -3 -3] -3]
Test Case:   3 | Input/Output: [[92 92 18 92] 18]
Test Case:   4 | Input/Output: [[-58 -58 -58 -22] -58]
Test Case:   5 | Input/Output: [[68 68 68 -10] -10]
Test Case:   6 | Input/Output: [[-99 -99 -99 94] -99]
Test Case:   7 | Input/Output: [[40 40 40 88] 40]
Test Case:   8 | Input/Output: [[100 100 52 100] 52]
Test Case:   9 | Input/Output: [[13 -64 13 13] -64]
Test Case:  10 | Input/Output: [[15 15 48 15] 15]
Test Case:  11 | Input/Output: [[-23 -42 -23 -23] -42]
Test Case:  12 | Input/Output: [[52 77 52 52] 52]
Test Case:  13 | Input/Output: [[33 33 33 -8] -8]
Test Case:  14 | Input/Output: [[100 100 100 68] 68]
Test Case:  15 | Input/Output: [[-31 67 -31 -31] -31]
Test Case:  16 | Input/Output: [[17 17 17 49] 17]
Test Case:  17 | Input/Output: [[-14 -14 -14 -5] -14]
Test Case:  18 | Input/Output: [[74 -2 -2 -2] -2]
Test Case:  19 | Input/Output: [[-23 -23 -25 -23] -25]
Test Case:  20 | Input/Output: [[-42 -82 -82 -82] -82]
Test Case:  21 | Input/Output: [[-34 -63 -34 -34] -63]
Test Case:  22 | Input/Output: [[-18 -18 -38 -18] -38]
Test Case:  23 | Input/Output: [[17 8 8 8] 8]
Test Case:  24 | Input/Output: [[24 -31 -31 -31] -31]
Test Case:  25 | Input/Output: [[-20 -20 -20 -43] -43]
Test Case:  26 | Input/Output: [[-80 -80 -80 13] -80]
Test Case:  27 | Input/Output: [[93 -20 -20 -20] -20]
Test Case:  28 | Input/Output: [[-57 -57 -57 -23] -57]
Test Case:  29 | Input/Output: [[63 63 57 63] 57]
Test Case:  30 | Input/Output: [[30 30 30 -6] -6]
Test Case:  31 | Input/Output: [[70 70 68 70] 68]
Test Case:  32 | Input/Output: [[16 22 22 22] 16]
Test Case:  33 | Input/Output: [[75 75 29 75] 29]
Test Case:  34 | Input/Output: [[79 79 79 1] 1]
Test Case:  35 | Input/Output: [[62 62 62 -23] -23]
Test Case:  36 | Input/Output: [[-52 -52 -52 23] -52]
Test Case:  37 | Input/Output: [[19 20 19 19] 19]
Test Case:  38 | Input/Output: [[47 36 36 36] 36]
Test Case:  39 | Input/Output: [[-29 -29 -29 -68] -68]
Test Case:  40 | Input/Output: [[-21 -89 -21 -21] -89]
Test Case:  41 | Input/Output: [[31 -5 31 31] -5]
Test Case:  42 | Input/Output: [[13 56 13 13] 13]
Test Case:  43 | Input/Output: [[38 38 33 38] 33]
Test Case:  44 | Input/Output: [[-95 -18 -95 -95] -95]
Test Case:  45 | Input/Output: [[30 -72 30 30] -72]
Test Case:  46 | Input/Output: [[-36 -36 67 -36] -36]
Test Case:  47 | Input/Output: [[-61 -64 -61 -61] -64]
Test Case:  48 | Input/Output: [[-92 -92 -92 -34] -92]
Test Case:  49 | Input/Output: [[53 53 53 53] 53]
Test Case:  50 | Input/Output: [[4 4 -65 4] -65]
Test Case:  51 | Input/Output: [[22 47 47 47] 22]
Test Case:  52 | Input/Output: [[-6 29 29 29] -6]
Test Case:  53 | Input/Output: [[-18 -18 45 -18] -18]
Test Case:  54 | Input/Output: [[-40 -29 -29 -29] -40]
Test Case:  55 | Input/Output: [[19 91 91 91] 19]
Test Case:  56 | Input/Output: [[-19 -19 -19 -57] -57]
Test Case:  57 | Input/Output: [[-47 -47 58 -47] -47]
Test Case:  58 | Input/Output: [[100 37 37 37] 37]
Test Case:  59 | Input/Output: [[-40 -63 -63 -63] -63]
Test Case:  60 | Input/Output: [[-39 -39 -39 97] -39]
Test Case:  61 | Input/Output: [[56 -72 56 56] -72]
Test Case:  62 | Input/Output: [[16 16 67 16] 16]
Test Case:  63 | Input/Output: [[71 72 72 72] 71]
Test Case:  64 | Input/Output: [[-75 77 77 77] -75]
Test Case:  65 | Input/Output: [[-11 -11 45 -11] -11]
Test Case:  66 | Input/Output: [[86 86 86 -67] -67]
Test Case:  67 | Input/Output: [[-94 -93 -93 -93] -94]
Test Case:  68 | Input/Output: [[-79 -79 -79 -23] -79]
Test Case:  69 | Input/Output: [[-53 64 -53 -53] -53]
Test Case:  70 | Input/Output: [[21 21 21 16] 16]
Test Case:  71 | Input/Output: [[-33 -33 -33 97] -33]
Test Case:  72 | Input/Output: [[30 -49 30 30] -49]
Test Case:  73 | Input/Output: [[97 97 97 -94] -94]
Test Case:  74 | Input/Output: [[57 0 0 0] 0]
Test Case:  75 | Input/Output: [[55 55 59 55] 55]
Test Case:  76 | Input/Output: [[52 52 97 52] 52]
Test Case:  77 | Input/Output: [[-79 -79 61 -79] -79]
Test Case:  78 | Input/Output: [[42 47 42 42] 42]
Test Case:  79 | Input/Output: [[-23 -23 54 -23] -23]
Test Case:  80 | Input/Output: [[-99 -97 -97 -97] -99]
Test Case:  81 | Input/Output: [[-19 91 -19 -19] -19]
Test Case:  82 | Input/Output: [[-51 75 75 75] -51]
Test Case:  83 | Input/Output: [[34 45 34 34] 34]
Test Case:  84 | Input/Output: [[-18 55 55 55] -18]
Test Case:  85 | Input/Output: [[89 -77 -77 -77] -77]
Test Case:  86 | Input/Output: [[33 -72 33 33] -72]
Test Case:  87 | Input/Output: [[62 62 62 72] 62]
Test Case:  88 | Input/Output: [[-65 -65 -65 -12] -65]
Test Case:  89 | Input/Output: [[-20 -20 90 -20] -20]
Test Case:  90 | Input/Output: [[-12 -71 -71 -71] -71]
Test Case:  91 | Input/Output: [[-41 51 -41 -41] -41]
Test Case:  92 | Input/Output: [[-62 -70 -70 -70] -70]
Test Case:  93 | Input/Output: [[72 72 72 67] 67]
Test Case:  94 | Input/Output: [[71 71 8 71] 8]
Test Case:  95 | Input/Output: [[-40 -96 -40 -40] -96]
Test Case:  96 | Input/Output: [[-35 -16 -16 -16] -35]
Test Case:  97 | Input/Output: [[-67 75 75 75] -67]
Test Case:  98 | Input/Output: [[25 25 25 42] 25]
Test Case:  99 | Input/Output: [[15 15 31 15] 15]
Test Case: 100 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 101 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 102 | Input/Output: [(83 83 83 83) 83]
Test Case: 103 | Input/Output: [(38 38 38 38) 38]
Test Case: 104 | Input/Output: [(98 98 98 98) 98]
Test Case: 105 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 106 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 107 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 108 | Input/Output: [(27 27 27 27) 27]
Test Case: 109 | Input/Output: [(97 97 97 97) 97]
Test Case: 110 | Input/Output: [(49 49 49 49) 49]
Test Case: 111 | Input/Output: [(20 20 20 20) 20]
Test Case: 112 | Input/Output: [(46 46 46 46) 46]
Test Case: 113 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 114 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 115 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 116 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 117 | Input/Output: [(3 3 3 3) 3]
Test Case: 118 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 119 | Input/Output: [(45 45 45 45) 45]
Test Case: 120 | Input/Output: [(12 12 12 12) 12]
Test Case: 121 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 122 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 123 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 124 | Input/Output: [(24 24 24 24) 24]
Test Case: 125 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 126 | Input/Output: [(56 56 56 56) 56]
Test Case: 127 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 128 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 129 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 130 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 131 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 132 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 133 | Input/Output: [(43 43 43 43) 43]
Test Case: 134 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 135 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 136 | Input/Output: [(56 56 56 56) 56]
Test Case: 137 | Input/Output: [(70 70 70 70) 70]
Test Case: 138 | Input/Output: [(14 14 14 14) 14]
Test Case: 139 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 140 | Input/Output: [(17 17 17 17) 17]
Test Case: 141 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 142 | Input/Output: [(80 80 80 80) 80]
Test Case: 143 | Input/Output: [(42 42 42 42) 42]
Test Case: 144 | Input/Output: [(10 10 10 10) 10]
Test Case: 145 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 146 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 147 | Input/Output: [(100 100 100 100) 100]
Test Case: 148 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 149 | Input/Output: [(33 33 33 33) 33]
Test Case: 150 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 151 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 152 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 153 | Input/Output: [(44 44 44 44) 44]
Test Case: 154 | Input/Output: [(91 91 91 91) 91]
Test Case: 155 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 156 | Input/Output: [(65 65 65 65) 65]
Test Case: 157 | Input/Output: [(80 80 80 80) 80]
Test Case: 158 | Input/Output: [(64 64 64 64) 64]
Test Case: 159 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 160 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 161 | Input/Output: [(19 19 19 19) 19]
Test Case: 162 | Input/Output: [(38 38 38 38) 38]
Test Case: 163 | Input/Output: [(60 60 60 60) 60]
Test Case: 164 | Input/Output: [(25 25 25 25) 25]
Test Case: 165 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 166 | Input/Output: [(20 20 20 20) 20]
Test Case: 167 | Input/Output: [(27 27 27 27) 27]
Test Case: 168 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 169 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 170 | Input/Output: [(78 78 78 78) 78]
Test Case: 171 | Input/Output: [(89 89 89 89) 89]
Test Case: 172 | Input/Output: [(9 9 9 9) 9]
Test Case: 173 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 174 | Input/Output: [(61 61 61 61) 61]
Test Case: 175 | Input/Output: [(30 30 30 30) 30]
Test Case: 176 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 177 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 178 | Input/Output: [(50 50 50 50) 50]
Test Case: 179 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 180 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 181 | Input/Output: [(13 13 13 13) 13]
Test Case: 182 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 183 | Input/Output: [(82 82 82 82) 82]
Test Case: 184 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 185 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 186 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 187 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 188 | Input/Output: [(93 93 93 93) 93]
Test Case: 189 | Input/Output: [(60 60 60 60) 60]
Test Case: 190 | Input/Output: [(82 82 82 82) 82]
Test Case: 191 | Input/Output: [(99 99 99 99) 99]
Test Case: 192 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 193 | Input/Output: [(75 75 75 75) 75]
Test Case: 194 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 195 | Input/Output: [(29 29 29 29) 29]
Test Case: 196 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 197 | Input/Output: [(73 73 73 73) 73]
Test Case: 198 | Input/Output: [(49 49 49 49) 49]
Test Case: 199 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 200 | Input/Output: [(81 20 18 100) 18]
Test Case: 201 | Input/Output: [(54 0 27 16) 0]
Test Case: 202 | Input/Output: [(47 83 17 73) 17]
Test Case: 203 | Input/Output: [(43 26 49 15) 15]
Test Case: 204 | Input/Output: [(24 61 78 95) 24]
Test Case: 205 | Input/Output: [(50 82 36 45) 36]
Test Case: 206 | Input/Output: [(17 85 47 65) 17]
Test Case: 207 | Input/Output: [(11 38 11 77) 11]
Test Case: 208 | Input/Output: [(41 56 40 45) 40]
Test Case: 209 | Input/Output: [(35 91 70 94) 35]
Test Case: 210 | Input/Output: [(24 91 83 59) 24]
Test Case: 211 | Input/Output: [(76 39 81 96) 39]
Test Case: 212 | Input/Output: [(1 59 32 46) 1]
Test Case: 213 | Input/Output: [(11 36 28 45) 11]
Test Case: 214 | Input/Output: [(76 67 62 5) 5]
Test Case: 215 | Input/Output: [(95 49 8 27) 8]
Test Case: 216 | Input/Output: [(96 50 39 82) 39]
Test Case: 217 | Input/Output: [(40 22 85 90) 22]
Test Case: 218 | Input/Output: [(5 27 26 42) 5]
Test Case: 219 | Input/Output: [(21 62 9 77) 9]
Test Case: 220 | Input/Output: [(57 9 97 66) 9]
Test Case: 221 | Input/Output: [(1 34 50 2) 1]
Test Case: 222 | Input/Output: [(64 19 62 71) 19]
Test Case: 223 | Input/Output: [(60 13 94 19) 13]
Test Case: 224 | Input/Output: [(34 91 12 1) 1]
Test Case: 225 | Input/Output: [(51 2 52 5) 2]
Test Case: 226 | Input/Output: [(97 20 14 53) 14]
Test Case: 227 | Input/Output: [(0 51 73 87) 0]
Test Case: 228 | Input/Output: [(8 81 38 61) 8]
Test Case: 229 | Input/Output: [(19 88 19 90) 19]
Test Case: 230 | Input/Output: [(46 22 3 90) 3]
Test Case: 231 | Input/Output: [(91 3 75 87) 3]
Test Case: 232 | Input/Output: [(25 75 54 4) 4]
Test Case: 233 | Input/Output: [(4 69 52 31) 4]
Test Case: 234 | Input/Output: [(88 62 40 91) 40]
Test Case: 235 | Input/Output: [(81 93 82 52) 52]
Test Case: 236 | Input/Output: [(93 11 67 20) 11]
Test Case: 237 | Input/Output: [(52 51 63 53) 51]
Test Case: 238 | Input/Output: [(3 13 51 29) 3]
Test Case: 239 | Input/Output: [(7 25 48 69) 7]
Test Case: 240 | Input/Output: [(85 2 61 91) 2]
Test Case: 241 | Input/Output: [(2 4 61 49) 2]
Test Case: 242 | Input/Output: [(84 14 24 10) 10]
Test Case: 243 | Input/Output: [(74 92 18 96) 18]
Test Case: 244 | Input/Output: [(74 32 30 98) 30]
Test Case: 245 | Input/Output: [(98 76 99 52) 52]
Test Case: 246 | Input/Output: [(70 35 13 52) 13]
Test Case: 247 | Input/Output: [(26 11 98 31) 11]
Test Case: 248 | Input/Output: [(39 48 31 92) 31]
Test Case: 249 | Input/Output: [(81 63 36 89) 36]
Test Case: 250 | Input/Output: [(64 3 7 90) 3]
Test Case: 251 | Input/Output: [(50 18 23 11) 11]
Test Case: 252 | Input/Output: [(66 44 50 34) 34]
Test Case: 253 | Input/Output: [(11 92 86 73) 11]
Test Case: 254 | Input/Output: [(1 82 57 34) 1]
Test Case: 255 | Input/Output: [(16 73 44 63) 16]
Test Case: 256 | Input/Output: [(79 97 28 49) 28]
Test Case: 257 | Input/Output: [(92 74 78 29) 29]
Test Case: 258 | Input/Output: [(72 24 29 65) 24]
Test Case: 259 | Input/Output: [(8 76 17 36) 8]
Test Case: 260 | Input/Output: [(96 16 18 86) 16]
Test Case: 261 | Input/Output: [(49 32 51 54) 32]
Test Case: 262 | Input/Output: [(99 11 85 27) 11]
Test Case: 263 | Input/Output: [(47 4 63 51) 4]
Test Case: 264 | Input/Output: [(80 49 99 57) 49]
Test Case: 265 | Input/Output: [(13 11 51 2) 2]
Test Case: 266 | Input/Output: [(86 53 50 71) 50]
Test Case: 267 | Input/Output: [(46 40 36 35) 35]
Test Case: 268 | Input/Output: [(74 13 87 33) 13]
Test Case: 269 | Input/Output: [(69 70 27 13) 13]
Test Case: 270 | Input/Output: [(64 0 53 70) 0]
Test Case: 271 | Input/Output: [(65 83 58 85) 58]
Test Case: 272 | Input/Output: [(42 39 71 59) 39]
Test Case: 273 | Input/Output: [(18 77 34 73) 18]
Test Case: 274 | Input/Output: [(47 14 78 68) 14]
Test Case: 275 | Input/Output: [(42 31 73 30) 30]
Test Case: 276 | Input/Output: [(60 92 38 92) 38]
Test Case: 277 | Input/Output: [(52 10 9 42) 9]
Test Case: 278 | Input/Output: [(58 2 17 11) 2]
Test Case: 279 | Input/Output: [(17 3 74 55) 3]
Test Case: 280 | Input/Output: [(38 63 29 9) 9]
Test Case: 281 | Input/Output: [(41 20 37 16) 16]
Test Case: 282 | Input/Output: [(74 77 53 14) 14]
Test Case: 283 | Input/Output: [(81 95 76 32) 32]
Test Case: 284 | Input/Output: [(71 38 13 96) 13]
Test Case: 285 | Input/Output: [(34 45 21 58) 21]
Test Case: 286 | Input/Output: [(57 93 17 73) 17]
Test Case: 287 | Input/Output: [(35 56 10 43) 10]
Test Case: 288 | Input/Output: [(64 25 94 82) 25]
Test Case: 289 | Input/Output: [(88 10 64 13) 10]
Test Case: 290 | Input/Output: [(49 11 53 92) 11]
Test Case: 291 | Input/Output: [(63 71 21 45) 21]
Test Case: 292 | Input/Output: [(14 36 30 99) 14]
Test Case: 293 | Input/Output: [(42 2 44 7) 2]
Test Case: 294 | Input/Output: [(72 11 12 76) 11]
Test Case: 295 | Input/Output: [(2 62 56 26) 2]
Test Case: 296 | Input/Output: [(35 8 90 84) 8]
Test Case: 297 | Input/Output: [(59 89 4 99) 4]
Test Case: 298 | Input/Output: [(95 3 86 34) 3]
Test Case: 299 | Input/Output: [(26 76 23 17) 17]
Test Case: 300 | Input/Output: [(84 97 50 4) 4]
Test Case: 301 | Input/Output: [(85 72 88 23) 23]
Test Case: 302 | Input/Output: [(18 79 21 70) 18]
Test Case: 303 | Input/Output: [(73 31 58 20) 20]
Test Case: 304 | Input/Output: [(25 48 96 65) 25]
Test Case: 305 | Input/Output: [(63 18 46 17) 17]
Test Case: 306 | Input/Output: [(25 78 54 37) 25]
Test Case: 307 | Input/Output: [(1 13 47 13) 1]
Test Case: 308 | Input/Output: [(78 41 100 95) 41]
Test Case: 309 | Input/Output: [(36 63 29 68) 29]
Test Case: 310 | Input/Output: [(18 25 22 4) 4]
Test Case: 311 | Input/Output: [(66 59 52 9) 9]
Test Case: 312 | Input/Output: [(95 92 91 45) 45]
Test Case: 313 | Input/Output: [(16 39 91 8) 8]
Test Case: 314 | Input/Output: [(53 80 88 27) 27]
Test Case: 315 | Input/Output: [(56 69 95 83) 56]
Test Case: 316 | Input/Output: [(29 20 75 60) 20]
Test Case: 317 | Input/Output: [(55 98 80 44) 44]
Test Case: 318 | Input/Output: [(91 7 37 9) 7]
Test Case: 319 | Input/Output: [(50 92 29 34) 29]
Test Case: 320 | Input/Output: [(77 84 75 67) 67]
Test Case: 321 | Input/Output: [(35 16 83 51) 16]
Test Case: 322 | Input/Output: [(12 88 22 16) 12]
Test Case: 323 | Input/Output: [(30 29 73 40) 29]
Test Case: 324 | Input/Output: [(53 79 76 91) 53]
Test Case: 325 | Input/Output: [(33 86 14 13) 13]
Test Case: 326 | Input/Output: [(79 76 61 94) 61]
Test Case: 327 | Input/Output: [(14 41 53 10) 10]
Test Case: 328 | Input/Output: [(42 41 35 35) 35]
Test Case: 329 | Input/Output: [(79 21 39 91) 21]
Test Case: 330 | Input/Output: [(84 17 31 99) 17]
Test Case: 331 | Input/Output: [(99 94 89 20) 20]
Test Case: 332 | Input/Output: [(16 14 28 71) 14]
Test Case: 333 | Input/Output: [(33 7 4 59) 4]
Test Case: 334 | Input/Output: [(44 83 13 64) 13]
Test Case: 335 | Input/Output: [(53 47 66 23) 23]
Test Case: 336 | Input/Output: [(31 10 8 34) 8]
Test Case: 337 | Input/Output: [(69 37 82 34) 34]
Test Case: 338 | Input/Output: [(88 79 46 33) 33]
Test Case: 339 | Input/Output: [(96 48 90 71) 48]
Test Case: 340 | Input/Output: [(62 36 35 77) 35]
Test Case: 341 | Input/Output: [(59 32 32 6) 6]
Test Case: 342 | Input/Output: [(11 60 54 68) 11]
Test Case: 343 | Input/Output: [(98 79 99 48) 48]
Test Case: 344 | Input/Output: [(33 35 90 7) 7]
Test Case: 345 | Input/Output: [(14 66 56 78) 14]
Test Case: 346 | Input/Output: [(27 68 31 50) 27]
Test Case: 347 | Input/Output: [(44 62 49 41) 41]
Test Case: 348 | Input/Output: [(30 49 94 31) 30]
Test Case: 349 | Input/Output: [(17 23 1 100) 1]
Test Case: 350 | Input/Output: [(28 4 6 38) 4]
Test Case: 351 | Input/Output: [(88 53 60 7) 7]
Test Case: 352 | Input/Output: [(69 20 77 32) 20]
Test Case: 353 | Input/Output: [(2 46 47 61) 2]
Test Case: 354 | Input/Output: [(7 99 92 26) 7]
Test Case: 355 | Input/Output: [(97 60 23 55) 23]
Test Case: 356 | Input/Output: [(94 8 60 95) 8]
Test Case: 357 | Input/Output: [(71 5 39 100) 5]
Test Case: 358 | Input/Output: [(38 59 68 82) 38]
Test Case: 359 | Input/Output: [(98 0 56 11) 0]
Test Case: 360 | Input/Output: [(50 55 8 65) 8]
Test Case: 361 | Input/Output: [(51 19 55 70) 19]
Test Case: 362 | Input/Output: [(87 10 65 77) 10]
Test Case: 363 | Input/Output: [(36 19 66 100) 19]
Test Case: 364 | Input/Output: [(92 45 45 73) 45]
Test Case: 365 | Input/Output: [(55 36 84 19) 19]
Test Case: 366 | Input/Output: [(65 97 76 85) 65]
Test Case: 367 | Input/Output: [(74 53 27 58) 27]
Test Case: 368 | Input/Output: [(64 40 31 52) 31]
Test Case: 369 | Input/Output: [(42 5 11 78) 5]
Test Case: 370 | Input/Output: [(52 40 43 14) 14]
Test Case: 371 | Input/Output: [(22 71 98 96) 22]
Test Case: 372 | Input/Output: [(75 37 20 37) 20]
Test Case: 373 | Input/Output: [(11 37 61 91) 11]
Test Case: 374 | Input/Output: [(93 51 43 9) 9]
Test Case: 375 | Input/Output: [(96 86 57 19) 19]
Test Case: 376 | Input/Output: [(48 24 95 18) 18]
Test Case: 377 | Input/Output: [(84 99 49 90) 49]
Test Case: 378 | Input/Output: [(51 15 84 36) 15]
Test Case: 379 | Input/Output: [(26 19 72 37) 19]
Test Case: 380 | Input/Output: [(53 31 95 83) 31]
Test Case: 381 | Input/Output: [(57 18 58 93) 18]
Test Case: 382 | Input/Output: [(97 53 24 13) 13]
Test Case: 383 | Input/Output: [(13 36 27 73) 13]
Test Case: 384 | Input/Output: [(9 68 23 31) 9]
Test Case: 385 | Input/Output: [(9 84 70 64) 9]
Test Case: 386 | Input/Output: [(4 78 6 53) 4]
Test Case: 387 | Input/Output: [(26 30 99 22) 22]
Test Case: 388 | Input/Output: [(80 15 7 91) 7]
Test Case: 389 | Input/Output: [(47 88 76 78) 47]
Test Case: 390 | Input/Output: [(84 16 65 95) 16]
Test Case: 391 | Input/Output: [(25 12 29 2) 2]
Test Case: 392 | Input/Output: [(72 29 48 97) 29]
Test Case: 393 | Input/Output: [(21 79 80 17) 17]
Test Case: 394 | Input/Output: [(88 81 38 93) 38]
Test Case: 395 | Input/Output: [(40 19 34 23) 19]
Test Case: 396 | Input/Output: [(84 92 54 100) 54]
Test Case: 397 | Input/Output: [(37 21 5 48) 5]
Test Case: 398 | Input/Output: [(70 63 31 79) 31]
Test Case: 399 | Input/Output: [(70 86 45 1) 1]
Test Case: 400 | Input/Output: [(-77 -5 -91 -97) -97]
Test Case: 401 | Input/Output: [(-25 99 43 -25) -25]
Test Case: 402 | Input/Output: [(-28 39 82 -70) -70]
Test Case: 403 | Input/Output: [(-1 -6 33 79) -6]
Test Case: 404 | Input/Output: [(-86 -1 4 86) -86]
Test Case: 405 | Input/Output: [(-67 74 -57 -90) -90]
Test Case: 406 | Input/Output: [(-74 58 -87 -82) -87]
Test Case: 407 | Input/Output: [(-44 30 -18 -64) -64]
Test Case: 408 | Input/Output: [(27 59 -68 -86) -86]
Test Case: 409 | Input/Output: [(87 5 -57 -60) -60]
Test Case: 410 | Input/Output: [(-85 -98 -90 -54) -98]
Test Case: 411 | Input/Output: [(52 -9 77 88) -9]
Test Case: 412 | Input/Output: [(-45 37 -28 84) -45]
Test Case: 413 | Input/Output: [(-67 26 98 -31) -67]
Test Case: 414 | Input/Output: [(-28 -92 -79 98) -92]
Test Case: 415 | Input/Output: [(-29 74 -13 -9) -29]
Test Case: 416 | Input/Output: [(-65 -27 -32 7) -65]
Test Case: 417 | Input/Output: [(32 99 22 31) 22]
Test Case: 418 | Input/Output: [(83 -8 -59 -7) -59]
Test Case: 419 | Input/Output: [(84 12 69 46) 12]
Test Case: 420 | Input/Output: [(-79 50 80 73) -79]
Test Case: 421 | Input/Output: [(-74 85 -44 57) -74]
Test Case: 422 | Input/Output: [(-65 -25 -41 48) -65]
Test Case: 423 | Input/Output: [(75 69 72 2) 2]
Test Case: 424 | Input/Output: [(-23 -50 -77 57) -77]
Test Case: 425 | Input/Output: [(-49 -62 -41 -4) -62]
Test Case: 426 | Input/Output: [(1 -32 38 -18) -32]
Test Case: 427 | Input/Output: [(6 37 -3 -1) -3]
Test Case: 428 | Input/Output: [(-100 14 -51 20) -100]
Test Case: 429 | Input/Output: [(-11 -25 9 82) -25]
Test Case: 430 | Input/Output: [(-62 -67 91 -64) -67]
Test Case: 431 | Input/Output: [(45 -82 30 4) -82]
Test Case: 432 | Input/Output: [(65 71 65 37) 37]
Test Case: 433 | Input/Output: [(59 -60 100 69) -60]
Test Case: 434 | Input/Output: [(66 -93 -2 42) -93]
Test Case: 435 | Input/Output: [(68 9 10 68) 9]
Test Case: 436 | Input/Output: [(-30 -57 26 -62) -62]
Test Case: 437 | Input/Output: [(49 -72 69 -2) -72]
Test Case: 438 | Input/Output: [(33 -40 2 -24) -40]
Test Case: 439 | Input/Output: [(62 19 48 -59) -59]
Test Case: 440 | Input/Output: [(-45 83 47 20) -45]
Test Case: 441 | Input/Output: [(-63 59 -6 43) -63]
Test Case: 442 | Input/Output: [(-73 -58 -17 37) -73]
Test Case: 443 | Input/Output: [(73 -11 44 -66) -66]
Test Case: 444 | Input/Output: [(-32 -15 64 -8) -32]
Test Case: 445 | Input/Output: [(-66 84 -82 61) -82]
Test Case: 446 | Input/Output: [(-58 -75 63 62) -75]
Test Case: 447 | Input/Output: [(25 -2 -43 -74) -74]
Test Case: 448 | Input/Output: [(-69 -3 -83 94) -83]
Test Case: 449 | Input/Output: [(-32 -47 -99 91) -99]
Test Case: 450 | Input/Output: [(-69 71 87 23) -69]
Test Case: 451 | Input/Output: [(41 -45 69 25) -45]
Test Case: 452 | Input/Output: [(-92 -96 73 85) -96]
Test Case: 453 | Input/Output: [(20 10 -9 6) -9]
Test Case: 454 | Input/Output: [(-29 47 18 -73) -73]
Test Case: 455 | Input/Output: [(-64 89 -19 -43) -64]
Test Case: 456 | Input/Output: [(53 8 -59 93) -59]
Test Case: 457 | Input/Output: [(31 91 -72 -51) -72]
Test Case: 458 | Input/Output: [(-26 -4 -56 -8) -56]
Test Case: 459 | Input/Output: [(8 18 -72 -11) -72]
Test Case: 460 | Input/Output: [(26 -17 13 84) -17]
Test Case: 461 | Input/Output: [(23 31 21 -58) -58]
Test Case: 462 | Input/Output: [(-21 -19 -44 -35) -44]
Test Case: 463 | Input/Output: [(71 12 -51 25) -51]
Test Case: 464 | Input/Output: [(-83 82 -79 67) -83]
Test Case: 465 | Input/Output: [(-99 1 83 -84) -99]
Test Case: 466 | Input/Output: [(37 95 -80 -29) -80]
Test Case: 467 | Input/Output: [(25 -12 55 -41) -41]
Test Case: 468 | Input/Output: [(24 80 -63 0) -63]
Test Case: 469 | Input/Output: [(-70 2 -87 87) -87]
Test Case: 470 | Input/Output: [(64 -4 72 84) -4]
Test Case: 471 | Input/Output: [(-57 57 19 27) -57]
Test Case: 472 | Input/Output: [(61 80 -70 -85) -85]
Test Case: 473 | Input/Output: [(-37 76 31 69) -37]
Test Case: 474 | Input/Output: [(-10 96 30 57) -10]
Test Case: 475 | Input/Output: [(18 -38 15 -11) -38]
Test Case: 476 | Input/Output: [(51 15 -95 -34) -95]
Test Case: 477 | Input/Output: [(-97 74 -35 39) -97]
Test Case: 478 | Input/Output: [(96 -69 -55 -12) -69]
Test Case: 479 | Input/Output: [(-3 -78 38 -52) -78]
Test Case: 480 | Input/Output: [(-61 76 -60 -26) -61]
Test Case: 481 | Input/Output: [(88 -21 -59 65) -59]
Test Case: 482 | Input/Output: [(-25 73 40 -45) -45]
Test Case: 483 | Input/Output: [(-36 -2 -51 2) -51]
Test Case: 484 | Input/Output: [(-48 -72 57 39) -72]
Test Case: 485 | Input/Output: [(56 42 78 -100) -100]
Test Case: 486 | Input/Output: [(8 4 99 -62) -62]
Test Case: 487 | Input/Output: [(95 -2 -62 99) -62]
Test Case: 488 | Input/Output: [(66 25 -62 -13) -62]
Test Case: 489 | Input/Output: [(47 1 100 65) 1]
Test Case: 490 | Input/Output: [(-78 -63 -66 41) -78]
Test Case: 491 | Input/Output: [(-3 9 61 44) -3]
Test Case: 492 | Input/Output: [(-82 -53 1 76) -82]
Test Case: 493 | Input/Output: [(-7 -3 -46 96) -46]
Test Case: 494 | Input/Output: [(-92 66 -81 -79) -92]
Test Case: 495 | Input/Output: [(-82 78 -60 -82) -82]
Test Case: 496 | Input/Output: [(59 -83 5 19) -83]
Test Case: 497 | Input/Output: [(4 -98 -85 -4) -98]
Test Case: 498 | Input/Output: [(5 -72 90 -2) -72]
Test Case: 499 | Input/Output: [(48 60 18 4) 4]
Test Case: 500 | Input/Output: [(61 6 -98 98) -98]
Test Case: 501 | Input/Output: [(65 -51 -77 3) -77]
Test Case: 502 | Input/Output: [(48 -24 69 -84) -84]
Test Case: 503 | Input/Output: [(-57 -97 -90 57) -97]
Test Case: 504 | Input/Output: [(99 -10 -95 -67) -95]
Test Case: 505 | Input/Output: [(4 -17 100 0) -17]
Test Case: 506 | Input/Output: [(-47 3 -19 -1) -47]
Test Case: 507 | Input/Output: [(67 79 -70 -78) -78]
Test Case: 508 | Input/Output: [(-44 -59 -14 -47) -59]
Test Case: 509 | Input/Output: [(2 -26 -2 -54) -54]
Test Case: 510 | Input/Output: [(55 20 14 69) 14]
Test Case: 511 | Input/Output: [(49 -11 65 72) -11]
Test Case: 512 | Input/Output: [(3 -73 9 48) -73]
Test Case: 513 | Input/Output: [(-82 75 24 1) -82]
Test Case: 514 | Input/Output: [(33 -83 92 -7) -83]
Test Case: 515 | Input/Output: [(-17 -48 3 -96) -96]
Test Case: 516 | Input/Output: [(-66 50 -49 30) -66]
Test Case: 517 | Input/Output: [(-54 70 24 -1) -54]
Test Case: 518 | Input/Output: [(28 16 -86 21) -86]
Test Case: 519 | Input/Output: [(-76 -51 -41 -14) -76]
Test Case: 520 | Input/Output: [(76 -86 41 22) -86]
Test Case: 521 | Input/Output: [(29 91 -78 9) -78]
Test Case: 522 | Input/Output: [(79 -99 -25 0) -99]
Test Case: 523 | Input/Output: [(-33 97 58 -48) -48]
Test Case: 524 | Input/Output: [(8 24 51 56) 8]
Test Case: 525 | Input/Output: [(51 69 73 -95) -95]
Test Case: 526 | Input/Output: [(24 -29 -57 -19) -57]
Test Case: 527 | Input/Output: [(35 40 -30 -92) -92]
Test Case: 528 | Input/Output: [(-27 -60 -5 -39) -60]
Test Case: 529 | Input/Output: [(97 -43 5 58) -43]
Test Case: 530 | Input/Output: [(-51 -8 30 -24) -51]
Test Case: 531 | Input/Output: [(-11 -19 -62 -99) -99]
Test Case: 532 | Input/Output: [(-87 -42 -73 33) -87]
Test Case: 533 | Input/Output: [(55 27 -4 -28) -28]
Test Case: 534 | Input/Output: [(-33 28 99 38) -33]
Test Case: 535 | Input/Output: [(-8 -17 -79 79) -79]
Test Case: 536 | Input/Output: [(-24 28 -75 30) -75]
Test Case: 537 | Input/Output: [(-20 36 12 -40) -40]
Test Case: 538 | Input/Output: [(-38 -83 -6 -7) -83]
Test Case: 539 | Input/Output: [(-90 24 57 64) -90]
Test Case: 540 | Input/Output: [(68 -35 -57 -61) -61]
Test Case: 541 | Input/Output: [(-42 -68 -41 2) -68]
Test Case: 542 | Input/Output: [(89 96 32 10) 10]
Test Case: 543 | Input/Output: [(-72 23 34 -31) -72]
Test Case: 544 | Input/Output: [(56 40 -14 68) -14]
Test Case: 545 | Input/Output: [(-47 -53 18 80) -53]
Test Case: 546 | Input/Output: [(69 -62 37 14) -62]
Test Case: 547 | Input/Output: [(91 -18 55 75) -18]
Test Case: 548 | Input/Output: [(49 32 -53 -42) -53]
Test Case: 549 | Input/Output: [(-61 -86 31 -7) -86]
Test Case: 550 | Input/Output: [(49 -93 76 -49) -93]
Test Case: 551 | Input/Output: [(50 -18 -90 25) -90]
Test Case: 552 | Input/Output: [(-92 70 -23 -88) -92]
Test Case: 553 | Input/Output: [(-47 60 -66 -59) -66]
Test Case: 554 | Input/Output: [(37 38 -92 73) -92]
Test Case: 555 | Input/Output: [(-40 9 45 16) -40]
Test Case: 556 | Input/Output: [(25 8 -50 -31) -50]
Test Case: 557 | Input/Output: [(-8 29 -64 -12) -64]
Test Case: 558 | Input/Output: [(-44 -39 -44 37) -44]
Test Case: 559 | Input/Output: [(47 64 98 -96) -96]
Test Case: 560 | Input/Output: [(-35 89 -36 50) -36]
Test Case: 561 | Input/Output: [(-10 -87 33 -96) -96]
Test Case: 562 | Input/Output: [(8 70 95 44) 8]
Test Case: 563 | Input/Output: [(-77 33 -34 -90) -90]
Test Case: 564 | Input/Output: [(36 -5 52 -9) -9]
Test Case: 565 | Input/Output: [(1 -94 93 61) -94]
Test Case: 566 | Input/Output: [(38 52 85 68) 38]
Test Case: 567 | Input/Output: [(-64 49 -65 -85) -85]
Test Case: 568 | Input/Output: [(77 -33 39 91) -33]
Test Case: 569 | Input/Output: [(-78 -31 -47 -43) -78]
Test Case: 570 | Input/Output: [(44 -20 40 24) -20]
Test Case: 571 | Input/Output: [(-2 13 -98 -67) -98]
Test Case: 572 | Input/Output: [(44 44 -99 68) -99]
Test Case: 573 | Input/Output: [(-31 -58 -58 97) -58]
Test Case: 574 | Input/Output: [(30 -20 -64 -92) -92]
Test Case: 575 | Input/Output: [(-27 21 100 -8) -27]
Test Case: 576 | Input/Output: [(56 -8 88 -12) -12]
Test Case: 577 | Input/Output: [(34 -34 -11 -55) -55]
Test Case: 578 | Input/Output: [(-54 -28 -58 37) -58]
Test Case: 579 | Input/Output: [(-63 29 47 -1) -63]
Test Case: 580 | Input/Output: [(-35 21 -2 -17) -35]
Test Case: 581 | Input/Output: [(-52 -71 -1 -69) -71]
Test Case: 582 | Input/Output: [(-40 18 42 10) -40]
Test Case: 583 | Input/Output: [(-86 0 30 40) -86]
Test Case: 584 | Input/Output: [(-19 -14 0 29) -19]
Test Case: 585 | Input/Output: [(16 -7 -94 -8) -94]
Test Case: 586 | Input/Output: [(1 -49 -91 -59) -91]
Test Case: 587 | Input/Output: [(-59 23 -56 30) -59]
Test Case: 588 | Input/Output: [(73 -17 21 14) -17]
Test Case: 589 | Input/Output: [(10 31 48 93) 10]
Test Case: 590 | Input/Output: [(-31 -55 18 -14) -55]
Test Case: 591 | Input/Output: [(23 -20 -1 70) -20]
Test Case: 592 | Input/Output: [(-67 53 -79 87) -79]
Test Case: 593 | Input/Output: [(98 22 12 -42) -42]
Test Case: 594 | Input/Output: [(59 97 -80 73) -80]
Test Case: 595 | Input/Output: [(-37 39 80 14) -37]
Test Case: 596 | Input/Output: [(42 60 -95 -76) -95]
Test Case: 597 | Input/Output: [(80 62 98 -35) -35]
Test Case: 598 | Input/Output: [(22 -58 -24 -10) -58]
Test Case: 599 | Input/Output: [(-89 55 39 9) -89]
Test Case: 600 | Input/Output: [(-68 -49 93 11) -68]
Test Case: 601 | Input/Output: [(8 90 -15 1) -15]
Test Case: 602 | Input/Output: [(-74 41 -14 -26) -74]
Test Case: 603 | Input/Output: [(-41 -36 -38 45) -41]
Test Case: 604 | Input/Output: [(20 51 3 -20) -20]
Test Case: 605 | Input/Output: [(16 -88 63 74) -88]
Test Case: 606 | Input/Output: [(-42 -20 27 4) -42]
Test Case: 607 | Input/Output: [(85 -43 40 12) -43]
Test Case: 608 | Input/Output: [(-36 -66 -48 66) -66]
Test Case: 609 | Input/Output: [(50 -9 7 54) -9]
Test Case: 610 | Input/Output: [(5 -80 19 -36) -80]
Test Case: 611 | Input/Output: [(-38 57 56 28) -38]
Test Case: 612 | Input/Output: [(-98 -2 75 76) -98]
Test Case: 613 | Input/Output: [(-63 17 -64 30) -64]
Test Case: 614 | Input/Output: [(-15 -95 80 -74) -95]
Test Case: 615 | Input/Output: [(-9 61 -48 -77) -77]
Test Case: 616 | Input/Output: [(46 -28 -15 24) -28]
Test Case: 617 | Input/Output: [(-75 -13 68 59) -75]
Test Case: 618 | Input/Output: [(-40 24 42 15) -40]
Test Case: 619 | Input/Output: [(58 2 -71 50) -71]
Test Case: 620 | Input/Output: [(97 -48 -66 43) -66]
Test Case: 621 | Input/Output: [(-41 -12 -73 33) -73]
Test Case: 622 | Input/Output: [(-41 70 75 23) -41]
Test Case: 623 | Input/Output: [(-44 35 -95 21) -95]
Test Case: 624 | Input/Output: [(-65 39 13 -34) -65]
Test Case: 625 | Input/Output: [(-26 85 37 57) -26]
Test Case: 626 | Input/Output: [(-49 -36 48 -67) -67]
Test Case: 627 | Input/Output: [(-31 19 -22 -67) -67]
Test Case: 628 | Input/Output: [(-63 -10 -86 14) -86]
Test Case: 629 | Input/Output: [(11 45 77 -13) -13]
Test Case: 630 | Input/Output: [(-6 80 -44 -83) -83]
Test Case: 631 | Input/Output: [(62 -24 22 20) -24]
Test Case: 632 | Input/Output: [(43 43 -94 31) -94]
Test Case: 633 | Input/Output: [(-82 -23 -27 -12) -82]
Test Case: 634 | Input/Output: [(-77 -75 66 -81) -81]
Test Case: 635 | Input/Output: [(-63 -23 -77 30) -77]
Test Case: 636 | Input/Output: [(75 -2 -22 28) -22]
Test Case: 637 | Input/Output: [(71 85 -40 22) -40]
Test Case: 638 | Input/Output: [(-84 -80 -70 -92) -92]
Test Case: 639 | Input/Output: [(-31 84 -43 86) -43]
Test Case: 640 | Input/Output: [(74 -48 -37 74) -48]
Test Case: 641 | Input/Output: [(-94 35 59 66) -94]
Test Case: 642 | Input/Output: [(11 -27 62 -89) -89]
Test Case: 643 | Input/Output: [(41 -47 12 -66) -66]
Test Case: 644 | Input/Output: [(42 -73 -85 87) -85]
Test Case: 645 | Input/Output: [(-69 -43 7 66) -69]
Test Case: 646 | Input/Output: [(23 -28 96 -67) -67]
Test Case: 647 | Input/Output: [(9 47 8 -20) -20]
Test Case: 648 | Input/Output: [(-10 27 -58 -79) -79]
Test Case: 649 | Input/Output: [(75 -97 82 -89) -97]
Test Case: 650 | Input/Output: [(88 -76 13 -56) -76]
Test Case: 651 | Input/Output: [(-62 -38 -52 -98) -98]
Test Case: 652 | Input/Output: [(56 45 -93 -38) -93]
Test Case: 653 | Input/Output: [(-13 96 12 52) -13]
Test Case: 654 | Input/Output: [(-64 -57 -54 13) -64]
Test Case: 655 | Input/Output: [(92 55 -12 45) -12]
Test Case: 656 | Input/Output: [(-87 -34 16 42) -87]
Test Case: 657 | Input/Output: [(29 -56 27 -13) -56]
Test Case: 658 | Input/Output: [(4 -87 31 62) -87]
Test Case: 659 | Input/Output: [(0 -88 72 -62) -88]
Test Case: 660 | Input/Output: [(-60 -86 9 30) -86]
Test Case: 661 | Input/Output: [(-99 -46 40 15) -99]
Test Case: 662 | Input/Output: [(29 -96 -17 6) -96]
Test Case: 663 | Input/Output: [(-32 57 -88 15) -88]
Test Case: 664 | Input/Output: [(-11 -83 -78 -74) -83]
Test Case: 665 | Input/Output: [(55 22 74 -94) -94]
Test Case: 666 | Input/Output: [(-57 -24 -19 4) -57]
Test Case: 667 | Input/Output: [(-3 -84 -89 -60) -89]
Test Case: 668 | Input/Output: [(-71 16 -36 -22) -71]
Test Case: 669 | Input/Output: [(-36 -62 1 -23) -62]
Test Case: 670 | Input/Output: [(10 -43 -21 66) -43]
Test Case: 671 | Input/Output: [(-94 23 -88 -54) -94]
Test Case: 672 | Input/Output: [(41 -74 25 -53) -74]
Test Case: 673 | Input/Output: [(-45 14 22 91) -45]
Test Case: 674 | Input/Output: [(-18 71 -3 34) -18]
Test Case: 675 | Input/Output: [(30 -16 3 5) -16]
Test Case: 676 | Input/Output: [(-87 1 -84 -95) -95]
Test Case: 677 | Input/Output: [(-1 -8 -82 -88) -88]
Test Case: 678 | Input/Output: [(53 -2 3 45) -2]
Test Case: 679 | Input/Output: [(85 4 32 -23) -23]
Test Case: 680 | Input/Output: [(-71 -33 82 -36) -71]
Test Case: 681 | Input/Output: [(-41 -51 0 -84) -84]
Test Case: 682 | Input/Output: [(-27 -46 -94 -84) -94]
Test Case: 683 | Input/Output: [(-29 -53 -27 57) -53]
Test Case: 684 | Input/Output: [(68 -57 -74 46) -74]
Test Case: 685 | Input/Output: [(26 -22 -72 -85) -85]
Test Case: 686 | Input/Output: [(78 -56 28 63) -56]
Test Case: 687 | Input/Output: [(15 -26 -57 34) -57]
Test Case: 688 | Input/Output: [(-59 19 -75 61) -75]
Test Case: 689 | Input/Output: [(22 45 -83 72) -83]
Test Case: 690 | Input/Output: [(31 -86 26 -83) -86]
Test Case: 691 | Input/Output: [(29 -88 31 84) -88]
Test Case: 692 | Input/Output: [(72 32 2 -38) -38]
Test Case: 693 | Input/Output: [(-34 81 -78 -17) -78]
Test Case: 694 | Input/Output: [(12 -44 -91 -47) -91]
Test Case: 695 | Input/Output: [(27 -59 69 -78) -78]
Test Case: 696 | Input/Output: [(-85 -54 28 94) -85]
Test Case: 697 | Input/Output: [(-28 19 -59 38) -59]
Test Case: 698 | Input/Output: [(-30 96 24 -90) -90]
Test Case: 699 | Input/Output: [(77 -36 48 -91) -91]
Test Case: 700 | Input/Output: [(-53 -65 34 26) -65]
Test Case: 701 | Input/Output: [(-90 23 -56 -9) -90]
Test Case: 702 | Input/Output: [(-57 -31 61 -59) -59]
Test Case: 703 | Input/Output: [(-77 -44 -9 79) -77]
Test Case: 704 | Input/Output: [(67 97 24 -40) -40]
Test Case: 705 | Input/Output: [(-82 50 -17 50) -82]
Test Case: 706 | Input/Output: [(25 -85 -63 18) -85]
Test Case: 707 | Input/Output: [(-55 96 56 77) -55]
Test Case: 708 | Input/Output: [(27 53 20 17) 17]
Test Case: 709 | Input/Output: [(12 15 52 77) 12]
Test Case: 710 | Input/Output: [(89 9 -62 80) -62]
Test Case: 711 | Input/Output: [(93 20 53 71) 20]
Test Case: 712 | Input/Output: [(29 78 6 -48) -48]
Test Case: 713 | Input/Output: [(-56 -55 74 41) -56]
Test Case: 714 | Input/Output: [(23 50 88 35) 23]
Test Case: 715 | Input/Output: [(-90 -79 -51 -59) -90]
Test Case: 716 | Input/Output: [(-12 -99 -8 -83) -99]
Test Case: 717 | Input/Output: [(-93 54 92 45) -93]
Test Case: 718 | Input/Output: [(-88 75 7 -93) -93]
Test Case: 719 | Input/Output: [(-59 2 -95 2) -95]
Test Case: 720 | Input/Output: [(-94 -59 24 38) -94]
Test Case: 721 | Input/Output: [(5 -66 -33 -56) -66]
Test Case: 722 | Input/Output: [(-31 80 -38 98) -38]
Test Case: 723 | Input/Output: [(2 45 47 79) 2]
Test Case: 724 | Input/Output: [(-84 11 -61 -38) -84]
Test Case: 725 | Input/Output: [(91 -29 -49 82) -49]
Test Case: 726 | Input/Output: [(9 86 53 100) 9]
Test Case: 727 | Input/Output: [(68 24 -94 79) -94]
Test Case: 728 | Input/Output: [(-15 -100 -70 -59) -100]
Test Case: 729 | Input/Output: [(-31 -55 4 43) -55]
Test Case: 730 | Input/Output: [(-33 72 -51 -42) -51]
Test Case: 731 | Input/Output: [(72 79 -41 -41) -41]
Test Case: 732 | Input/Output: [(98 1 77 8) 1]
Test Case: 733 | Input/Output: [(46 75 -1 44) -1]
Test Case: 734 | Input/Output: [(-91 68 92 33) -91]
Test Case: 735 | Input/Output: [(-4 -15 -80 -88) -88]
Test Case: 736 | Input/Output: [(57 -77 47 70) -77]
Test Case: 737 | Input/Output: [(16 87 47 62) 16]
Test Case: 738 | Input/Output: [(50 -82 -74 79) -82]
Test Case: 739 | Input/Output: [(-67 -38 49 100) -67]
Test Case: 740 | Input/Output: [(-76 -1 -54 88) -76]
Test Case: 741 | Input/Output: [(16 -83 -49 12) -83]
Test Case: 742 | Input/Output: [(28 -43 7 -89) -89]
Test Case: 743 | Input/Output: [(50 27 44 -34) -34]
Test Case: 744 | Input/Output: [(-73 -27 27 -45) -73]
Test Case: 745 | Input/Output: [(-84 -93 15 -40) -93]
Test Case: 746 | Input/Output: [(-61 64 -31 85) -61]
Test Case: 747 | Input/Output: [(20 -83 -35 -13) -83]
Test Case: 748 | Input/Output: [(78 -1 -13 -28) -28]
Test Case: 749 | Input/Output: [(-12 -65 52 69) -65]
Test Case: 750 | Input/Output: [(-64 28 83 -17) -64]
Test Case: 751 | Input/Output: [(-94 53 78 66) -94]
Test Case: 752 | Input/Output: [(-84 82 87 81) -84]
Test Case: 753 | Input/Output: [(-4 -31 -59 -51) -59]
Test Case: 754 | Input/Output: [(21 -10 -22 -55) -55]
Test Case: 755 | Input/Output: [(-87 -76 -76 97) -87]
Test Case: 756 | Input/Output: [(-35 -10 -43 57) -43]
Test Case: 757 | Input/Output: [(-48 67 84 70) -48]
Test Case: 758 | Input/Output: [(86 -88 -66 -31) -88]
Test Case: 759 | Input/Output: [(-4 -40 -20 -40) -40]
Test Case: 760 | Input/Output: [(-18 91 -60 -55) -60]
Test Case: 761 | Input/Output: [(-83 -55 -88 -21) -88]
Test Case: 762 | Input/Output: [(-85 88 14 -7) -85]
Test Case: 763 | Input/Output: [(-41 82 -15 -7) -41]
Test Case: 764 | Input/Output: [(29 -89 11 -34) -89]
Test Case: 765 | Input/Output: [(-15 -32 1 -65) -65]
Test Case: 766 | Input/Output: [(-31 49 48 -57) -57]
Test Case: 767 | Input/Output: [(-12 -64 96 74) -64]
Test Case: 768 | Input/Output: [(1 -13 -23 -81) -81]
Test Case: 769 | Input/Output: [(13 11 45 75) 11]
Test Case: 770 | Input/Output: [(-54 62 29 -24) -54]
Test Case: 771 | Input/Output: [(-28 66 -74 75) -74]
Test Case: 772 | Input/Output: [(-82 -53 41 -75) -82]
Test Case: 773 | Input/Output: [(35 21 47 14) 14]
Test Case: 774 | Input/Output: [(-82 -85 -56 -86) -86]
Test Case: 775 | Input/Output: [(23 44 -24 -42) -42]
Test Case: 776 | Input/Output: [(-39 52 32 -30) -39]
Test Case: 777 | Input/Output: [(17 -19 9 -66) -66]
Test Case: 778 | Input/Output: [(-47 -32 -78 -90) -90]
Test Case: 779 | Input/Output: [(-56 -41 13 -14) -56]
Test Case: 780 | Input/Output: [(94 53 98 -68) -68]
Test Case: 781 | Input/Output: [(46 -79 47 35) -79]
Test Case: 782 | Input/Output: [(-37 35 41 -29) -37]
Test Case: 783 | Input/Output: [(72 47 -4 37) -4]
Test Case: 784 | Input/Output: [(-44 -52 20 48) -52]
Test Case: 785 | Input/Output: [(14 19 -98 -100) -100]
Test Case: 786 | Input/Output: [(-78 5 -26 42) -78]
Test Case: 787 | Input/Output: [(63 -61 -42 -99) -99]
Test Case: 788 | Input/Output: [(77 -33 98 -93) -93]
Test Case: 789 | Input/Output: [(-61 58 -36 -27) -61]
Test Case: 790 | Input/Output: [(68 -57 92 28) -57]
Test Case: 791 | Input/Output: [(2 -62 82 49) -62]
Test Case: 792 | Input/Output: [(32 -88 75 -66) -88]
Test Case: 793 | Input/Output: [(26 -46 -79 -34) -79]
Test Case: 794 | Input/Output: [(-51 99 -61 -70) -70]
Test Case: 795 | Input/Output: [(-7 -12 -7 98) -12]
Test Case: 796 | Input/Output: [(-60 60 41 -92) -92]
Test Case: 797 | Input/Output: [(53 -17 36 -89) -89]
Test Case: 798 | Input/Output: [(31 -21 -30 -23) -30]
Test Case: 799 | Input/Output: [(39 -85 54 22) -85]
Test Case: 800 | Input/Output: [(12 -90 84 46) -90]
Test Case: 801 | Input/Output: [(-37 80 12 -13) -37]
Test Case: 802 | Input/Output: [(-12 78 -57 91) -57]
Test Case: 803 | Input/Output: [(0 16 20 81) 0]
Test Case: 804 | Input/Output: [(75 62 37 57) 37]
Test Case: 805 | Input/Output: [(-89 43 78 -88) -89]
Test Case: 806 | Input/Output: [(84 71 -45 -48) -48]
Test Case: 807 | Input/Output: [(46 79 48 -52) -52]
Test Case: 808 | Input/Output: [(-81 -55 -48 23) -81]
Test Case: 809 | Input/Output: [(98 -15 51 38) -15]
Test Case: 810 | Input/Output: [(-44 -23 -86 -28) -86]
Test Case: 811 | Input/Output: [(-3 -34 21 -7) -34]
Test Case: 812 | Input/Output: [(-54 89 -43 -59) -59]
Test Case: 813 | Input/Output: [(90 -62 -15 -10) -62]
Test Case: 814 | Input/Output: [(-26 -28 -96 -26) -96]
Test Case: 815 | Input/Output: [(50 -45 46 68) -45]
Test Case: 816 | Input/Output: [(91 53 -63 83) -63]
Test Case: 817 | Input/Output: [(-46 -47 40 57) -47]
Test Case: 818 | Input/Output: [(-50 -7 94 -16) -50]
Test Case: 819 | Input/Output: [(35 26 -52 2) -52]
Test Case: 820 | Input/Output: [(15 -52 15 19) -52]
Test Case: 821 | Input/Output: [(27 4 -20 64) -20]
Test Case: 822 | Input/Output: [(-33 -48 -98 -76) -98]
Test Case: 823 | Input/Output: [(44 33 37 85) 33]
Test Case: 824 | Input/Output: [(-68 -7 56 -95) -95]
Test Case: 825 | Input/Output: [(-71 16 -40 100) -71]
Test Case: 826 | Input/Output: [(78 -74 2 -7) -74]
Test Case: 827 | Input/Output: [(29 -12 -72 -100) -100]
Test Case: 828 | Input/Output: [(-4 51 -46 -33) -46]
Test Case: 829 | Input/Output: [(-13 93 -94 41) -94]
Test Case: 830 | Input/Output: [(79 4 -76 -25) -76]
Test Case: 831 | Input/Output: [(54 -81 -87 -53) -87]
Test Case: 832 | Input/Output: [(-46 -61 -25 2) -61]
Test Case: 833 | Input/Output: [(-15 -19 -64 -17) -64]
Test Case: 834 | Input/Output: [(-74 75 -42 -39) -74]
Test Case: 835 | Input/Output: [(-86 -88 -26 43) -88]
Test Case: 836 | Input/Output: [(-85 57 -66 -21) -85]
Test Case: 837 | Input/Output: [(-86 89 -99 -41) -99]
Test Case: 838 | Input/Output: [(-36 -24 -30 44) -36]
Test Case: 839 | Input/Output: [(40 3 82 72) 3]
Test Case: 840 | Input/Output: [(27 29 48 -74) -74]
Test Case: 841 | Input/Output: [(-9 31 -81 -15) -81]
Test Case: 842 | Input/Output: [(75 -66 74 19) -66]
Test Case: 843 | Input/Output: [(-26 -83 65 -48) -83]
Test Case: 844 | Input/Output: [(14 -98 92 -62) -98]
Test Case: 845 | Input/Output: [(58 7 -100 21) -100]
Test Case: 846 | Input/Output: [(-1 42 -70 67) -70]
Test Case: 847 | Input/Output: [(37 -52 -41 -97) -97]
Test Case: 848 | Input/Output: [(-30 85 46 -100) -100]
Test Case: 849 | Input/Output: [(30 62 -72 -98) -98]
Test Case: 850 | Input/Output: [(12 17 27 65) 12]
Test Case: 851 | Input/Output: [(57 82 -72 -97) -97]
Test Case: 852 | Input/Output: [(17 -31 -85 -97) -97]
Test Case: 853 | Input/Output: [(-78 -34 -73 -43) -78]
Test Case: 854 | Input/Output: [(-87 66 -37 -61) -87]
Test Case: 855 | Input/Output: [(-3 99 49 -47) -47]
Test Case: 856 | Input/Output: [(53 -89 -66 -70) -89]
Test Case: 857 | Input/Output: [(-69 -98 8 -82) -98]
Test Case: 858 | Input/Output: [(-38 26 -74 -86) -86]
Test Case: 859 | Input/Output: [(-39 69 -27 7) -39]
Test Case: 860 | Input/Output: [(-65 -72 -21 -56) -72]
Test Case: 861 | Input/Output: [(-11 -56 13 32) -56]
Test Case: 862 | Input/Output: [(-91 87 -10 -9) -91]
Test Case: 863 | Input/Output: [(-65 -54 -98 11) -98]
Test Case: 864 | Input/Output: [(84 19 30 -35) -35]
Test Case: 865 | Input/Output: [(17 -97 94 61) -97]
Test Case: 866 | Input/Output: [(-38 32 39 95) -38]
Test Case: 867 | Input/Output: [(-71 95 -56 -10) -71]
Test Case: 868 | Input/Output: [(28 90 54 -25) -25]
Test Case: 869 | Input/Output: [(22 20 -56 -82) -82]
Test Case: 870 | Input/Output: [(72 -84 82 31) -84]
Test Case: 871 | Input/Output: [(-47 -18 -33 45) -47]
Test Case: 872 | Input/Output: [(-97 85 2 69) -97]
Test Case: 873 | Input/Output: [(-80 -7 19 -47) -80]
Test Case: 874 | Input/Output: [(53 -75 82 -96) -96]
Test Case: 875 | Input/Output: [(22 60 37 -42) -42]
Test Case: 876 | Input/Output: [(9 -34 -82 59) -82]
Test Case: 877 | Input/Output: [(85 -23 -13 8) -23]
Test Case: 878 | Input/Output: [(-2 83 32 -80) -80]
Test Case: 879 | Input/Output: [(52 1 57 16) 1]
Test Case: 880 | Input/Output: [(78 65 83 -57) -57]
Test Case: 881 | Input/Output: [(-9 -87 0 -100) -100]
Test Case: 882 | Input/Output: [(24 -57 -91 90) -91]
Test Case: 883 | Input/Output: [(6 -46 -42 27) -46]
Test Case: 884 | Input/Output: [(61 -56 12 90) -56]
Test Case: 885 | Input/Output: [(-41 17 97 83) -41]
Test Case: 886 | Input/Output: [(25 43 -90 7) -90]
Test Case: 887 | Input/Output: [(88 99 -47 -79) -79]
Test Case: 888 | Input/Output: [(78 66 -98 -47) -98]
Test Case: 889 | Input/Output: [(-54 42 55 -89) -89]
Test Case: 890 | Input/Output: [(-89 -77 46 48) -89]
Test Case: 891 | Input/Output: [(-63 5 75 -14) -63]
Test Case: 892 | Input/Output: [(99 -27 -35 74) -35]
Test Case: 893 | Input/Output: [(-58 -8 -11 50) -58]
Test Case: 894 | Input/Output: [(80 77 82 35) 35]
Test Case: 895 | Input/Output: [(20 -50 27 -47) -50]
Test Case: 896 | Input/Output: [(-55 -74 -73 0) -74]
Test Case: 897 | Input/Output: [(-81 28 -65 3) -81]
Test Case: 898 | Input/Output: [(-26 97 49 -17) -26]
Test Case: 899 | Input/Output: [(69 34 92 24) 24]
Test Case: 900 | Input/Output: [(83 23 -39 -77) -77]
Test Case: 901 | Input/Output: [(-29 37 -54 38) -54]
Test Case: 902 | Input/Output: [(-30 -92 -87 -1) -92]
Test Case: 903 | Input/Output: [(14 54 -80 -31) -80]
Test Case: 904 | Input/Output: [(-45 -65 -75 2) -75]
Test Case: 905 | Input/Output: [(72 83 96 13) 13]
Test Case: 906 | Input/Output: [(-2 -67 -72 -91) -91]
Test Case: 907 | Input/Output: [(-66 -58 -15 -79) -79]
Test Case: 908 | Input/Output: [(-84 97 -98 40) -98]
Test Case: 909 | Input/Output: [(-69 61 40 -6) -69]
Test Case: 910 | Input/Output: [(-79 60 67 70) -79]
Test Case: 911 | Input/Output: [(-83 73 -42 -67) -83]
Test Case: 912 | Input/Output: [(-71 21 3 19) -71]
Test Case: 913 | Input/Output: [(-29 -36 -6 7) -36]
Test Case: 914 | Input/Output: [(-21 70 80 -7) -21]
Test Case: 915 | Input/Output: [(26 33 36 21) 21]
Test Case: 916 | Input/Output: [(-100 87 20 -68) -100]
Test Case: 917 | Input/Output: [(-24 68 -30 21) -30]
Test Case: 918 | Input/Output: [(83 -96 -72 71) -96]
Test Case: 919 | Input/Output: [(69 -74 -48 100) -74]
Test Case: 920 | Input/Output: [(19 73 41 56) 19]
Test Case: 921 | Input/Output: [(-92 50 71 -4) -92]
Test Case: 922 | Input/Output: [(93 -74 -87 66) -87]
Test Case: 923 | Input/Output: [(-2 71 54 20) -2]
Test Case: 924 | Input/Output: [(-37 6 39 -54) -54]
Test Case: 925 | Input/Output: [(-97 59 -83 -29) -97]
Test Case: 926 | Input/Output: [(60 -60 25 -7) -60]
Test Case: 927 | Input/Output: [(-82 50 -20 44) -82]
Test Case: 928 | Input/Output: [(11 -65 -77 63) -77]
Test Case: 929 | Input/Output: [(24 -39 -73 98) -73]
Test Case: 930 | Input/Output: [(11 52 -94 72) -94]
Test Case: 931 | Input/Output: [(-77 60 -27 47) -77]
Test Case: 932 | Input/Output: [(55 -19 -36 -30) -36]
Test Case: 933 | Input/Output: [(-61 -85 -25 5) -85]
Test Case: 934 | Input/Output: [(-24 -43 -5 -50) -50]
Test Case: 935 | Input/Output: [(2 -77 -19 -17) -77]
Test Case: 936 | Input/Output: [(37 52 94 -6) -6]
Test Case: 937 | Input/Output: [(55 -23 -85 81) -85]
Test Case: 938 | Input/Output: [(1 59 34 90) 1]
Test Case: 939 | Input/Output: [(-12 48 21 -65) -65]
Test Case: 940 | Input/Output: [(43 -84 -45 -20) -84]
Test Case: 941 | Input/Output: [(18 15 -86 18) -86]
Test Case: 942 | Input/Output: [(-99 46 49 -19) -99]
Test Case: 943 | Input/Output: [(-36 60 -47 -13) -47]
Test Case: 944 | Input/Output: [(81 -44 -100 -72) -100]
Test Case: 945 | Input/Output: [(90 86 -53 -45) -53]
Test Case: 946 | Input/Output: [(-43 8 -86 30) -86]
Test Case: 947 | Input/Output: [(-59 -62 48 -58) -62]
Test Case: 948 | Input/Output: [(46 -49 94 14) -49]
Test Case: 949 | Input/Output: [(19 -1 -37 46) -37]
Test Case: 950 | Input/Output: [(23 -66 7 -33) -66]
Test Case: 951 | Input/Output: [(66 -18 -99 -23) -99]
Test Case: 952 | Input/Output: [(-7 -99 17 30) -99]
Test Case: 953 | Input/Output: [(-48 -58 39 26) -58]
Test Case: 954 | Input/Output: [(-99 55 -70 -94) -99]
Test Case: 955 | Input/Output: [(97 -27 -53 78) -53]
Test Case: 956 | Input/Output: [(-14 -14 -55 -19) -55]
Test Case: 957 | Input/Output: [(-80 -81 64 -84) -84]
Test Case: 958 | Input/Output: [(-24 40 -36 55) -36]
Test Case: 959 | Input/Output: [(-8 -35 -15 -42) -42]
Test Case: 960 | Input/Output: [(-46 64 -83 -92) -92]
Test Case: 961 | Input/Output: [(-50 49 -36 5) -50]
Test Case: 962 | Input/Output: [(-30 28 8 -17) -30]
Test Case: 963 | Input/Output: [(-95 -62 -33 -33) -95]
Test Case: 964 | Input/Output: [(-79 1 -14 -15) -79]
Test Case: 965 | Input/Output: [(0 -55 -67 -1) -67]
Test Case: 966 | Input/Output: [(-17 -25 18 22) -25]
Test Case: 967 | Input/Output: [(68 97 -77 -51) -77]
Test Case: 968 | Input/Output: [(55 -64 44 36) -64]
Test Case: 969 | Input/Output: [(-29 -45 -37 -10) -45]
Test Case: 970 | Input/Output: [(-90 36 -68 63) -90]
Test Case: 971 | Input/Output: [(-11 59 -2 58) -11]
Test Case: 972 | Input/Output: [(17 -77 -72 -58) -77]
Test Case: 973 | Input/Output: [(-90 38 -11 56) -90]
Test Case: 974 | Input/Output: [(60 -91 -56 -75) -91]
Test Case: 975 | Input/Output: [(-93 81 99 24) -93]
Test Case: 976 | Input/Output: [(14 -63 -79 87) -79]
Test Case: 977 | Input/Output: [(34 -7 91 47) -7]
Test Case: 978 | Input/Output: [(-59 -75 53 -59) -75]
Test Case: 979 | Input/Output: [(-47 -53 86 97) -53]
Test Case: 980 | Input/Output: [(44 -60 84 -12) -60]
Test Case: 981 | Input/Output: [(-35 -54 47 60) -54]
Test Case: 982 | Input/Output: [(-47 -19 -74 -28) -74]
Test Case: 983 | Input/Output: [(47 -29 64 19) -29]
Test Case: 984 | Input/Output: [(60 98 42 -73) -73]
Test Case: 985 | Input/Output: [(-35 -77 66 23) -77]
Test Case: 986 | Input/Output: [(58 -29 -84 -1) -84]
Test Case: 987 | Input/Output: [(52 -76 29 12) -76]
Test Case: 988 | Input/Output: [(-15 50 100 52) -15]
Test Case: 989 | Input/Output: [(-8 31 57 87) -8]
Test Case: 990 | Input/Output: [(52 8 42 -54) -54]
Test Case: 991 | Input/Output: [(-73 -95 53 -21) -95]
Test Case: 992 | Input/Output: [(94 87 -30 77) -30]
Test Case: 993 | Input/Output: [(-70 82 -14 -2) -70]
Test Case: 994 | Input/Output: [(-12 -36 46 -91) -91]
Test Case: 995 | Input/Output: [(13 -13 21 -19) -19]
Test Case: 996 | Input/Output: [(-96 -49 48 97) -96]
Test Case: 997 | Input/Output: [(-2 83 40 10) -2]
Test Case: 998 | Input/Output: [(57 -89 35 -85) -89]
Test Case: 999 | Input/Output: [(-50 67 -33 15) -50]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 14 55 120 -11 73 -21 47 -35 15 -3 122 -49 70 93 20 77
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[74 -79 -79 -79] -79] [[92 92 92 14] 14] [[2 40 2 2] 2] [[74 74 74 86] 74] [[93 -70 93 93] -70] [[-97 -97 13 -97] -97] [[-96 -96 2 -96] -96] [[-51 -30 -30 -30] -51] [[-57 52 -57 -57] -57] [[-10 -10 26 -10] -10] [(-59 -59 -59 -59) -59] [(9 9 9 9) 9] [(-25 -25 -25 -25) -25] [(59 59 59 59) 59] [(-15 -15 -15 -15) -15] [(72 51 56 50) 50] [(7 59 55 17) 7] [(21 64 61 72) 21] [(86 86 67 82) 67] [(29 23 88 56) 23] [(12 34 36 32) 12] [(19 37 16 94) 16] [(38 53 73 6) 6] [(65 57 42 46) 42] [(88 45 14 32) 14] [(33 28 12 63) 12] [(69 59 31 85) 31] [(10 28 6 3) 3] [(7 15 3 38) 3] [(88 26 62 73) 26] [(20 94 64 73) 20] [(18 12 57 41) 12] [(11 42 20 13) 11] [(97 39 73 8) 8] [(47 12 89 15) 12] [(75 64 31 -89) -89] [(68 35 82 -17) -17] [(-32 37 98 71) -32] [(-23 -86 -96 -58) -96] [(-18 -81 -89 93) -89] [(70 -61 -32 -60) -61] [(-9 26 86 18) -9] [(34 83 13 7) 7] [(29 -1 -25 -82) -82] [(6 11 73 87) 6] [(-72 -75 59 -28) -75] [(75 -90 -35 -55) -90] [(4 -84 -25 -21) -84] [(-12 -48 -29 9) -48] [(-59 -69 -94 65) -94] [(9 13 80 -61) -61] [(37 12 1 -32) -32] [(86 52 -28 -69) -69] [(6 51 5 58) 5] [(-11 -91 -81 -81) -91] [(91 90 46 -61) -61] [(65 84 -25 -7) -25] [(-69 -39 -65 46) -69] [(39 41 46 38) 38] [(9 -86 91 55) -86] [(60 51 26 -92) -92] [(22 -82 -58 29) -82] [(26 96 32 -70) -70] [(-77 47 66 -13) -77] [(-36 2 -68 -50) -68] [(-12 -65 -79 94) -79] [(59 39 -2 87) -2] [(62 -51 68 -15) -51] [(39 96 72 91) 39] [(29 -64 51 -99) -99] [(42 -29 55 41) -29] [(100 97 0 35) 0] [(-7 -79 -85 18) -85] [(95 64 63 -18) -18] [(-82 96 -1 29) -82] [(-27 75 -85 -89) -89] [(-14 -14 -3 87) -14] [(-59 -20 -94 25) -94] [(71 -21 -99 -35) -99] [(-99 56 -17 61) -99] [(-58 26 -52 -55) -58] [(-35 15 76 28) -35] [(37 -80 -43 -10) -80] [(-7 -43 40 48) -43] [(-12 -89 38 65) -89] [(41 -31 -28 -24) -31] [(-16 43 90 28) -16] [(76 -27 33 -28) -28] [(-43 -96 -92 5) -96] [(-76 -41 6 -11) -76] [(-83 76 81 30) -83] [(-24 32 67 81) -24] [(56 14 -100 -50) -100] [(43 80 -33 20) -33] [(93 46 31 60) 31])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 86                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 72                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output: 73                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: 93                 
Correct output: -61                 | Program output: -60                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -28                
Correct output: -90                 | Program output: -55                
Correct output: -84                 | Program output: -21                
Correct output: -48                 | Program output: 9                  
Correct output: -94                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 58                 
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: 46                 
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: 94                 
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -15                
Correct output: 39                  | Program output: 91                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: 87                 
Correct output: -94                 | Program output: 25                 
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: 61                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -10                
Correct output: -43                 | Program output: 48                 
Correct output: -89                 | Program output: 65                 
Correct output: -31                 | Program output: -24                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 5                  
Correct output: -76                 | Program output: -11                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_631} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_35} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_390} {:close 0, :instruction tagged_88} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_flush} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_k_when_autoconstructing (tagged_631) (boolean_dup_items exec_stackdepth boolean_xor boolean_dup_items boolean_frominteger) exec_empty exec_do*times (tag_integer_35 boolean_dup_times) in4 integer_dup print_integer integer_div boolean_dup_times boolean_swap print_integer exec_s_when_autoconstructing (integer_min exec_y () integer_lt exec_s (integer_pop integer_flush) (integer_dup_items exec_empty) (integer_eq boolean_not boolean_and tagged_390) tagged_88 exec_k () (exec_noop exec_yankdup boolean_shove integer_shove exec_shove (boolean_yankdup exec_y_when_autoconstructing (integer_fromboolean integer_dup_times) exec_k_when_autoconstructing (integer_yank exec_dup_items) (boolean_eq boolean_dup_times in3) exec_noop exec_k_when_autoconstructing () (exec_s_when_autoconstructing (integer_dup_times integer_eq exec_y_when_autoconstructing () integer_min boolean_flush) () (boolean_empty)) integer_fromboolean boolean_rot integer_div exec_s (boolean_or integer_empty) (boolean_invert_second_then_and) (boolean_yank exec_when () exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_dup_times) (exec_s_when_autoconstructing (exec_yank integer_empty) (integer_min integer_eq) (integer_fromboolean boolean_eq)) ()) ())))) () ())
Lexicase best errors: [1 1 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 112
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_631} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_35} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_390} {:close 0, :instruction tagged_88} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_flush} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_k_when_autoconstructing (tagged_631) (boolean_dup_items exec_stackdepth boolean_xor boolean_dup_items boolean_frominteger) exec_empty exec_do*times (tag_integer_35 boolean_dup_times) in4 integer_dup print_integer integer_div boolean_dup_times boolean_swap print_integer exec_s_when_autoconstructing (integer_min exec_y () integer_lt exec_s (integer_pop integer_flush) (integer_dup_items exec_empty) (integer_eq boolean_not boolean_and tagged_390) tagged_88 exec_k () (exec_noop exec_yankdup boolean_shove integer_shove exec_shove (boolean_yankdup exec_y_when_autoconstructing (integer_fromboolean integer_dup_times) exec_k_when_autoconstructing (integer_yank exec_dup_items) (boolean_eq boolean_dup_times in3) exec_noop exec_k_when_autoconstructing () (exec_s_when_autoconstructing (integer_dup_times integer_eq exec_y_when_autoconstructing () integer_min boolean_flush) () (boolean_empty)) integer_fromboolean boolean_rot integer_div exec_s (boolean_or integer_empty) (boolean_invert_second_then_and) (boolean_yank exec_when () exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_dup_times) (exec_s_when_autoconstructing (exec_yank integer_empty) (integer_min integer_eq) (integer_fromboolean boolean_eq)) ()) ())))) () ())
Zero cases best errors: [1 1 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 112
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 3 3 5 23 5 5 4 3)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (3 3 3 3 5 23 5 5 4 3)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (boolean_eq integer_mult integer_add boolean_empty print_integer boolean_flush exec_dup_times (print_boolean in4 integer_fromboolean) print_integer boolean_shove integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_invert_second_then_and boolean_or boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 1 1 1 0 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 44
Percent parens: 0.114
--- Population Statistics ---
Average total errors in population: 9.943
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.997 0.997 0.995 0.977 0.995 0.995 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.425
Average program size in population (points): 69.346
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480551
--- Timings ---
Current time: 1559314611215 milliseconds
Total Time:           2.9 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.8 seconds, 27.4%
Fitness Testing:      2.0 seconds, 69.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 86                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 72                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output: 73                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: 93                 
Correct output: -61                 | Program output: -60                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -28                
Correct output: -90                 | Program output: -55                
Correct output: -84                 | Program output: -21                
Correct output: -48                 | Program output: 9                  
Correct output: -94                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 58                 
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: 46                 
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: 94                 
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -15                
Correct output: 39                  | Program output: 91                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: 87                 
Correct output: -94                 | Program output: 25                 
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: 61                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -10                
Correct output: -43                 | Program output: 48                 
Correct output: -89                 | Program output: 65                 
Correct output: -31                 | Program output: -24                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 5                  
Correct output: -76                 | Program output: -11                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_eq integer_mult integer_add boolean_empty print_integer boolean_flush exec_dup_times (print_boolean in4 integer_fromboolean print_integer boolean_shove integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod) exec_stackdepth integer_dup in1 integer_sub boolean_invert_second_then_and boolean_or boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_eq integer_mult integer_add boolean_empty print_integer boolean_flush exec_dup_times (print_boolean in4 integer_fromboolean print_integer boolean_shove integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod) exec_stackdepth integer_dup in1 integer_sub boolean_invert_second_then_and boolean_or boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (273 317 316 113 194 273 701 273 112 785)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (273 317 316 113 194 273 701 273 112 785)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_824} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction 76} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_rot exec_pop (exec_dup () integer_add print_integer boolean_dup_items) boolean_yankdup integer_shove exec_yankdup integer_gte boolean_dup_times integer_dup_items tagged_824 exec_stackdepth in4 boolean_not print_integer exec_do*range (integer_stackdepth) boolean_invert_second_then_and boolean_dup_items integer_pop integer_min integer_eq integer_lt boolean_or exec_flush integer_flush integer_dup_times exec_s_when_autoconstructing (boolean_invert_second_then_and integer_eq exec_yank integer_mult boolean_dup exec_do*while (integer_gt exec_rot (integer_lte) (integer_min integer_fromboolean exec_y (exec_s (boolean_or integer_inc) (integer_lte) (integer_empty 76) integer_gte exec_y_when_autoconstructing () in1 print_newline) boolean_frominteger) ())) () ())
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 53
Size: 69
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 6.643
Median total errors in population: 6
Error averages by case: (0.727 0.683 0.684 0.887 0.806 0.727 0.299 0.727 0.888 0.215)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.016
Average program size in population (points): 70.696
Average percent parens in population: 0.256
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.484
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 862988
--- Timings ---
Current time: 1559314613611 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 44.4%
Fitness Testing:      2.5 seconds, 45.6%
Report:               0.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output:                    
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output:                    
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 67                  | Program output:                    
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output:                    
Correct output: 42                  | Program output:                    
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output:                    
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output:                    
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output:                    
Correct output: -77                 | Program output:                    
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output:                    
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output:                    
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output:                    
Correct output: -82                 | Program output:                    
Correct output: -89                 | Program output:                    
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output:                    
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output:                    
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output:                    
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4 integer_fromboolean) print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4 integer_fromboolean) print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 786 106 216 341 215 215 232 106 337)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (232 786 106 216 341 215 215 232 106 337)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4 integer_fromboolean) print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 50
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.214
Median total errors in population: 7
Error averages by case: (0.768 0.214 0.894 0.784 0.659 0.785 0.785 0.768 0.894 0.663)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.865
Average program size in population (points): 68.118
Average percent parens in population: 0.261
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.001
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1205312
--- Timings ---
Current time: 1559314616740 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.6 seconds, 55.3%
Fitness Testing:      2.9 seconds, 34.9%
Report:               0.7 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output:                    
Correct output: 67                  | Program output:                    
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output:                    
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output:                    
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output:                    
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output:                    
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output:                    
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output:                    
Correct output: -82                 | Program output:                    
Correct output: -89                 | Program output:                    
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output: 61                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output:                    
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output:                    
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 9 380 295 371 874 199 294 372 293)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (9 9 380 295 371 874 199 294 372 293)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 0 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 50
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.904
Median total errors in population: 6
Error averages by case: (0.991 0.991 0.62 0.705 0.629 0.126 0.801 0.706 0.628 0.707)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.812
Average program size in population (points): 58.084
Average percent parens in population: 0.205
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.9545
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 210
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1691923
--- Timings ---
Current time: 1559314619825 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 58.3%
Fitness Testing:      3.4 seconds, 29.7%
Report:               1.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output:                    
Correct output: 67                  | Program output:                    
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output:                    
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output:                    
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output:                    
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output:                    
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output:                    
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output:                    
Correct output: -82                 | Program output:                    
Correct output: -89                 | Program output:                    
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output: 61                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output:                    
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output:                    
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 606 318 307 318 105 307 492 158 105)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (307 606 318 307 318 105 307 492 158 105)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean print_integer exec_eq integer_min boolean_dup boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 0 0 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 45
Size: 50
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.977
Median total errors in population: 7
Error averages by case: (0.693 0.394 0.682 0.693 0.682 0.895 0.693 0.508 0.842 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.318
Average program size in population (points): 56.264
Average percent parens in population: 0.188
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.3375
Median age in population: 6.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2177785
--- Timings ---
Current time: 1559314622759 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.6 seconds, 60.1%
Fitness Testing:      3.9 seconds, 26.9%
Report:               1.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: 13                 
Correct output: -96                 | Program output: 2                  
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: 26                 
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 56                 
Correct output: 7                   | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 67                 
Correct output: 23                  | Program output: 88                 
Correct output: 12                  | Program output: 36                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 73                 
Correct output: 42                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 64                 
Correct output: 12                  | Program output: 57                 
Correct output: 11                  | Program output: 20                 
Correct output: 8                   | Program output: 73                 
Correct output: 12                  | Program output: 89                 
Correct output: -89                 | Program output: 31                 
Correct output: -17                 | Program output: 82                 
Correct output: -32                 | Program output: 98                 
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -32                
Correct output: -9                  | Program output: 86                 
Correct output: 7                   | Program output: 13                 
Correct output: -82                 | Program output: -25                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: 59                 
Correct output: -90                 | Program output: -35                
Correct output: -84                 | Program output: -25                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 80                 
Correct output: -32                 | Program output: 1                  
Correct output: -69                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: 46                 
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 46                 
Correct output: -86                 | Program output: 91                 
Correct output: -92                 | Program output: 26                 
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: 32                 
Correct output: -77                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: 68                 
Correct output: 39                  | Program output: 72                 
Correct output: -99                 | Program output: 51                 
Correct output: -29                 | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 63                 
Correct output: -82                 | Program output: -1                 
Correct output: -89                 | Program output: -85                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -52                
Correct output: -35                 | Program output: 76                 
Correct output: -80                 | Program output: -43                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -28                
Correct output: -16                 | Program output: 90                 
Correct output: -28                 | Program output: 33                 
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: 6                  
Correct output: -83                 | Program output: 81                 
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction 85} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_240} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_exec_666} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_771} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_22} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_invert_second_then_and boolean_swap in3 integer_gte boolean_stackdepth in3 boolean_dup_times print_integer exec_stackdepth tag_boolean_36 exec_do*range () exec_do*range (exec_flush integer_pop exec_y_when_autoconstructing (integer_dup_times exec_pop (integer_dec) integer_stackdepth integer_gte exec_dup_items boolean_or integer_pop exec_eq exec_dup (integer_dup_items integer_lte) boolean_yank integer_add integer_eq exec_s (exec_pop (print_integer boolean_swap integer_shove 85 exec_do*times (boolean_pop integer_swap exec_k (exec_dup_times (boolean_frominteger integer_lt) integer_dup_times exec_do*times (tagged_240 boolean_dup_items exec_stackdepth exec_empty) tag_exec_666 (in3 integer_min boolean_eq boolean_frominteger exec_dup_times (integer_yank integer_inc boolean_stackdepth)) exec_pop (integer_yankdup exec_rot (exec_y (boolean_dup_times) integer_stackdepth boolean_dup exec_yankdup) (exec_when (tagged_771 integer_sub exec_s_when_autoconstructing (integer_rot exec_flush tagged_22 integer_min boolean_dup_times boolean_rot exec_do*times (exec_s_when_autoconstructing (exec_dup (exec_if (exec_k (boolean_or) (exec_swap (integer_shove) (integer_shove boolean_rot boolean_not))) ())) () ())) () ())) ())) ()))) () ())))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 124
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction 85} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_240} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_exec_666} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_771} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_22} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_invert_second_then_and boolean_swap in3 integer_gte boolean_stackdepth in3 boolean_dup_times print_integer exec_stackdepth tag_boolean_36 exec_do*range () exec_do*range (exec_flush integer_pop exec_y_when_autoconstructing (integer_dup_times exec_pop (integer_dec) integer_stackdepth integer_gte exec_dup_items boolean_or integer_pop exec_eq exec_dup (integer_dup_items integer_lte) boolean_yank integer_add integer_eq exec_s (exec_pop (print_integer boolean_swap integer_shove 85 exec_do*times (boolean_pop integer_swap exec_k (exec_dup_times (boolean_frominteger integer_lt) integer_dup_times exec_do*times (tagged_240 boolean_dup_items exec_stackdepth exec_empty) tag_exec_666 (in3 integer_min boolean_eq boolean_frominteger exec_dup_times (integer_yank integer_inc boolean_stackdepth)) exec_pop (integer_yankdup exec_rot (exec_y (boolean_dup_times) integer_stackdepth boolean_dup exec_yankdup) (exec_when (tagged_771 integer_sub exec_s_when_autoconstructing (integer_rot exec_flush tagged_22 integer_min boolean_dup_times boolean_rot exec_do*times (exec_s_when_autoconstructing (exec_dup (exec_if (exec_k (boolean_or) (exec_swap (integer_shove) (integer_shove boolean_rot boolean_not))) ())) () ())) () ())) ())) ()))) () ())))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 124
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 244 268 236 269 269 158 269 238 640)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (266 244 268 236 269 269 158 269 238 640)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_487})
Best program: (exec_s_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_shove exec_rot (exec_do*range (integer_dup boolean_xor in3 boolean_yankdup) boolean_yank boolean_stackdepth) (exec_dup (integer_swap print_integer boolean_frominteger integer_gt tag_exec_487 ())) ())) () ())
Errors: [0 1 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 30
Percent parens: 0.433
--- Population Statistics ---
Average total errors in population: 7.143
Median total errors in population: 7
Error averages by case: (0.734 0.756 0.732 0.764 0.731 0.731 0.842 0.731 0.762 0.36)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.639
Average program size in population (points): 55.003
Average percent parens in population: 0.202
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.7573125
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2632893
--- Timings ---
Current time: 1559314625460 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 61.4%
Fitness Testing:      4.3 seconds, 24.9%
Report:               2.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output:                    
Correct output: 67                  | Program output:                    
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output:                    
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output:                    
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output:                    
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output:                    
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output:                    
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output:                    
Correct output: -82                 | Program output:                    
Correct output: -89                 | Program output:                    
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output: 61                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output:                    
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output:                    
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (integer_add integer_swap integer_mult exec_do*times (in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean) print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq integer_div) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [1 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (integer_add integer_swap integer_mult exec_do*times (in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean) print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq integer_div) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [1 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 420 127 228 258 258 138 904 420 127)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (227 420 127 228 258 258 138 904 420 127)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (in1 integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean print_integer integer_dup integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 1 0 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 49
Percent parens: 0.102
--- Population Statistics ---
Average total errors in population: 6.893
Median total errors in population: 7
Error averages by case: (0.773 0.58 0.873 0.772 0.742 0.742 0.862 0.096 0.58 0.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.085
Average program size in population (points): 55.007
Average percent parens in population: 0.235
Minimum age in population: 6.0
Maximum age in population: 11.25
Average age in population: 9.20915625
Median age in population: 9.28125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3015608
--- Timings ---
Current time: 1559314628708 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.0 seconds, 64.1%
Fitness Testing:      4.7 seconds, 23.1%
Report:               2.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3})
Lexicase best program: (integer_sub integer_pop exec_do*range (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 integer_dup_items integer_max) (print_integer) exec_yank integer_dec exec_flush exec_when (integer_lt integer_pop integer_dup exec_s_when_autoconstructing (integer_add integer_yank boolean_frominteger print_integer exec_yankdup in3) () ())))
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3})
Zero cases best program: (integer_sub integer_pop exec_do*range (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 integer_dup_items integer_max) (print_integer) exec_yank integer_dec exec_flush exec_when (integer_lt integer_pop integer_dup exec_s_when_autoconstructing (integer_add integer_yank boolean_frominteger print_integer exec_yankdup in3) () ())))
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 220 223 499 545 223 926 175 176 220)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (210 220 223 499 545 223 926 175 176 220)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush})
Best program: (integer_sub integer_pop exec_do*range (exec_k_when_autoconstructing (boolean_eq integer_inc boolean_or) (exec_dup_items exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3) (integer_dup_items boolean_xor) print_integer) exec_yank integer_dec exec_flush))
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.583
Median total errors in population: 7
Error averages by case: (0.79 0.78 0.777 0.501 0.455 0.777 0.074 0.825 0.824 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.617
Average program size in population (points): 51.458
Average percent parens in population: 0.185
Minimum age in population: 7.5
Maximum age in population: 12.484375
Average age in population: 10.740640625
Median age in population: 10.7890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3564390
--- Timings ---
Current time: 1559314631365 milliseconds
Total Time:          23.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.9 seconds, 64.2%
Fitness Testing:      5.2 seconds, 22.4%
Report:               3.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: 13                 
Correct output: -96                 | Program output: 2                  
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: 26                 
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 56                 
Correct output: 7                   | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 67                 
Correct output: 23                  | Program output: 88                 
Correct output: 12                  | Program output: 36                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 73                 
Correct output: 42                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 64                 
Correct output: 12                  | Program output: 57                 
Correct output: 11                  | Program output: 20                 
Correct output: 8                   | Program output: 73                 
Correct output: 12                  | Program output: 89                 
Correct output: -89                 | Program output: 31                 
Correct output: -17                 | Program output: 82                 
Correct output: -32                 | Program output: 98                 
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -32                
Correct output: -9                  | Program output: 86                 
Correct output: 7                   | Program output: 13                 
Correct output: -82                 | Program output: -25                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: 59                 
Correct output: -90                 | Program output: -35                
Correct output: -84                 | Program output: -25                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 80                 
Correct output: -32                 | Program output: 1                  
Correct output: -69                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: 46                 
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 46                 
Correct output: -86                 | Program output: 91                 
Correct output: -92                 | Program output: 26                 
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: 32                 
Correct output: -77                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: 68                 
Correct output: 39                  | Program output: 72                 
Correct output: -99                 | Program output: 51                 
Correct output: -29                 | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 63                 
Correct output: -82                 | Program output: -1                 
Correct output: -89                 | Program output: -85                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -52                
Correct output: -35                 | Program output: 76                 
Correct output: -80                 | Program output: -43                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -28                
Correct output: -16                 | Program output: 90                 
Correct output: -28                 | Program output: 33                 
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: 6                  
Correct output: -83                 | Program output: 81                 
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_985} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction 57} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction in3})
Lexicase best program: (print_integer integer_dup_times integer_dec integer_gt in3 exec_dup () print_integer exec_k () (integer_shove boolean_shove integer_add exec_k (exec_k (exec_stackdepth integer_dec in4 exec_do*count (exec_shove (exec_noop exec_dup_items exec_empty tagged_985 integer_dup integer_shove) exec_flush integer_pop exec_stackdepth integer_yankdup exec_do*count (integer_sub exec_dup_times () exec_while (integer_div boolean_invert_first_then_and exec_flush boolean_invert_second_then_and)) exec_eq print_exec (57 boolean_shove integer_sub in3))) ()) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 56
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_985} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction 57} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction in3})
Zero cases best program: (print_integer integer_dup_times integer_dec integer_gt in3 exec_dup () print_integer exec_k () (integer_shove boolean_shove integer_add exec_k (exec_k (exec_stackdepth integer_dec in4 exec_do*count (exec_shove (exec_noop exec_dup_items exec_empty tagged_985 integer_dup integer_shove) exec_flush integer_pop exec_stackdepth integer_yankdup exec_do*count (integer_sub exec_dup_times () exec_while (integer_div boolean_invert_first_then_and exec_flush boolean_invert_second_then_and)) exec_eq print_exec (57 boolean_shove integer_sub in3))) ()) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 100 46 46 504 100 53 46 800 47)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (100 100 46 46 504 100 53 46 800 47)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (exec_s_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_shove exec_rot (exec_do*range (integer_dup boolean_xor in3 print_integer) exec_yank integer_dec exec_flush exec_when (boolean_dup integer_pop boolean_swap boolean_yank in3 boolean_eq boolean_yank in3 boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (exec_stackdepth integer_dup)) in1) () (integer_sub boolean_dup_items boolean_dup_times) boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [0 0 0 0 1 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 55
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 8.158
Median total errors in population: 8
Error averages by case: (0.9 0.9 0.954 0.954 0.496 0.9 0.947 0.954 0.2 0.953)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.938
Average program size in population (points): 52.566
Average percent parens in population: 0.212
Minimum age in population: 8.75
Maximum age in population: 14.1953125
Average age in population: 12.2630859375
Median age in population: 12.34375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3963668
--- Timings ---
Current time: 1559314633882 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.9 seconds, 65.4%
Fitness Testing:      5.6 seconds, 21.8%
Report:               3.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3})
Lexicase best program: (integer_sub exec_k_when_autoconstructing (exec_do*range (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 boolean_rot) (integer_div integer_lte integer_dup_times in3 integer_dup_items integer_max) print_integer) exec_yank integer_dec exec_flush exec_when (integer_lt integer_pop integer_dup exec_s_when_autoconstructing (integer_add integer_yank boolean_frominteger print_integer exec_yankdup in3) () ())) ())
Lexicase best errors: [1 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3})
Zero cases best program: (integer_sub exec_k_when_autoconstructing (exec_do*range (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 boolean_rot) (integer_div integer_lte integer_dup_times in3 integer_dup_items integer_max) print_integer) exec_yank integer_dec exec_flush exec_when (integer_lt integer_pop integer_dup exec_s_when_autoconstructing (integer_add integer_yank boolean_frominteger print_integer exec_yankdup in3) () ())) ())
Zero cases best errors: [1 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 773 127 4 140 632 634 4 141 271)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (128 773 127 4 140 632 634 4 141 271)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3})
Best program: (in1 print_integer boolean_stackdepth integer_inc exec_do*range (exec_flush integer_pop exec_y_when_autoconstructing (integer_lt integer_add integer_sub in2 exec_flush boolean_invert_second_then_and integer_div integer_pop exec_eq print_newline integer_dup_items integer_lte) boolean_yank integer_add integer_eq exec_s (exec_pop (print_integer exec_yankdup in3)) () ()))
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.146
Median total errors in population: 7
Error averages by case: (0.872 0.227 0.873 0.996 0.86 0.368 0.366 0.996 0.859 0.729)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.632
Average program size in population (points): 54.856
Average percent parens in population: 0.262
Minimum age in population: 10.7890625
Maximum age in population: 15.51953125
Average age in population: 13.737671875
Median age in population: 13.84765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4280961
--- Timings ---
Current time: 1559314636786 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.3 seconds, 67.2%
Fitness Testing:      5.9 seconds, 20.7%
Report:               3.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: 13                 
Correct output: -96                 | Program output: 2                  
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: 26                 
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 56                 
Correct output: 7                   | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 67                 
Correct output: 23                  | Program output: 88                 
Correct output: 12                  | Program output: 36                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 73                 
Correct output: 42                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 64                 
Correct output: 12                  | Program output: 57                 
Correct output: 11                  | Program output: 20                 
Correct output: 8                   | Program output: 73                 
Correct output: 12                  | Program output: 89                 
Correct output: -89                 | Program output: 31                 
Correct output: -17                 | Program output: 82                 
Correct output: -32                 | Program output: 98                 
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -32                
Correct output: -9                  | Program output: 86                 
Correct output: 7                   | Program output: 13                 
Correct output: -82                 | Program output: -25                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: 59                 
Correct output: -90                 | Program output: -35                
Correct output: -84                 | Program output: -25                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 80                 
Correct output: -32                 | Program output: 1                  
Correct output: -69                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: 46                 
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 46                 
Correct output: -86                 | Program output: 91                 
Correct output: -92                 | Program output: 26                 
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: 32                 
Correct output: -77                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: 68                 
Correct output: 39                  | Program output: 72                 
Correct output: -99                 | Program output: 51                 
Correct output: -29                 | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 63                 
Correct output: -82                 | Program output: -1                 
Correct output: -89                 | Program output: -85                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -52                
Correct output: -35                 | Program output: 76                 
Correct output: -80                 | Program output: -43                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -28                
Correct output: -16                 | Program output: 90                 
Correct output: -28                 | Program output: 33                 
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: 6                  
Correct output: -83                 | Program output: 81                 
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction 57} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_empty integer_dup_times integer_dec integer_gt in3 exec_dup (print_integer exec_k () (exec_do*count (boolean_flush exec_dup_times (exec_k (exec_stackdepth integer_dec integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean) (print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_dup_times () exec_while (integer_div boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_invert_second_then_and) () exec_eq print_exec (57 boolean_shove integer_sub in3 integer_sub integer_shove print_exec (boolean_invert_first_then_and exec_dup_times (exec_yank) exec_k () (boolean_dup_items exec_eq integer_div exec_do*times (exec_do*times (boolean_shove exec_do*while () integer_yank) boolean_invert_second_then_and integer_dup_times exec_y_when_autoconstructing (integer_eq integer_dup_items integer_sub integer_div boolean_flush)))))))))))))
Lexicase best errors: [1 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction 57} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_empty integer_dup_times integer_dec integer_gt in3 exec_dup (print_integer exec_k () (exec_do*count (boolean_flush exec_dup_times (exec_k (exec_stackdepth integer_dec integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush exec_dup_times (print_boolean in4) integer_fromboolean) (print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_dup_times () exec_while (integer_div boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_invert_second_then_and) () exec_eq print_exec (57 boolean_shove integer_sub in3 integer_sub integer_shove print_exec (boolean_invert_first_then_and exec_dup_times (exec_yank) exec_k () (boolean_dup_items exec_eq integer_div exec_do*times (exec_do*times (boolean_shove exec_do*while () integer_yank) boolean_invert_second_then_and integer_dup_times exec_y_when_autoconstructing (integer_eq integer_dup_items integer_sub integer_div boolean_flush)))))))))))))
Zero cases best errors: [1 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 209 210 208 208 293 186 293 210 40)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (292 209 210 208 208 293 186 293 210 40)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_290} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction tag_integer_233} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_317} {:close 1, :instruction in4} {:close 2, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt integer_yankdup in2 print_boolean boolean_flush boolean_dup_items exec_empty integer_stackdepth exec_rot (tag_integer_290 boolean_frominteger) (tag_integer_233) (integer_mod boolean_eq integer_pop exec_if (tag_integer_317 in4) (boolean_swap)) print_integer in3 print_integer integer_fromboolean integer_mod boolean_frominteger integer_mult exec_do*times () boolean_and exec_dup_items boolean_shove print_integer exec_shove (integer_pop exec_rot () (exec_noop print_integer integer_min exec_do*while (exec_if (in3) () -2 boolean_dup_items exec_swap (integer_max) ())) ()))
Errors: [1 0 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 51
Size: 67
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.851
Median total errors in population: 7
Error averages by case: (0.708 0.791 0.79 0.792 0.792 0.707 0.814 0.707 0.79 0.96)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.924
Average program size in population (points): 51.797
Average percent parens in population: 0.206
Minimum age in population: 11.7890625
Maximum age in population: 16.98828125
Average age in population: 15.1282734375
Median age in population: 15.2236328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4782833
--- Timings ---
Current time: 1559314639772 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.5 seconds, 68.1%
Fitness Testing:      6.4 seconds, 20.3%
Report:               3.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 40                 
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: 52                 
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 51                 
Correct output: 7                   | Program output: 59                 
Correct output: 21                  | Program output: 64                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 34                 
Correct output: 16                  | Program output: 37                 
Correct output: 6                   | Program output: 53                 
Correct output: 42                  | Program output: 57                 
Correct output: 14                  | Program output: 45                 
Correct output: 12                  | Program output: 28                 
Correct output: 31                  | Program output: 59                 
Correct output: 3                   | Program output: 28                 
Correct output: 3                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 94                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 42                 
Correct output: 8                   | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: -89                 | Program output: 64                 
Correct output: -17                 | Program output: 35                 
Correct output: -32                 | Program output: 37                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 26                 
Correct output: 7                   | Program output: 83                 
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: 13                 
Correct output: -32                 | Program output: 12                 
Correct output: -69                 | Program output: 52                 
Correct output: 5                   | Program output: 51                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 90                 
Correct output: -25                 | Program output: 84                 
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: 51                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 96                 
Correct output: -77                 | Program output: 47                 
Correct output: -68                 | Program output: 2                  
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 39                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 96                 
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 97                 
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: 64                 
Correct output: -82                 | Program output: 96                 
Correct output: -89                 | Program output: 75                 
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output: 56                 
Correct output: -58                 | Program output: 26                 
Correct output: -35                 | Program output: 15                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 43                 
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: 76                 
Correct output: -24                 | Program output: 32                 
Correct output: -100                | Program output: 14                 
Correct output: -33                 | Program output: 80                 
Correct output: 31                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_487})
Lexicase best program: (in2 integer_max print_boolean integer_gt boolean_yankdup in2 boolean_not exec_dup (integer_swap print_integer boolean_frominteger integer_gt tag_exec_487 ()))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_487})
Zero cases best program: (in2 integer_max print_boolean integer_gt boolean_yankdup in2 boolean_not exec_dup (integer_swap print_integer boolean_frominteger integer_gt tag_exec_487 ()))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 181 456 181 181 273 183 1000 1000 1000)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (275 181 456 181 181 273 183 0 0 0)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (in2 integer_max print_boolean integer_yank boolean_yankdup in2 exec_do*range (integer_fromboolean) print_integer exec_eq integer_min exec_dup_items exec_swap (exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_noop) integer_pop) (integer_dup_items integer_mod) exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 44
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 8.27
Median total errors in population: 9
Error averages by case: (0.725 0.819 0.544 0.819 0.819 0.727 0.817 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 37.886
Average program size in population (points): 50.355
Average percent parens in population: 0.249
Minimum age in population: 13.1875
Maximum age in population: 18.90625
Average age in population: 16.7951806640625
Median age in population: 16.89453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5074850
--- Timings ---
Current time: 1559314642605 milliseconds
Total Time:          34.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.8 seconds, 69.0%
Fitness Testing:      6.7 seconds, 19.5%
Report:               3.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 00                 
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output:                    
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_sub integer_max exec_do*range (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 integer_dup_items integer_max) (print_integer) exec_yank integer_dec exec_flush boolean_invert_first_then_and boolean_flush integer_pop integer_dup exec_s_when_autoconstructing (integer_add) (integer_yank boolean_frominteger exec_when () exec_do*times () exec_y_when_autoconstructing (integer_sub) exec_flush in3 boolean_stackdepth exec_swap (exec_swap () (boolean_dup_times)) ()) ()))
Lexicase best errors: [0 0 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 57
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_sub integer_max exec_do*range (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 integer_dup_items integer_max) (print_integer) exec_yank integer_dec exec_flush boolean_invert_first_then_and boolean_flush integer_pop integer_dup exec_s_when_autoconstructing (integer_add) (integer_yank boolean_frominteger exec_when () exec_do*times () exec_y_when_autoconstructing (integer_sub) exec_flush in3 boolean_stackdepth exec_swap (exec_swap () (boolean_dup_times)) ()) ()))
Zero cases best errors: [0 0 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (812 300 119 1000 1000 510 1000 120 300 512)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (812 300 119 0 0 510 0 120 300 512)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (exec_yank integer_fromboolean integer_mult integer_pop in2 integer_max print_boolean integer_gt integer_inc boolean_or exec_dup_items exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3) (integer_dup_items integer_max) print_integer exec_yank integer_dec exec_flush exec_when (integer_lt integer_pop integer_dup exec_s_when_autoconstructing (integer_add integer_sub boolean_dup_items boolean_dup_times) (boolean_not boolean_pop boolean_frominteger) (integer_gt in3)) -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [0 0 1 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.327
Median total errors in population: 7
Error averages by case: (0.188 0.7 0.881 1.0 1.0 0.49 1.0 0.88 0.7 0.488)
Error minima by case: (0 0 0 1 1 0 1 0 0 0)
Average genome size in population (length): 38.442
Average program size in population (points): 48.452
Average percent parens in population: 0.201
Minimum age in population: 15.0712890625
Maximum age in population: 20.40283203125
Average age in population: 18.45844873046875
Median age in population: 18.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5431523
--- Timings ---
Current time: 1559314645265 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.9 seconds, 69.6%
Fitness Testing:      7.0 seconds, 19.0%
Report:               4.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: 13                 
Correct output: -96                 | Program output: 2                  
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: 26                 
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 56                 
Correct output: 7                   | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 67                 
Correct output: 23                  | Program output: 88                 
Correct output: 12                  | Program output: 36                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 73                 
Correct output: 42                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 64                 
Correct output: 12                  | Program output: 57                 
Correct output: 11                  | Program output: 20                 
Correct output: 8                   | Program output: 73                 
Correct output: 12                  | Program output: 89                 
Correct output: -89                 | Program output: 31                 
Correct output: -17                 | Program output: 82                 
Correct output: -32                 | Program output: 98                 
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -32                
Correct output: -9                  | Program output: 86                 
Correct output: 7                   | Program output: 13                 
Correct output: -82                 | Program output: -25                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: 59                 
Correct output: -90                 | Program output: -35                
Correct output: -84                 | Program output: -25                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 80                 
Correct output: -32                 | Program output: 1                  
Correct output: -69                 | Program output: -28                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: 46                 
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 46                 
Correct output: -86                 | Program output: 91                 
Correct output: -92                 | Program output: 26                 
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: 32                 
Correct output: -77                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: 68                 
Correct output: 39                  | Program output: 72                 
Correct output: -99                 | Program output: 51                 
Correct output: -29                 | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 63                 
Correct output: -82                 | Program output: -1                 
Correct output: -89                 | Program output: -85                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -52                
Correct output: -35                 | Program output: 76                 
Correct output: -80                 | Program output: -43                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -28                
Correct output: -16                 | Program output: 90                 
Correct output: -28                 | Program output: 33                 
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: 6                  
Correct output: -83                 | Program output: 81                 
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3})
Lexicase best program: (boolean_invert_second_then_and boolean_swap in3 integer_gte boolean_stackdepth in3 boolean_dup_times print_integer exec_stackdepth tag_boolean_36 exec_do*range () exec_do*range (exec_flush integer_pop exec_y_when_autoconstructing (integer_dup_times) exec_yankdup integer_dec integer_stackdepth integer_gte exec_dup_items integer_add integer_dup_items integer_mod integer_lte boolean_invert_second_then_and integer_div integer_pop exec_y (exec_dup_times (integer_dup_items integer_lte) boolean_yank integer_add exec_flush exec_s (exec_pop (print_integer exec_yankdup in3)) () ())))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3})
Zero cases best program: (boolean_invert_second_then_and boolean_swap in3 integer_gte boolean_stackdepth in3 boolean_dup_times print_integer exec_stackdepth tag_boolean_36 exec_do*range () exec_do*range (exec_flush integer_pop exec_y_when_autoconstructing (integer_dup_times) exec_yankdup integer_dec integer_stackdepth integer_gte exec_dup_items integer_add integer_dup_items integer_mod integer_lte boolean_invert_second_then_and integer_div integer_pop exec_y (exec_dup_times (integer_dup_items integer_lte) boolean_yank integer_add exec_flush exec_s (exec_pop (print_integer exec_yankdup in3)) () ())))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 1 338 249 335 250 1 250 921 250)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (333 1 338 249 335 250 1 250 921 250)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction tag_exec_487})
Best program: (exec_s_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_shove exec_rot (exec_do*range (integer_dup boolean_xor in3 boolean_yankdup) boolean_yank boolean_stackdepth) (exec_dup (integer_swap print_integer boolean_frominteger integer_gt tag_exec_487 ())) ())) () ())
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 30
Percent parens: 0.433
--- Population Statistics ---
Average total errors in population: 7.072
Median total errors in population: 7
Error averages by case: (0.667 0.999 0.662 0.751 0.665 0.75 0.999 0.75 0.079 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.139
Average program size in population (points): 48.043
Average percent parens in population: 0.225
Minimum age in population: 16.6455078125
Maximum age in population: 22.0107421875
Average age in population: 19.90358422851562
Median age in population: 19.9891357421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5764866
--- Timings ---
Current time: 1559314648023 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 70.4%
Fitness Testing:      7.4 seconds, 18.5%
Report:               4.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction tagged_369} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (in1 print_integer boolean_stackdepth integer_inc exec_when (print_boolean exec_noop) boolean_dup_times integer_sub exec_yank print_integer exec_k (integer_shove boolean_shove print_boolean exec_k (exec_k (exec_stackdepth integer_gte) (integer_min integer_mod) exec_stackdepth integer_dup) (in1) tagged_369 integer_sub integer_min) (exec_while (integer_div boolean_invert_first_then_and exec_flush boolean_invert_second_then_and) in3) -2 -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction tagged_369} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (in1 print_integer boolean_stackdepth integer_inc exec_when (print_boolean exec_noop) boolean_dup_times integer_sub exec_yank print_integer exec_k (integer_shove boolean_shove print_boolean exec_k (exec_k (exec_stackdepth integer_gte) (integer_min integer_mod) exec_stackdepth integer_dup) (in1) tagged_369 integer_sub integer_min) (exec_while (integer_div boolean_invert_first_then_and exec_flush boolean_invert_second_then_and) in3) -2 -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (486 896 188 92 411 206 92 206 412 188)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (486 896 188 92 411 206 92 206 412 188)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in1})
Best program: (in1 print_integer boolean_stackdepth integer_inc exec_when (integer_dup_items exec_noop) print_integer exec_yank integer_dec exec_flush exec_when (integer_lt integer_pop integer_dup in1))
Errors: [0 0 1 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 6.823
Median total errors in population: 7
Error averages by case: (0.514 0.104 0.812 0.908 0.589 0.794 0.908 0.794 0.588 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.158
Average program size in population (points): 47.601
Average percent parens in population: 0.224
Minimum age in population: 17.6455078125
Maximum age in population: 23.34130859375
Average age in population: 21.40286157226562
Median age in population: 21.41827392578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6089458
--- Timings ---
Current time: 1559314650496 milliseconds
Total Time:          42.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.1 seconds, 71.0%
Fitness Testing:      7.7 seconds, 18.1%
Report:               4.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 40                 
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: 52                 
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 51                 
Correct output: 7                   | Program output: 59                 
Correct output: 21                  | Program output: 64                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 34                 
Correct output: 16                  | Program output: 37                 
Correct output: 6                   | Program output: 53                 
Correct output: 42                  | Program output: 57                 
Correct output: 14                  | Program output: 45                 
Correct output: 12                  | Program output: 28                 
Correct output: 31                  | Program output: 59                 
Correct output: 3                   | Program output: 28                 
Correct output: 3                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 94                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 42                 
Correct output: 8                   | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: -89                 | Program output: 64                 
Correct output: -17                 | Program output: 35                 
Correct output: -32                 | Program output: 37                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 26                 
Correct output: 7                   | Program output: 83                 
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: 13                 
Correct output: -32                 | Program output: 12                 
Correct output: -69                 | Program output: 52                 
Correct output: 5                   | Program output: 51                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 90                 
Correct output: -25                 | Program output: 84                 
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: 51                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 96                 
Correct output: -77                 | Program output: 47                 
Correct output: -68                 | Program output: 2                  
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 39                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 96                 
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 97                 
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: 64                 
Correct output: -82                 | Program output: 96                 
Correct output: -89                 | Program output: 75                 
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output: 56                 
Correct output: -58                 | Program output: 26                 
Correct output: -35                 | Program output: 15                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 43                 
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: 76                 
Correct output: -24                 | Program output: 32                 
Correct output: -100                | Program output: 14                 
Correct output: -33                 | Program output: 80                 
Correct output: 31                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt exec_swap (in2 print_boolean boolean_flush boolean_dup_items print_boolean in2 integer_fromboolean) (print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod) exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger exec_empty in3 -2 -2 boolean_dup_items exec_swap () ())
Lexicase best errors: [0 1 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt exec_swap (in2 print_boolean boolean_flush boolean_dup_items print_boolean in2 integer_fromboolean) (print_integer exec_eq integer_min exec_dup_items boolean_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank integer_pop) integer_dup_items integer_mod) exec_stackdepth integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger exec_empty in3 -2 -2 boolean_dup_items exec_swap () ())
Zero cases best errors: [0 1 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 205 246 205 234 246 237 234 237 719)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (247 205 246 205 234 246 237 234 237 719)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (in2 integer_max print_boolean integer_gt boolean_yankdup in2 exec_do*range (integer_fromboolean) print_integer exec_eq integer_min exec_dup_items exec_swap (exec_do*while (boolean_swap boolean_yank exec_swap (boolean_eq exec_yank) (integer_pop) integer_dup_items integer_mod exec_stackdepth integer_dup)) (in1) integer_sub integer_shove boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [0 1 0 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.19
Median total errors in population: 7
Error averages by case: (0.753 0.795 0.754 0.795 0.766 0.754 0.763 0.766 0.763 0.281)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.866
Average program size in population (points): 46.87
Average percent parens in population: 0.192
Minimum age in population: 18.8564453125
Maximum age in population: 24.885498046875
Average age in population: 22.88038629150391
Median age in population: 22.91357421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6437585
--- Timings ---
Current time: 1559314653195 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.2 seconds, 71.5%
Fitness Testing:      8.0 seconds, 17.8%
Report:               4.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 3, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (in1 print_integer boolean_stackdepth integer_inc exec_when (print_boolean boolean_invert_second_then_and) boolean_dup_times exec_do*while (exec_s_when_autoconstructing (exec_noop) () () exec_when (exec_do*while (exec_s (integer_add) (integer_sub in2 integer_sub boolean_invert_second_then_and integer_div integer_dup_times exec_eq boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 in1 exec_swap () (integer_max)))))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 3, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (in1 print_integer boolean_stackdepth integer_inc exec_when (print_boolean boolean_invert_second_then_and) boolean_dup_times exec_do*while (exec_s_when_autoconstructing (exec_noop) () () exec_when (exec_do*while (exec_s (integer_add) (integer_sub in2 integer_sub boolean_invert_second_then_and integer_div integer_dup_times exec_eq boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 in1 exec_swap () (integer_max)))))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (561 341 750 154 201 207 205 550 205 203)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (561 341 750 154 201 207 205 550 205 203)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 3, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_integer_148})
Best program: (in1 print_integer boolean_stackdepth integer_inc exec_when (print_boolean exec_noop) print_boolean integer_sub exec_yank exec_noop exec_when (exec_do*while (integer_lt integer_add) integer_sub in2 print_boolean exec_k (exec_k (exec_stackdepth integer_dec integer_pop exec_do*count (boolean_stackdepth exec_noop) exec_dup_items exec_empty tag_integer_148) ()) ()))
Errors: [0 1 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 6.623
Median total errors in population: 7
Error averages by case: (0.439 0.659 0.25 0.846 0.799 0.793 0.795 0.45 0.795 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.94
Average program size in population (points): 46.666
Average percent parens in population: 0.184
Minimum age in population: 20.796875
Maximum age in population: 26.25
Average age in population: 24.38996838378906
Median age in population: 24.44937133789062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6790203
--- Timings ---
Current time: 1559314656306 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.6 seconds, 72.1%
Fitness Testing:      8.4 seconds, 17.4%
Report:               4.9 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 40                 
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: 52                 
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 51                 
Correct output: 7                   | Program output: 59                 
Correct output: 21                  | Program output: 64                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 34                 
Correct output: 16                  | Program output: 37                 
Correct output: 6                   | Program output: 53                 
Correct output: 42                  | Program output: 57                 
Correct output: 14                  | Program output: 45                 
Correct output: 12                  | Program output: 28                 
Correct output: 31                  | Program output: 59                 
Correct output: 3                   | Program output: 28                 
Correct output: 3                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 94                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 42                 
Correct output: 8                   | Program output: 39                 
Correct output: 12                  | Program output: 12                 
Correct output: -89                 | Program output: 64                 
Correct output: -17                 | Program output: 35                 
Correct output: -32                 | Program output: 37                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 26                 
Correct output: 7                   | Program output: 83                 
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: 13                 
Correct output: -32                 | Program output: 12                 
Correct output: -69                 | Program output: 52                 
Correct output: 5                   | Program output: 51                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 90                 
Correct output: -25                 | Program output: 84                 
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: 51                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 96                 
Correct output: -77                 | Program output: 47                 
Correct output: -68                 | Program output: 2                  
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 39                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 96                 
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 97                 
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: 64                 
Correct output: -82                 | Program output: 96                 
Correct output: -89                 | Program output: 75                 
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output: 56                 
Correct output: -58                 | Program output: 26                 
Correct output: -35                 | Program output: 15                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 43                 
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: 76                 
Correct output: -24                 | Program output: 32                 
Correct output: -100                | Program output: 14                 
Correct output: -33                 | Program output: 80                 
Correct output: 31                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 2, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max})
Lexicase best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup boolean_pop boolean_frominteger integer_gt in3 -2 exec_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_dup_times (integer_max))
Lexicase best errors: [1 0 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.047
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 2, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max})
Zero cases best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup boolean_pop boolean_frominteger integer_gt in3 -2 exec_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_dup_times (integer_max))
Zero cases best errors: [1 0 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.047
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 193 482 193 193 126 126 785 126 106)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (126 193 482 193 193 126 126 785 126 106)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div})
Best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean in2 print_boolean print_integer integer_flush integer_min in2 boolean_or boolean_xor exec_flush integer_max boolean_stackdepth integer_dup exec_while (boolean_yank) in1 exec_do*times () integer_gt integer_fromboolean exec_s_when_autoconstructing (exec_when (exec_rot (exec_k_when_autoconstructing (integer_div) (integer_pop exec_rot (integer_div) () ())) () ())) () ())
Errors: [0 1 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.544
Median total errors in population: 8
Error averages by case: (0.874 0.807 0.518 0.807 0.807 0.874 0.874 0.215 0.874 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.428
Average program size in population (points): 47.164
Average percent parens in population: 0.202
Minimum age in population: 21.796875
Maximum age in population: 28.00048828125
Average age in population: 25.80791920471191
Median age in population: 25.84745025634766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7122294
--- Timings ---
Current time: 1559314658985 milliseconds
Total Time:          50.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 72.3%
Fitness Testing:      8.7 seconds, 17.1%
Report:               5.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 86                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 72                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output: 73                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: 93                 
Correct output: -61                 | Program output: -60                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -28                
Correct output: -90                 | Program output: -55                
Correct output: -84                 | Program output: -21                
Correct output: -48                 | Program output: 9                  
Correct output: -94                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 58                 
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: 46                 
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: 94                 
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -15                
Correct output: 39                  | Program output: 91                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: 87                 
Correct output: -94                 | Program output: 25                 
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: 61                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -10                
Correct output: -43                 | Program output: 48                 
Correct output: -89                 | Program output: 65                 
Correct output: -31                 | Program output: -24                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 5                  
Correct output: -76                 | Program output: -11                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank))
Lexicase best errors: [1 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank))
Zero cases best errors: [1 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 789 307 107 307 106 376 902 308 112)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (112 789 307 107 307 106 376 902 308 112)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (exec_dup_times (boolean_yank in3 boolean_eq exec_yank) integer_pop) integer_dup_items integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 0 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 45
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.574
Median total errors in population: 7
Error averages by case: (0.888 0.211 0.693 0.893 0.693 0.894 0.624 0.098 0.692 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.876
Average program size in population (points): 45.54
Average percent parens in population: 0.165
Minimum age in population: 23.7373046875
Maximum age in population: 29.27324676513672
Average age in population: 27.33384945678711
Median age in population: 27.38530731201172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7502371
--- Timings ---
Current time: 1559314661916 milliseconds
Total Time:          53.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 72.8%
Fitness Testing:      9.0 seconds, 16.8%
Report:               5.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 04                 
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_487})
Lexicase best program: (boolean_eq integer_gte boolean_or integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div boolean_or integer_dup_times in3 integer_dup_items integer_max) (print_integer) exec_yank tag_exec_487 ())
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_487})
Zero cases best program: (boolean_eq integer_gte boolean_or integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div boolean_or integer_dup_times in3 integer_dup_items integer_max) (print_integer) exec_yank tag_exec_487 ())
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (357 357 228 228 787 228 201 356 357 202)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (357 357 228 228 787 228 201 356 357 202)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (in2 in1 print_integer boolean_stackdepth integer_inc exec_when (print_boolean exec_noop) boolean_dup_times exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_add in3) (integer_dup_items integer_max) print_integer exec_yank boolean_eq exec_flush boolean_invert_second_then_and integer_dup_items integer_max print_integer exec_yank integer_dec boolean_eq exec_yank integer_pop integer_dup_items integer_mod exec_stackdepth integer_dup in1 integer_sub boolean_dup_items exec_empty boolean_not exec_when (boolean_frominteger integer_gt in3) -2 boolean_dup_items integer_dup exec_s_when_autoconstructing (integer_add integer_yank boolean_frominteger exec_when ()) (exec_do*range () exec_swap (integer_max) ()) ())
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 69
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 6.699
Median total errors in population: 6
Error averages by case: (0.643 0.643 0.772 0.772 0.213 0.772 0.799 0.644 0.643 0.798)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.505
Average program size in population (points): 46.025
Average percent parens in population: 0.182
Minimum age in population: 25.63092041015625
Maximum age in population: 30.94357681274414
Average age in population: 28.7955518951416
Median age in population: 28.84531402587891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7863479
--- Timings ---
Current time: 1559314664933 milliseconds
Total Time:          56.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.6 seconds, 73.2%
Fitness Testing:      9.4 seconds, 16.5%
Report:               5.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 86                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 72                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 63                 
Correct output: 31                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 38                 
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output: 73                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: 93                 
Correct output: -61                 | Program output: -60                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 87                 
Correct output: -75                 | Program output: -28                
Correct output: -90                 | Program output: -55                
Correct output: -84                 | Program output: -21                
Correct output: -48                 | Program output: 9                  
Correct output: -94                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 58                 
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: 46                 
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: 94                 
Correct output: -2                  | Program output: 87                 
Correct output: -51                 | Program output: -15                
Correct output: 39                  | Program output: 91                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: 87                 
Correct output: -94                 | Program output: 25                 
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: 61                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -10                
Correct output: -43                 | Program output: 48                 
Correct output: -89                 | Program output: 65                 
Correct output: -31                 | Program output: -24                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 5                  
Correct output: -76                 | Program output: -11                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 81                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3})
Lexicase best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank in3))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.074
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3})
Zero cases best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank in3))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.074
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 278 278 3 234 3 279 235 279 386)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (386 278 278 3 234 3 279 235 279 386)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_add integer_swap integer_mult integer_pop in2 integer_max print_boolean integer_gt boolean_yankdup in2 print_boolean boolean_flush integer_flush print_boolean in4 integer_yankdup print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank in3 boolean_eq exec_yank) integer_pop integer_dup_items integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not boolean_pop boolean_frominteger integer_gt in3 -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 0 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 45
Size: 49
Percent parens: 0.082
--- Population Statistics ---
Average total errors in population: 7.639
Median total errors in population: 8
Error averages by case: (0.614 0.722 0.722 0.997 0.766 0.997 0.721 0.765 0.721 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.328
Average program size in population (points): 46.856
Average percent parens in population: 0.202
Minimum age in population: 27.21484375
Maximum age in population: 32.2192268371582
Average age in population: 30.24999919891357
Median age in population: 30.26167392730713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8193607
--- Timings ---
Current time: 1559314667861 milliseconds
Total Time:          59.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.9 seconds, 73.6%
Fitness Testing:      9.7 seconds, 16.2%
Report:               6.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: 13                 
Correct output: -96                 | Program output: 2                  
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: 26                 
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 31                 
Correct output: -17                 | Program output: 82                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: -32                
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: -25                
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: 59                 
Correct output: -90                 | Program output: -35                
Correct output: -84                 | Program output: -25                
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 80                 
Correct output: -32                 | Program output: 1                  
Correct output: -69                 | Program output: -28                
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: 46                 
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 26                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 32                 
Correct output: -77                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 68                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 51                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 63                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -85                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -52                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: -43                
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: -28                
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 33                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 in4) (integer_yankdup) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger exec_if () (in4 integer_dec) integer_min integer_sub integer_yankdup) exec_yank) (integer_pop) (integer_dup_items) integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 in4) (integer_yankdup) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger exec_if () (in4 integer_dec) integer_min integer_sub integer_yankdup) exec_yank) (integer_pop) (integer_dup_items) integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (379 209 353 177 903 376 176 209 177 209)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (379 209 353 177 903 376 176 209 177 209)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 in4) (integer_yankdup) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger exec_if () (in4 integer_dec) integer_min integer_sub integer_yankdup) exec_yank) (integer_pop) (integer_dup_items) integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 0 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.832
Median total errors in population: 7
Error averages by case: (0.621 0.791 0.647 0.823 0.097 0.624 0.824 0.791 0.823 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.465
Average program size in population (points): 51.065
Average percent parens in population: 0.180
Minimum age in population: 29.33073806762695
Maximum age in population: 33.68956851959229
Average age in population: 31.96071223258972
Median age in population: 31.98319625854492
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8578358
--- Timings ---
Current time: 1559314670738 milliseconds
Total Time:          62.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.1 seconds, 73.8%
Fitness Testing:     10.1 seconds, 16.1%
Report:               6.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 56                 
Correct output: 7                   | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 67                 
Correct output: 23                  | Program output: 88                 
Correct output: 12                  | Program output: 36                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 73                 
Correct output: 42                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 64                 
Correct output: 12                  | Program output: 57                 
Correct output: 11                  | Program output: 20                 
Correct output: 8                   | Program output: 73                 
Correct output: 12                  | Program output: 89                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: 98                 
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: 86                 
Correct output: 7                   | Program output: 13                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 46                 
Correct output: -86                 | Program output: 91                 
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 72                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -1                 
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: 76                 
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: 90                 
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 81                 
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: -33                
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 in4) (integer_dup_times) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger exec_if () (in4 integer_dec) integer_min integer_sub integer_yankdup) exec_yank) (integer_pop) (integer_dup_items) integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 boolean_dup_items exec_swap (integer_max) ())
Lexicase best errors: [1 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 in4) (integer_dup_times) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger exec_if () (in4 integer_dec) integer_min integer_sub integer_yankdup) exec_yank) (integer_pop) (integer_dup_items) integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 boolean_dup_items exec_swap (integer_max) ())
Zero cases best errors: [1 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (436 363 12 12 363 11 944 435 8 12)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (436 363 12 12 363 11 944 435 8 12)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction -2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 exec_when () integer_div integer_lte integer_dup_times in3 in4) (integer_dup_times) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger exec_if () (in4 integer_dec) integer_min integer_sub integer_yankdup) exec_yank) (integer_pop) (integer_dup_items) integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in3) () -2 boolean_dup_items exec_swap (integer_max) ())
Errors: [1 1 0 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.404
Median total errors in population: 7
Error averages by case: (0.564 0.637 0.988 0.988 0.637 0.989 0.056 0.565 0.992 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.672
Average program size in population (points): 52.661
Average percent parens in population: 0.183
Minimum age in population: 31.0479736328125
Maximum age in population: 35.07523822784424
Average age in population: 33.50552728700638
Median age in population: 33.59796857833862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8991031
--- Timings ---
Current time: 1559314673361 milliseconds
Total Time:          65.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 73.8%
Fitness Testing:     10.4 seconds, 16.0%
Report:               6.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 512
Test mean error for best: 0.51200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: -1                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: -64                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -21                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: -27                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_rot (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and print_boolean) (in2) integer_yankdup) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_rot (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and print_boolean) (in2) integer_yankdup) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 445 482 5 447 5 925 926 935 5)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (333 445 482 5 447 5 925 926 935 5)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_rot (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and print_boolean) (in2) integer_yankdup) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.492
Median total errors in population: 6
Error averages by case: (0.667 0.555 0.518 0.995 0.553 0.995 0.075 0.074 0.065 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.539
Average program size in population (points): 58.684
Average percent parens in population: 0.238
Minimum age in population: 33.36608171463013
Maximum age in population: 36.56857013702393
Average age in population: 35.43338223147392
Median age in population: 35.37036204338074
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9422810
--- Timings ---
Current time: 1559314676374 milliseconds
Total Time:          68.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 73.9%
Fitness Testing:     10.9 seconds, 15.9%
Report:               6.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: 74                 
Correct output: 14                  | Program output: 92                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 86                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 38                 
Correct output: 42                  | Program output: 65                 
Correct output: 14                  | Program output: 88                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 10                 
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 88                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 97                 
Correct output: 12                  | Program output: 47                 
Correct output: -89                 | Program output: 75                 
Correct output: -17                 | Program output: 68                 
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -23                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: 70                 
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 34                 
Correct output: -82                 | Program output: 29                 
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: 75                 
Correct output: -84                 | Program output: 4                  
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: 9                  
Correct output: -32                 | Program output: 37                 
Correct output: -69                 | Program output: 86                 
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -11                
Correct output: -61                 | Program output: 91                 
Correct output: -25                 | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 39                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: 60                 
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -36                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: 62                 
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: 29                 
Correct output: -29                 | Program output: 42                 
Correct output: 0                   | Program output: 100                
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -27                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: 71                 
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: 37                 
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: 41                 
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: 76                 
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 56                 
Correct output: -33                 | Program output: 43                 
Correct output: 31                  | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_rot (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and print_boolean) (exec_when () integer_yankdup) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_rot (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and print_boolean) (exec_when () integer_yankdup) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (924 184 157 3 469 184 920 469 107 23)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (924 184 157 3 469 184 920 469 107 23)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_rot (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean integer_yankdup) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) integer_dup_items integer_mod) (integer_eq integer_dup) () in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 1 1 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.56
Median total errors in population: 6
Error averages by case: (0.076 0.816 0.843 0.997 0.531 0.816 0.08 0.531 0.893 0.977)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.917
Average program size in population (points): 51.155
Average percent parens in population: 0.216
Minimum age in population: 35.89711380004883
Maximum age in population: 38.20924949645996
Average age in population: 36.86020259106159
Median age in population: 36.89711380004883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9835305
--- Timings ---
Current time: 1559314678948 milliseconds
Total Time:          70.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.2 seconds, 73.8%
Fitness Testing:     11.3 seconds, 15.9%
Report:               7.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 64                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 28                 
Correct output: 31                  | Program output: 59                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 37                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 51                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 39                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 91                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: 56                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 15                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 32                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min integer_sub boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [1 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min integer_sub boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [1 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 309 342 105 170 171 12 104 612 12)
Population mean number of elite cases: 2.04
Count of perfect (error zero) individuals by case: (207 309 342 105 170 171 12 104 612 12)
Population mean number of perfect (error zero) cases: 2.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min integer_sub boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [1 0 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 61
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.956
Median total errors in population: 8
Error averages by case: (0.793 0.691 0.658 0.895 0.83 0.829 0.988 0.896 0.388 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.395
Average program size in population (points): 57.749
Average percent parens in population: 0.229
Minimum age in population: 36.89711380004883
Maximum age in population: 40.15039622783661
Average age in population: 38.87871576541662
Median age in population: 38.89711380004883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10393950
--- Timings ---
Current time: 1559314681799 milliseconds
Total Time:          73.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.2 seconds, 73.7%
Fitness Testing:     11.8 seconds, 16.0%
Report:               7.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 64                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 28                 
Correct output: 31                  | Program output: 59                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 37                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 51                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 39                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 91                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: 56                 
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 15                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 32                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in2})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (exec_do*while (in2 print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in2) ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 57
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 2, :instruction in2})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (exec_do*while (in2 print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min integer_sub boolean_dup_items exec_if (boolean_not boolean_pop boolean_frominteger integer_gt in2) ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 57
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (732 349 509 357 510 348 935 690 314 356)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (732 349 509 357 510 348 935 690 314 356)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_dup_items) (integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec integer_min integer_sub boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 61
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 4.9
Median total errors in population: 5
Error averages by case: (0.268 0.651 0.491 0.643 0.49 0.652 0.065 0.31 0.686 0.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.966
Average program size in population (points): 59.95
Average percent parens in population: 0.232
Minimum age in population: 38.50209772586823
Maximum age in population: 41.88762524724007
Average age in population: 40.78356501170993
Median age in population: 40.82236230373383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10894857
--- Timings ---
Current time: 1559314684624 milliseconds
Total Time:          76.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.1 seconds, 73.6%
Fitness Testing:     12.3 seconds, 16.1%
Report:               7.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 67                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 64                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 72                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: -33                
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min integer_sub boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) integer_dup_items integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 68
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min integer_sub boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) integer_dup_items integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 68
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (914 926 914 932 294 293 17 908 932 929)
Population mean number of elite cases: 7.06
Count of perfect (error zero) individuals by case: (914 926 914 932 294 293 17 908 932 929)
Population mean number of perfect (error zero) cases: 7.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min integer_sub boolean_yank boolean_xor boolean_eq exec_yank) integer_pop integer_dup_items integer_mod integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 55
Size: 68
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 2.941
Median total errors in population: 3
Error averages by case: (0.086 0.074 0.086 0.068 0.706 0.707 0.983 0.092 0.068 0.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.093
Average program size in population (points): 63.313
Average percent parens in population: 0.209
Minimum age in population: 40.77760556340218
Maximum age in population: 43.63524588942528
Average age in population: 42.56649758948386
Median age in population: 42.47511360049248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 11587127
--- Timings ---
Current time: 1559314687691 milliseconds
Total Time:          79.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 73.2%
Fitness Testing:     12.9 seconds, 16.3%
Report:               8.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 373
Test mean error for best: 0.37300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 21                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 19                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 33                 
Correct output: 31                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 7                  
Correct output: 26                  | Program output: 73                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 6                  
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -12                
Correct output: -94                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 6                  
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -69                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: 22                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -12                
Correct output: -2                  | Program output: 59                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -59                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -7                 
Correct output: -89                 | Program output: -12                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -43                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 exec_do*times () integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 82
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 exec_do*times () integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 82
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (821 862 41 426 865 426 5 427 798 425)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (821 862 41 426 865 426 5 427 798 425)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (in1 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) (integer_dup_items integer_mod) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 90
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 4.904
Median total errors in population: 6
Error averages by case: (0.179 0.138 0.959 0.574 0.135 0.574 0.995 0.573 0.202 0.575)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.629
Average program size in population (points): 74.228
Average percent parens in population: 0.196
Minimum age in population: 42.9616215378046
Maximum age in population: 45.51514667272568
Average age in population: 44.38532072403282
Median age in population: 44.47511360049248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12721395
--- Timings ---
Current time: 1559314691357 milliseconds
Total Time:          82.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.9 seconds, 72.4%
Fitness Testing:     14.0 seconds, 16.9%
Report:               8.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 345
Test mean error for best: 0.34500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 17                 
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 67                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 64                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -13                
Correct output: -68                 | Program output: -68                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 72                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -55                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: 28                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: 30                 
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) (integer_dup_items integer_div) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 72
Percent parens: 0.181
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) (integer_dup_items integer_div) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 72
Percent parens: 0.181
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 23 3 937 875 926 919 924 922 937)
Population mean number of elite cases: 6.91
Count of perfect (error zero) individuals by case: (449 23 3 937 875 926 919 924 922 937)
Population mean number of perfect (error zero) cases: 6.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) (integer_dup_items integer_div) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 59
Size: 72
Percent parens: 0.181
--- Population Statistics ---
Average total errors in population: 3.085
Median total errors in population: 3
Error averages by case: (0.551 0.977 0.997 0.063 0.125 0.074 0.081 0.076 0.078 0.063)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.548
Average program size in population (points): 81.83
Average percent parens in population: 0.199
Minimum age in population: 43.9616215378046
Maximum age in population: 47.08999455347657
Average age in population: 46.2035019344911
Median age in population: 45.9616215378046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13859207
--- Timings ---
Current time: 1559314694937 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.9 seconds, 71.6%
Fitness Testing:     15.0 seconds, 17.3%
Report:               9.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 370
Test mean error for best: 0.37000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) (integer_dup_items integer_mod) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) (integer_dup_items integer_mod) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (661 660 216 399 105 902 655 905 660 408)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (661 660 216 399 105 902 655 905 660 408)
Population mean number of perfect (error zero) cases: 5.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean boolean_flush boolean_and boolean_and in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer exec_eq integer_min exec_dup_items integer_dup exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) (integer_dup_items integer_mod) integer_eq integer_dup in1 integer_sub boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 81
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 4.429
Median total errors in population: 4
Error averages by case: (0.339 0.34 0.784 0.601 0.895 0.098 0.345 0.095 0.34 0.592)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.955
Average program size in population (points): 76.526
Average percent parens in population: 0.190
Minimum age in population: 45.83999455347657
Maximum age in population: 49.02580804564059
Average age in population: 48.16137762938626
Median age in population: 47.9616215378046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.01
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 14999606
--- Timings ---
Current time: 1559314698554 milliseconds
Total Time:          90.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.8 seconds, 70.9%
Fitness Testing:     16.0 seconds, 17.8%
Report:              10.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 351
Test mean error for best: 0.35100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -51                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 64                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 16                  | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 28                 
Correct output: 31                  | Program output: 59                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 37                 
Correct output: -96                 | Program output: -58                
Correct output: -89                 | Program output: -81                
Correct output: -61                 | Program output: -60                
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 11                 
Correct output: -75                 | Program output: -72                
Correct output: -90                 | Program output: -55                
Correct output: -84                 | Program output: -21                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 51                 
Correct output: -91                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -39                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -65                
Correct output: -2                  | Program output: 39                 
Correct output: -51                 | Program output: -15                
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: -79                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -14                
Correct output: -94                 | Program output: -20                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: 56                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: 15                 
Correct output: -80                 | Program output: -10                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -31                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 32                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) integer_dup_items integer_mod integer_eq integer_dup in1 in3 boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) integer_dup_items integer_mod integer_eq integer_dup in1 in3 boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (902 901 30 903 915 903 626 6 24 915)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (902 901 30 903 915 903 626 6 24 915)
Population mean number of perfect (error zero) cases: 6.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (in2 print_boolean boolean_flush boolean_and boolean_and integer_dup_times) print_boolean boolean_flush boolean_and boolean_and in4) (integer_min) print_integer exec_eq integer_min exec_do*while (boolean_swap boolean_frominteger integer_div) in4 integer_dec) (integer_min boolean_swap boolean_yank boolean_xor boolean_eq exec_yank) (integer_pop) integer_dup_items integer_mod integer_eq integer_dup in1 in3 boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 81
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 3.875
Median total errors in population: 3
Error averages by case: (0.098 0.099 0.97 0.097 0.085 0.097 0.374 0.994 0.976 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.917
Average program size in population (points): 80.859
Average percent parens in population: 0.197
Minimum age in population: 46.83999455347657
Maximum age in population: 50.8366215378046
Average age in population: 49.81597702060081
Median age in population: 49.7116215378046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 16079647
--- Timings ---
Current time: 1559314701961 milliseconds
Total Time:          93.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.8 seconds, 70.3%
Fitness Testing:     17.0 seconds, 18.1%
Report:              10.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 370
Test mean error for best: 0.37000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 64
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 64
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (806 806 876 918 806 912 57 885 888 284)
Population mean number of elite cases: 7.24
Count of perfect (error zero) individuals by case: (806 806 876 918 806 912 57 885 888 284)
Population mean number of perfect (error zero) cases: 7.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup} {:close 2, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not})
Best program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 49
Size: 64
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 2.762
Median total errors in population: 2
Error averages by case: (0.194 0.194 0.124 0.082 0.194 0.088 0.943 0.115 0.112 0.716)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.955
Average program size in population (points): 80.994
Average percent parens in population: 0.198
Minimum age in population: 49.9616215378046
Maximum age in population: 52.7116215378046
Average age in population: 51.24415516875125
Median age in population: 51.3366215378046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 237
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.011
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 16832686
--- Timings ---
Current time: 1559314705095 milliseconds
Total Time:          96.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 70.0%
Fitness Testing:     17.7 seconds, 18.3%
Report:              11.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 32
Successful program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 64


Auto-simplifying with starting size: 64
step: 0
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 500
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 1000
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 1500
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 2000
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 2500
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 3000
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 3500
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 4000
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 4500
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 5000
program: (integer_sub integer_pop exec_s_when_autoconstructing (exec_k_when_autoconstructing () (boolean_eq integer_inc boolean_or) integer_div exec_s_when_autoconstructing () (in1 in2 print_boolean exec_s_when_autoconstructing () (in1 in2 print_boolean in3 in4) (integer_dup_times) print_boolean print_boolean exec_s_when_autoconstructing () (boolean_swap in2 print_boolean integer_yank integer_stackdepth boolean_and integer_dup_times) (print_boolean boolean_flush boolean_and boolean_and in4) integer_min) (print_integer boolean_xor boolean_eq exec_yank) integer_pop) (integer_dup_items integer_mod) (integer_eq integer_dup) in1 in3 boolean_dup_items boolean_dup_times boolean_not)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 370
Test mean error for best: 0.37000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 74                  | Program output: 74                 
Correct output: -70                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -51                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -10                 | Program output: -10                
Correct output: -59                 | Program output: -59                
Correct output: 9                   | Program output: 9                  
Correct output: -25                 | Program output: -25                
Correct output: 59                  | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: 50                  | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 21                  | Program output: 61                 
Correct output: 67                  | Program output: 82                 
Correct output: 23                  | Program output: 56                 
Correct output: 12                  | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 46                 
Correct output: 14                  | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 62                 
Correct output: 20                  | Program output: 20                 
Correct output: 12                  | Program output: 41                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 15                 
Correct output: -89                 | Program output: -89                
Correct output: -17                 | Program output: -17                
Correct output: -32                 | Program output: 71                 
Correct output: -96                 | Program output: -86                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -9                  | Program output: -9                 
Correct output: 7                   | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: 6                   | Program output: 73                 
Correct output: -75                 | Program output: -75                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -69                 | Program output: -69                
Correct output: 5                   | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -7                 
Correct output: -69                 | Program output: -65                
Correct output: 38                  | Program output: 38                 
Correct output: -86                 | Program output: 55                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -2                  | Program output: -2                 
Correct output: -51                 | Program output: -51                
Correct output: 39                  | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: 41                 
Correct output: 0                   | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -14                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -35                
Correct output: -99                 | Program output: -17                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -43                 | Program output: 40                 
Correct output: -89                 | Program output: 38                 
Correct output: -31                 | Program output: -31                
Correct output: -16                 | Program output: -16                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -92                
Correct output: -76                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 67                 
Correct output: -100                | Program output: -50                
Correct output: -33                 | Program output: 20                 
Correct output: 31                  | Program output: 31                 
;;******************************
