Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[9 9 0 9] 0] [[52 -99 -99 -99] -99] [[-61 37 -61 -61] -61] [[75 57 57 57] 57] [[14 -41 14 14] -41] [[58 58 7 58] 7] [[-20 -20 -20 58] -20] [[-27 -27 -27 -26] -27] [[53 -16 -16 -16] -16] [[88 -93 88 88] -93] [(-96 -96 -96 -96) -96] [(-68 -68 -68 -68) -68] [(68 68 68 68) 68] [(-4 -4 -4 -4) -4] [(-26 -26 -26 -26) -26] [(71 42 2 87) 2] [(65 72 81 77) 65] [(100 4 15 26) 4] [(71 50 68 46) 46] [(83 93 28 78) 28] [(3 51 63 26) 3] [(38 47 97 26) 26] [(49 50 14 40) 14] [(13 40 89 84) 13] [(95 61 99 74) 61] [(26 10 19 87) 10] [(7 83 82 56) 7] [(18 95 31 34) 18] [(75 9 10 6) 6] [(97 8 79 18) 8] [(98 41 67 15) 15] [(35 95 3 88) 3] [(84 47 40 0) 0] [(44 64 2 96) 2] [(8 33 29 26) 8] [(98 -6 -37 -71) -71] [(56 -53 -42 -93) -93] [(-91 5 29 -11) -91] [(-3 59 89 -40) -40] [(-95 61 24 -55) -95] [(-20 -99 -18 86) -99] [(66 58 21 -72) -72] [(40 71 -97 63) -97] [(-5 16 -3 -81) -81] [(-41 -79 25 -90) -90] [(-51 -31 19 -35) -51] [(-85 -22 -48 6) -85] [(15 -41 43 34) -41] [(-45 40 -10 -12) -45] [(60 -11 88 69) -11] [(57 43 -43 55) -43] [(-94 -64 -37 4) -94] [(27 -68 -83 97) -83] [(-94 -78 27 2) -94] [(79 24 56 -80) -80] [(-6 -19 -16 -78) -78] [(-50 22 -82 51) -82] [(-17 -82 49 86) -82] [(-44 27 97 5) -44] [(77 45 96 25) 25] [(-13 89 93 63) -13] [(-35 -38 61 36) -38] [(-28 -64 -92 -23) -92] [(24 -45 28 72) -45] [(23 58 -41 -30) -41] [(68 4 41 -82) -82] [(-13 57 33 5) -13] [(15 -99 -87 -48) -99] [(-92 2 55 83) -92] [(57 97 -89 51) -89] [(39 -25 28 9) -25] [(-55 -50 -66 34) -66] [(33 -44 -94 -33) -94] [(14 -69 -20 -79) -79] [(36 61 100 -93) -93] [(-36 -28 85 -100) -100] [(-10 62 -49 -58) -58] [(3 69 -93 -81) -93] [(98 76 63 34) 34] [(-59 -56 -80 63) -80] [(59 58 -57 18) -57] [(5 1 70 83) 1] [(-84 17 45 67) -84] [(-96 -42 15 -78) -96] [(-42 -89 1 -1) -89] [(14 89 80 73) 14] [(-29 39 65 -56) -56] [(18 94 -62 -17) -62] [(92 36 -65 -70) -70] [(-23 -52 72 68) -52] [(0 64 -64 -42) -64] [(19 -12 28 -74) -74] [(60 3 61 5) 3] [(44 66 -61 -95) -95] [(-29 87 36 -62) -62])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[9 9 0 9] 0]
Train Case:   6 | Input/Output: [[52 -99 -99 -99] -99]
Train Case:   7 | Input/Output: [[-61 37 -61 -61] -61]
Train Case:   8 | Input/Output: [[75 57 57 57] 57]
Train Case:   9 | Input/Output: [[14 -41 14 14] -41]
Train Case:  10 | Input/Output: [[58 58 7 58] 7]
Train Case:  11 | Input/Output: [[-20 -20 -20 58] -20]
Train Case:  12 | Input/Output: [[-27 -27 -27 -26] -27]
Train Case:  13 | Input/Output: [[53 -16 -16 -16] -16]
Train Case:  14 | Input/Output: [[88 -93 88 88] -93]
Train Case:  15 | Input/Output: [(-96 -96 -96 -96) -96]
Train Case:  16 | Input/Output: [(-68 -68 -68 -68) -68]
Train Case:  17 | Input/Output: [(68 68 68 68) 68]
Train Case:  18 | Input/Output: [(-4 -4 -4 -4) -4]
Train Case:  19 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  20 | Input/Output: [(71 42 2 87) 2]
Train Case:  21 | Input/Output: [(65 72 81 77) 65]
Train Case:  22 | Input/Output: [(100 4 15 26) 4]
Train Case:  23 | Input/Output: [(71 50 68 46) 46]
Train Case:  24 | Input/Output: [(83 93 28 78) 28]
Train Case:  25 | Input/Output: [(3 51 63 26) 3]
Train Case:  26 | Input/Output: [(38 47 97 26) 26]
Train Case:  27 | Input/Output: [(49 50 14 40) 14]
Train Case:  28 | Input/Output: [(13 40 89 84) 13]
Train Case:  29 | Input/Output: [(95 61 99 74) 61]
Train Case:  30 | Input/Output: [(26 10 19 87) 10]
Train Case:  31 | Input/Output: [(7 83 82 56) 7]
Train Case:  32 | Input/Output: [(18 95 31 34) 18]
Train Case:  33 | Input/Output: [(75 9 10 6) 6]
Train Case:  34 | Input/Output: [(97 8 79 18) 8]
Train Case:  35 | Input/Output: [(98 41 67 15) 15]
Train Case:  36 | Input/Output: [(35 95 3 88) 3]
Train Case:  37 | Input/Output: [(84 47 40 0) 0]
Train Case:  38 | Input/Output: [(44 64 2 96) 2]
Train Case:  39 | Input/Output: [(8 33 29 26) 8]
Train Case:  40 | Input/Output: [(98 -6 -37 -71) -71]
Train Case:  41 | Input/Output: [(56 -53 -42 -93) -93]
Train Case:  42 | Input/Output: [(-91 5 29 -11) -91]
Train Case:  43 | Input/Output: [(-3 59 89 -40) -40]
Train Case:  44 | Input/Output: [(-95 61 24 -55) -95]
Train Case:  45 | Input/Output: [(-20 -99 -18 86) -99]
Train Case:  46 | Input/Output: [(66 58 21 -72) -72]
Train Case:  47 | Input/Output: [(40 71 -97 63) -97]
Train Case:  48 | Input/Output: [(-5 16 -3 -81) -81]
Train Case:  49 | Input/Output: [(-41 -79 25 -90) -90]
Train Case:  50 | Input/Output: [(-51 -31 19 -35) -51]
Train Case:  51 | Input/Output: [(-85 -22 -48 6) -85]
Train Case:  52 | Input/Output: [(15 -41 43 34) -41]
Train Case:  53 | Input/Output: [(-45 40 -10 -12) -45]
Train Case:  54 | Input/Output: [(60 -11 88 69) -11]
Train Case:  55 | Input/Output: [(57 43 -43 55) -43]
Train Case:  56 | Input/Output: [(-94 -64 -37 4) -94]
Train Case:  57 | Input/Output: [(27 -68 -83 97) -83]
Train Case:  58 | Input/Output: [(-94 -78 27 2) -94]
Train Case:  59 | Input/Output: [(79 24 56 -80) -80]
Train Case:  60 | Input/Output: [(-6 -19 -16 -78) -78]
Train Case:  61 | Input/Output: [(-50 22 -82 51) -82]
Train Case:  62 | Input/Output: [(-17 -82 49 86) -82]
Train Case:  63 | Input/Output: [(-44 27 97 5) -44]
Train Case:  64 | Input/Output: [(77 45 96 25) 25]
Train Case:  65 | Input/Output: [(-13 89 93 63) -13]
Train Case:  66 | Input/Output: [(-35 -38 61 36) -38]
Train Case:  67 | Input/Output: [(-28 -64 -92 -23) -92]
Train Case:  68 | Input/Output: [(24 -45 28 72) -45]
Train Case:  69 | Input/Output: [(23 58 -41 -30) -41]
Train Case:  70 | Input/Output: [(68 4 41 -82) -82]
Train Case:  71 | Input/Output: [(-13 57 33 5) -13]
Train Case:  72 | Input/Output: [(15 -99 -87 -48) -99]
Train Case:  73 | Input/Output: [(-92 2 55 83) -92]
Train Case:  74 | Input/Output: [(57 97 -89 51) -89]
Train Case:  75 | Input/Output: [(39 -25 28 9) -25]
Train Case:  76 | Input/Output: [(-55 -50 -66 34) -66]
Train Case:  77 | Input/Output: [(33 -44 -94 -33) -94]
Train Case:  78 | Input/Output: [(14 -69 -20 -79) -79]
Train Case:  79 | Input/Output: [(36 61 100 -93) -93]
Train Case:  80 | Input/Output: [(-36 -28 85 -100) -100]
Train Case:  81 | Input/Output: [(-10 62 -49 -58) -58]
Train Case:  82 | Input/Output: [(3 69 -93 -81) -93]
Train Case:  83 | Input/Output: [(98 76 63 34) 34]
Train Case:  84 | Input/Output: [(-59 -56 -80 63) -80]
Train Case:  85 | Input/Output: [(59 58 -57 18) -57]
Train Case:  86 | Input/Output: [(5 1 70 83) 1]
Train Case:  87 | Input/Output: [(-84 17 45 67) -84]
Train Case:  88 | Input/Output: [(-96 -42 15 -78) -96]
Train Case:  89 | Input/Output: [(-42 -89 1 -1) -89]
Train Case:  90 | Input/Output: [(14 89 80 73) 14]
Train Case:  91 | Input/Output: [(-29 39 65 -56) -56]
Train Case:  92 | Input/Output: [(18 94 -62 -17) -62]
Train Case:  93 | Input/Output: [(92 36 -65 -70) -70]
Train Case:  94 | Input/Output: [(-23 -52 72 68) -52]
Train Case:  95 | Input/Output: [(0 64 -64 -42) -64]
Train Case:  96 | Input/Output: [(19 -12 28 -74) -74]
Train Case:  97 | Input/Output: [(60 3 61 5) 3]
Train Case:  98 | Input/Output: [(44 66 -61 -95) -95]
Train Case:  99 | Input/Output: [(-29 87 36 -62) -62]
Test Case:   0 | Input/Output: [[-87 97 97 97] -87]
Test Case:   1 | Input/Output: [[8 -17 8 8] -17]
Test Case:   2 | Input/Output: [[35 35 35 -29] -29]
Test Case:   3 | Input/Output: [[38 -63 -63 -63] -63]
Test Case:   4 | Input/Output: [[35 35 -5 35] -5]
Test Case:   5 | Input/Output: [[-3 -3 54 -3] -3]
Test Case:   6 | Input/Output: [[22 22 22 -9] -9]
Test Case:   7 | Input/Output: [[-61 -11 -11 -11] -61]
Test Case:   8 | Input/Output: [[36 -2 -2 -2] -2]
Test Case:   9 | Input/Output: [[-65 -65 -65 2] -65]
Test Case:  10 | Input/Output: [[-69 -69 -69 26] -69]
Test Case:  11 | Input/Output: [[-91 22 22 22] -91]
Test Case:  12 | Input/Output: [[-19 28 28 28] -19]
Test Case:  13 | Input/Output: [[38 -72 38 38] -72]
Test Case:  14 | Input/Output: [[-56 74 -56 -56] -56]
Test Case:  15 | Input/Output: [[69 51 69 69] 51]
Test Case:  16 | Input/Output: [[-16 -16 -16 95] -16]
Test Case:  17 | Input/Output: [[26 26 26 90] 26]
Test Case:  18 | Input/Output: [[51 38 51 51] 38]
Test Case:  19 | Input/Output: [[23 13 23 23] 13]
Test Case:  20 | Input/Output: [[-6 -6 -6 -59] -59]
Test Case:  21 | Input/Output: [[13 13 43 13] 13]
Test Case:  22 | Input/Output: [[-2 69 69 69] -2]
Test Case:  23 | Input/Output: [[-10 99 -10 -10] -10]
Test Case:  24 | Input/Output: [[5 5 5 -43] -43]
Test Case:  25 | Input/Output: [[-91 74 74 74] -91]
Test Case:  26 | Input/Output: [[-44 -44 -98 -44] -98]
Test Case:  27 | Input/Output: [[-9 -9 5 -9] -9]
Test Case:  28 | Input/Output: [[80 26 26 26] 26]
Test Case:  29 | Input/Output: [[-64 -64 16 -64] -64]
Test Case:  30 | Input/Output: [[-74 -74 -74 4] -74]
Test Case:  31 | Input/Output: [[-96 72 72 72] -96]
Test Case:  32 | Input/Output: [[53 95 95 95] 53]
Test Case:  33 | Input/Output: [[-99 -99 -18 -99] -99]
Test Case:  34 | Input/Output: [[87 87 -95 87] -95]
Test Case:  35 | Input/Output: [[-70 -70 -70 24] -70]
Test Case:  36 | Input/Output: [[23 23 -51 23] -51]
Test Case:  37 | Input/Output: [[47 84 84 84] 47]
Test Case:  38 | Input/Output: [[-37 -37 34 -37] -37]
Test Case:  39 | Input/Output: [[-18 -18 -18 69] -18]
Test Case:  40 | Input/Output: [[-68 7 -68 -68] -68]
Test Case:  41 | Input/Output: [[76 76 24 76] 24]
Test Case:  42 | Input/Output: [[66 67 66 66] 66]
Test Case:  43 | Input/Output: [[58 0 58 58] 0]
Test Case:  44 | Input/Output: [[55 55 -11 55] -11]
Test Case:  45 | Input/Output: [[33 33 49 33] 33]
Test Case:  46 | Input/Output: [[-15 -29 -29 -29] -29]
Test Case:  47 | Input/Output: [[70 70 -63 70] -63]
Test Case:  48 | Input/Output: [[96 2 2 2] 2]
Test Case:  49 | Input/Output: [[-79 41 -79 -79] -79]
Test Case:  50 | Input/Output: [[74 72 72 72] 72]
Test Case:  51 | Input/Output: [[-7 25 -7 -7] -7]
Test Case:  52 | Input/Output: [[55 17 17 17] 17]
Test Case:  53 | Input/Output: [[-17 49 -17 -17] -17]
Test Case:  54 | Input/Output: [[-59 -59 -54 -59] -59]
Test Case:  55 | Input/Output: [[45 45 52 45] 45]
Test Case:  56 | Input/Output: [[-13 -13 3 -13] -13]
Test Case:  57 | Input/Output: [[60 -8 -8 -8] -8]
Test Case:  58 | Input/Output: [[-64 47 -64 -64] -64]
Test Case:  59 | Input/Output: [[59 59 59 -3] -3]
Test Case:  60 | Input/Output: [[-24 -24 -24 -45] -45]
Test Case:  61 | Input/Output: [[75 27 75 75] 27]
Test Case:  62 | Input/Output: [[45 -28 -28 -28] -28]
Test Case:  63 | Input/Output: [[79 79 -19 79] -19]
Test Case:  64 | Input/Output: [[-20 84 -20 -20] -20]
Test Case:  65 | Input/Output: [[84 84 -53 84] -53]
Test Case:  66 | Input/Output: [[-57 45 -57 -57] -57]
Test Case:  67 | Input/Output: [[14 -29 -29 -29] -29]
Test Case:  68 | Input/Output: [[-47 20 -47 -47] -47]
Test Case:  69 | Input/Output: [[49 60 49 49] 49]
Test Case:  70 | Input/Output: [[20 20 -62 20] -62]
Test Case:  71 | Input/Output: [[-67 -67 61 -67] -67]
Test Case:  72 | Input/Output: [[-3 -3 -3 -71] -71]
Test Case:  73 | Input/Output: [[-71 -71 54 -71] -71]
Test Case:  74 | Input/Output: [[-75 66 -75 -75] -75]
Test Case:  75 | Input/Output: [[-85 -6 -6 -6] -85]
Test Case:  76 | Input/Output: [[-63 97 97 97] -63]
Test Case:  77 | Input/Output: [[-94 -94 64 -94] -94]
Test Case:  78 | Input/Output: [[-92 -92 -92 8] -92]
Test Case:  79 | Input/Output: [[47 47 47 -64] -64]
Test Case:  80 | Input/Output: [[-61 -61 -61 46] -61]
Test Case:  81 | Input/Output: [[16 -99 16 16] -99]
Test Case:  82 | Input/Output: [[27 35 35 35] 27]
Test Case:  83 | Input/Output: [[83 -41 -41 -41] -41]
Test Case:  84 | Input/Output: [[-11 -69 -11 -11] -69]
Test Case:  85 | Input/Output: [[69 -84 -84 -84] -84]
Test Case:  86 | Input/Output: [[86 2 2 2] 2]
Test Case:  87 | Input/Output: [[-33 14 14 14] -33]
Test Case:  88 | Input/Output: [[-2 60 -2 -2] -2]
Test Case:  89 | Input/Output: [[12 12 12 -83] -83]
Test Case:  90 | Input/Output: [[-52 -76 -76 -76] -76]
Test Case:  91 | Input/Output: [[-60 -15 -60 -60] -60]
Test Case:  92 | Input/Output: [[-92 -92 -92 -61] -92]
Test Case:  93 | Input/Output: [[30 30 30 34] 30]
Test Case:  94 | Input/Output: [[-92 18 18 18] -92]
Test Case:  95 | Input/Output: [[68 68 35 68] 35]
Test Case:  96 | Input/Output: [[-17 -20 -17 -17] -20]
Test Case:  97 | Input/Output: [[-64 -70 -64 -64] -70]
Test Case:  98 | Input/Output: [[-78 -40 -78 -78] -78]
Test Case:  99 | Input/Output: [[-64 -81 -81 -81] -81]
Test Case: 100 | Input/Output: [(89 89 89 89) 89]
Test Case: 101 | Input/Output: [(55 55 55 55) 55]
Test Case: 102 | Input/Output: [(4 4 4 4) 4]
Test Case: 103 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 104 | Input/Output: [(99 99 99 99) 99]
Test Case: 105 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 106 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 107 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 108 | Input/Output: [(47 47 47 47) 47]
Test Case: 109 | Input/Output: [(87 87 87 87) 87]
Test Case: 110 | Input/Output: [(22 22 22 22) 22]
Test Case: 111 | Input/Output: [(78 78 78 78) 78]
Test Case: 112 | Input/Output: [(98 98 98 98) 98]
Test Case: 113 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 114 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 115 | Input/Output: [(99 99 99 99) 99]
Test Case: 116 | Input/Output: [(8 8 8 8) 8]
Test Case: 117 | Input/Output: [(2 2 2 2) 2]
Test Case: 118 | Input/Output: [(56 56 56 56) 56]
Test Case: 119 | Input/Output: [(49 49 49 49) 49]
Test Case: 120 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 121 | Input/Output: [(21 21 21 21) 21]
Test Case: 122 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 123 | Input/Output: [(47 47 47 47) 47]
Test Case: 124 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 125 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 126 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 127 | Input/Output: [(71 71 71 71) 71]
Test Case: 128 | Input/Output: [(20 20 20 20) 20]
Test Case: 129 | Input/Output: [(88 88 88 88) 88]
Test Case: 130 | Input/Output: [(48 48 48 48) 48]
Test Case: 131 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 132 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 133 | Input/Output: [(54 54 54 54) 54]
Test Case: 134 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 135 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 136 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 137 | Input/Output: [(53 53 53 53) 53]
Test Case: 138 | Input/Output: [(4 4 4 4) 4]
Test Case: 139 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 140 | Input/Output: [(2 2 2 2) 2]
Test Case: 141 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 142 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 143 | Input/Output: [(26 26 26 26) 26]
Test Case: 144 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 145 | Input/Output: [(97 97 97 97) 97]
Test Case: 146 | Input/Output: [(45 45 45 45) 45]
Test Case: 147 | Input/Output: [(68 68 68 68) 68]
Test Case: 148 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 149 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 150 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 151 | Input/Output: [(59 59 59 59) 59]
Test Case: 152 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 153 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 154 | Input/Output: [(73 73 73 73) 73]
Test Case: 155 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 156 | Input/Output: [(14 14 14 14) 14]
Test Case: 157 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 158 | Input/Output: [(26 26 26 26) 26]
Test Case: 159 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 160 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 161 | Input/Output: [(14 14 14 14) 14]
Test Case: 162 | Input/Output: [(5 5 5 5) 5]
Test Case: 163 | Input/Output: [(35 35 35 35) 35]
Test Case: 164 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 165 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 166 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 167 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 168 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 169 | Input/Output: [(59 59 59 59) 59]
Test Case: 170 | Input/Output: [(95 95 95 95) 95]
Test Case: 171 | Input/Output: [(43 43 43 43) 43]
Test Case: 172 | Input/Output: [(14 14 14 14) 14]
Test Case: 173 | Input/Output: [(79 79 79 79) 79]
Test Case: 174 | Input/Output: [(42 42 42 42) 42]
Test Case: 175 | Input/Output: [(21 21 21 21) 21]
Test Case: 176 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 177 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 178 | Input/Output: [(100 100 100 100) 100]
Test Case: 179 | Input/Output: [(93 93 93 93) 93]
Test Case: 180 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 181 | Input/Output: [(65 65 65 65) 65]
Test Case: 182 | Input/Output: [(18 18 18 18) 18]
Test Case: 183 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 184 | Input/Output: [(99 99 99 99) 99]
Test Case: 185 | Input/Output: [(28 28 28 28) 28]
Test Case: 186 | Input/Output: [(64 64 64 64) 64]
Test Case: 187 | Input/Output: [(3 3 3 3) 3]
Test Case: 188 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 189 | Input/Output: [(68 68 68 68) 68]
Test Case: 190 | Input/Output: [(47 47 47 47) 47]
Test Case: 191 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 192 | Input/Output: [(55 55 55 55) 55]
Test Case: 193 | Input/Output: [(54 54 54 54) 54]
Test Case: 194 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 195 | Input/Output: [(76 76 76 76) 76]
Test Case: 196 | Input/Output: [(16 16 16 16) 16]
Test Case: 197 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 198 | Input/Output: [(100 100 100 100) 100]
Test Case: 199 | Input/Output: [(61 61 61 61) 61]
Test Case: 200 | Input/Output: [(75 4 4 82) 4]
Test Case: 201 | Input/Output: [(70 64 30 3) 3]
Test Case: 202 | Input/Output: [(14 46 36 15) 14]
Test Case: 203 | Input/Output: [(39 41 78 83) 39]
Test Case: 204 | Input/Output: [(56 25 18 69) 18]
Test Case: 205 | Input/Output: [(93 82 45 25) 25]
Test Case: 206 | Input/Output: [(33 60 36 81) 33]
Test Case: 207 | Input/Output: [(33 25 11 6) 6]
Test Case: 208 | Input/Output: [(54 50 48 79) 48]
Test Case: 209 | Input/Output: [(7 12 58 87) 7]
Test Case: 210 | Input/Output: [(25 92 39 48) 25]
Test Case: 211 | Input/Output: [(56 11 49 89) 11]
Test Case: 212 | Input/Output: [(35 74 25 14) 14]
Test Case: 213 | Input/Output: [(46 41 17 43) 17]
Test Case: 214 | Input/Output: [(49 17 67 63) 17]
Test Case: 215 | Input/Output: [(1 54 37 100) 1]
Test Case: 216 | Input/Output: [(24 70 99 76) 24]
Test Case: 217 | Input/Output: [(52 11 77 74) 11]
Test Case: 218 | Input/Output: [(4 28 53 52) 4]
Test Case: 219 | Input/Output: [(10 89 54 91) 10]
Test Case: 220 | Input/Output: [(52 61 85 3) 3]
Test Case: 221 | Input/Output: [(54 8 20 58) 8]
Test Case: 222 | Input/Output: [(5 73 94 5) 5]
Test Case: 223 | Input/Output: [(79 15 77 42) 15]
Test Case: 224 | Input/Output: [(76 83 63 55) 55]
Test Case: 225 | Input/Output: [(10 42 41 53) 10]
Test Case: 226 | Input/Output: [(57 100 10 69) 10]
Test Case: 227 | Input/Output: [(49 95 66 98) 49]
Test Case: 228 | Input/Output: [(58 2 100 31) 2]
Test Case: 229 | Input/Output: [(8 35 41 80) 8]
Test Case: 230 | Input/Output: [(53 82 93 68) 53]
Test Case: 231 | Input/Output: [(35 5 48 59) 5]
Test Case: 232 | Input/Output: [(19 24 68 22) 19]
Test Case: 233 | Input/Output: [(51 29 81 66) 29]
Test Case: 234 | Input/Output: [(71 27 23 57) 23]
Test Case: 235 | Input/Output: [(23 37 79 83) 23]
Test Case: 236 | Input/Output: [(46 71 59 1) 1]
Test Case: 237 | Input/Output: [(13 98 96 59) 13]
Test Case: 238 | Input/Output: [(55 74 52 32) 32]
Test Case: 239 | Input/Output: [(16 44 97 95) 16]
Test Case: 240 | Input/Output: [(25 1 45 94) 1]
Test Case: 241 | Input/Output: [(39 12 31 91) 12]
Test Case: 242 | Input/Output: [(19 32 9 1) 1]
Test Case: 243 | Input/Output: [(72 68 77 24) 24]
Test Case: 244 | Input/Output: [(91 82 82 58) 58]
Test Case: 245 | Input/Output: [(4 83 98 62) 4]
Test Case: 246 | Input/Output: [(54 23 25 86) 23]
Test Case: 247 | Input/Output: [(79 41 89 34) 34]
Test Case: 248 | Input/Output: [(25 93 99 13) 13]
Test Case: 249 | Input/Output: [(86 0 38 64) 0]
Test Case: 250 | Input/Output: [(95 58 5 88) 5]
Test Case: 251 | Input/Output: [(31 28 40 46) 28]
Test Case: 252 | Input/Output: [(90 78 95 73) 73]
Test Case: 253 | Input/Output: [(36 84 12 79) 12]
Test Case: 254 | Input/Output: [(37 81 2 32) 2]
Test Case: 255 | Input/Output: [(94 30 86 81) 30]
Test Case: 256 | Input/Output: [(41 45 93 63) 41]
Test Case: 257 | Input/Output: [(35 33 91 81) 33]
Test Case: 258 | Input/Output: [(99 85 79 41) 41]
Test Case: 259 | Input/Output: [(12 42 0 79) 0]
Test Case: 260 | Input/Output: [(85 96 32 21) 21]
Test Case: 261 | Input/Output: [(46 42 25 96) 25]
Test Case: 262 | Input/Output: [(38 96 28 16) 16]
Test Case: 263 | Input/Output: [(39 8 91 25) 8]
Test Case: 264 | Input/Output: [(38 86 99 25) 25]
Test Case: 265 | Input/Output: [(64 83 82 0) 0]
Test Case: 266 | Input/Output: [(24 88 59 0) 0]
Test Case: 267 | Input/Output: [(80 6 58 65) 6]
Test Case: 268 | Input/Output: [(41 92 65 53) 41]
Test Case: 269 | Input/Output: [(47 38 24 43) 24]
Test Case: 270 | Input/Output: [(58 17 81 77) 17]
Test Case: 271 | Input/Output: [(88 71 89 29) 29]
Test Case: 272 | Input/Output: [(27 35 67 3) 3]
Test Case: 273 | Input/Output: [(65 17 25 96) 17]
Test Case: 274 | Input/Output: [(91 52 90 31) 31]
Test Case: 275 | Input/Output: [(42 43 19 77) 19]
Test Case: 276 | Input/Output: [(14 19 82 94) 14]
Test Case: 277 | Input/Output: [(57 54 51 45) 45]
Test Case: 278 | Input/Output: [(78 53 30 85) 30]
Test Case: 279 | Input/Output: [(67 13 6 22) 6]
Test Case: 280 | Input/Output: [(22 81 94 45) 22]
Test Case: 281 | Input/Output: [(89 83 55 32) 32]
Test Case: 282 | Input/Output: [(14 4 68 36) 4]
Test Case: 283 | Input/Output: [(20 39 100 27) 20]
Test Case: 284 | Input/Output: [(42 42 9 79) 9]
Test Case: 285 | Input/Output: [(96 26 31 18) 18]
Test Case: 286 | Input/Output: [(34 22 40 23) 22]
Test Case: 287 | Input/Output: [(22 20 80 85) 20]
Test Case: 288 | Input/Output: [(27 89 87 73) 27]
Test Case: 289 | Input/Output: [(60 32 88 60) 32]
Test Case: 290 | Input/Output: [(72 49 5 47) 5]
Test Case: 291 | Input/Output: [(45 84 17 62) 17]
Test Case: 292 | Input/Output: [(98 2 60 95) 2]
Test Case: 293 | Input/Output: [(77 61 80 53) 53]
Test Case: 294 | Input/Output: [(80 24 95 96) 24]
Test Case: 295 | Input/Output: [(7 9 72 59) 7]
Test Case: 296 | Input/Output: [(4 20 80 50) 4]
Test Case: 297 | Input/Output: [(35 73 19 38) 19]
Test Case: 298 | Input/Output: [(22 30 67 7) 7]
Test Case: 299 | Input/Output: [(25 34 40 63) 25]
Test Case: 300 | Input/Output: [(37 4 0 81) 0]
Test Case: 301 | Input/Output: [(64 16 42 33) 16]
Test Case: 302 | Input/Output: [(37 44 8 95) 8]
Test Case: 303 | Input/Output: [(37 13 12 48) 12]
Test Case: 304 | Input/Output: [(30 79 2 26) 2]
Test Case: 305 | Input/Output: [(63 99 92 64) 63]
Test Case: 306 | Input/Output: [(60 82 83 53) 53]
Test Case: 307 | Input/Output: [(6 79 12 80) 6]
Test Case: 308 | Input/Output: [(8 88 56 96) 8]
Test Case: 309 | Input/Output: [(36 68 52 72) 36]
Test Case: 310 | Input/Output: [(5 89 97 32) 5]
Test Case: 311 | Input/Output: [(56 51 40 46) 40]
Test Case: 312 | Input/Output: [(96 57 56 66) 56]
Test Case: 313 | Input/Output: [(24 17 97 25) 17]
Test Case: 314 | Input/Output: [(19 90 82 40) 19]
Test Case: 315 | Input/Output: [(43 59 12 63) 12]
Test Case: 316 | Input/Output: [(60 74 28 30) 28]
Test Case: 317 | Input/Output: [(63 60 83 62) 60]
Test Case: 318 | Input/Output: [(97 91 43 49) 43]
Test Case: 319 | Input/Output: [(20 55 57 15) 15]
Test Case: 320 | Input/Output: [(41 89 35 7) 7]
Test Case: 321 | Input/Output: [(90 28 58 61) 28]
Test Case: 322 | Input/Output: [(82 77 34 85) 34]
Test Case: 323 | Input/Output: [(71 30 56 58) 30]
Test Case: 324 | Input/Output: [(36 16 81 5) 5]
Test Case: 325 | Input/Output: [(49 9 23 90) 9]
Test Case: 326 | Input/Output: [(63 47 71 66) 47]
Test Case: 327 | Input/Output: [(27 95 50 5) 5]
Test Case: 328 | Input/Output: [(22 37 18 19) 18]
Test Case: 329 | Input/Output: [(91 82 69 37) 37]
Test Case: 330 | Input/Output: [(5 87 49 19) 5]
Test Case: 331 | Input/Output: [(42 44 30 14) 14]
Test Case: 332 | Input/Output: [(13 100 3 7) 3]
Test Case: 333 | Input/Output: [(84 52 50 80) 50]
Test Case: 334 | Input/Output: [(82 85 44 58) 44]
Test Case: 335 | Input/Output: [(69 96 10 43) 10]
Test Case: 336 | Input/Output: [(89 25 92 1) 1]
Test Case: 337 | Input/Output: [(80 50 28 41) 28]
Test Case: 338 | Input/Output: [(48 30 87 75) 30]
Test Case: 339 | Input/Output: [(86 17 78 32) 17]
Test Case: 340 | Input/Output: [(23 95 7 56) 7]
Test Case: 341 | Input/Output: [(81 54 65 35) 35]
Test Case: 342 | Input/Output: [(67 96 94 8) 8]
Test Case: 343 | Input/Output: [(99 36 93 44) 36]
Test Case: 344 | Input/Output: [(75 41 40 34) 34]
Test Case: 345 | Input/Output: [(44 96 74 16) 16]
Test Case: 346 | Input/Output: [(23 72 95 36) 23]
Test Case: 347 | Input/Output: [(37 21 34 34) 21]
Test Case: 348 | Input/Output: [(60 32 25 24) 24]
Test Case: 349 | Input/Output: [(63 56 92 43) 43]
Test Case: 350 | Input/Output: [(51 23 39 40) 23]
Test Case: 351 | Input/Output: [(53 52 34 19) 19]
Test Case: 352 | Input/Output: [(98 70 69 6) 6]
Test Case: 353 | Input/Output: [(72 99 53 93) 53]
Test Case: 354 | Input/Output: [(37 34 40 82) 34]
Test Case: 355 | Input/Output: [(78 42 69 62) 42]
Test Case: 356 | Input/Output: [(72 30 20 95) 20]
Test Case: 357 | Input/Output: [(47 59 42 83) 42]
Test Case: 358 | Input/Output: [(44 15 73 98) 15]
Test Case: 359 | Input/Output: [(44 97 71 39) 39]
Test Case: 360 | Input/Output: [(29 95 87 43) 29]
Test Case: 361 | Input/Output: [(0 31 18 40) 0]
Test Case: 362 | Input/Output: [(23 43 49 20) 20]
Test Case: 363 | Input/Output: [(36 41 80 9) 9]
Test Case: 364 | Input/Output: [(44 13 99 15) 13]
Test Case: 365 | Input/Output: [(38 84 3 88) 3]
Test Case: 366 | Input/Output: [(79 27 30 19) 19]
Test Case: 367 | Input/Output: [(76 41 9 65) 9]
Test Case: 368 | Input/Output: [(41 92 54 18) 18]
Test Case: 369 | Input/Output: [(10 82 90 69) 10]
Test Case: 370 | Input/Output: [(94 44 16 73) 16]
Test Case: 371 | Input/Output: [(51 82 45 46) 45]
Test Case: 372 | Input/Output: [(92 69 35 83) 35]
Test Case: 373 | Input/Output: [(4 76 1 45) 1]
Test Case: 374 | Input/Output: [(22 91 62 48) 22]
Test Case: 375 | Input/Output: [(86 31 43 0) 0]
Test Case: 376 | Input/Output: [(19 70 81 27) 19]
Test Case: 377 | Input/Output: [(35 64 6 28) 6]
Test Case: 378 | Input/Output: [(18 75 56 84) 18]
Test Case: 379 | Input/Output: [(81 22 44 68) 22]
Test Case: 380 | Input/Output: [(61 58 44 7) 7]
Test Case: 381 | Input/Output: [(91 43 1 58) 1]
Test Case: 382 | Input/Output: [(1 62 60 4) 1]
Test Case: 383 | Input/Output: [(4 30 61 39) 4]
Test Case: 384 | Input/Output: [(94 94 89 27) 27]
Test Case: 385 | Input/Output: [(40 17 91 5) 5]
Test Case: 386 | Input/Output: [(44 14 21 10) 10]
Test Case: 387 | Input/Output: [(27 88 100 63) 27]
Test Case: 388 | Input/Output: [(47 99 89 55) 47]
Test Case: 389 | Input/Output: [(13 72 9 25) 9]
Test Case: 390 | Input/Output: [(13 82 57 66) 13]
Test Case: 391 | Input/Output: [(71 65 71 88) 65]
Test Case: 392 | Input/Output: [(82 47 40 22) 22]
Test Case: 393 | Input/Output: [(61 94 81 5) 5]
Test Case: 394 | Input/Output: [(13 81 90 91) 13]
Test Case: 395 | Input/Output: [(44 54 10 63) 10]
Test Case: 396 | Input/Output: [(58 97 66 46) 46]
Test Case: 397 | Input/Output: [(32 13 17 83) 13]
Test Case: 398 | Input/Output: [(80 29 44 85) 29]
Test Case: 399 | Input/Output: [(35 75 70 96) 35]
Test Case: 400 | Input/Output: [(68 51 52 80) 51]
Test Case: 401 | Input/Output: [(-71 88 -6 -73) -73]
Test Case: 402 | Input/Output: [(-23 100 -61 -49) -61]
Test Case: 403 | Input/Output: [(56 -73 75 38) -73]
Test Case: 404 | Input/Output: [(-35 -61 49 -55) -61]
Test Case: 405 | Input/Output: [(6 40 91 12) 6]
Test Case: 406 | Input/Output: [(69 -10 31 51) -10]
Test Case: 407 | Input/Output: [(-67 62 -70 33) -70]
Test Case: 408 | Input/Output: [(-2 0 33 71) -2]
Test Case: 409 | Input/Output: [(-95 88 -62 63) -95]
Test Case: 410 | Input/Output: [(18 -95 -29 67) -95]
Test Case: 411 | Input/Output: [(-14 -92 -10 67) -92]
Test Case: 412 | Input/Output: [(-10 3 -23 54) -23]
Test Case: 413 | Input/Output: [(-63 48 -85 56) -85]
Test Case: 414 | Input/Output: [(64 60 -88 83) -88]
Test Case: 415 | Input/Output: [(90 87 85 -40) -40]
Test Case: 416 | Input/Output: [(68 92 71 67) 67]
Test Case: 417 | Input/Output: [(-72 91 52 89) -72]
Test Case: 418 | Input/Output: [(-37 65 -41 -31) -41]
Test Case: 419 | Input/Output: [(-46 -62 -88 48) -88]
Test Case: 420 | Input/Output: [(12 -56 6 -26) -56]
Test Case: 421 | Input/Output: [(97 -100 53 -32) -100]
Test Case: 422 | Input/Output: [(-86 -52 -12 -55) -86]
Test Case: 423 | Input/Output: [(27 38 -86 -41) -86]
Test Case: 424 | Input/Output: [(77 36 7 76) 7]
Test Case: 425 | Input/Output: [(-2 29 -73 -4) -73]
Test Case: 426 | Input/Output: [(14 -79 -62 -1) -79]
Test Case: 427 | Input/Output: [(12 24 -17 -95) -95]
Test Case: 428 | Input/Output: [(22 -70 27 53) -70]
Test Case: 429 | Input/Output: [(75 42 51 73) 42]
Test Case: 430 | Input/Output: [(-59 33 15 -75) -75]
Test Case: 431 | Input/Output: [(-15 71 -39 -86) -86]
Test Case: 432 | Input/Output: [(-40 88 -48 -46) -48]
Test Case: 433 | Input/Output: [(6 -32 9 -55) -55]
Test Case: 434 | Input/Output: [(77 -77 -53 -52) -77]
Test Case: 435 | Input/Output: [(44 -37 -29 82) -37]
Test Case: 436 | Input/Output: [(-69 -77 68 -3) -77]
Test Case: 437 | Input/Output: [(-53 98 55 -52) -53]
Test Case: 438 | Input/Output: [(16 -52 -12 -84) -84]
Test Case: 439 | Input/Output: [(55 -41 -100 69) -100]
Test Case: 440 | Input/Output: [(59 22 -84 -36) -84]
Test Case: 441 | Input/Output: [(90 11 62 -17) -17]
Test Case: 442 | Input/Output: [(84 81 19 87) 19]
Test Case: 443 | Input/Output: [(26 36 -15 23) -15]
Test Case: 444 | Input/Output: [(5 6 61 50) 5]
Test Case: 445 | Input/Output: [(11 83 -80 -96) -96]
Test Case: 446 | Input/Output: [(-40 40 -29 49) -40]
Test Case: 447 | Input/Output: [(16 88 -59 98) -59]
Test Case: 448 | Input/Output: [(-81 -91 97 17) -91]
Test Case: 449 | Input/Output: [(70 36 63 -71) -71]
Test Case: 450 | Input/Output: [(-13 -48 -56 -5) -56]
Test Case: 451 | Input/Output: [(74 44 -16 -63) -63]
Test Case: 452 | Input/Output: [(67 -39 33 -85) -85]
Test Case: 453 | Input/Output: [(94 -61 44 -3) -61]
Test Case: 454 | Input/Output: [(86 66 -29 -56) -56]
Test Case: 455 | Input/Output: [(81 -45 61 77) -45]
Test Case: 456 | Input/Output: [(-63 82 -77 35) -77]
Test Case: 457 | Input/Output: [(-24 53 37 -90) -90]
Test Case: 458 | Input/Output: [(27 -72 -19 -44) -72]
Test Case: 459 | Input/Output: [(69 49 -77 -33) -77]
Test Case: 460 | Input/Output: [(61 -46 20 -66) -66]
Test Case: 461 | Input/Output: [(11 81 -67 95) -67]
Test Case: 462 | Input/Output: [(-58 -28 27 52) -58]
Test Case: 463 | Input/Output: [(93 40 40 -55) -55]
Test Case: 464 | Input/Output: [(-78 -24 -78 -88) -88]
Test Case: 465 | Input/Output: [(61 -64 50 -23) -64]
Test Case: 466 | Input/Output: [(41 -87 9 -49) -87]
Test Case: 467 | Input/Output: [(-47 92 -94 -45) -94]
Test Case: 468 | Input/Output: [(32 79 13 -71) -71]
Test Case: 469 | Input/Output: [(-45 1 -12 -63) -63]
Test Case: 470 | Input/Output: [(91 -51 -4 55) -51]
Test Case: 471 | Input/Output: [(50 -90 91 93) -90]
Test Case: 472 | Input/Output: [(57 -49 -55 -100) -100]
Test Case: 473 | Input/Output: [(-51 -57 88 80) -57]
Test Case: 474 | Input/Output: [(61 -54 -76 12) -76]
Test Case: 475 | Input/Output: [(12 -3 -23 3) -23]
Test Case: 476 | Input/Output: [(-67 -43 -81 45) -81]
Test Case: 477 | Input/Output: [(71 16 90 -10) -10]
Test Case: 478 | Input/Output: [(-51 -70 -14 -33) -70]
Test Case: 479 | Input/Output: [(-44 27 -9 2) -44]
Test Case: 480 | Input/Output: [(79 -28 -66 -93) -93]
Test Case: 481 | Input/Output: [(-19 77 21 85) -19]
Test Case: 482 | Input/Output: [(47 -52 -13 -58) -58]
Test Case: 483 | Input/Output: [(39 91 82 54) 39]
Test Case: 484 | Input/Output: [(-22 37 -80 -77) -80]
Test Case: 485 | Input/Output: [(-23 58 -33 -76) -76]
Test Case: 486 | Input/Output: [(100 -77 -80 -6) -80]
Test Case: 487 | Input/Output: [(-20 97 90 -35) -35]
Test Case: 488 | Input/Output: [(-75 4 -28 -58) -75]
Test Case: 489 | Input/Output: [(0 42 -47 -4) -47]
Test Case: 490 | Input/Output: [(43 63 59 -52) -52]
Test Case: 491 | Input/Output: [(37 79 69 9) 9]
Test Case: 492 | Input/Output: [(74 -66 29 -52) -66]
Test Case: 493 | Input/Output: [(-84 -8 -22 -6) -84]
Test Case: 494 | Input/Output: [(-40 8 -15 -77) -77]
Test Case: 495 | Input/Output: [(82 -68 -79 -86) -86]
Test Case: 496 | Input/Output: [(-36 30 83 -34) -36]
Test Case: 497 | Input/Output: [(2 6 81 39) 2]
Test Case: 498 | Input/Output: [(-37 9 -24 -67) -67]
Test Case: 499 | Input/Output: [(94 -3 75 -23) -23]
Test Case: 500 | Input/Output: [(48 -14 -61 -57) -61]
Test Case: 501 | Input/Output: [(-77 -44 20 -5) -77]
Test Case: 502 | Input/Output: [(-70 -7 43 -65) -70]
Test Case: 503 | Input/Output: [(14 -78 41 27) -78]
Test Case: 504 | Input/Output: [(-82 0 40 -95) -95]
Test Case: 505 | Input/Output: [(-16 -3 -62 -13) -62]
Test Case: 506 | Input/Output: [(-74 28 12 -8) -74]
Test Case: 507 | Input/Output: [(-74 42 82 -35) -74]
Test Case: 508 | Input/Output: [(75 25 2 -43) -43]
Test Case: 509 | Input/Output: [(65 -13 80 -13) -13]
Test Case: 510 | Input/Output: [(42 -32 -79 -93) -93]
Test Case: 511 | Input/Output: [(-95 96 -52 -36) -95]
Test Case: 512 | Input/Output: [(-77 29 -23 62) -77]
Test Case: 513 | Input/Output: [(-9 12 -62 -11) -62]
Test Case: 514 | Input/Output: [(-51 -53 -57 96) -57]
Test Case: 515 | Input/Output: [(70 -65 68 -93) -93]
Test Case: 516 | Input/Output: [(-59 -64 1 63) -64]
Test Case: 517 | Input/Output: [(14 -24 -83 63) -83]
Test Case: 518 | Input/Output: [(82 -16 -88 -95) -95]
Test Case: 519 | Input/Output: [(-96 -49 -37 73) -96]
Test Case: 520 | Input/Output: [(-75 -72 -72 43) -75]
Test Case: 521 | Input/Output: [(89 89 -71 29) -71]
Test Case: 522 | Input/Output: [(89 -80 27 -93) -93]
Test Case: 523 | Input/Output: [(-93 50 -31 75) -93]
Test Case: 524 | Input/Output: [(-88 92 -26 24) -88]
Test Case: 525 | Input/Output: [(46 -86 51 5) -86]
Test Case: 526 | Input/Output: [(39 49 -95 -2) -95]
Test Case: 527 | Input/Output: [(9 -55 67 23) -55]
Test Case: 528 | Input/Output: [(-16 -44 -53 -98) -98]
Test Case: 529 | Input/Output: [(77 -9 -16 -17) -17]
Test Case: 530 | Input/Output: [(38 -16 71 11) -16]
Test Case: 531 | Input/Output: [(29 -10 -15 93) -15]
Test Case: 532 | Input/Output: [(-35 -31 15 -93) -93]
Test Case: 533 | Input/Output: [(30 96 67 -84) -84]
Test Case: 534 | Input/Output: [(12 -3 85 -84) -84]
Test Case: 535 | Input/Output: [(-55 17 -59 66) -59]
Test Case: 536 | Input/Output: [(48 54 -20 32) -20]
Test Case: 537 | Input/Output: [(69 57 76 95) 57]
Test Case: 538 | Input/Output: [(31 53 17 82) 17]
Test Case: 539 | Input/Output: [(-84 0 -45 -78) -84]
Test Case: 540 | Input/Output: [(30 -13 -22 40) -22]
Test Case: 541 | Input/Output: [(27 -35 -92 53) -92]
Test Case: 542 | Input/Output: [(55 -51 -41 -79) -79]
Test Case: 543 | Input/Output: [(5 7 49 26) 5]
Test Case: 544 | Input/Output: [(92 -39 59 5) -39]
Test Case: 545 | Input/Output: [(35 79 86 -15) -15]
Test Case: 546 | Input/Output: [(-71 -57 -92 64) -92]
Test Case: 547 | Input/Output: [(-43 84 76 -71) -71]
Test Case: 548 | Input/Output: [(-88 88 100 10) -88]
Test Case: 549 | Input/Output: [(60 -26 96 8) -26]
Test Case: 550 | Input/Output: [(48 -59 50 37) -59]
Test Case: 551 | Input/Output: [(68 83 -29 -58) -58]
Test Case: 552 | Input/Output: [(37 -98 1 100) -98]
Test Case: 553 | Input/Output: [(71 -25 78 37) -25]
Test Case: 554 | Input/Output: [(-21 48 56 -64) -64]
Test Case: 555 | Input/Output: [(3 51 -24 -87) -87]
Test Case: 556 | Input/Output: [(-68 -68 75 -34) -68]
Test Case: 557 | Input/Output: [(98 28 -40 -16) -40]
Test Case: 558 | Input/Output: [(74 80 -80 75) -80]
Test Case: 559 | Input/Output: [(-97 95 85 76) -97]
Test Case: 560 | Input/Output: [(24 -24 93 17) -24]
Test Case: 561 | Input/Output: [(49 59 -88 71) -88]
Test Case: 562 | Input/Output: [(21 -58 7 -2) -58]
Test Case: 563 | Input/Output: [(-40 -55 -21 -53) -55]
Test Case: 564 | Input/Output: [(80 -49 47 -51) -51]
Test Case: 565 | Input/Output: [(-99 -16 28 -62) -99]
Test Case: 566 | Input/Output: [(43 15 86 -54) -54]
Test Case: 567 | Input/Output: [(89 -97 -72 69) -97]
Test Case: 568 | Input/Output: [(62 -89 -17 -38) -89]
Test Case: 569 | Input/Output: [(87 -86 -56 82) -86]
Test Case: 570 | Input/Output: [(45 -38 83 -51) -51]
Test Case: 571 | Input/Output: [(13 -21 91 -28) -28]
Test Case: 572 | Input/Output: [(-38 58 -39 -65) -65]
Test Case: 573 | Input/Output: [(39 94 -50 -82) -82]
Test Case: 574 | Input/Output: [(24 -16 15 -44) -44]
Test Case: 575 | Input/Output: [(46 -91 -70 28) -91]
Test Case: 576 | Input/Output: [(-99 -21 -75 77) -99]
Test Case: 577 | Input/Output: [(5 -73 -63 -10) -73]
Test Case: 578 | Input/Output: [(8 73 31 -84) -84]
Test Case: 579 | Input/Output: [(9 29 67 -100) -100]
Test Case: 580 | Input/Output: [(23 75 -30 -57) -57]
Test Case: 581 | Input/Output: [(57 62 19 -46) -46]
Test Case: 582 | Input/Output: [(-56 90 55 28) -56]
Test Case: 583 | Input/Output: [(52 88 -72 53) -72]
Test Case: 584 | Input/Output: [(-87 -96 4 -38) -96]
Test Case: 585 | Input/Output: [(27 64 -93 -99) -99]
Test Case: 586 | Input/Output: [(-22 90 -9 49) -22]
Test Case: 587 | Input/Output: [(-76 31 -74 99) -76]
Test Case: 588 | Input/Output: [(-97 -88 -91 5) -97]
Test Case: 589 | Input/Output: [(56 -20 -37 -79) -79]
Test Case: 590 | Input/Output: [(65 -76 -98 43) -98]
Test Case: 591 | Input/Output: [(39 91 74 -59) -59]
Test Case: 592 | Input/Output: [(-89 -58 -77 67) -89]
Test Case: 593 | Input/Output: [(-53 -53 87 32) -53]
Test Case: 594 | Input/Output: [(-30 18 22 -71) -71]
Test Case: 595 | Input/Output: [(-5 -64 0 88) -64]
Test Case: 596 | Input/Output: [(58 41 74 63) 41]
Test Case: 597 | Input/Output: [(-69 -3 3 100) -69]
Test Case: 598 | Input/Output: [(97 84 -88 18) -88]
Test Case: 599 | Input/Output: [(-88 -51 -77 66) -88]
Test Case: 600 | Input/Output: [(91 9 -80 -100) -100]
Test Case: 601 | Input/Output: [(-7 -20 -5 -11) -20]
Test Case: 602 | Input/Output: [(11 27 7 -2) -2]
Test Case: 603 | Input/Output: [(-38 -78 81 -28) -78]
Test Case: 604 | Input/Output: [(60 28 -81 95) -81]
Test Case: 605 | Input/Output: [(-42 84 96 99) -42]
Test Case: 606 | Input/Output: [(-100 77 24 28) -100]
Test Case: 607 | Input/Output: [(10 24 51 -92) -92]
Test Case: 608 | Input/Output: [(44 22 -61 -49) -61]
Test Case: 609 | Input/Output: [(45 41 -3 23) -3]
Test Case: 610 | Input/Output: [(51 6 -36 64) -36]
Test Case: 611 | Input/Output: [(-70 76 -91 40) -91]
Test Case: 612 | Input/Output: [(-30 -94 -92 8) -94]
Test Case: 613 | Input/Output: [(-95 -71 63 -100) -100]
Test Case: 614 | Input/Output: [(51 23 -62 33) -62]
Test Case: 615 | Input/Output: [(-56 -18 3 -47) -56]
Test Case: 616 | Input/Output: [(-20 16 -38 -81) -81]
Test Case: 617 | Input/Output: [(94 74 71 -92) -92]
Test Case: 618 | Input/Output: [(-90 -36 75 -89) -90]
Test Case: 619 | Input/Output: [(-80 44 31 -47) -80]
Test Case: 620 | Input/Output: [(-95 43 -2 -36) -95]
Test Case: 621 | Input/Output: [(48 99 -44 76) -44]
Test Case: 622 | Input/Output: [(65 -18 -1 21) -18]
Test Case: 623 | Input/Output: [(-76 66 -79 86) -79]
Test Case: 624 | Input/Output: [(72 -53 -25 18) -53]
Test Case: 625 | Input/Output: [(66 -15 25 40) -15]
Test Case: 626 | Input/Output: [(-71 12 11 15) -71]
Test Case: 627 | Input/Output: [(99 -74 -57 -48) -74]
Test Case: 628 | Input/Output: [(-71 -90 70 61) -90]
Test Case: 629 | Input/Output: [(-52 -93 -20 10) -93]
Test Case: 630 | Input/Output: [(8 11 83 58) 8]
Test Case: 631 | Input/Output: [(-67 -59 -73 -68) -73]
Test Case: 632 | Input/Output: [(-82 -21 -19 77) -82]
Test Case: 633 | Input/Output: [(40 -76 -16 -9) -76]
Test Case: 634 | Input/Output: [(15 89 37 77) 15]
Test Case: 635 | Input/Output: [(-42 58 -78 19) -78]
Test Case: 636 | Input/Output: [(37 -90 -98 -52) -98]
Test Case: 637 | Input/Output: [(31 24 -90 -56) -90]
Test Case: 638 | Input/Output: [(38 -32 -76 58) -76]
Test Case: 639 | Input/Output: [(0 -68 -7 71) -68]
Test Case: 640 | Input/Output: [(26 -73 78 -34) -73]
Test Case: 641 | Input/Output: [(20 94 45 10) 10]
Test Case: 642 | Input/Output: [(41 79 -12 82) -12]
Test Case: 643 | Input/Output: [(97 23 -48 100) -48]
Test Case: 644 | Input/Output: [(17 -85 52 26) -85]
Test Case: 645 | Input/Output: [(65 -41 22 1) -41]
Test Case: 646 | Input/Output: [(-81 -51 73 -91) -91]
Test Case: 647 | Input/Output: [(6 -32 -13 75) -32]
Test Case: 648 | Input/Output: [(-16 48 -4 -19) -19]
Test Case: 649 | Input/Output: [(6 -66 63 -75) -75]
Test Case: 650 | Input/Output: [(-15 56 -93 -87) -93]
Test Case: 651 | Input/Output: [(2 -17 -94 42) -94]
Test Case: 652 | Input/Output: [(28 -25 99 57) -25]
Test Case: 653 | Input/Output: [(67 -81 -82 79) -82]
Test Case: 654 | Input/Output: [(89 -95 -51 -62) -95]
Test Case: 655 | Input/Output: [(34 -44 -54 -57) -57]
Test Case: 656 | Input/Output: [(-88 -24 45 95) -88]
Test Case: 657 | Input/Output: [(-34 64 35 -16) -34]
Test Case: 658 | Input/Output: [(-93 43 -40 -37) -93]
Test Case: 659 | Input/Output: [(33 -66 -93 73) -93]
Test Case: 660 | Input/Output: [(42 -93 59 95) -93]
Test Case: 661 | Input/Output: [(-28 58 11 -28) -28]
Test Case: 662 | Input/Output: [(26 -63 10 -91) -91]
Test Case: 663 | Input/Output: [(6 29 34 -70) -70]
Test Case: 664 | Input/Output: [(53 -34 -74 -45) -74]
Test Case: 665 | Input/Output: [(-54 12 14 75) -54]
Test Case: 666 | Input/Output: [(31 -3 -45 16) -45]
Test Case: 667 | Input/Output: [(-32 -61 92 54) -61]
Test Case: 668 | Input/Output: [(-31 -87 -58 65) -87]
Test Case: 669 | Input/Output: [(37 47 -18 71) -18]
Test Case: 670 | Input/Output: [(97 -28 36 -87) -87]
Test Case: 671 | Input/Output: [(55 95 27 83) 27]
Test Case: 672 | Input/Output: [(-25 99 -88 -46) -88]
Test Case: 673 | Input/Output: [(26 52 53 54) 26]
Test Case: 674 | Input/Output: [(-45 42 -98 40) -98]
Test Case: 675 | Input/Output: [(-93 0 7 -68) -93]
Test Case: 676 | Input/Output: [(23 -42 -23 10) -42]
Test Case: 677 | Input/Output: [(54 70 58 -17) -17]
Test Case: 678 | Input/Output: [(18 -100 -28 -5) -100]
Test Case: 679 | Input/Output: [(-24 39 -4 -10) -24]
Test Case: 680 | Input/Output: [(72 89 73 69) 69]
Test Case: 681 | Input/Output: [(-28 -100 -81 37) -100]
Test Case: 682 | Input/Output: [(-79 -50 34 33) -79]
Test Case: 683 | Input/Output: [(32 -93 -46 27) -93]
Test Case: 684 | Input/Output: [(-90 14 5 18) -90]
Test Case: 685 | Input/Output: [(-16 66 -19 -3) -19]
Test Case: 686 | Input/Output: [(-62 21 -96 -55) -96]
Test Case: 687 | Input/Output: [(-59 -58 64 59) -59]
Test Case: 688 | Input/Output: [(85 -2 -4 96) -4]
Test Case: 689 | Input/Output: [(61 -94 -86 4) -94]
Test Case: 690 | Input/Output: [(61 43 44 -15) -15]
Test Case: 691 | Input/Output: [(-71 95 47 -22) -71]
Test Case: 692 | Input/Output: [(-44 -66 -18 -46) -66]
Test Case: 693 | Input/Output: [(13 75 -64 -56) -64]
Test Case: 694 | Input/Output: [(-46 -34 -58 7) -58]
Test Case: 695 | Input/Output: [(-13 4 33 -38) -38]
Test Case: 696 | Input/Output: [(-38 11 86 59) -38]
Test Case: 697 | Input/Output: [(-32 -62 -72 4) -72]
Test Case: 698 | Input/Output: [(-65 91 -8 -6) -65]
Test Case: 699 | Input/Output: [(41 -12 98 -53) -53]
Test Case: 700 | Input/Output: [(-47 37 -55 -69) -69]
Test Case: 701 | Input/Output: [(33 -64 -13 -30) -64]
Test Case: 702 | Input/Output: [(-17 10 34 84) -17]
Test Case: 703 | Input/Output: [(9 -3 -79 -13) -79]
Test Case: 704 | Input/Output: [(19 -1 -21 62) -21]
Test Case: 705 | Input/Output: [(9 -79 74 16) -79]
Test Case: 706 | Input/Output: [(-88 67 75 91) -88]
Test Case: 707 | Input/Output: [(68 77 -28 -10) -28]
Test Case: 708 | Input/Output: [(-67 67 21 -26) -67]
Test Case: 709 | Input/Output: [(32 31 -54 -10) -54]
Test Case: 710 | Input/Output: [(80 -68 61 35) -68]
Test Case: 711 | Input/Output: [(-16 -9 92 -38) -38]
Test Case: 712 | Input/Output: [(40 35 -4 -100) -100]
Test Case: 713 | Input/Output: [(82 -52 -30 -53) -53]
Test Case: 714 | Input/Output: [(-80 28 -47 -90) -90]
Test Case: 715 | Input/Output: [(-53 56 46 57) -53]
Test Case: 716 | Input/Output: [(30 32 -99 -44) -99]
Test Case: 717 | Input/Output: [(76 12 17 9) 9]
Test Case: 718 | Input/Output: [(92 77 -99 -42) -99]
Test Case: 719 | Input/Output: [(-8 -28 17 34) -28]
Test Case: 720 | Input/Output: [(71 18 75 53) 18]
Test Case: 721 | Input/Output: [(39 84 -80 45) -80]
Test Case: 722 | Input/Output: [(4 -62 96 -54) -62]
Test Case: 723 | Input/Output: [(67 48 -100 76) -100]
Test Case: 724 | Input/Output: [(-42 100 -15 -90) -90]
Test Case: 725 | Input/Output: [(21 42 78 44) 21]
Test Case: 726 | Input/Output: [(15 40 71 -45) -45]
Test Case: 727 | Input/Output: [(22 42 -96 87) -96]
Test Case: 728 | Input/Output: [(-27 86 -51 93) -51]
Test Case: 729 | Input/Output: [(93 -19 85 75) -19]
Test Case: 730 | Input/Output: [(38 25 61 40) 25]
Test Case: 731 | Input/Output: [(37 3 79 55) 3]
Test Case: 732 | Input/Output: [(14 -44 -95 2) -95]
Test Case: 733 | Input/Output: [(85 -36 47 -30) -36]
Test Case: 734 | Input/Output: [(19 -26 47 38) -26]
Test Case: 735 | Input/Output: [(-42 -37 43 20) -42]
Test Case: 736 | Input/Output: [(84 -43 -87 16) -87]
Test Case: 737 | Input/Output: [(52 67 -25 -82) -82]
Test Case: 738 | Input/Output: [(-22 -64 -75 87) -75]
Test Case: 739 | Input/Output: [(-3 77 -21 48) -21]
Test Case: 740 | Input/Output: [(55 19 45 -60) -60]
Test Case: 741 | Input/Output: [(-26 98 -20 21) -26]
Test Case: 742 | Input/Output: [(92 93 -19 -19) -19]
Test Case: 743 | Input/Output: [(-84 -70 -47 84) -84]
Test Case: 744 | Input/Output: [(27 40 -85 -41) -85]
Test Case: 745 | Input/Output: [(-95 -84 -17 99) -95]
Test Case: 746 | Input/Output: [(91 -76 85 -78) -78]
Test Case: 747 | Input/Output: [(-79 -33 -84 -37) -84]
Test Case: 748 | Input/Output: [(36 75 -14 -41) -41]
Test Case: 749 | Input/Output: [(-72 -21 57 -29) -72]
Test Case: 750 | Input/Output: [(-89 16 100 -99) -99]
Test Case: 751 | Input/Output: [(-76 13 42 -97) -97]
Test Case: 752 | Input/Output: [(92 -8 -50 -97) -97]
Test Case: 753 | Input/Output: [(-6 43 74 -35) -35]
Test Case: 754 | Input/Output: [(96 -65 -37 72) -65]
Test Case: 755 | Input/Output: [(-82 32 -88 79) -88]
Test Case: 756 | Input/Output: [(-33 -28 -63 47) -63]
Test Case: 757 | Input/Output: [(87 -52 80 -100) -100]
Test Case: 758 | Input/Output: [(88 31 -65 -54) -65]
Test Case: 759 | Input/Output: [(61 48 -22 -79) -79]
Test Case: 760 | Input/Output: [(57 74 -30 -37) -37]
Test Case: 761 | Input/Output: [(-57 -96 -5 -32) -96]
Test Case: 762 | Input/Output: [(81 70 1 -30) -30]
Test Case: 763 | Input/Output: [(84 -35 -25 96) -35]
Test Case: 764 | Input/Output: [(-22 -33 88 -66) -66]
Test Case: 765 | Input/Output: [(32 -56 58 -18) -56]
Test Case: 766 | Input/Output: [(-36 49 -35 38) -36]
Test Case: 767 | Input/Output: [(60 21 46 -30) -30]
Test Case: 768 | Input/Output: [(-86 -3 100 -72) -86]
Test Case: 769 | Input/Output: [(-56 94 -24 64) -56]
Test Case: 770 | Input/Output: [(-26 83 56 93) -26]
Test Case: 771 | Input/Output: [(-42 69 59 6) -42]
Test Case: 772 | Input/Output: [(82 49 -23 -41) -41]
Test Case: 773 | Input/Output: [(52 42 68 -18) -18]
Test Case: 774 | Input/Output: [(47 18 -63 -41) -63]
Test Case: 775 | Input/Output: [(-53 34 -4 -14) -53]
Test Case: 776 | Input/Output: [(-24 17 -36 -16) -36]
Test Case: 777 | Input/Output: [(-30 45 -51 -91) -91]
Test Case: 778 | Input/Output: [(72 -78 -73 11) -78]
Test Case: 779 | Input/Output: [(-31 -71 -76 16) -76]
Test Case: 780 | Input/Output: [(-22 -29 62 -26) -29]
Test Case: 781 | Input/Output: [(-94 -50 -15 -59) -94]
Test Case: 782 | Input/Output: [(58 76 -91 -8) -91]
Test Case: 783 | Input/Output: [(28 16 -25 9) -25]
Test Case: 784 | Input/Output: [(-77 -86 99 81) -86]
Test Case: 785 | Input/Output: [(-24 -23 -24 87) -24]
Test Case: 786 | Input/Output: [(58 -49 17 -75) -75]
Test Case: 787 | Input/Output: [(-31 -48 47 68) -48]
Test Case: 788 | Input/Output: [(-23 -32 -19 -20) -32]
Test Case: 789 | Input/Output: [(73 -42 61 89) -42]
Test Case: 790 | Input/Output: [(-67 58 13 39) -67]
Test Case: 791 | Input/Output: [(19 -14 86 92) -14]
Test Case: 792 | Input/Output: [(98 63 92 99) 63]
Test Case: 793 | Input/Output: [(-76 55 52 42) -76]
Test Case: 794 | Input/Output: [(7 -75 24 -100) -100]
Test Case: 795 | Input/Output: [(80 27 -88 -20) -88]
Test Case: 796 | Input/Output: [(12 -57 58 70) -57]
Test Case: 797 | Input/Output: [(-29 23 -98 -85) -98]
Test Case: 798 | Input/Output: [(97 12 0 -4) -4]
Test Case: 799 | Input/Output: [(-14 -89 -45 -59) -89]
Test Case: 800 | Input/Output: [(82 82 -66 -33) -66]
Test Case: 801 | Input/Output: [(2 -49 42 13) -49]
Test Case: 802 | Input/Output: [(0 -2 51 -88) -88]
Test Case: 803 | Input/Output: [(1 -79 95 82) -79]
Test Case: 804 | Input/Output: [(83 16 -54 83) -54]
Test Case: 805 | Input/Output: [(-93 38 60 -86) -93]
Test Case: 806 | Input/Output: [(-51 -97 1 82) -97]
Test Case: 807 | Input/Output: [(9 50 3 14) 3]
Test Case: 808 | Input/Output: [(42 43 -17 98) -17]
Test Case: 809 | Input/Output: [(90 -86 34 69) -86]
Test Case: 810 | Input/Output: [(19 -88 -99 86) -99]
Test Case: 811 | Input/Output: [(-37 94 -44 99) -44]
Test Case: 812 | Input/Output: [(-20 81 28 -42) -42]
Test Case: 813 | Input/Output: [(-30 -58 39 91) -58]
Test Case: 814 | Input/Output: [(-64 -42 41 10) -64]
Test Case: 815 | Input/Output: [(31 68 61 -16) -16]
Test Case: 816 | Input/Output: [(94 -7 33 54) -7]
Test Case: 817 | Input/Output: [(-36 -50 -10 50) -50]
Test Case: 818 | Input/Output: [(-50 38 6 -38) -50]
Test Case: 819 | Input/Output: [(98 -21 52 2) -21]
Test Case: 820 | Input/Output: [(-77 -2 -18 -67) -77]
Test Case: 821 | Input/Output: [(-29 25 -21 17) -29]
Test Case: 822 | Input/Output: [(-95 91 8 93) -95]
Test Case: 823 | Input/Output: [(-87 -94 4 58) -94]
Test Case: 824 | Input/Output: [(94 94 15 94) 15]
Test Case: 825 | Input/Output: [(-56 -78 -97 45) -97]
Test Case: 826 | Input/Output: [(-37 -74 83 -1) -74]
Test Case: 827 | Input/Output: [(80 -50 16 68) -50]
Test Case: 828 | Input/Output: [(-15 -100 52 81) -100]
Test Case: 829 | Input/Output: [(3 87 86 7) 3]
Test Case: 830 | Input/Output: [(92 -98 -12 0) -98]
Test Case: 831 | Input/Output: [(-19 -98 -57 63) -98]
Test Case: 832 | Input/Output: [(-39 46 -100 -88) -100]
Test Case: 833 | Input/Output: [(-74 -92 -92 -10) -92]
Test Case: 834 | Input/Output: [(95 22 46 36) 22]
Test Case: 835 | Input/Output: [(34 -98 -30 -67) -98]
Test Case: 836 | Input/Output: [(-74 -21 -96 -68) -96]
Test Case: 837 | Input/Output: [(-33 40 56 -28) -33]
Test Case: 838 | Input/Output: [(50 4 98 -40) -40]
Test Case: 839 | Input/Output: [(-34 -53 2 -77) -77]
Test Case: 840 | Input/Output: [(-27 -13 79 34) -27]
Test Case: 841 | Input/Output: [(93 -62 79 -56) -62]
Test Case: 842 | Input/Output: [(-46 -73 83 62) -73]
Test Case: 843 | Input/Output: [(13 23 27 -84) -84]
Test Case: 844 | Input/Output: [(-4 -81 58 5) -81]
Test Case: 845 | Input/Output: [(44 63 -11 79) -11]
Test Case: 846 | Input/Output: [(-45 3 -90 -22) -90]
Test Case: 847 | Input/Output: [(88 -27 -74 -36) -74]
Test Case: 848 | Input/Output: [(35 5 -87 2) -87]
Test Case: 849 | Input/Output: [(86 -85 46 -18) -85]
Test Case: 850 | Input/Output: [(82 13 92 -24) -24]
Test Case: 851 | Input/Output: [(-5 -32 -21 -95) -95]
Test Case: 852 | Input/Output: [(-52 -72 -35 -29) -72]
Test Case: 853 | Input/Output: [(-78 9 18 72) -78]
Test Case: 854 | Input/Output: [(-83 3 63 93) -83]
Test Case: 855 | Input/Output: [(13 89 -12 22) -12]
Test Case: 856 | Input/Output: [(-52 68 -67 -28) -67]
Test Case: 857 | Input/Output: [(100 -53 -84 -3) -84]
Test Case: 858 | Input/Output: [(34 32 -82 -34) -82]
Test Case: 859 | Input/Output: [(72 45 -86 -50) -86]
Test Case: 860 | Input/Output: [(96 41 52 -22) -22]
Test Case: 861 | Input/Output: [(50 -66 -75 -30) -75]
Test Case: 862 | Input/Output: [(54 66 66 83) 54]
Test Case: 863 | Input/Output: [(87 47 -58 -29) -58]
Test Case: 864 | Input/Output: [(-78 -80 30 72) -80]
Test Case: 865 | Input/Output: [(-95 10 99 48) -95]
Test Case: 866 | Input/Output: [(-93 57 -92 -97) -97]
Test Case: 867 | Input/Output: [(-77 -94 38 -87) -94]
Test Case: 868 | Input/Output: [(79 14 -5 -17) -17]
Test Case: 869 | Input/Output: [(-11 -72 18 -96) -96]
Test Case: 870 | Input/Output: [(-88 96 47 18) -88]
Test Case: 871 | Input/Output: [(94 -50 97 -46) -50]
Test Case: 872 | Input/Output: [(93 90 -9 -51) -51]
Test Case: 873 | Input/Output: [(-99 30 -77 -78) -99]
Test Case: 874 | Input/Output: [(21 -17 -85 -74) -85]
Test Case: 875 | Input/Output: [(17 -95 -47 -12) -95]
Test Case: 876 | Input/Output: [(65 -33 -14 80) -33]
Test Case: 877 | Input/Output: [(-92 1 32 26) -92]
Test Case: 878 | Input/Output: [(12 -65 -30 -78) -78]
Test Case: 879 | Input/Output: [(-14 -9 72 88) -14]
Test Case: 880 | Input/Output: [(-91 -2 -95 -94) -95]
Test Case: 881 | Input/Output: [(77 5 77 -98) -98]
Test Case: 882 | Input/Output: [(41 -64 -82 -95) -95]
Test Case: 883 | Input/Output: [(-20 14 36 -45) -45]
Test Case: 884 | Input/Output: [(-82 49 68 -15) -82]
Test Case: 885 | Input/Output: [(-24 -21 -73 -58) -73]
Test Case: 886 | Input/Output: [(21 13 59 14) 13]
Test Case: 887 | Input/Output: [(-20 -7 69 52) -20]
Test Case: 888 | Input/Output: [(86 73 51 -60) -60]
Test Case: 889 | Input/Output: [(44 -22 -90 -48) -90]
Test Case: 890 | Input/Output: [(4 1 -33 -9) -33]
Test Case: 891 | Input/Output: [(-34 25 -88 41) -88]
Test Case: 892 | Input/Output: [(5 -28 -57 -29) -57]
Test Case: 893 | Input/Output: [(94 75 92 -90) -90]
Test Case: 894 | Input/Output: [(22 -59 -5 -36) -59]
Test Case: 895 | Input/Output: [(34 42 49 -92) -92]
Test Case: 896 | Input/Output: [(76 90 -10 79) -10]
Test Case: 897 | Input/Output: [(-25 -23 64 -13) -25]
Test Case: 898 | Input/Output: [(64 -77 -10 49) -77]
Test Case: 899 | Input/Output: [(-24 -86 10 54) -86]
Test Case: 900 | Input/Output: [(-83 -84 49 71) -84]
Test Case: 901 | Input/Output: [(-13 -94 -39 68) -94]
Test Case: 902 | Input/Output: [(85 -87 16 61) -87]
Test Case: 903 | Input/Output: [(55 -23 59 -9) -23]
Test Case: 904 | Input/Output: [(3 33 18 63) 3]
Test Case: 905 | Input/Output: [(26 -55 -44 -74) -74]
Test Case: 906 | Input/Output: [(65 -97 -10 79) -97]
Test Case: 907 | Input/Output: [(86 -87 45 -64) -87]
Test Case: 908 | Input/Output: [(-18 -17 -44 -32) -44]
Test Case: 909 | Input/Output: [(38 67 45 -60) -60]
Test Case: 910 | Input/Output: [(-24 28 39 -31) -31]
Test Case: 911 | Input/Output: [(21 -91 -14 -79) -91]
Test Case: 912 | Input/Output: [(-17 21 -39 -89) -89]
Test Case: 913 | Input/Output: [(92 -33 75 -89) -89]
Test Case: 914 | Input/Output: [(-88 -78 -88 76) -88]
Test Case: 915 | Input/Output: [(-20 75 29 -70) -70]
Test Case: 916 | Input/Output: [(39 59 80 -67) -67]
Test Case: 917 | Input/Output: [(-90 -5 -62 28) -90]
Test Case: 918 | Input/Output: [(89 31 -59 78) -59]
Test Case: 919 | Input/Output: [(-8 -76 20 17) -76]
Test Case: 920 | Input/Output: [(-91 45 -71 -31) -91]
Test Case: 921 | Input/Output: [(55 81 -77 92) -77]
Test Case: 922 | Input/Output: [(70 -60 85 -58) -60]
Test Case: 923 | Input/Output: [(-51 66 88 -78) -78]
Test Case: 924 | Input/Output: [(-86 60 -59 52) -86]
Test Case: 925 | Input/Output: [(-37 -71 12 -25) -71]
Test Case: 926 | Input/Output: [(79 24 41 -32) -32]
Test Case: 927 | Input/Output: [(7 -54 -92 -5) -92]
Test Case: 928 | Input/Output: [(66 -39 79 -84) -84]
Test Case: 929 | Input/Output: [(-3 -92 -73 -53) -92]
Test Case: 930 | Input/Output: [(-6 -82 89 98) -82]
Test Case: 931 | Input/Output: [(-75 -60 3 11) -75]
Test Case: 932 | Input/Output: [(-74 52 27 -28) -74]
Test Case: 933 | Input/Output: [(-79 -18 -18 -62) -79]
Test Case: 934 | Input/Output: [(-31 -25 1 -1) -31]
Test Case: 935 | Input/Output: [(9 -92 37 61) -92]
Test Case: 936 | Input/Output: [(92 82 11 57) 11]
Test Case: 937 | Input/Output: [(-100 -62 -100 38) -100]
Test Case: 938 | Input/Output: [(24 67 21 -75) -75]
Test Case: 939 | Input/Output: [(79 0 -84 -73) -84]
Test Case: 940 | Input/Output: [(76 76 -73 -57) -73]
Test Case: 941 | Input/Output: [(78 -39 71 10) -39]
Test Case: 942 | Input/Output: [(-21 95 -5 -4) -21]
Test Case: 943 | Input/Output: [(60 26 -35 67) -35]
Test Case: 944 | Input/Output: [(-45 71 4 43) -45]
Test Case: 945 | Input/Output: [(4 86 -37 72) -37]
Test Case: 946 | Input/Output: [(28 -29 -2 99) -29]
Test Case: 947 | Input/Output: [(28 21 -53 -43) -53]
Test Case: 948 | Input/Output: [(36 -16 -2 -98) -98]
Test Case: 949 | Input/Output: [(-63 -35 72 84) -63]
Test Case: 950 | Input/Output: [(16 80 -35 -11) -35]
Test Case: 951 | Input/Output: [(21 -6 21 17) -6]
Test Case: 952 | Input/Output: [(4 7 47 -34) -34]
Test Case: 953 | Input/Output: [(31 -85 -77 48) -85]
Test Case: 954 | Input/Output: [(63 -14 -7 -42) -42]
Test Case: 955 | Input/Output: [(3 -32 -5 -64) -64]
Test Case: 956 | Input/Output: [(54 -61 -40 79) -61]
Test Case: 957 | Input/Output: [(-95 96 99 -65) -95]
Test Case: 958 | Input/Output: [(65 -69 68 93) -69]
Test Case: 959 | Input/Output: [(98 -33 18 -76) -76]
Test Case: 960 | Input/Output: [(38 43 -21 84) -21]
Test Case: 961 | Input/Output: [(64 78 83 59) 59]
Test Case: 962 | Input/Output: [(41 -55 -82 -17) -82]
Test Case: 963 | Input/Output: [(-61 67 -100 100) -100]
Test Case: 964 | Input/Output: [(-41 -47 0 76) -47]
Test Case: 965 | Input/Output: [(57 -60 -82 -33) -82]
Test Case: 966 | Input/Output: [(7 -53 61 -76) -76]
Test Case: 967 | Input/Output: [(42 81 81 -94) -94]
Test Case: 968 | Input/Output: [(-15 6 -23 -25) -25]
Test Case: 969 | Input/Output: [(15 -35 -17 2) -35]
Test Case: 970 | Input/Output: [(28 -51 89 -56) -56]
Test Case: 971 | Input/Output: [(-34 -67 -57 31) -67]
Test Case: 972 | Input/Output: [(-71 75 -29 -17) -71]
Test Case: 973 | Input/Output: [(-58 95 -31 70) -58]
Test Case: 974 | Input/Output: [(29 -97 -37 -14) -97]
Test Case: 975 | Input/Output: [(86 11 -55 23) -55]
Test Case: 976 | Input/Output: [(-78 75 -26 -1) -78]
Test Case: 977 | Input/Output: [(-76 64 39 64) -76]
Test Case: 978 | Input/Output: [(41 -99 23 -59) -99]
Test Case: 979 | Input/Output: [(-20 24 -29 57) -29]
Test Case: 980 | Input/Output: [(-71 80 -94 -87) -94]
Test Case: 981 | Input/Output: [(97 -75 15 -79) -79]
Test Case: 982 | Input/Output: [(45 80 44 -71) -71]
Test Case: 983 | Input/Output: [(-13 -90 -6 -74) -90]
Test Case: 984 | Input/Output: [(-5 -64 -88 18) -88]
Test Case: 985 | Input/Output: [(-79 -74 -49 97) -79]
Test Case: 986 | Input/Output: [(-32 -36 -20 -95) -95]
Test Case: 987 | Input/Output: [(-15 -60 52 71) -60]
Test Case: 988 | Input/Output: [(61 -1 35 -48) -48]
Test Case: 989 | Input/Output: [(-22 -62 -62 97) -62]
Test Case: 990 | Input/Output: [(70 100 24 -22) -22]
Test Case: 991 | Input/Output: [(88 60 75 -40) -40]
Test Case: 992 | Input/Output: [(-100 -53 -25 15) -100]
Test Case: 993 | Input/Output: [(97 -54 25 73) -54]
Test Case: 994 | Input/Output: [(68 61 12 -36) -36]
Test Case: 995 | Input/Output: [(-44 -41 94 83) -44]
Test Case: 996 | Input/Output: [(42 -56 34 11) -56]
Test Case: 997 | Input/Output: [(10 57 -52 -83) -83]
Test Case: 998 | Input/Output: [(50 44 74 -3) -3]
Test Case: 999 | Input/Output: [(-62 -49 -62 -6) -62]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 8 -22 -18 -49 90 17 13 -51 106 -78 -28 97 -112 -89 67 -70
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[9 9 0 9] 0] [[52 -99 -99 -99] -99] [[-61 37 -61 -61] -61] [[75 57 57 57] 57] [[14 -41 14 14] -41] [[58 58 7 58] 7] [[-20 -20 -20 58] -20] [[-27 -27 -27 -26] -27] [[53 -16 -16 -16] -16] [[88 -93 88 88] -93] [(-96 -96 -96 -96) -96] [(-68 -68 -68 -68) -68] [(68 68 68 68) 68] [(-4 -4 -4 -4) -4] [(-26 -26 -26 -26) -26] [(71 42 2 87) 2] [(65 72 81 77) 65] [(100 4 15 26) 4] [(71 50 68 46) 46] [(83 93 28 78) 28] [(3 51 63 26) 3] [(38 47 97 26) 26] [(49 50 14 40) 14] [(13 40 89 84) 13] [(95 61 99 74) 61] [(26 10 19 87) 10] [(7 83 82 56) 7] [(18 95 31 34) 18] [(75 9 10 6) 6] [(97 8 79 18) 8] [(98 41 67 15) 15] [(35 95 3 88) 3] [(84 47 40 0) 0] [(44 64 2 96) 2] [(8 33 29 26) 8] [(98 -6 -37 -71) -71] [(56 -53 -42 -93) -93] [(-91 5 29 -11) -91] [(-3 59 89 -40) -40] [(-95 61 24 -55) -95] [(-20 -99 -18 86) -99] [(66 58 21 -72) -72] [(40 71 -97 63) -97] [(-5 16 -3 -81) -81] [(-41 -79 25 -90) -90] [(-51 -31 19 -35) -51] [(-85 -22 -48 6) -85] [(15 -41 43 34) -41] [(-45 40 -10 -12) -45] [(60 -11 88 69) -11] [(57 43 -43 55) -43] [(-94 -64 -37 4) -94] [(27 -68 -83 97) -83] [(-94 -78 27 2) -94] [(79 24 56 -80) -80] [(-6 -19 -16 -78) -78] [(-50 22 -82 51) -82] [(-17 -82 49 86) -82] [(-44 27 97 5) -44] [(77 45 96 25) 25] [(-13 89 93 63) -13] [(-35 -38 61 36) -38] [(-28 -64 -92 -23) -92] [(24 -45 28 72) -45] [(23 58 -41 -30) -41] [(68 4 41 -82) -82] [(-13 57 33 5) -13] [(15 -99 -87 -48) -99] [(-92 2 55 83) -92] [(57 97 -89 51) -89] [(39 -25 28 9) -25] [(-55 -50 -66 34) -66] [(33 -44 -94 -33) -94] [(14 -69 -20 -79) -79] [(36 61 100 -93) -93] [(-36 -28 85 -100) -100] [(-10 62 -49 -58) -58] [(3 69 -93 -81) -93] [(98 76 63 34) 34] [(-59 -56 -80 63) -80] [(59 58 -57 18) -57] [(5 1 70 83) 1] [(-84 17 45 67) -84] [(-96 -42 15 -78) -96] [(-42 -89 1 -1) -89] [(14 89 80 73) 14] [(-29 39 65 -56) -56] [(18 94 -62 -17) -62] [(92 36 -65 -70) -70] [(-23 -52 72 68) -52] [(0 64 -64 -42) -64] [(19 -12 28 -74) -74] [(60 3 61 5) 3] [(44 66 -61 -95) -95] [(-29 87 36 -62) -62])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: 58                 
Correct output: -27                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 87                 
Correct output: 65                  | Program output: 77                 
Correct output: 4                   | Program output: 26                 
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 84                 
Correct output: 61                  | Program output: 74                 
Correct output: 10                  | Program output: 87                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: 86                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: 6                  
Correct output: -41                 | Program output: 34                 
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: 69                 
Correct output: -43                 | Program output: 55                 
Correct output: -94                 | Program output: 4                  
Correct output: -83                 | Program output: 97                 
Correct output: -94                 | Program output: 2                  
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 51                 
Correct output: -82                 | Program output: 86                 
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: 36                 
Correct output: -92                 | Program output: -23                
Correct output: -45                 | Program output: 72                 
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: 83                 
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: 9                  
Correct output: -66                 | Program output: 34                 
Correct output: -94                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: 63                 
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 83                 
Correct output: -84                 | Program output: 67                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -1                 
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: 68                 
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (boolean_stackdepth boolean_invert_second_then_and in4 print_integer integer_flush exec_eq in4 boolean_or exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing (exec_when () print_boolean exec_k () (boolean_frominteger) exec_swap (integer_inc) (boolean_yankdup) boolean_and boolean_yank exec_do*count (boolean_swap boolean_invert_first_then_and)) ()) () ()) ())
Lexicase best errors: [1 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (boolean_stackdepth boolean_invert_second_then_and in4 print_integer integer_flush exec_eq in4 boolean_or exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing (exec_when () print_boolean exec_k () (boolean_frominteger) exec_swap (integer_inc) (boolean_yankdup) boolean_and boolean_yank exec_do*count (boolean_swap boolean_invert_first_then_and)) ()) () ()) ())
Zero cases best errors: [1 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 13 4 3 4 13 4 5 3 3)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (5 13 4 3 4 13 4 5 3 3)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_889} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_930} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_299} {:close 0, :instruction 32} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Best program: (in4 exec_k_when_autoconstructing (print_integer integer_dup_items boolean_swap exec_do*count () boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*range (boolean_empty) boolean_dup) integer_dec exec_rot () (boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_not boolean_invert_first_then_and boolean_dup boolean_rot boolean_or exec_s_when_autoconstructing (boolean_stackdepth exec_do*while (exec_swap (integer_inc exec_when (exec_k (exec_empty print_integer) (boolean_dup_items)) boolean_dup_items boolean_dup boolean_frominteger print_integer exec_y (integer_mod integer_max boolean_and integer_rot exec_rot (tagged_889) (integer_dup tag_exec_321 (integer_div) exec_pop (integer_mult exec_k () (integer_mult exec_y (exec_s (exec_shove (exec_do*range () tagged_930 exec_do*count () integer_swap print_integer) integer_eq exec_if (exec_k (integer_mod boolean_and tag_boolean_299 32 integer_add integer_yank exec_rot () () (boolean_and integer_yankdup) exec_empty exec_swap (exec_yankdup integer_div integer_dup_items integer_stackdepth print_boolean print_integer integer_pop exec_dup (integer_dec) in2) (in1 print_boolean) integer_mod) (integer_rot boolean_pop boolean_shove boolean_rot) boolean_xor exec_stackdepth exec_dup_items) ()) () ())))) ())) ())) () ())) ())
Errors: [1 0 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 95
Size: 138
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 9.943
Median total errors in population: 10
Error averages by case: (0.995 0.987 0.996 0.997 0.996 0.987 0.996 0.995 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.914
Average program size in population (points): 68.741
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462014
--- Timings ---
Current time: 1559314744386 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 28.3%
Fitness Testing:      1.9 seconds, 68.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 81                 
Correct output: 4                   | Program output: 15                 
Correct output: 46                  | Program output: 68                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 63                 
Correct output: 26                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 89                 
Correct output: 61                  | Program output: 99                 
Correct output: 10                  | Program output: 19                 
Correct output: 7                   | Program output: 82                 
Correct output: 18                  | Program output: 31                 
Correct output: 6                   | Program output: 10                 
Correct output: 8                   | Program output: 79                 
Correct output: 15                  | Program output: 67                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 29                 
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -42                
Correct output: -91                 | Program output: 29                 
Correct output: -40                 | Program output: 89                 
Correct output: -95                 | Program output: 24                 
Correct output: -99                 | Program output: -18                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -3                 
Correct output: -90                 | Program output: 25                 
Correct output: -51                 | Program output: 19                 
Correct output: -85                 | Program output: -48                
Correct output: -41                 | Program output: 43                 
Correct output: -45                 | Program output: -10                
Correct output: -11                 | Program output: 88                 
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 27                 
Correct output: -80                 | Program output: 56                 
Correct output: -78                 | Program output: -16                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 49                 
Correct output: -44                 | Program output: 97                 
Correct output: 25                  | Program output: 96                 
Correct output: -13                 | Program output: 93                 
Correct output: -38                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 41                 
Correct output: -13                 | Program output: 33                 
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: 55                 
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -20                
Correct output: -93                 | Program output: 100                
Correct output: -100                | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 70                 
Correct output: -84                 | Program output: 45                 
Correct output: -96                 | Program output: 15                 
Correct output: -89                 | Program output: 1                  
Correct output: 14                  | Program output: 80                 
Correct output: -56                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: 28                 
Correct output: 3                   | Program output: 61                 
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_207} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_775} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*while} {:close 1, :instruction tag_boolean_686} {:close 0, :instruction print_exec} {:close 3, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank})
Lexicase best program: (integer_dup integer_shove in2 boolean_yank integer_eq exec_k (integer_swap boolean_frominteger integer_eq in3) (print_exec (exec_dup (boolean_yank exec_when () integer_eq) boolean_invert_second_then_and exec_stackdepth integer_gt exec_when (integer_sub exec_dup_items tagged_207 integer_max tagged_775 exec_do*count ()) exec_stackdepth integer_shove) exec_dup_times () boolean_flush integer_mult boolean_dup_times) print_integer integer_gte boolean_eq exec_y (exec_do*while () tag_boolean_686) print_exec (exec_flush) exec_if (integer_yank boolean_pop boolean_dup boolean_yank) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 58
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_207} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_775} {:close 2, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*while} {:close 1, :instruction tag_boolean_686} {:close 0, :instruction print_exec} {:close 3, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank})
Zero cases best program: (integer_dup integer_shove in2 boolean_yank integer_eq exec_k (integer_swap boolean_frominteger integer_eq in3) (print_exec (exec_dup (boolean_yank exec_when () integer_eq) boolean_invert_second_then_and exec_stackdepth integer_gt exec_when (integer_sub exec_dup_items tagged_207 integer_max tagged_775 exec_do*count ()) exec_stackdepth integer_shove) exec_dup_times () boolean_flush integer_mult boolean_dup_times) print_integer integer_gte boolean_eq exec_y (exec_do*while () tag_boolean_686) print_exec (exec_flush) exec_if (integer_yank boolean_pop boolean_dup boolean_yank) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 58
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 86 220 544 85 1 1 543 1 220)
Population mean number of elite cases: 1.79
Count of perfect (error zero) individuals by case: (85 86 220 544 85 1 1 543 1 220)
Population mean number of perfect (error zero) cases: 1.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Best program: (integer_fromboolean in3 boolean_or exec_while (exec_do*range () integer_empty) exec_k (integer_empty integer_eq tagged_75 tagged_211 integer_yank print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) boolean_swap exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())
Errors: [0 0 1 1 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 25
Size: 36
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 8.214
Median total errors in population: 8
Error averages by case: (0.915 0.914 0.78 0.456 0.915 0.999 0.999 0.457 0.999 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.51
Average program size in population (points): 74.381
Average percent parens in population: 0.327
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.484
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 215
Syntactic diversity (% unique Push programs):	 0.521
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1022689
--- Timings ---
Current time: 1559314747226 milliseconds
Total Time:           6.8 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.5 seconds, 36.8%
Fitness Testing:      2.8 seconds, 41.0%
Report:               1.4 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 75                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: 53                 
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 71                 
Correct output: 65                  | Program output: 65                 
Correct output: 4                   | Program output: 100                
Correct output: 46                  | Program output: 71                 
Correct output: 28                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 38                 
Correct output: 14                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 61                  | Program output: 95                 
Correct output: 10                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 75                 
Correct output: 8                   | Program output: 97                 
Correct output: 15                  | Program output: 98                 
Correct output: 3                   | Program output: 35                 
Correct output: 0                   | Program output: 84                 
Correct output: 2                   | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: 98                 
Correct output: -93                 | Program output: 56                 
Correct output: -91                 | Program output: -91                
Correct output: -40                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -20                
Correct output: -72                 | Program output: 66                 
Correct output: -97                 | Program output: 40                 
Correct output: -81                 | Program output: -5                 
Correct output: -90                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 15                 
Correct output: -45                 | Program output: -45                
Correct output: -11                 | Program output: 60                 
Correct output: -43                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 79                 
Correct output: -78                 | Program output: -6                 
Correct output: -82                 | Program output: -50                
Correct output: -82                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 25                  | Program output: 77                 
Correct output: -13                 | Program output: -13                
Correct output: -38                 | Program output: -35                
Correct output: -92                 | Program output: -28                
Correct output: -45                 | Program output: 24                 
Correct output: -41                 | Program output: 23                 
Correct output: -82                 | Program output: 68                 
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: 57                 
Correct output: -25                 | Program output: 39                 
Correct output: -66                 | Program output: -55                
Correct output: -94                 | Program output: 33                 
Correct output: -79                 | Program output: 14                 
Correct output: -93                 | Program output: 36                 
Correct output: -100                | Program output: -36                
Correct output: -58                 | Program output: -10                
Correct output: -93                 | Program output: 3                  
Correct output: 34                  | Program output: 98                 
Correct output: -80                 | Program output: -59                
Correct output: -57                 | Program output: 59                 
Correct output: 1                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -42                
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: -29                
Correct output: -62                 | Program output: 18                 
Correct output: -70                 | Program output: 92                 
Correct output: -52                 | Program output: -23                
Correct output: -64                 | Program output: 0                  
Correct output: -74                 | Program output: 19                 
Correct output: 3                   | Program output: 60                 
Correct output: -95                 | Program output: 44                 
Correct output: -62                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction 93} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove})
Lexicase best program: (in1 boolean_swap boolean_dup integer_rot print_integer exec_while (in4 integer_flush exec_dup (exec_noop in3 exec_y (integer_rot) boolean_dup_times exec_pop (integer_pop in2) boolean_xor integer_empty exec_do*times () integer_dup_items exec_do*count (integer_min exec_y (integer_dup exec_y_when_autoconstructing () boolean_invert_second_then_and) integer_pop exec_do*range () boolean_dup_items) boolean_swap) exec_do*count (exec_when () print_boolean boolean_or integer_gt exec_shove (boolean_not) exec_do*count () exec_empty exec_if (exec_dup_times (print_newline exec_s (93 integer_yank exec_eq) (in1 print_newline) (boolean_invert_second_then_and exec_shove () exec_swap (integer_pop) (exec_when (exec_do*times (exec_do*times (boolean_pop) integer_div integer_dup_items) integer_gt boolean_swap boolean_not print_integer exec_k (integer_mod exec_yankdup) (boolean_yankdup print_exec () boolean_invert_first_then_and exec_do*count (exec_do*times () boolean_dup) print_newline integer_fromboolean integer_mult integer_mod) boolean_yank exec_dup_times (exec_eq exec_if () (integer_max) integer_gt exec_shove ())))))) ())))
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 118
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction 93} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove})
Zero cases best program: (in1 boolean_swap boolean_dup integer_rot print_integer exec_while (in4 integer_flush exec_dup (exec_noop in3 exec_y (integer_rot) boolean_dup_times exec_pop (integer_pop in2) boolean_xor integer_empty exec_do*times () integer_dup_items exec_do*count (integer_min exec_y (integer_dup exec_y_when_autoconstructing () boolean_invert_second_then_and) integer_pop exec_do*range () boolean_dup_items) boolean_swap) exec_do*count (exec_when () print_boolean boolean_or integer_gt exec_shove (boolean_not) exec_do*count () exec_empty exec_if (exec_dup_times (print_newline exec_s (93 integer_yank exec_eq) (in1 print_newline) (boolean_invert_second_then_and exec_shove () exec_swap (integer_pop) (exec_when (exec_do*times (exec_do*times (boolean_pop) integer_div integer_dup_items) integer_gt boolean_swap boolean_not print_integer exec_k (integer_mod exec_yankdup) (boolean_yankdup print_exec () boolean_invert_first_then_and exec_do*count (exec_do*times () boolean_dup) print_newline integer_fromboolean integer_mult integer_mod) boolean_yank exec_dup_times (exec_eq exec_if () (integer_max) integer_gt exec_shove ())))))) ())))
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 118
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 206 206 847 174 261 261 261 206 848)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (206 206 206 847 174 261 261 261 206 848)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_dup_items integer_sub boolean_and boolean_yankdup print_boolean boolean_flush integer_fromboolean exec_k_when_autoconstructing (in1 exec_swap (exec_k (exec_do*range (integer_gt integer_dup integer_pop print_integer integer_stackdepth boolean_dup) exec_do*count (boolean_invert_first_then_and) exec_rot (integer_gte exec_eq print_integer) (integer_gt integer_dup integer_dup boolean_and exec_y (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_s (integer_rot exec_do*times (integer_inc boolean_dup_times boolean_frominteger integer_max exec_eq exec_do*count (boolean_not boolean_dup_times boolean_xor exec_when () boolean_yank boolean_yankdup) exec_while (exec_if (print_exec (print_boolean exec_eq boolean_shove exec_do*count (exec_pop (boolean_swap print_exec () integer_eq boolean_dup) integer_yank) boolean_stackdepth)) ()))) () ()) () ())) ()) ()) ()) ())
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 89
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.524
Median total errors in population: 7
Error averages by case: (0.794 0.794 0.794 0.153 0.826 0.739 0.739 0.739 0.794 0.152)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.657
Average program size in population (points): 55.111
Average percent parens in population: 0.298
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1235
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1416813
--- Timings ---
Current time: 1559314749952 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 46.9%
Fitness Testing:      3.3 seconds, 34.6%
Report:               1.7 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: 58                 
Correct output: -27                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 87                 
Correct output: 65                  | Program output: 77                 
Correct output: 4                   | Program output: 26                 
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 84                 
Correct output: 61                  | Program output: 74                 
Correct output: 10                  | Program output: 87                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: 86                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: 6                  
Correct output: -41                 | Program output: 34                 
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: 69                 
Correct output: -43                 | Program output: 55                 
Correct output: -94                 | Program output: 4                  
Correct output: -83                 | Program output: 97                 
Correct output: -94                 | Program output: 2                  
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 51                 
Correct output: -82                 | Program output: 86                 
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: 36                 
Correct output: -92                 | Program output: -23                
Correct output: -45                 | Program output: 72                 
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: 83                 
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: 9                  
Correct output: -66                 | Program output: 34                 
Correct output: -94                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: 63                 
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 83                 
Correct output: -84                 | Program output: 67                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -1                 
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: 68                 
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_889} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_930} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_299} {:close 0, :instruction 32} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Lexicase best program: (in4 exec_k_when_autoconstructing (print_integer integer_dup_items boolean_swap exec_do*count () boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*range (boolean_empty) exec_noop) integer_dec exec_rot () (boolean_invert_first_then_and boolean_eq integer_dup_times boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_not boolean_invert_first_then_and boolean_dup boolean_rot boolean_or exec_s_when_autoconstructing (boolean_stackdepth exec_do*while (exec_swap (integer_inc exec_when (exec_k (exec_empty print_integer) (boolean_dup_items)) boolean_dup_items boolean_dup boolean_frominteger exec_do*count (exec_y (integer_mod integer_max boolean_and integer_max boolean_and integer_rot exec_rot (tagged_889) (integer_dup tag_exec_321 (integer_div) exec_pop (integer_mult exec_k () (integer_mult exec_y (exec_s (exec_shove (exec_do*range () tagged_930 exec_do*count () integer_swap) print_integer) (integer_eq exec_if (exec_k () (integer_mod boolean_and boolean_and tag_boolean_299 32 integer_add integer_yank exec_rot () () (boolean_and integer_yankdup) integer_sub exec_swap (exec_yankdup integer_div integer_dup_items integer_stackdepth print_boolean print_integer integer_pop exec_dup (integer_dec) in2) (in1 print_boolean integer_mod) integer_rot boolean_pop boolean_shove boolean_rot) boolean_xor exec_stackdepth exec_dup_items) ()) ())))) ()))) ())) () ())) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 145
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_889} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_930} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_299} {:close 0, :instruction 32} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items})
Zero cases best program: (in4 exec_k_when_autoconstructing (print_integer integer_dup_items boolean_swap exec_do*count () boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*range (boolean_empty) exec_noop) integer_dec exec_rot () (boolean_invert_first_then_and boolean_eq integer_dup_times boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_not boolean_invert_first_then_and boolean_dup boolean_rot boolean_or exec_s_when_autoconstructing (boolean_stackdepth exec_do*while (exec_swap (integer_inc exec_when (exec_k (exec_empty print_integer) (boolean_dup_items)) boolean_dup_items boolean_dup boolean_frominteger exec_do*count (exec_y (integer_mod integer_max boolean_and integer_max boolean_and integer_rot exec_rot (tagged_889) (integer_dup tag_exec_321 (integer_div) exec_pop (integer_mult exec_k () (integer_mult exec_y (exec_s (exec_shove (exec_do*range () tagged_930 exec_do*count () integer_swap) print_integer) (integer_eq exec_if (exec_k () (integer_mod boolean_and boolean_and tag_boolean_299 32 integer_add integer_yank exec_rot () () (boolean_and integer_yankdup) integer_sub exec_swap (exec_yankdup integer_div integer_dup_items integer_stackdepth print_boolean print_integer integer_pop exec_dup (integer_dec) in2) (in1 print_boolean integer_mod) integer_rot boolean_pop boolean_shove boolean_rot) boolean_xor exec_stackdepth exec_dup_items) ()) ())))) ()))) ())) () ())) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 145
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (496 107 107 107 603 107 1000 107 899 296)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (496 107 107 107 603 107 0 107 899 296)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (boolean_stackdepth boolean_invert_second_then_and in4 print_integer integer_flush exec_eq in4 boolean_or exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing (exec_when () print_boolean exec_k () (boolean_frominteger) exec_swap (integer_inc) (boolean_yankdup) boolean_and boolean_yank exec_do*count (boolean_swap boolean_invert_first_then_and)) ()) () ()) ())
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 23
Size: 37
Percent parens: 0.378
--- Population Statistics ---
Average total errors in population: 7.171
Median total errors in population: 7
Error averages by case: (0.504 0.893 0.893 0.893 0.397 0.893 1.0 0.893 0.101 0.704)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 38.171
Average program size in population (points): 55.393
Average percent parens in population: 0.304
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.657
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1719937
--- Timings ---
Current time: 1559314753103 milliseconds
Total Time:          12.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.0 seconds, 55.3%
Fitness Testing:      3.7 seconds, 28.9%
Report:               1.9 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: 58                 
Correct output: -27                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 87                 
Correct output: 65                  | Program output: 77                 
Correct output: 4                   | Program output: 26                 
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 84                 
Correct output: 61                  | Program output: 74                 
Correct output: 10                  | Program output: 87                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: 86                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: 6                  
Correct output: -41                 | Program output: 34                 
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: 69                 
Correct output: -43                 | Program output: 55                 
Correct output: -94                 | Program output: 4                  
Correct output: -83                 | Program output: 97                 
Correct output: -94                 | Program output: 2                  
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 51                 
Correct output: -82                 | Program output: 86                 
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: 36                 
Correct output: -92                 | Program output: -23                
Correct output: -45                 | Program output: 72                 
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: 83                 
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: 9                  
Correct output: -66                 | Program output: 34                 
Correct output: -94                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: 63                 
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 83                 
Correct output: -84                 | Program output: 67                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -1                 
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: 68                 
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (boolean_stackdepth boolean_invert_second_then_and in4 print_integer integer_flush exec_eq in4 boolean_or exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing (exec_when () print_boolean exec_k () (boolean_frominteger) exec_swap (integer_inc) (integer_swap) boolean_and boolean_yank exec_do*count (boolean_swap boolean_invert_first_then_and)) ()) () ()) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (boolean_stackdepth boolean_invert_second_then_and in4 print_integer integer_flush exec_eq in4 boolean_or exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing (exec_when () print_boolean exec_k () (boolean_frominteger) exec_swap (integer_inc) (integer_swap) boolean_and boolean_yank exec_do*count (boolean_swap boolean_invert_first_then_and)) ()) () ()) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (661 1000 149 918 769 149 661 769 107 1000)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (661 0 149 918 769 149 661 769 107 0)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (boolean_stackdepth exec_y_when_autoconstructing () in4 print_integer integer_flush exec_eq in4 boolean_or exec_k_when_autoconstructing (exec_s (exec_k_when_autoconstructing (exec_when () print_boolean exec_k () (boolean_frominteger) exec_swap (integer_inc) (boolean_yankdup) boolean_and boolean_yank boolean_yankdup) (boolean_and boolean_yank exec_do*count (boolean_swap boolean_invert_first_then_and))) () ()) ())
Errors: [0 1 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 41
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 5.817
Median total errors in population: 5
Error averages by case: (0.339 1.0 0.851 0.082 0.231 0.851 0.339 0.231 0.893 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 36.21
Average program size in population (points): 54.339
Average percent parens in population: 0.334
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.15575
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2111148
--- Timings ---
Current time: 1559314755753 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.0 seconds, 58.5%
Fitness Testing:      4.1 seconds, 26.9%
Report:               2.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: 37                 
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 42                 
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 93                 
Correct output: 3                   | Program output: 51                 
Correct output: 26                  | Program output: 47                 
Correct output: 14                  | Program output: 50                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 83                 
Correct output: 18                  | Program output: 95                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 95                 
Correct output: 0                   | Program output: 47                 
Correct output: 2                   | Program output: 64                 
Correct output: 8                   | Program output: 33                 
Correct output: -71                 | Program output: -6                 
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: 5                  
Correct output: -40                 | Program output: 59                 
Correct output: -95                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 58                 
Correct output: -97                 | Program output: 71                 
Correct output: -81                 | Program output: 16                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -31                
Correct output: -85                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: 43                 
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -68                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: 22                 
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 27                 
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: 89                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: 58                 
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: 97                 
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -50                
Correct output: -94                 | Program output: -44                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 61                 
Correct output: -100                | Program output: -28                
Correct output: -58                 | Program output: 62                 
Correct output: -93                 | Program output: 69                 
Correct output: 34                  | Program output: 76                 
Correct output: -80                 | Program output: -56                
Correct output: -57                 | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 89                 
Correct output: -56                 | Program output: 39                 
Correct output: -62                 | Program output: 94                 
Correct output: -70                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: 64                 
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: 66                 
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_978} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_dup integer_shove in2 boolean_yank integer_eq exec_while (exec_do*range () integer_empty) exec_k (integer_empty integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) boolean_swap exec_k (integer_sub in2) (boolean_xor integer_empty exec_noop) integer_dup_items exec_do*count (tagged_978 print_integer in1 boolean_or boolean_not) boolean_invert_first_then_and boolean_dup boolean_rot boolean_or exec_do*range () boolean_dup_items boolean_swap exec_do*count (exec_when () print_boolean boolean_or exec_flush))
Lexicase best errors: [1 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_978} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_dup integer_shove in2 boolean_yank integer_eq exec_while (exec_do*range () integer_empty) exec_k (integer_empty integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) boolean_swap exec_k (integer_sub in2) (boolean_xor integer_empty exec_noop) integer_dup_items exec_do*count (tagged_978 print_integer in1 boolean_or boolean_not) boolean_invert_first_then_and boolean_dup boolean_rot boolean_or exec_do*range () boolean_dup_items boolean_swap exec_do*count (exec_when () print_boolean boolean_or exec_flush))
Zero cases best errors: [1 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 240 405 1000 240 903 259 903 644 499)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (259 240 405 0 240 903 259 903 644 499)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Best program: (integer_dup integer_shove in2 boolean_yank integer_eq exec_while (exec_do*range () integer_empty) exec_k (integer_empty integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) boolean_swap exec_k (integer_sub exec_while (boolean_eq 84 exec_dup_items exec_s () () ())) ())
Errors: [1 0 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.648
Median total errors in population: 6
Error averages by case: (0.741 0.76 0.595 1.0 0.76 0.097 0.741 0.097 0.356 0.501)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 34.344
Average program size in population (points): 50.54
Average percent parens in population: 0.317
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.6369375
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2430373
--- Timings ---
Current time: 1559314758467 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.1 seconds, 61.6%
Fitness Testing:      4.5 seconds, 24.8%
Report:               2.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: 58                 
Correct output: -27                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 87                 
Correct output: 65                  | Program output: 77                 
Correct output: 4                   | Program output: 26                 
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 84                 
Correct output: 61                  | Program output: 74                 
Correct output: 10                  | Program output: 87                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: 86                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: 6                  
Correct output: -41                 | Program output: 34                 
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: 69                 
Correct output: -43                 | Program output: 55                 
Correct output: -94                 | Program output: 4                  
Correct output: -83                 | Program output: 97                 
Correct output: -94                 | Program output: 2                  
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 51                 
Correct output: -82                 | Program output: 86                 
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: 36                 
Correct output: -92                 | Program output: -23                
Correct output: -45                 | Program output: 72                 
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: 83                 
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: 9                  
Correct output: -66                 | Program output: 34                 
Correct output: -94                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: 63                 
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 83                 
Correct output: -84                 | Program output: 67                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -1                 
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: 68                 
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction 50} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq})
Lexicase best program: (integer_mult boolean_flush in1 exec_dup_times () exec_if () (integer_gte integer_shove in1 boolean_and print_integer) integer_add integer_sub exec_do*count (integer_sub exec_dup_items integer_stackdepth exec_do*count (boolean_swap 50 exec_dup (exec_stackdepth exec_flush exec_yank exec_do*times (in1) in4 exec_yank boolean_flush) exec_flush in3) boolean_eq))
Lexicase best errors: [1 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction 50} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq})
Zero cases best program: (integer_mult boolean_flush in1 exec_dup_times () exec_if () (integer_gte integer_shove in1 boolean_and print_integer) integer_add integer_sub exec_do*count (integer_sub exec_dup_items integer_stackdepth exec_do*count (boolean_swap 50 exec_dup (exec_stackdepth exec_flush exec_yank exec_do*times (in1) in4 exec_yank boolean_flush) exec_flush in3) boolean_eq))
Zero cases best errors: [1 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 150 404 355 554 355 150 150 355 759)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (0 150 404 355 554 355 150 150 355 759)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (in4 exec_k_when_autoconstructing (print_integer integer_dup_items boolean_swap exec_do*count () boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*range (boolean_empty) boolean_dup) integer_dec exec_rot () (boolean_invert_first_then_and exec_swap (integer_inc) (boolean_yankdup) boolean_and boolean_yank exec_do*count (boolean_swap boolean_invert_first_then_and)) ()) ())
Errors: [1 0 1 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.768
Median total errors in population: 6
Error averages by case: (1.0 0.85 0.596 0.645 0.446 0.645 0.85 0.85 0.645 0.241)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.259
Average program size in population (points): 49.216
Average percent parens in population: 0.298
Minimum age in population: 6.0
Maximum age in population: 10.90625
Average age in population: 9.14784375
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2695365
--- Timings ---
Current time: 1559314761134 milliseconds
Total Time:          20.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.3 seconds, 64.2%
Fitness Testing:      4.8 seconds, 23.0%
Report:               2.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 75                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: 53                 
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 71                 
Correct output: 65                  | Program output: 65                 
Correct output: 4                   | Program output: 100                
Correct output: 46                  | Program output: 71                 
Correct output: 28                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 38                 
Correct output: 14                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 61                  | Program output: 95                 
Correct output: 10                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 75                 
Correct output: 8                   | Program output: 97                 
Correct output: 15                  | Program output: 98                 
Correct output: 3                   | Program output: 35                 
Correct output: 0                   | Program output: 84                 
Correct output: 2                   | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: 98                 
Correct output: -93                 | Program output: 56                 
Correct output: -91                 | Program output: -91                
Correct output: -40                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -20                
Correct output: -72                 | Program output: 66                 
Correct output: -97                 | Program output: 40                 
Correct output: -81                 | Program output: -5                 
Correct output: -90                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 15                 
Correct output: -45                 | Program output: -45                
Correct output: -11                 | Program output: 60                 
Correct output: -43                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 79                 
Correct output: -78                 | Program output: -6                 
Correct output: -82                 | Program output: -50                
Correct output: -82                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 25                  | Program output: 77                 
Correct output: -13                 | Program output: -13                
Correct output: -38                 | Program output: -35                
Correct output: -92                 | Program output: -28                
Correct output: -45                 | Program output: 24                 
Correct output: -41                 | Program output: 23                 
Correct output: -82                 | Program output: 68                 
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: 57                 
Correct output: -25                 | Program output: 39                 
Correct output: -66                 | Program output: -55                
Correct output: -94                 | Program output: 33                 
Correct output: -79                 | Program output: 14                 
Correct output: -93                 | Program output: 36                 
Correct output: -100                | Program output: -36                
Correct output: -58                 | Program output: -10                
Correct output: -93                 | Program output: 3                  
Correct output: 34                  | Program output: 98                 
Correct output: -80                 | Program output: -59                
Correct output: -57                 | Program output: 59                 
Correct output: 1                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -42                
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: -29                
Correct output: -62                 | Program output: 18                 
Correct output: -70                 | Program output: 92                 
Correct output: -52                 | Program output: -23                
Correct output: -64                 | Program output: 0                  
Correct output: -74                 | Program output: 19                 
Correct output: 3                   | Program output: 60                 
Correct output: -95                 | Program output: 44                 
Correct output: -62                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_dup_items integer_sub boolean_and boolean_yankdup print_boolean boolean_flush integer_fromboolean integer_mult in1 exec_swap (exec_k (exec_do*range (integer_gt integer_dup integer_pop print_integer integer_stackdepth boolean_dup) exec_do*count (boolean_invert_first_then_and) exec_rot (integer_gte exec_eq print_integer) (integer_gt integer_dup integer_dup boolean_and exec_y (integer_lt exec_s_when_autoconstructing (exec_s (integer_rot exec_do*times (boolean_yank boolean_dup_times boolean_frominteger integer_max exec_eq exec_do*count ())) () ()) () ())) ()) ()) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_dup_items integer_sub boolean_and boolean_yankdup print_boolean boolean_flush integer_fromboolean integer_mult in1 exec_swap (exec_k (exec_do*range (integer_gt integer_dup integer_pop print_integer integer_stackdepth boolean_dup) exec_do*count (boolean_invert_first_then_and) exec_rot (integer_gte exec_eq print_integer) (integer_gt integer_dup integer_dup boolean_and exec_y (integer_lt exec_s_when_autoconstructing (exec_s (integer_rot exec_do*times (boolean_yank boolean_dup_times boolean_frominteger integer_max exec_eq exec_do*count ())) () ()) () ())) ()) ()) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 370 400 164 400 370 400 935 400 164)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (1 370 400 164 400 370 400 935 400 164)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (exec_rot (integer_lt integer_pop in1 print_integer) (exec_do*range (exec_when () integer_dup_items) exec_shove (exec_yank) integer_eq exec_pop (integer_eq) boolean_dup_items integer_min integer_min exec_when (exec_do*while (exec_s (boolean_or integer_mult) (boolean_eq exec_k (boolean_shove boolean_dup_times) (boolean_shove) exec_k (exec_yank) (integer_stackdepth print_newline exec_if (exec_rot () (exec_empty exec_y_when_autoconstructing (exec_yankdup boolean_stackdepth)) ()) ())) ()))) ())))
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 41
Size: 68
Percent parens: 0.397
--- Population Statistics ---
Average total errors in population: 6.396
Median total errors in population: 7
Error averages by case: (0.999 0.63 0.6 0.836 0.6 0.63 0.6 0.065 0.6 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.041
Average program size in population (points): 48.515
Average percent parens in population: 0.315
Minimum age in population: 7.25
Maximum age in population: 12.484375
Average age in population: 10.6075
Median age in population: 10.65625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2977351
--- Timings ---
Current time: 1559314763921 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 66.2%
Fitness Testing:      5.1 seconds, 21.6%
Report:               2.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 75                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: 53                 
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 71                 
Correct output: 65                  | Program output: 65                 
Correct output: 4                   | Program output: 100                
Correct output: 46                  | Program output: 71                 
Correct output: 28                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 38                 
Correct output: 14                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 61                  | Program output: 95                 
Correct output: 10                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 75                 
Correct output: 8                   | Program output: 97                 
Correct output: 15                  | Program output: 98                 
Correct output: 3                   | Program output: 35                 
Correct output: 0                   | Program output: 84                 
Correct output: 2                   | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: 98                 
Correct output: -93                 | Program output: 56                 
Correct output: -91                 | Program output: -91                
Correct output: -40                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -20                
Correct output: -72                 | Program output: 66                 
Correct output: -97                 | Program output: 40                 
Correct output: -81                 | Program output: -5                 
Correct output: -90                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 15                 
Correct output: -45                 | Program output: -45                
Correct output: -11                 | Program output: 60                 
Correct output: -43                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 79                 
Correct output: -78                 | Program output: -6                 
Correct output: -82                 | Program output: -50                
Correct output: -82                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 25                  | Program output: 77                 
Correct output: -13                 | Program output: -13                
Correct output: -38                 | Program output: -35                
Correct output: -92                 | Program output: -28                
Correct output: -45                 | Program output: 24                 
Correct output: -41                 | Program output: 23                 
Correct output: -82                 | Program output: 68                 
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: 57                 
Correct output: -25                 | Program output: 39                 
Correct output: -66                 | Program output: -55                
Correct output: -94                 | Program output: 33                 
Correct output: -79                 | Program output: 14                 
Correct output: -93                 | Program output: 36                 
Correct output: -100                | Program output: -36                
Correct output: -58                 | Program output: -10                
Correct output: -93                 | Program output: 3                  
Correct output: 34                  | Program output: 98                 
Correct output: -80                 | Program output: -59                
Correct output: -57                 | Program output: 59                 
Correct output: 1                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -42                
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: -29                
Correct output: -62                 | Program output: 18                 
Correct output: -70                 | Program output: 92                 
Correct output: -52                 | Program output: -23                
Correct output: -64                 | Program output: 0                  
Correct output: -74                 | Program output: 19                 
Correct output: 3                   | Program output: 60                 
Correct output: -95                 | Program output: 44                 
Correct output: -62                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (exec_rot (integer_lt integer_pop in1 print_integer) (exec_do*range (exec_when () boolean_yankdup boolean_and) boolean_swap exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ()) ())))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.421
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (exec_rot (integer_lt integer_pop in1 print_integer) (exec_do*range (exec_when () boolean_yankdup boolean_and) boolean_swap exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ()) ())))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.421
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 428 626 210 428 429 75 210 429 428)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (210 428 626 210 428 429 75 210 429 428)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction 93} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove})
Best program: (in1 boolean_swap boolean_dup integer_rot print_integer exec_while (in4 in1 exec_dup (exec_noop in3 exec_y (integer_rot boolean_dup_times exec_pop (integer_pop in2) boolean_xor integer_empty exec_do*times () integer_dup_items exec_do*count (integer_min exec_y (integer_dup exec_y_when_autoconstructing (boolean_invert_second_then_and integer_pop) exec_do*range () boolean_dup_items boolean_swap) exec_do*count (exec_when () print_boolean boolean_or integer_gt exec_shove () boolean_not) exec_do*count () exec_empty exec_if (exec_flush exec_shove (boolean_not) exec_do*count () exec_empty integer_add exec_dup (print_newline exec_s (93 integer_yank exec_eq) (in1 print_newline) (boolean_invert_second_then_and integer_shove) exec_swap (integer_pop) (exec_when (exec_do*times (exec_do*times (boolean_pop) integer_div integer_dup_times) integer_gt boolean_swap boolean_not print_integer exec_k (print_newline exec_yankdup) (boolean_yankdup print_exec () integer_stackdepth exec_do*count (exec_do*times () boolean_dup) print_newline integer_fromboolean integer_mult integer_mod) boolean_yank exec_dup_times (exec_eq exec_if () () integer_max integer_gt exec_shove ()))))) ())))))
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 89
Size: 125
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.527
Median total errors in population: 7
Error averages by case: (0.79 0.572 0.374 0.79 0.572 0.571 0.925 0.79 0.571 0.572)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.582
Average program size in population (points): 47.381
Average percent parens in population: 0.306
Minimum age in population: 9.375
Maximum age in population: 13.890625
Average age in population: 12.2413984375
Median age in population: 12.3203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3255638
--- Timings ---
Current time: 1559314766785 milliseconds
Total Time:          26.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.9 seconds, 67.8%
Fitness Testing:      5.4 seconds, 20.3%
Report:               3.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 81                 
Correct output: 4                   | Program output: 15                 
Correct output: 46                  | Program output: 68                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 63                 
Correct output: 26                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 89                 
Correct output: 61                  | Program output: 99                 
Correct output: 10                  | Program output: 19                 
Correct output: 7                   | Program output: 82                 
Correct output: 18                  | Program output: 31                 
Correct output: 6                   | Program output: 10                 
Correct output: 8                   | Program output: 79                 
Correct output: 15                  | Program output: 67                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 29                 
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -42                
Correct output: -91                 | Program output: 29                 
Correct output: -40                 | Program output: 89                 
Correct output: -95                 | Program output: 24                 
Correct output: -99                 | Program output: -18                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -3                 
Correct output: -90                 | Program output: 25                 
Correct output: -51                 | Program output: 19                 
Correct output: -85                 | Program output: -48                
Correct output: -41                 | Program output: 43                 
Correct output: -45                 | Program output: -10                
Correct output: -11                 | Program output: 88                 
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 27                 
Correct output: -80                 | Program output: 56                 
Correct output: -78                 | Program output: -16                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 49                 
Correct output: -44                 | Program output: 97                 
Correct output: 25                  | Program output: 96                 
Correct output: -13                 | Program output: 93                 
Correct output: -38                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 41                 
Correct output: -13                 | Program output: 33                 
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: 55                 
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -20                
Correct output: -93                 | Program output: 100                
Correct output: -100                | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 70                 
Correct output: -84                 | Program output: 45                 
Correct output: -96                 | Program output: 15                 
Correct output: -89                 | Program output: 1                  
Correct output: 14                  | Program output: 80                 
Correct output: -56                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: 28                 
Correct output: 3                   | Program output: 61                 
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (integer_div) 84 exec_dup_items exec_s () () ()) ())))
Lexicase best errors: [0 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (integer_div) 84 exec_dup_items exec_s () () ()) ())))
Zero cases best errors: [0 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 929 270 929 1 270 571 86 86 571)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (86 929 270 929 1 270 571 86 86 571)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())))
Errors: [0 0 1 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 37
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.201
Median total errors in population: 6
Error averages by case: (0.914 0.071 0.73 0.071 0.999 0.73 0.429 0.914 0.914 0.429)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.163
Average program size in population (points): 46.911
Average percent parens in population: 0.310
Minimum age in population: 10.578125
Maximum age in population: 15.734375
Average age in population: 13.7537578125
Median age in population: 13.8046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3564149
--- Timings ---
Current time: 1559314769747 milliseconds
Total Time:          29.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.3 seconds, 69.4%
Fitness Testing:      5.7 seconds, 19.4%
Report:               3.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: 37                 
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 42                 
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 93                 
Correct output: 3                   | Program output: 51                 
Correct output: 26                  | Program output: 47                 
Correct output: 14                  | Program output: 50                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 83                 
Correct output: 18                  | Program output: 95                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 95                 
Correct output: 0                   | Program output: 47                 
Correct output: 2                   | Program output: 64                 
Correct output: 8                   | Program output: 33                 
Correct output: -71                 | Program output: -6                 
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: 5                  
Correct output: -40                 | Program output: 59                 
Correct output: -95                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 58                 
Correct output: -97                 | Program output: 71                 
Correct output: -81                 | Program output: 16                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -31                
Correct output: -85                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: 43                 
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -68                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: 22                 
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 27                 
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: 89                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: 58                 
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: 97                 
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -50                
Correct output: -94                 | Program output: -44                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 61                 
Correct output: -100                | Program output: -28                
Correct output: -58                 | Program output: 62                 
Correct output: -93                 | Program output: 69                 
Correct output: 34                  | Program output: 76                 
Correct output: -80                 | Program output: -56                
Correct output: -57                 | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 89                 
Correct output: -56                 | Program output: 39                 
Correct output: -62                 | Program output: 94                 
Correct output: -70                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: 64                 
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: 66                 
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (exec_dup_times (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (exec_dup_times (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 120 906 120 120 313 312 253 910 253)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (313 120 906 120 120 313 312 253 910 253)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_invert_first_then_and boolean_eq integer_yankdup in2) print_integer))
Errors: [1 0 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 10
Size: 15
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.38
Median total errors in population: 6
Error averages by case: (0.687 0.88 0.094 0.88 0.88 0.687 0.688 0.747 0.09 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.064
Average program size in population (points): 37.472
Average percent parens in population: 0.329
Minimum age in population: 12.6875
Maximum age in population: 17.4375
Average age in population: 15.442609375
Median age in population: 15.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3841216
--- Timings ---
Current time: 1559314772124 milliseconds
Total Time:          31.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.3 seconds, 70.1%
Fitness Testing:      6.0 seconds, 18.8%
Report:               3.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: 58                 
Correct output: -27                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 87                 
Correct output: 65                  | Program output: 77                 
Correct output: 4                   | Program output: 26                 
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 84                 
Correct output: 61                  | Program output: 74                 
Correct output: 10                  | Program output: 87                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: 86                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: 6                  
Correct output: -41                 | Program output: 34                 
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: 69                 
Correct output: -43                 | Program output: 55                 
Correct output: -94                 | Program output: 4                  
Correct output: -83                 | Program output: 97                 
Correct output: -94                 | Program output: 2                  
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 51                 
Correct output: -82                 | Program output: 86                 
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: 36                 
Correct output: -92                 | Program output: -23                
Correct output: -45                 | Program output: 72                 
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: 83                 
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: 9                  
Correct output: -66                 | Program output: 34                 
Correct output: -94                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: 63                 
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 83                 
Correct output: -84                 | Program output: 67                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -1                 
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: 68                 
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc})
Lexicase best program: (in4 exec_k_when_autoconstructing (print_integer integer_dup_items boolean_swap exec_do*count () boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*range (boolean_empty) boolean_dup) integer_dec exec_rot () (boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_not boolean_invert_first_then_and boolean_dup boolean_rot boolean_or exec_s_when_autoconstructing (boolean_stackdepth exec_do*while (exec_swap (integer_inc) ())) () ())) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc})
Zero cases best program: (in4 exec_k_when_autoconstructing (print_integer integer_dup_items boolean_swap exec_do*count () boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*range (boolean_empty) boolean_dup) integer_dec exec_rot () (boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_not boolean_invert_first_then_and boolean_dup boolean_rot boolean_or exec_s_when_autoconstructing (boolean_stackdepth exec_do*while (exec_swap (integer_inc) ())) () ())) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 226 226 899 1 226 323 226 322 900)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (899 226 226 899 1 226 323 226 322 900)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_not})
Best program: (in4 exec_k_when_autoconstructing () (print_integer integer_dup_items boolean_swap exec_do*count () boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*range (boolean_empty) boolean_dup) boolean_not))
Errors: [0 0 0 0 1 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 12
Size: 18
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.752
Median total errors in population: 5
Error averages by case: (0.101 0.774 0.774 0.101 0.999 0.774 0.677 0.774 0.678 0.1)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.41
Average program size in population (points): 29.518
Average percent parens in population: 0.339
Minimum age in population: 13.6875
Maximum age in population: 18.671875
Average age in population: 17.058720703125
Median age in population: 17.11328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.416
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 279
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4065099
--- Timings ---
Current time: 1559314775105 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 71.6%
Fitness Testing:      6.2 seconds, 17.9%
Report:               3.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 75                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: 53                 
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 71                 
Correct output: 65                  | Program output: 65                 
Correct output: 4                   | Program output: 100                
Correct output: 46                  | Program output: 71                 
Correct output: 28                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 38                 
Correct output: 14                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 61                  | Program output: 95                 
Correct output: 10                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 75                 
Correct output: 8                   | Program output: 97                 
Correct output: 15                  | Program output: 98                 
Correct output: 3                   | Program output: 35                 
Correct output: 0                   | Program output: 84                 
Correct output: 2                   | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: 98                 
Correct output: -93                 | Program output: 56                 
Correct output: -91                 | Program output: -91                
Correct output: -40                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -20                
Correct output: -72                 | Program output: 66                 
Correct output: -97                 | Program output: 40                 
Correct output: -81                 | Program output: -5                 
Correct output: -90                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 15                 
Correct output: -45                 | Program output: -45                
Correct output: -11                 | Program output: 60                 
Correct output: -43                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 79                 
Correct output: -78                 | Program output: -6                 
Correct output: -82                 | Program output: -50                
Correct output: -82                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 25                  | Program output: 77                 
Correct output: -13                 | Program output: -13                
Correct output: -38                 | Program output: -35                
Correct output: -92                 | Program output: -28                
Correct output: -45                 | Program output: 24                 
Correct output: -41                 | Program output: 23                 
Correct output: -82                 | Program output: 68                 
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: 57                 
Correct output: -25                 | Program output: 39                 
Correct output: -66                 | Program output: -55                
Correct output: -94                 | Program output: 33                 
Correct output: -79                 | Program output: 14                 
Correct output: -93                 | Program output: 36                 
Correct output: -100                | Program output: -36                
Correct output: -58                 | Program output: -10                
Correct output: -93                 | Program output: 3                  
Correct output: 34                  | Program output: 98                 
Correct output: -80                 | Program output: -59                
Correct output: -57                 | Program output: 59                 
Correct output: 1                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -42                
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: -29                
Correct output: -62                 | Program output: 18                 
Correct output: -70                 | Program output: 92                 
Correct output: -52                 | Program output: -23                
Correct output: -64                 | Program output: 0                  
Correct output: -74                 | Program output: 19                 
Correct output: 3                   | Program output: 60                 
Correct output: -95                 | Program output: 44                 
Correct output: -62                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush print_boolean boolean_yankdup boolean_and) (in3 exec_k (integer_sub exec_while (boolean_eq)) (84 exec_dup_items exec_s () () ())))))
Lexicase best errors: [1 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush print_boolean boolean_yankdup boolean_and) (in3 exec_k (integer_sub exec_while (boolean_eq)) (84 exec_dup_items exec_s () () ())))))
Zero cases best errors: [1 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 232 534 128 232 128 2 232 528 896)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (128 232 534 128 232 128 2 232 528 896)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt})
Best program: (boolean_dup_items integer_sub boolean_and boolean_yankdup print_boolean integer_fromboolean integer_fromboolean exec_k_when_autoconstructing (in1 exec_swap (exec_k (exec_do*range (integer_gt integer_dup integer_pop print_integer integer_stackdepth boolean_dup) exec_do*count (boolean_invert_first_then_and) exec_rot (integer_gte exec_eq print_integer) (integer_gt) ()) ()) ()) ())
Errors: [0 1 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 37
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.96
Median total errors in population: 7
Error averages by case: (0.872 0.768 0.466 0.872 0.768 0.872 0.998 0.768 0.472 0.104)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.824
Average program size in population (points): 37.458
Average percent parens in population: 0.334
Minimum age in population: 14.6875
Maximum age in population: 20.28515625
Average age in population: 18.421677734375
Median age in population: 18.490234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4343634
--- Timings ---
Current time: 1559314778084 milliseconds
Total Time:          37.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.4 seconds, 72.6%
Fitness Testing:      6.5 seconds, 17.3%
Report:               3.7 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: 37                 
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 42                 
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 93                 
Correct output: 3                   | Program output: 51                 
Correct output: 26                  | Program output: 47                 
Correct output: 14                  | Program output: 50                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 83                 
Correct output: 18                  | Program output: 95                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 95                 
Correct output: 0                   | Program output: 47                 
Correct output: 2                   | Program output: 64                 
Correct output: 8                   | Program output: 33                 
Correct output: -71                 | Program output: -6                 
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: 5                  
Correct output: -40                 | Program output: 59                 
Correct output: -95                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 58                 
Correct output: -97                 | Program output: 71                 
Correct output: -81                 | Program output: 16                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -31                
Correct output: -85                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: 43                 
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -68                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: 22                 
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 27                 
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: 89                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: 58                 
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: 97                 
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -50                
Correct output: -94                 | Program output: -44                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 61                 
Correct output: -100                | Program output: -28                
Correct output: -58                 | Program output: 62                 
Correct output: -93                 | Program output: 69                 
Correct output: 34                  | Program output: 76                 
Correct output: -80                 | Program output: -56                
Correct output: -57                 | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 89                 
Correct output: -56                 | Program output: 39                 
Correct output: -62                 | Program output: 94                 
Correct output: -70                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: 64                 
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: 66                 
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()))))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()))))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 82 700 288 211 82 288 330 82 912)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (82 82 700 288 211 82 288 330 82 912)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times})
Best program: (in2 integer_rot print_integer exec_while (exec_do*times (integer_flush exec_dup (exec_noop in3 exec_y (integer_rot) boolean_dup_times exec_pop (integer_pop integer_max) boolean_xor integer_empty exec_do*times () integer_dup_items exec_do*count (integer_min exec_y (integer_dup exec_y_when_autoconstructing () boolean_invert_second_then_and) integer_pop exec_do*range () boolean_dup_items) print_newline) exec_do*count (exec_when () print_boolean boolean_or integer_gt exec_shove (exec_s_when_autoconstructing () (exec_do*count () exec_empty exec_if (exec_dup_times ()) ()) ())))))
Errors: [0 0 0 1 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 61
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 6.943
Median total errors in population: 7
Error averages by case: (0.918 0.918 0.3 0.712 0.789 0.918 0.712 0.67 0.918 0.088)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.161
Average program size in population (points): 38.986
Average percent parens in population: 0.327
Minimum age in population: 16.87890625
Maximum age in population: 21.75048828125
Average age in population: 19.82251147460938
Median age in population: 19.8587646484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4605338
--- Timings ---
Current time: 1559314780546 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.4 seconds, 73.2%
Fitness Testing:      6.8 seconds, 16.9%
Report:               3.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: 37                 
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 42                 
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 93                 
Correct output: 3                   | Program output: 51                 
Correct output: 26                  | Program output: 47                 
Correct output: 14                  | Program output: 50                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 83                 
Correct output: 18                  | Program output: 95                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 95                 
Correct output: 0                   | Program output: 47                 
Correct output: 2                   | Program output: 64                 
Correct output: 8                   | Program output: 33                 
Correct output: -71                 | Program output: -6                 
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: 5                  
Correct output: -40                 | Program output: 59                 
Correct output: -95                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 58                 
Correct output: -97                 | Program output: 71                 
Correct output: -81                 | Program output: 16                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -31                
Correct output: -85                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: 43                 
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -68                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: 22                 
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 27                 
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: 89                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: 58                 
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: 97                 
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -50                
Correct output: -94                 | Program output: -44                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 61                 
Correct output: -100                | Program output: -28                
Correct output: -58                 | Program output: 62                 
Correct output: -93                 | Program output: 69                 
Correct output: 34                  | Program output: 76                 
Correct output: -80                 | Program output: -56                
Correct output: -57                 | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 89                 
Correct output: -56                 | Program output: 39                 
Correct output: -62                 | Program output: 94                 
Correct output: -70                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: 64                 
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: 66                 
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (in2 integer_rot print_integer exec_while (exec_do*times (integer_flush exec_dup (exec_noop exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean) boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())))))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (in2 integer_rot print_integer exec_while (exec_do*times (integer_flush exec_dup (exec_noop exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean) boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())))))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (445 136 445 194 445 739 194 136 136 100)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (445 136 445 194 445 739 194 136 136 100)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()))))
Errors: [0 1 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 7.03
Median total errors in population: 7
Error averages by case: (0.555 0.864 0.555 0.806 0.555 0.261 0.806 0.864 0.864 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.779
Average program size in population (points): 45.141
Average percent parens in population: 0.318
Minimum age in population: 17.87890625
Maximum age in population: 22.920166015625
Average age in population: 21.22101428222656
Median age in population: 21.27392578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4838866
--- Timings ---
Current time: 1559314783490 milliseconds
Total Time:          43.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 74.1%
Fitness Testing:      7.1 seconds, 16.4%
Report:               4.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 81                 
Correct output: 4                   | Program output: 15                 
Correct output: 46                  | Program output: 68                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 63                 
Correct output: 26                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 89                 
Correct output: 61                  | Program output: 99                 
Correct output: 10                  | Program output: 19                 
Correct output: 7                   | Program output: 82                 
Correct output: 18                  | Program output: 31                 
Correct output: 6                   | Program output: 10                 
Correct output: 8                   | Program output: 79                 
Correct output: 15                  | Program output: 67                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 29                 
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -42                
Correct output: -91                 | Program output: 29                 
Correct output: -40                 | Program output: 89                 
Correct output: -95                 | Program output: 24                 
Correct output: -99                 | Program output: -18                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -3                 
Correct output: -90                 | Program output: 25                 
Correct output: -51                 | Program output: 19                 
Correct output: -85                 | Program output: -48                
Correct output: -41                 | Program output: 43                 
Correct output: -45                 | Program output: -10                
Correct output: -11                 | Program output: 88                 
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 27                 
Correct output: -80                 | Program output: 56                 
Correct output: -78                 | Program output: -16                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 49                 
Correct output: -44                 | Program output: 97                 
Correct output: 25                  | Program output: 96                 
Correct output: -13                 | Program output: 93                 
Correct output: -38                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 41                 
Correct output: -13                 | Program output: 33                 
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: 55                 
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -20                
Correct output: -93                 | Program output: 100                
Correct output: -100                | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 70                 
Correct output: -84                 | Program output: 45                 
Correct output: -96                 | Program output: 15                 
Correct output: -89                 | Program output: 1                  
Correct output: 14                  | Program output: 80                 
Correct output: -56                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: 28                 
Correct output: 3                   | Program output: 61                 
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 2, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction tagged_723} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_dup) (integer_rot print_integer boolean_xor in4 integer_flush exec_dup () exec_noop in3)) exec_y (boolean_dup boolean_or integer_eq exec_pop (print_integer) boolean_dup_items integer_min boolean_empty exec_when (exec_do*while (exec_s (boolean_or integer_mult) (boolean_eq exec_when (integer_min boolean_dup_times) tagged_723) (exec_k (exec_yank) (boolean_pop boolean_dup_items exec_if (exec_rot () (integer_gt exec_y_when_autoconstructing ()) ()) ()))))))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.355
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 2, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction tagged_723} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_dup) (integer_rot print_integer boolean_xor in4 integer_flush exec_dup () exec_noop in3)) exec_y (boolean_dup boolean_or integer_eq exec_pop (print_integer) boolean_dup_items integer_min boolean_empty exec_when (exec_do*while (exec_s (boolean_or integer_mult) (boolean_eq exec_when (integer_min boolean_dup_times) tagged_723) (exec_k (exec_yank) (boolean_pop boolean_dup_items exec_if (exec_rot () (integer_gt exec_y_when_autoconstructing ()) ()) ()))))))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.355
--- Lexicase Population Statistics ---
Count of elite individuals by case: (594 102 197 619 888 97 888 325 203 198)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (594 102 197 619 888 97 888 325 203 198)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 37
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 5.889
Median total errors in population: 5
Error averages by case: (0.406 0.898 0.803 0.381 0.112 0.903 0.112 0.675 0.797 0.802)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.857
Average program size in population (points): 42.406
Average percent parens in population: 0.319
Minimum age in population: 19.7587890625
Maximum age in population: 24.699951171875
Average age in population: 22.74331390380859
Median age in population: 22.8004150390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5079453
--- Timings ---
Current time: 1559314786222 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 74.6%
Fitness Testing:      7.3 seconds, 15.9%
Report:               4.2 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 81                 
Correct output: 4                   | Program output: 15                 
Correct output: 46                  | Program output: 68                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 63                 
Correct output: 26                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 89                 
Correct output: 61                  | Program output: 99                 
Correct output: 10                  | Program output: 19                 
Correct output: 7                   | Program output: 82                 
Correct output: 18                  | Program output: 31                 
Correct output: 6                   | Program output: 10                 
Correct output: 8                   | Program output: 79                 
Correct output: 15                  | Program output: 67                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 29                 
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -42                
Correct output: -91                 | Program output: 29                 
Correct output: -40                 | Program output: 89                 
Correct output: -95                 | Program output: 24                 
Correct output: -99                 | Program output: -18                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -3                 
Correct output: -90                 | Program output: 25                 
Correct output: -51                 | Program output: 19                 
Correct output: -85                 | Program output: -48                
Correct output: -41                 | Program output: 43                 
Correct output: -45                 | Program output: -10                
Correct output: -11                 | Program output: 88                 
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 27                 
Correct output: -80                 | Program output: 56                 
Correct output: -78                 | Program output: -16                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 49                 
Correct output: -44                 | Program output: 97                 
Correct output: 25                  | Program output: 96                 
Correct output: -13                 | Program output: 93                 
Correct output: -38                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 41                 
Correct output: -13                 | Program output: 33                 
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: 55                 
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -20                
Correct output: -93                 | Program output: 100                
Correct output: -100                | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 70                 
Correct output: -84                 | Program output: 45                 
Correct output: -96                 | Program output: 15                 
Correct output: -89                 | Program output: 1                  
Correct output: 14                  | Program output: 80                 
Correct output: -56                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: 28                 
Correct output: 3                   | Program output: 61                 
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer exec_y_when_autoconstructing () print_boolean boolean_yankdup boolean_and) (in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ()))))
Lexicase best errors: [1 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer exec_y_when_autoconstructing () print_boolean boolean_yankdup boolean_and) (in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ()))))
Zero cases best errors: [1 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (267 249 855 339 343 1000 343 343 1000 339)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (267 249 855 339 343 0 343 343 0 339)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte integer_add boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq) 84 exec_dup_items exec_s () () ()) ())))
Errors: [1 1 0 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 37
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.922
Median total errors in population: 8
Error averages by case: (0.733 0.751 0.145 0.661 0.657 1.0 0.657 0.657 1.0 0.661)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 27.777
Average program size in population (points): 41.03
Average percent parens in population: 0.322
Minimum age in population: 20.7587890625
Maximum age in population: 26.17291259765625
Average age in population: 24.26703475952148
Median age in population: 24.35784912109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5352023
--- Timings ---
Current time: 1559314789017 milliseconds
Total Time:          48.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.5 seconds, 75.1%
Fitness Testing:      7.6 seconds, 15.6%
Report:               4.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 81                 
Correct output: 4                   | Program output: 15                 
Correct output: 46                  | Program output: 68                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 63                 
Correct output: 26                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 89                 
Correct output: 61                  | Program output: 99                 
Correct output: 10                  | Program output: 19                 
Correct output: 7                   | Program output: 82                 
Correct output: 18                  | Program output: 31                 
Correct output: 6                   | Program output: 10                 
Correct output: 8                   | Program output: 79                 
Correct output: 15                  | Program output: 67                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 29                 
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -42                
Correct output: -91                 | Program output: 29                 
Correct output: -40                 | Program output: 89                 
Correct output: -95                 | Program output: 24                 
Correct output: -99                 | Program output: -18                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -3                 
Correct output: -90                 | Program output: 25                 
Correct output: -51                 | Program output: 19                 
Correct output: -85                 | Program output: -48                
Correct output: -41                 | Program output: 43                 
Correct output: -45                 | Program output: -10                
Correct output: -11                 | Program output: 88                 
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 27                 
Correct output: -80                 | Program output: 56                 
Correct output: -78                 | Program output: -16                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: 49                 
Correct output: -44                 | Program output: 97                 
Correct output: 25                  | Program output: 96                 
Correct output: -13                 | Program output: 93                 
Correct output: -38                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 28                 
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 41                 
Correct output: -13                 | Program output: 33                 
Correct output: -99                 | Program output: -87                
Correct output: -92                 | Program output: 55                 
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -20                
Correct output: -93                 | Program output: 100                
Correct output: -100                | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 70                 
Correct output: -84                 | Program output: 45                 
Correct output: -96                 | Program output: 15                 
Correct output: -89                 | Program output: 1                  
Correct output: 14                  | Program output: 80                 
Correct output: -56                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: 28                 
Correct output: 3                   | Program output: 61                 
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq 84 exec_dup_items exec_s () () ())) ())))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (boolean_eq 84 exec_dup_items exec_s () () ())) ())))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (618 1000 135 1000 621 135 125 626 878 125)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (618 0 135 0 621 135 125 626 878 125)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub exec_while (exec_do*count (boolean_invert_first_then_and) exec_rot (integer_gte exec_eq exec_do*range () boolean_dup_items) (boolean_swap) (exec_if (exec_when () print_boolean boolean_or integer_gt exec_shove (boolean_swap) exec_s (integer_rot exec_do*times (integer_inc boolean_dup_times boolean_frominteger)) () ()) ()))) ())))
Errors: [0 1 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 64
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 6.737
Median total errors in population: 6
Error averages by case: (0.382 1.0 0.865 1.0 0.379 0.865 0.875 0.374 0.122 0.875)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 26.83
Average program size in population (points): 40.27
Average percent parens in population: 0.333
Minimum age in population: 23.2342529296875
Maximum age in population: 27.57157897949219
Average age in population: 25.71970709228516
Median age in population: 25.75801086425781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5676530
--- Timings ---
Current time: 1559314791788 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.8 seconds, 75.4%
Fitness Testing:      7.9 seconds, 15.4%
Report:               4.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: 58                 
Correct output: -27                 | Program output: -26                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 87                 
Correct output: 65                  | Program output: 77                 
Correct output: 4                   | Program output: 26                 
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 84                 
Correct output: 61                  | Program output: 74                 
Correct output: 10                  | Program output: 87                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: 86                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: 6                  
Correct output: -41                 | Program output: 34                 
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: 69                 
Correct output: -43                 | Program output: 55                 
Correct output: -94                 | Program output: 4                  
Correct output: -83                 | Program output: 97                 
Correct output: -94                 | Program output: 2                  
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 51                 
Correct output: -82                 | Program output: 86                 
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: 36                 
Correct output: -92                 | Program output: -23                
Correct output: -45                 | Program output: 72                 
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: 83                 
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: 9                  
Correct output: -66                 | Program output: 34                 
Correct output: -94                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: 63                 
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 83                 
Correct output: -84                 | Program output: 67                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -1                 
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: 68                 
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_stackdepth boolean_invert_second_then_and in4 print_integer integer_flush exec_k () (in4 exec_stackdepth integer_rot print_integer exec_while (in4 integer_flush exec_dup (exec_noop in3 exec_y (integer_rot) boolean_dup_times exec_pop (integer_pop in2) boolean_xor integer_empty exec_do*times () integer_dup_items exec_do*count (integer_min exec_y (integer_dup exec_y_when_autoconstructing () boolean_invert_second_then_and) integer_pop exec_do*range () boolean_dup_items) boolean_swap) integer_mod exec_when () print_boolean boolean_or)))
Lexicase best errors: [1 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 53
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_stackdepth boolean_invert_second_then_and in4 print_integer integer_flush exec_k () (in4 exec_stackdepth integer_rot print_integer exec_while (in4 integer_flush exec_dup (exec_noop in3 exec_y (integer_rot) boolean_dup_times exec_pop (integer_pop in2) boolean_xor integer_empty exec_do*times () integer_dup_items exec_do*count (integer_min exec_y (integer_dup exec_y_when_autoconstructing () boolean_invert_second_then_and) integer_pop exec_do*range () boolean_dup_items) boolean_swap) integer_mod exec_when () print_boolean boolean_or)))
Zero cases best errors: [1 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 53
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 359 359 258 359 263 1 263 880 263)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (258 359 359 258 359 263 1 263 880 263)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc})
Best program: (boolean_stackdepth boolean_dup in4 print_integer integer_flush exec_eq in4 boolean_or exec_k_when_autoconstructing (exec_s (tagged_75 tagged_211 integer_lte print_integer boolean_flush) (print_boolean boolean_yankdup exec_flush) (boolean_and exec_k (integer_sub exec_while (boolean_or exec_s_when_autoconstructing (integer_gt exec_do*while (exec_swap (integer_inc) ())) () ())) ())) ())
Errors: [1 1 1 1 1 0 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 28
Size: 43
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 6.737
Median total errors in population: 6
Error averages by case: (0.742 0.641 0.641 0.742 0.641 0.737 0.999 0.737 0.12 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.796
Average program size in population (points): 41.074
Average percent parens in population: 0.322
Minimum age in population: 24.4013671875
Maximum age in population: 29.09469604492188
Average age in population: 27.2642706451416
Median age in population: 27.30690383911133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5972897
--- Timings ---
Current time: 1559314794204 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.7 seconds, 75.6%
Fitness Testing:      8.2 seconds, 15.3%
Report:               4.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 51                 
Correct output: 26                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 82                 
Correct output: 18                  | Program output: 31                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 29                 
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: 5                  
Correct output: -40                 | Program output: 59                 
Correct output: -95                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -3                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -31                
Correct output: -85                 | Program output: -48                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -10                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 27                 
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: 89                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 61                 
Correct output: -100                | Program output: -28                
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 80                 
Correct output: -56                 | Program output: 39                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items)))
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items)))
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 265 565 895 328 328 328 328 202 266)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (265 265 565 895 328 328 328 328 202 266)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items)))
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.23
Median total errors in population: 5
Error averages by case: (0.735 0.735 0.435 0.105 0.672 0.672 0.672 0.672 0.798 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.154
Average program size in population (points): 39.798
Average percent parens in population: 0.314
Minimum age in population: 26.190673828125
Maximum age in population: 30.54605102539062
Average age in population: 28.85922390365601
Median age in population: 28.90788078308105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6254144
--- Timings ---
Current time: 1559314796883 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.8 seconds, 75.9%
Fitness Testing:      8.5 seconds, 15.1%
Report:               5.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 51                 
Correct output: 26                  | Program output: 47                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 82                 
Correct output: 18                  | Program output: 31                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 29                 
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: 5                  
Correct output: -40                 | Program output: 59                 
Correct output: -95                 | Program output: 24                 
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -3                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -31                
Correct output: -85                 | Program output: -48                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -10                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 27                 
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: 89                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 61                 
Correct output: -100                | Program output: -28                
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 80                 
Correct output: -56                 | Program output: 39                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items)))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items)))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 879 433 885 428 429 850 2 432 434)
Population mean number of elite cases: 4.77
Count of perfect (error zero) individuals by case: (2 879 433 885 428 429 850 2 432 434)
Population mean number of perfect (error zero) cases: 4.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min exec_while (boolean_eq) 84 exec_dup_items)))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 5.226
Median total errors in population: 7
Error averages by case: (0.998 0.121 0.567 0.115 0.572 0.571 0.15 0.998 0.568 0.566)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.726
Average program size in population (points): 40.347
Average percent parens in population: 0.264
Minimum age in population: 27.3651123046875
Maximum age in population: 32.29861640930176
Average age in population: 29.2356063079834
Median age in population: 29.06309700012207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 317
Genome diversity (% unique genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 317
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6542137
--- Timings ---
Current time: 1559314799721 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.1 seconds, 76.1%
Fitness Testing:      8.8 seconds, 14.9%
Report:               5.2 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 42                 
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 64                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: 43                 
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -68                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 22                 
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -50                
Correct output: -94                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -56                
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (615 1 600 194 611 1 1 656 791 611)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (615 1 600 194 611 1 1 656 791 611)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 5.919
Median total errors in population: 4
Error averages by case: (0.385 0.999 0.4 0.806 0.389 0.999 0.999 0.344 0.209 0.389)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.121
Average program size in population (points): 43.575
Average percent parens in population: 0.241
Minimum age in population: 28.91749572753906
Maximum age in population: 32.25772762298584
Average age in population: 30.41844784641266
Median age in population: 30.41749572753906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 338
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 338
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7005346
--- Timings ---
Current time: 1559314802411 milliseconds
Total Time:          62.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.2 seconds, 76.2%
Fitness Testing:      9.2 seconds, 14.8%
Report:               5.5 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 42                 
Correct output: 65                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 40                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 56                 
Correct output: 18                  | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 64                 
Correct output: 8                   | Program output: 26                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 63                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -35                
Correct output: -85                 | Program output: -22                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -12                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: 43                 
Correct output: -94                 | Program output: -64                
Correct output: -83                 | Program output: -68                
Correct output: -94                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: 22                 
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: 5                  
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: 63                 
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -64                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: 5                  
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 2                  
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -50                
Correct output: -94                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -56                
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: 17                 
Correct output: -96                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 73                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min)))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min)))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (548 769 4 177 548 548 93 93 745 4)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (548 769 4 177 548 548 93 93 745 4)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean boolean_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items))
Errors: [0 0 1 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.471
Median total errors in population: 5
Error averages by case: (0.452 0.231 0.996 0.823 0.452 0.452 0.907 0.907 0.255 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.601
Average program size in population (points): 43.236
Average percent parens in population: 0.223
Minimum age in population: 29.91749572753906
Maximum age in population: 33.58761167526245
Average age in population: 32.2687637257576
Median age in population: 32.09900283813477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 396
Genome diversity (% unique genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 397
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7380722
--- Timings ---
Current time: 1559314804960 milliseconds
Total Time:          64.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.2 seconds, 76.3%
Fitness Testing:      9.5 seconds, 14.7%
Report:               5.7 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: 14                 
Correct output: 7                   | Program output: 58                 
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: 88                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 71                 
Correct output: 65                  | Program output: 65                 
Correct output: 4                   | Program output: 26                 
Correct output: 46                  | Program output: 46                 
Correct output: 28                  | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 26                 
Correct output: 14                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 61                  | Program output: 74                 
Correct output: 10                  | Program output: 26                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 44                 
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -20                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 40                 
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 15                 
Correct output: -45                 | Program output: -45                
Correct output: -11                 | Program output: 60                 
Correct output: -43                 | Program output: 55                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -82                 | Program output: -50                
Correct output: -82                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 25                  | Program output: 25                 
Correct output: -13                 | Program output: -13                
Correct output: -38                 | Program output: -35                
Correct output: -92                 | Program output: -28                
Correct output: -45                 | Program output: 24                 
Correct output: -41                 | Program output: -30                
Correct output: -82                 | Program output: -82                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: 51                 
Correct output: -25                 | Program output: 9                  
Correct output: -66                 | Program output: -55                
Correct output: -94                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -81                
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -59                
Correct output: -57                 | Program output: 18                 
Correct output: 1                   | Program output: 5                  
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -42                
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -52                 | Program output: -23                
Correct output: -64                 | Program output: -42                
Correct output: -74                 | Program output: -74                
Correct output: 3                   | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () integer_rot) (boolean_or exec_k_when_autoconstructing (integer_eq print_boolean tagged_211 integer_lte integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean integer_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in1) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () integer_rot) (boolean_or exec_k_when_autoconstructing (integer_eq print_boolean tagged_211 integer_lte integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean integer_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in1) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (836 514 303 365 836 365 303 303 303 303)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (836 514 303 365 836 365 303 303 303 303)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () integer_rot) (boolean_or exec_k_when_autoconstructing (integer_eq print_boolean tagged_211 integer_lte integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer boolean_flush print_boolean integer_yankdup boolean_and) in4 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in1) (print_integer in1 boolean_or integer_dup_items) boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 38
Size: 47
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 5.569
Median total errors in population: 5
Error averages by case: (0.164 0.486 0.697 0.635 0.164 0.635 0.697 0.697 0.697 0.697)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.428
Average program size in population (points): 43.077
Average percent parens in population: 0.224
Minimum age in population: 30.91749572753906
Maximum age in population: 35.37227153778076
Average age in population: 33.79247899079323
Median age in population: 33.91749572753906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 190
Genome diversity (% unique genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7687961
--- Timings ---
Current time: 1559314807786 milliseconds
Total Time:          67.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.5 seconds, 76.5%
Fitness Testing:      9.8 seconds, 14.5%
Report:               5.9 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 227
Test mean error for best: 0.22700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 65                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: -91                
Correct output: -40                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -5                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 36                 
Correct output: -100                | Program output: -36                
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (800 695 19 19 19 803 697 804 19 281)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (800 695 19 19 19 803 697 804 19 281)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_75} {:close 0, :instruction tagged_211} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction 84} {:close 0, :instruction exec_dup_items})
Best program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.844
Median total errors in population: 5
Error averages by case: (0.2 0.305 0.981 0.981 0.981 0.197 0.303 0.196 0.981 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.99
Average program size in population (points): 46.067
Average percent parens in population: 0.197
Minimum age in population: 33.41749572753906
Maximum age in population: 36.98004913330078
Average age in population: 35.59191418099403
Median age in population: 35.68478798866272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 337
Genome diversity (% unique genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.011
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8029500
--- Timings ---
Current time: 1559314810766 milliseconds
Total Time:          70.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 76.8%
Fitness Testing:     10.1 seconds, 14.3%
Report:               6.1 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 24
Successful program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 45


Auto-simplifying with starting size: 45
step: 0
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 500
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1000
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 1500
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2000
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 2500
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3000
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 3500
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4000
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 4500
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

step: 5000
program: (exec_y_when_autoconstructing (exec_swap (print_integer exec_while () boolean_yankdup) (boolean_or exec_k_when_autoconstructing (integer_eq tagged_75 tagged_211 integer_lte print_integer) (print_integer in3 exec_k (integer_sub boolean_invert_first_then_and boolean_eq integer_yankdup in2) (print_integer in1 boolean_or boolean_yankdup) in1 boolean_yank boolean_and integer_min boolean_swap boolean_yank boolean_and integer_min boolean_swap boolean_eq) 84 exec_dup_items)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 45

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 227
Test mean error for best: 0.22700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 0                   | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: -61                 | Program output: -61                
Correct output: 57                  | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: 7                   | Program output: 7                  
Correct output: -20                 | Program output: -20                
Correct output: -27                 | Program output: -27                
Correct output: -16                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: 68                  | Program output: 68                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 2                   | Program output: 2                  
Correct output: 65                  | Program output: 65                 
Correct output: 4                   | Program output: 4                  
Correct output: 46                  | Program output: 50                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 26                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 61                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 40                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: -71                 | Program output: -37                
Correct output: -93                 | Program output: -53                
Correct output: -91                 | Program output: -91                
Correct output: -40                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -72                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -81                 | Program output: -5                 
Correct output: -90                 | Program output: -79                
Correct output: -51                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -45                 | Program output: -45                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 24                 
Correct output: -78                 | Program output: -19                
Correct output: -82                 | Program output: -82                
Correct output: -82                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: 25                  | Program output: 45                 
Correct output: -13                 | Program output: -13                
Correct output: -38                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: -82                 | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -89                 | Program output: -89                
Correct output: -25                 | Program output: -25                
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -69                
Correct output: -93                 | Program output: 36                 
Correct output: -100                | Program output: -36                
Correct output: -58                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: 34                  | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -57                 | Program output: -57                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -65                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -12                
Correct output: 3                   | Program output: 3                  
Correct output: -95                 | Program output: -61                
Correct output: -62                 | Program output: -29                
;;******************************
