Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[69 -23 -23 -23] -23] [[-98 -98 -61 -98] -98] [[-21 -21 -21 94] -21] [[13 13 18 13] 13] [[-90 -90 -90 -38] -90] [[93 -26 -26 -26] -26] [[23 23 -21 23] -21] [[49 49 62 49] 49] [[-40 -40 43 -40] -40] [[-75 -97 -75 -75] -97] [(94 94 94 94) 94] [(6 6 6 6) 6] [(94 94 94 94) 94] [(80 80 80 80) 80] [(-38 -38 -38 -38) -38] [(31 5 2 85) 2] [(6 35 48 52) 6] [(68 11 54 36) 11] [(66 29 12 15) 12] [(20 92 92 72) 20] [(72 63 8 31) 8] [(18 0 73 69) 0] [(39 80 79 57) 39] [(45 80 43 80) 43] [(95 81 97 84) 81] [(94 22 2 82) 2] [(39 34 71 33) 33] [(68 49 81 94) 49] [(82 42 88 5) 5] [(53 87 7 49) 7] [(87 98 70 11) 11] [(21 28 49 96) 21] [(1 97 35 0) 0] [(73 88 88 38) 38] [(28 21 68 83) 21] [(41 43 -36 -24) -36] [(58 63 68 -98) -98] [(-86 93 46 -66) -86] [(-41 45 33 7) -41] [(46 96 3 84) 3] [(-72 -27 15 -41) -72] [(83 -58 -3 -55) -58] [(60 35 45 -52) -52] [(82 -85 100 94) -85] [(100 -77 54 93) -77] [(15 41 -72 65) -72] [(23 83 39 -83) -83] [(-38 -26 -69 50) -69] [(-86 -92 -52 -59) -92] [(99 -51 -19 -4) -51] [(-59 -36 57 32) -59] [(13 -61 18 -66) -66] [(-76 69 9 -90) -90] [(93 -1 -48 -88) -88] [(70 -29 -84 -24) -84] [(7 -20 -50 30) -50] [(-50 73 21 98) -50] [(96 82 98 89) 82] [(64 71 90 6) 6] [(-99 -42 -92 -27) -99] [(6 46 15 0) 0] [(39 30 62 -33) -33] [(-55 6 73 34) -55] [(100 -28 57 11) -28] [(14 84 28 -37) -37] [(-71 -83 61 -76) -83] [(-6 -79 -97 51) -97] [(94 -91 86 -17) -91] [(-85 45 -69 -2) -85] [(37 69 78 19) 19] [(-36 72 -67 -73) -73] [(23 4 41 -72) -72] [(26 -24 -69 -32) -69] [(-3 47 -21 24) -21] [(87 -27 39 89) -27] [(-46 29 -17 -49) -49] [(-87 53 -17 85) -87] [(-56 54 33 86) -56] [(-6 31 -30 -68) -68] [(-52 72 -78 20) -78] [(-15 -54 69 35) -54] [(-14 -49 55 41) -49] [(99 -78 -77 89) -78] [(-97 -64 73 -84) -97] [(-87 89 -48 -24) -87] [(8 -67 62 -86) -86] [(-70 -56 27 31) -70] [(-40 76 -25 37) -40] [(86 72 -77 -29) -77] [(-24 35 -100 100) -100] [(6 -58 -7 -73) -73] [(76 -47 -75 -24) -75] [(75 -33 -23 -14) -33] [(22 68 -20 70) -20] [(90 -66 61 31) -66])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[69 -23 -23 -23] -23]
Train Case:   6 | Input/Output: [[-98 -98 -61 -98] -98]
Train Case:   7 | Input/Output: [[-21 -21 -21 94] -21]
Train Case:   8 | Input/Output: [[13 13 18 13] 13]
Train Case:   9 | Input/Output: [[-90 -90 -90 -38] -90]
Train Case:  10 | Input/Output: [[93 -26 -26 -26] -26]
Train Case:  11 | Input/Output: [[23 23 -21 23] -21]
Train Case:  12 | Input/Output: [[49 49 62 49] 49]
Train Case:  13 | Input/Output: [[-40 -40 43 -40] -40]
Train Case:  14 | Input/Output: [[-75 -97 -75 -75] -97]
Train Case:  15 | Input/Output: [(94 94 94 94) 94]
Train Case:  16 | Input/Output: [(6 6 6 6) 6]
Train Case:  17 | Input/Output: [(94 94 94 94) 94]
Train Case:  18 | Input/Output: [(80 80 80 80) 80]
Train Case:  19 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  20 | Input/Output: [(31 5 2 85) 2]
Train Case:  21 | Input/Output: [(6 35 48 52) 6]
Train Case:  22 | Input/Output: [(68 11 54 36) 11]
Train Case:  23 | Input/Output: [(66 29 12 15) 12]
Train Case:  24 | Input/Output: [(20 92 92 72) 20]
Train Case:  25 | Input/Output: [(72 63 8 31) 8]
Train Case:  26 | Input/Output: [(18 0 73 69) 0]
Train Case:  27 | Input/Output: [(39 80 79 57) 39]
Train Case:  28 | Input/Output: [(45 80 43 80) 43]
Train Case:  29 | Input/Output: [(95 81 97 84) 81]
Train Case:  30 | Input/Output: [(94 22 2 82) 2]
Train Case:  31 | Input/Output: [(39 34 71 33) 33]
Train Case:  32 | Input/Output: [(68 49 81 94) 49]
Train Case:  33 | Input/Output: [(82 42 88 5) 5]
Train Case:  34 | Input/Output: [(53 87 7 49) 7]
Train Case:  35 | Input/Output: [(87 98 70 11) 11]
Train Case:  36 | Input/Output: [(21 28 49 96) 21]
Train Case:  37 | Input/Output: [(1 97 35 0) 0]
Train Case:  38 | Input/Output: [(73 88 88 38) 38]
Train Case:  39 | Input/Output: [(28 21 68 83) 21]
Train Case:  40 | Input/Output: [(41 43 -36 -24) -36]
Train Case:  41 | Input/Output: [(58 63 68 -98) -98]
Train Case:  42 | Input/Output: [(-86 93 46 -66) -86]
Train Case:  43 | Input/Output: [(-41 45 33 7) -41]
Train Case:  44 | Input/Output: [(46 96 3 84) 3]
Train Case:  45 | Input/Output: [(-72 -27 15 -41) -72]
Train Case:  46 | Input/Output: [(83 -58 -3 -55) -58]
Train Case:  47 | Input/Output: [(60 35 45 -52) -52]
Train Case:  48 | Input/Output: [(82 -85 100 94) -85]
Train Case:  49 | Input/Output: [(100 -77 54 93) -77]
Train Case:  50 | Input/Output: [(15 41 -72 65) -72]
Train Case:  51 | Input/Output: [(23 83 39 -83) -83]
Train Case:  52 | Input/Output: [(-38 -26 -69 50) -69]
Train Case:  53 | Input/Output: [(-86 -92 -52 -59) -92]
Train Case:  54 | Input/Output: [(99 -51 -19 -4) -51]
Train Case:  55 | Input/Output: [(-59 -36 57 32) -59]
Train Case:  56 | Input/Output: [(13 -61 18 -66) -66]
Train Case:  57 | Input/Output: [(-76 69 9 -90) -90]
Train Case:  58 | Input/Output: [(93 -1 -48 -88) -88]
Train Case:  59 | Input/Output: [(70 -29 -84 -24) -84]
Train Case:  60 | Input/Output: [(7 -20 -50 30) -50]
Train Case:  61 | Input/Output: [(-50 73 21 98) -50]
Train Case:  62 | Input/Output: [(96 82 98 89) 82]
Train Case:  63 | Input/Output: [(64 71 90 6) 6]
Train Case:  64 | Input/Output: [(-99 -42 -92 -27) -99]
Train Case:  65 | Input/Output: [(6 46 15 0) 0]
Train Case:  66 | Input/Output: [(39 30 62 -33) -33]
Train Case:  67 | Input/Output: [(-55 6 73 34) -55]
Train Case:  68 | Input/Output: [(100 -28 57 11) -28]
Train Case:  69 | Input/Output: [(14 84 28 -37) -37]
Train Case:  70 | Input/Output: [(-71 -83 61 -76) -83]
Train Case:  71 | Input/Output: [(-6 -79 -97 51) -97]
Train Case:  72 | Input/Output: [(94 -91 86 -17) -91]
Train Case:  73 | Input/Output: [(-85 45 -69 -2) -85]
Train Case:  74 | Input/Output: [(37 69 78 19) 19]
Train Case:  75 | Input/Output: [(-36 72 -67 -73) -73]
Train Case:  76 | Input/Output: [(23 4 41 -72) -72]
Train Case:  77 | Input/Output: [(26 -24 -69 -32) -69]
Train Case:  78 | Input/Output: [(-3 47 -21 24) -21]
Train Case:  79 | Input/Output: [(87 -27 39 89) -27]
Train Case:  80 | Input/Output: [(-46 29 -17 -49) -49]
Train Case:  81 | Input/Output: [(-87 53 -17 85) -87]
Train Case:  82 | Input/Output: [(-56 54 33 86) -56]
Train Case:  83 | Input/Output: [(-6 31 -30 -68) -68]
Train Case:  84 | Input/Output: [(-52 72 -78 20) -78]
Train Case:  85 | Input/Output: [(-15 -54 69 35) -54]
Train Case:  86 | Input/Output: [(-14 -49 55 41) -49]
Train Case:  87 | Input/Output: [(99 -78 -77 89) -78]
Train Case:  88 | Input/Output: [(-97 -64 73 -84) -97]
Train Case:  89 | Input/Output: [(-87 89 -48 -24) -87]
Train Case:  90 | Input/Output: [(8 -67 62 -86) -86]
Train Case:  91 | Input/Output: [(-70 -56 27 31) -70]
Train Case:  92 | Input/Output: [(-40 76 -25 37) -40]
Train Case:  93 | Input/Output: [(86 72 -77 -29) -77]
Train Case:  94 | Input/Output: [(-24 35 -100 100) -100]
Train Case:  95 | Input/Output: [(6 -58 -7 -73) -73]
Train Case:  96 | Input/Output: [(76 -47 -75 -24) -75]
Train Case:  97 | Input/Output: [(75 -33 -23 -14) -33]
Train Case:  98 | Input/Output: [(22 68 -20 70) -20]
Train Case:  99 | Input/Output: [(90 -66 61 31) -66]
Test Case:   0 | Input/Output: [[-9 21 -9 -9] -9]
Test Case:   1 | Input/Output: [[18 18 18 -2] -2]
Test Case:   2 | Input/Output: [[-54 -54 -54 -95] -95]
Test Case:   3 | Input/Output: [[49 -36 -36 -36] -36]
Test Case:   4 | Input/Output: [[63 -1 -1 -1] -1]
Test Case:   5 | Input/Output: [[6 67 67 67] 6]
Test Case:   6 | Input/Output: [[82 82 82 72] 72]
Test Case:   7 | Input/Output: [[-80 -80 -80 41] -80]
Test Case:   8 | Input/Output: [[15 56 56 56] 15]
Test Case:   9 | Input/Output: [[-64 -64 -64 31] -64]
Test Case:  10 | Input/Output: [[-97 -53 -53 -53] -97]
Test Case:  11 | Input/Output: [[-76 -80 -80 -80] -80]
Test Case:  12 | Input/Output: [[-25 -25 -25 63] -25]
Test Case:  13 | Input/Output: [[-96 -87 -87 -87] -96]
Test Case:  14 | Input/Output: [[82 -60 -60 -60] -60]
Test Case:  15 | Input/Output: [[-30 -30 72 -30] -30]
Test Case:  16 | Input/Output: [[9 9 -70 9] -70]
Test Case:  17 | Input/Output: [[24 0 24 24] 0]
Test Case:  18 | Input/Output: [[-23 91 91 91] -23]
Test Case:  19 | Input/Output: [[-25 -25 -25 77] -25]
Test Case:  20 | Input/Output: [[2 -1 2 2] -1]
Test Case:  21 | Input/Output: [[20 20 20 -60] -60]
Test Case:  22 | Input/Output: [[-1 -1 4 -1] -1]
Test Case:  23 | Input/Output: [[30 30 30 -97] -97]
Test Case:  24 | Input/Output: [[-87 -56 -87 -87] -87]
Test Case:  25 | Input/Output: [[-53 92 92 92] -53]
Test Case:  26 | Input/Output: [[-64 -64 -64 -98] -98]
Test Case:  27 | Input/Output: [[-38 -38 -41 -38] -41]
Test Case:  28 | Input/Output: [[-90 -90 -90 -32] -90]
Test Case:  29 | Input/Output: [[-13 -13 -13 -96] -96]
Test Case:  30 | Input/Output: [[56 -16 56 56] -16]
Test Case:  31 | Input/Output: [[-88 26 26 26] -88]
Test Case:  32 | Input/Output: [[81 81 -70 81] -70]
Test Case:  33 | Input/Output: [[-34 -34 -34 -97] -97]
Test Case:  34 | Input/Output: [[-54 -54 -54 78] -54]
Test Case:  35 | Input/Output: [[-72 -72 -99 -72] -99]
Test Case:  36 | Input/Output: [[-18 82 82 82] -18]
Test Case:  37 | Input/Output: [[-32 -32 -63 -32] -63]
Test Case:  38 | Input/Output: [[31 31 31 85] 31]
Test Case:  39 | Input/Output: [[-91 -48 -91 -91] -91]
Test Case:  40 | Input/Output: [[98 -98 98 98] -98]
Test Case:  41 | Input/Output: [[-76 -61 -61 -61] -76]
Test Case:  42 | Input/Output: [[87 100 87 87] 87]
Test Case:  43 | Input/Output: [[-5 -5 -5 17] -5]
Test Case:  44 | Input/Output: [[81 81 -82 81] -82]
Test Case:  45 | Input/Output: [[55 55 -70 55] -70]
Test Case:  46 | Input/Output: [[-50 -50 89 -50] -50]
Test Case:  47 | Input/Output: [[-66 -66 51 -66] -66]
Test Case:  48 | Input/Output: [[83 100 83 83] 83]
Test Case:  49 | Input/Output: [[73 73 73 -28] -28]
Test Case:  50 | Input/Output: [[87 87 87 -67] -67]
Test Case:  51 | Input/Output: [[-82 -82 -47 -82] -82]
Test Case:  52 | Input/Output: [[33 33 33 67] 33]
Test Case:  53 | Input/Output: [[-27 -27 74 -27] -27]
Test Case:  54 | Input/Output: [[-10 -10 37 -10] -10]
Test Case:  55 | Input/Output: [[-35 -35 -92 -35] -92]
Test Case:  56 | Input/Output: [[95 95 95 -71] -71]
Test Case:  57 | Input/Output: [[-23 -23 5 -23] -23]
Test Case:  58 | Input/Output: [[68 68 -81 68] -81]
Test Case:  59 | Input/Output: [[-35 24 24 24] -35]
Test Case:  60 | Input/Output: [[-45 -78 -45 -45] -78]
Test Case:  61 | Input/Output: [[79 -14 79 79] -14]
Test Case:  62 | Input/Output: [[5 -43 5 5] -43]
Test Case:  63 | Input/Output: [[65 65 65 -22] -22]
Test Case:  64 | Input/Output: [[98 98 98 -37] -37]
Test Case:  65 | Input/Output: [[-70 89 -70 -70] -70]
Test Case:  66 | Input/Output: [[-82 -82 -82 37] -82]
Test Case:  67 | Input/Output: [[74 74 74 30] 30]
Test Case:  68 | Input/Output: [[-52 -52 -97 -52] -97]
Test Case:  69 | Input/Output: [[-37 -37 33 -37] -37]
Test Case:  70 | Input/Output: [[8 8 8 -96] -96]
Test Case:  71 | Input/Output: [[67 67 -56 67] -56]
Test Case:  72 | Input/Output: [[65 65 65 100] 65]
Test Case:  73 | Input/Output: [[11 11 -94 11] -94]
Test Case:  74 | Input/Output: [[-86 -86 -86 29] -86]
Test Case:  75 | Input/Output: [[77 22 22 22] 22]
Test Case:  76 | Input/Output: [[22 -4 22 22] -4]
Test Case:  77 | Input/Output: [[36 36 -32 36] -32]
Test Case:  78 | Input/Output: [[-76 -32 -32 -32] -76]
Test Case:  79 | Input/Output: [[16 -17 16 16] -17]
Test Case:  80 | Input/Output: [[99 99 5 99] 5]
Test Case:  81 | Input/Output: [[98 98 98 45] 45]
Test Case:  82 | Input/Output: [[43 -94 -94 -94] -94]
Test Case:  83 | Input/Output: [[-29 -29 -29 -27] -29]
Test Case:  84 | Input/Output: [[-74 -40 -40 -40] -74]
Test Case:  85 | Input/Output: [[-31 47 -31 -31] -31]
Test Case:  86 | Input/Output: [[-26 -26 -5 -26] -26]
Test Case:  87 | Input/Output: [[-73 -23 -23 -23] -73]
Test Case:  88 | Input/Output: [[-92 -92 -92 38] -92]
Test Case:  89 | Input/Output: [[84 84 14 84] 14]
Test Case:  90 | Input/Output: [[78 78 24 78] 24]
Test Case:  91 | Input/Output: [[-89 -89 -89 94] -89]
Test Case:  92 | Input/Output: [[-48 99 99 99] -48]
Test Case:  93 | Input/Output: [[38 38 97 38] 38]
Test Case:  94 | Input/Output: [[-14 -21 -21 -21] -21]
Test Case:  95 | Input/Output: [[-32 -32 -32 -1] -32]
Test Case:  96 | Input/Output: [[77 67 77 77] 67]
Test Case:  97 | Input/Output: [[61 -31 61 61] -31]
Test Case:  98 | Input/Output: [[-55 74 -55 -55] -55]
Test Case:  99 | Input/Output: [[94 94 94 -84] -84]
Test Case: 100 | Input/Output: [(85 85 85 85) 85]
Test Case: 101 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 102 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 103 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 104 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 105 | Input/Output: [(52 52 52 52) 52]
Test Case: 106 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 107 | Input/Output: [(52 52 52 52) 52]
Test Case: 108 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 109 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 110 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 111 | Input/Output: [(53 53 53 53) 53]
Test Case: 112 | Input/Output: [(76 76 76 76) 76]
Test Case: 113 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 114 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 115 | Input/Output: [(34 34 34 34) 34]
Test Case: 116 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 117 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 118 | Input/Output: [(89 89 89 89) 89]
Test Case: 119 | Input/Output: [(55 55 55 55) 55]
Test Case: 120 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 121 | Input/Output: [(95 95 95 95) 95]
Test Case: 122 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 123 | Input/Output: [(84 84 84 84) 84]
Test Case: 124 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 125 | Input/Output: [(27 27 27 27) 27]
Test Case: 126 | Input/Output: [(62 62 62 62) 62]
Test Case: 127 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 128 | Input/Output: [(12 12 12 12) 12]
Test Case: 129 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 130 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 131 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 132 | Input/Output: [(96 96 96 96) 96]
Test Case: 133 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 134 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 135 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 136 | Input/Output: [(11 11 11 11) 11]
Test Case: 137 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 138 | Input/Output: [(32 32 32 32) 32]
Test Case: 139 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 140 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 141 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 142 | Input/Output: [(25 25 25 25) 25]
Test Case: 143 | Input/Output: [(35 35 35 35) 35]
Test Case: 144 | Input/Output: [(43 43 43 43) 43]
Test Case: 145 | Input/Output: [(58 58 58 58) 58]
Test Case: 146 | Input/Output: [(84 84 84 84) 84]
Test Case: 147 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 148 | Input/Output: [(8 8 8 8) 8]
Test Case: 149 | Input/Output: [(49 49 49 49) 49]
Test Case: 150 | Input/Output: [(3 3 3 3) 3]
Test Case: 151 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 152 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 153 | Input/Output: [(67 67 67 67) 67]
Test Case: 154 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 155 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 156 | Input/Output: [(37 37 37 37) 37]
Test Case: 157 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 158 | Input/Output: [(6 6 6 6) 6]
Test Case: 159 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 160 | Input/Output: [(38 38 38 38) 38]
Test Case: 161 | Input/Output: [(68 68 68 68) 68]
Test Case: 162 | Input/Output: [(29 29 29 29) 29]
Test Case: 163 | Input/Output: [(80 80 80 80) 80]
Test Case: 164 | Input/Output: [(41 41 41 41) 41]
Test Case: 165 | Input/Output: [(7 7 7 7) 7]
Test Case: 166 | Input/Output: [(52 52 52 52) 52]
Test Case: 167 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 168 | Input/Output: [(58 58 58 58) 58]
Test Case: 169 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 170 | Input/Output: [(66 66 66 66) 66]
Test Case: 171 | Input/Output: [(51 51 51 51) 51]
Test Case: 172 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 173 | Input/Output: [(84 84 84 84) 84]
Test Case: 174 | Input/Output: [(5 5 5 5) 5]
Test Case: 175 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 176 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 177 | Input/Output: [(8 8 8 8) 8]
Test Case: 178 | Input/Output: [(100 100 100 100) 100]
Test Case: 179 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 180 | Input/Output: [(27 27 27 27) 27]
Test Case: 181 | Input/Output: [(9 9 9 9) 9]
Test Case: 182 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 183 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 184 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 185 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 186 | Input/Output: [(57 57 57 57) 57]
Test Case: 187 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 188 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 189 | Input/Output: [(95 95 95 95) 95]
Test Case: 190 | Input/Output: [(51 51 51 51) 51]
Test Case: 191 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 192 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 193 | Input/Output: [(79 79 79 79) 79]
Test Case: 194 | Input/Output: [(97 97 97 97) 97]
Test Case: 195 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 196 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 197 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 198 | Input/Output: [(76 76 76 76) 76]
Test Case: 199 | Input/Output: [(50 50 50 50) 50]
Test Case: 200 | Input/Output: [(93 35 43 84) 35]
Test Case: 201 | Input/Output: [(97 43 21 52) 21]
Test Case: 202 | Input/Output: [(32 22 53 91) 22]
Test Case: 203 | Input/Output: [(7 78 39 36) 7]
Test Case: 204 | Input/Output: [(96 86 74 22) 22]
Test Case: 205 | Input/Output: [(61 7 56 50) 7]
Test Case: 206 | Input/Output: [(23 67 8 92) 8]
Test Case: 207 | Input/Output: [(50 95 85 6) 6]
Test Case: 208 | Input/Output: [(52 76 41 21) 21]
Test Case: 209 | Input/Output: [(54 89 3 44) 3]
Test Case: 210 | Input/Output: [(66 93 42 88) 42]
Test Case: 211 | Input/Output: [(66 41 68 83) 41]
Test Case: 212 | Input/Output: [(7 39 5 75) 5]
Test Case: 213 | Input/Output: [(44 34 7 30) 7]
Test Case: 214 | Input/Output: [(16 5 88 48) 5]
Test Case: 215 | Input/Output: [(32 93 29 100) 29]
Test Case: 216 | Input/Output: [(79 56 13 63) 13]
Test Case: 217 | Input/Output: [(27 83 26 38) 26]
Test Case: 218 | Input/Output: [(20 87 16 89) 16]
Test Case: 219 | Input/Output: [(71 94 39 37) 37]
Test Case: 220 | Input/Output: [(49 48 32 86) 32]
Test Case: 221 | Input/Output: [(99 4 96 7) 4]
Test Case: 222 | Input/Output: [(6 37 84 93) 6]
Test Case: 223 | Input/Output: [(74 13 62 38) 13]
Test Case: 224 | Input/Output: [(65 75 34 95) 34]
Test Case: 225 | Input/Output: [(74 93 29 19) 19]
Test Case: 226 | Input/Output: [(21 89 8 6) 6]
Test Case: 227 | Input/Output: [(81 81 75 48) 48]
Test Case: 228 | Input/Output: [(86 27 28 72) 27]
Test Case: 229 | Input/Output: [(78 49 93 83) 49]
Test Case: 230 | Input/Output: [(28 43 53 93) 28]
Test Case: 231 | Input/Output: [(92 28 20 32) 20]
Test Case: 232 | Input/Output: [(75 7 39 85) 7]
Test Case: 233 | Input/Output: [(17 98 60 39) 17]
Test Case: 234 | Input/Output: [(46 83 20 81) 20]
Test Case: 235 | Input/Output: [(58 39 76 94) 39]
Test Case: 236 | Input/Output: [(81 59 33 93) 33]
Test Case: 237 | Input/Output: [(70 32 72 39) 32]
Test Case: 238 | Input/Output: [(43 81 92 58) 43]
Test Case: 239 | Input/Output: [(41 97 75 51) 41]
Test Case: 240 | Input/Output: [(22 59 51 7) 7]
Test Case: 241 | Input/Output: [(7 2 74 96) 2]
Test Case: 242 | Input/Output: [(40 83 90 60) 40]
Test Case: 243 | Input/Output: [(10 45 53 5) 5]
Test Case: 244 | Input/Output: [(10 58 52 74) 10]
Test Case: 245 | Input/Output: [(68 26 40 36) 26]
Test Case: 246 | Input/Output: [(70 90 51 71) 51]
Test Case: 247 | Input/Output: [(41 98 68 72) 41]
Test Case: 248 | Input/Output: [(79 15 88 22) 15]
Test Case: 249 | Input/Output: [(45 37 21 76) 21]
Test Case: 250 | Input/Output: [(99 60 50 51) 50]
Test Case: 251 | Input/Output: [(78 31 73 83) 31]
Test Case: 252 | Input/Output: [(44 98 96 79) 44]
Test Case: 253 | Input/Output: [(34 70 61 87) 34]
Test Case: 254 | Input/Output: [(9 75 42 29) 9]
Test Case: 255 | Input/Output: [(66 59 83 37) 37]
Test Case: 256 | Input/Output: [(4 49 52 72) 4]
Test Case: 257 | Input/Output: [(100 12 37 88) 12]
Test Case: 258 | Input/Output: [(13 50 6 30) 6]
Test Case: 259 | Input/Output: [(44 29 96 87) 29]
Test Case: 260 | Input/Output: [(70 73 24 74) 24]
Test Case: 261 | Input/Output: [(8 81 18 94) 8]
Test Case: 262 | Input/Output: [(40 96 91 84) 40]
Test Case: 263 | Input/Output: [(51 12 28 12) 12]
Test Case: 264 | Input/Output: [(38 90 38 45) 38]
Test Case: 265 | Input/Output: [(85 91 97 19) 19]
Test Case: 266 | Input/Output: [(60 91 47 4) 4]
Test Case: 267 | Input/Output: [(9 42 86 81) 9]
Test Case: 268 | Input/Output: [(68 82 84 44) 44]
Test Case: 269 | Input/Output: [(83 92 28 67) 28]
Test Case: 270 | Input/Output: [(58 68 70 49) 49]
Test Case: 271 | Input/Output: [(57 29 53 51) 29]
Test Case: 272 | Input/Output: [(83 67 83 49) 49]
Test Case: 273 | Input/Output: [(58 6 21 34) 6]
Test Case: 274 | Input/Output: [(7 9 43 61) 7]
Test Case: 275 | Input/Output: [(36 50 85 26) 26]
Test Case: 276 | Input/Output: [(38 94 53 98) 38]
Test Case: 277 | Input/Output: [(91 33 67 99) 33]
Test Case: 278 | Input/Output: [(8 36 98 2) 2]
Test Case: 279 | Input/Output: [(67 63 5 81) 5]
Test Case: 280 | Input/Output: [(56 36 75 81) 36]
Test Case: 281 | Input/Output: [(60 93 18 60) 18]
Test Case: 282 | Input/Output: [(100 51 27 38) 27]
Test Case: 283 | Input/Output: [(19 5 53 17) 5]
Test Case: 284 | Input/Output: [(18 55 3 46) 3]
Test Case: 285 | Input/Output: [(93 70 79 38) 38]
Test Case: 286 | Input/Output: [(87 63 28 30) 28]
Test Case: 287 | Input/Output: [(96 74 88 95) 74]
Test Case: 288 | Input/Output: [(58 66 29 8) 8]
Test Case: 289 | Input/Output: [(80 37 7 19) 7]
Test Case: 290 | Input/Output: [(81 3 8 5) 3]
Test Case: 291 | Input/Output: [(20 15 57 66) 15]
Test Case: 292 | Input/Output: [(8 9 93 94) 8]
Test Case: 293 | Input/Output: [(6 48 21 93) 6]
Test Case: 294 | Input/Output: [(36 0 21 65) 0]
Test Case: 295 | Input/Output: [(22 9 54 11) 9]
Test Case: 296 | Input/Output: [(62 89 43 17) 17]
Test Case: 297 | Input/Output: [(47 29 53 1) 1]
Test Case: 298 | Input/Output: [(52 32 46 0) 0]
Test Case: 299 | Input/Output: [(80 50 4 97) 4]
Test Case: 300 | Input/Output: [(42 65 52 29) 29]
Test Case: 301 | Input/Output: [(50 37 47 72) 37]
Test Case: 302 | Input/Output: [(68 18 6 69) 6]
Test Case: 303 | Input/Output: [(55 5 6 68) 5]
Test Case: 304 | Input/Output: [(49 35 32 93) 32]
Test Case: 305 | Input/Output: [(57 55 45 82) 45]
Test Case: 306 | Input/Output: [(43 31 45 37) 31]
Test Case: 307 | Input/Output: [(23 27 94 94) 23]
Test Case: 308 | Input/Output: [(33 25 32 47) 25]
Test Case: 309 | Input/Output: [(11 22 70 69) 11]
Test Case: 310 | Input/Output: [(38 3 51 85) 3]
Test Case: 311 | Input/Output: [(50 82 48 18) 18]
Test Case: 312 | Input/Output: [(14 48 69 19) 14]
Test Case: 313 | Input/Output: [(5 90 97 36) 5]
Test Case: 314 | Input/Output: [(2 48 90 29) 2]
Test Case: 315 | Input/Output: [(71 66 95 4) 4]
Test Case: 316 | Input/Output: [(92 89 34 28) 28]
Test Case: 317 | Input/Output: [(8 27 82 48) 8]
Test Case: 318 | Input/Output: [(9 67 43 35) 9]
Test Case: 319 | Input/Output: [(47 27 98 0) 0]
Test Case: 320 | Input/Output: [(17 8 62 64) 8]
Test Case: 321 | Input/Output: [(24 18 46 94) 18]
Test Case: 322 | Input/Output: [(80 68 71 92) 68]
Test Case: 323 | Input/Output: [(23 9 80 69) 9]
Test Case: 324 | Input/Output: [(62 74 87 26) 26]
Test Case: 325 | Input/Output: [(96 27 81 63) 27]
Test Case: 326 | Input/Output: [(18 75 78 91) 18]
Test Case: 327 | Input/Output: [(95 84 32 58) 32]
Test Case: 328 | Input/Output: [(59 79 96 86) 59]
Test Case: 329 | Input/Output: [(25 80 20 56) 20]
Test Case: 330 | Input/Output: [(68 43 50 1) 1]
Test Case: 331 | Input/Output: [(92 77 80 15) 15]
Test Case: 332 | Input/Output: [(22 26 98 91) 22]
Test Case: 333 | Input/Output: [(24 66 0 63) 0]
Test Case: 334 | Input/Output: [(8 30 54 79) 8]
Test Case: 335 | Input/Output: [(4 9 5 83) 4]
Test Case: 336 | Input/Output: [(15 44 96 23) 15]
Test Case: 337 | Input/Output: [(80 10 83 58) 10]
Test Case: 338 | Input/Output: [(11 95 12 42) 11]
Test Case: 339 | Input/Output: [(21 94 57 98) 21]
Test Case: 340 | Input/Output: [(78 95 95 57) 57]
Test Case: 341 | Input/Output: [(62 41 45 48) 41]
Test Case: 342 | Input/Output: [(0 37 39 30) 0]
Test Case: 343 | Input/Output: [(61 39 43 16) 16]
Test Case: 344 | Input/Output: [(71 82 10 90) 10]
Test Case: 345 | Input/Output: [(61 69 4 48) 4]
Test Case: 346 | Input/Output: [(70 66 8 51) 8]
Test Case: 347 | Input/Output: [(20 66 40 24) 20]
Test Case: 348 | Input/Output: [(30 52 22 67) 22]
Test Case: 349 | Input/Output: [(87 99 99 81) 81]
Test Case: 350 | Input/Output: [(80 18 48 41) 18]
Test Case: 351 | Input/Output: [(20 10 18 41) 10]
Test Case: 352 | Input/Output: [(93 84 13 94) 13]
Test Case: 353 | Input/Output: [(69 93 72 60) 60]
Test Case: 354 | Input/Output: [(69 55 23 39) 23]
Test Case: 355 | Input/Output: [(88 0 62 84) 0]
Test Case: 356 | Input/Output: [(78 91 0 88) 0]
Test Case: 357 | Input/Output: [(75 94 45 49) 45]
Test Case: 358 | Input/Output: [(39 16 22 98) 16]
Test Case: 359 | Input/Output: [(77 0 53 16) 0]
Test Case: 360 | Input/Output: [(72 66 44 52) 44]
Test Case: 361 | Input/Output: [(89 67 70 23) 23]
Test Case: 362 | Input/Output: [(83 7 92 84) 7]
Test Case: 363 | Input/Output: [(22 16 25 92) 16]
Test Case: 364 | Input/Output: [(40 29 95 59) 29]
Test Case: 365 | Input/Output: [(92 64 61 13) 13]
Test Case: 366 | Input/Output: [(74 8 69 50) 8]
Test Case: 367 | Input/Output: [(10 74 91 97) 10]
Test Case: 368 | Input/Output: [(56 79 24 67) 24]
Test Case: 369 | Input/Output: [(31 95 14 53) 14]
Test Case: 370 | Input/Output: [(81 10 37 59) 10]
Test Case: 371 | Input/Output: [(1 51 78 7) 1]
Test Case: 372 | Input/Output: [(93 35 5 5) 5]
Test Case: 373 | Input/Output: [(52 76 92 60) 52]
Test Case: 374 | Input/Output: [(3 93 11 49) 3]
Test Case: 375 | Input/Output: [(36 0 58 43) 0]
Test Case: 376 | Input/Output: [(87 96 87 44) 44]
Test Case: 377 | Input/Output: [(69 83 68 57) 57]
Test Case: 378 | Input/Output: [(8 52 10 35) 8]
Test Case: 379 | Input/Output: [(100 10 12 74) 10]
Test Case: 380 | Input/Output: [(27 26 54 90) 26]
Test Case: 381 | Input/Output: [(22 61 99 94) 22]
Test Case: 382 | Input/Output: [(42 20 78 46) 20]
Test Case: 383 | Input/Output: [(70 53 54 56) 53]
Test Case: 384 | Input/Output: [(4 53 87 31) 4]
Test Case: 385 | Input/Output: [(2 65 69 33) 2]
Test Case: 386 | Input/Output: [(89 27 88 21) 21]
Test Case: 387 | Input/Output: [(49 53 4 62) 4]
Test Case: 388 | Input/Output: [(18 58 90 36) 18]
Test Case: 389 | Input/Output: [(30 11 27 15) 11]
Test Case: 390 | Input/Output: [(70 65 84 39) 39]
Test Case: 391 | Input/Output: [(82 72 61 72) 61]
Test Case: 392 | Input/Output: [(16 14 74 88) 14]
Test Case: 393 | Input/Output: [(62 96 30 81) 30]
Test Case: 394 | Input/Output: [(45 69 7 91) 7]
Test Case: 395 | Input/Output: [(26 45 29 36) 26]
Test Case: 396 | Input/Output: [(26 40 18 0) 0]
Test Case: 397 | Input/Output: [(41 71 36 67) 36]
Test Case: 398 | Input/Output: [(9 40 94 27) 9]
Test Case: 399 | Input/Output: [(86 72 54 58) 54]
Test Case: 400 | Input/Output: [(-36 24 -86 -24) -86]
Test Case: 401 | Input/Output: [(94 66 52 28) 28]
Test Case: 402 | Input/Output: [(-17 89 -71 93) -71]
Test Case: 403 | Input/Output: [(0 -44 -42 -21) -44]
Test Case: 404 | Input/Output: [(60 10 5 82) 5]
Test Case: 405 | Input/Output: [(75 72 -44 9) -44]
Test Case: 406 | Input/Output: [(-5 76 83 -41) -41]
Test Case: 407 | Input/Output: [(27 16 81 34) 16]
Test Case: 408 | Input/Output: [(34 -36 -39 -46) -46]
Test Case: 409 | Input/Output: [(94 62 -64 -14) -64]
Test Case: 410 | Input/Output: [(23 83 1 54) 1]
Test Case: 411 | Input/Output: [(54 -17 -3 10) -17]
Test Case: 412 | Input/Output: [(-63 -81 -52 -81) -81]
Test Case: 413 | Input/Output: [(-42 37 -34 7) -42]
Test Case: 414 | Input/Output: [(60 82 -74 -73) -74]
Test Case: 415 | Input/Output: [(6 -90 -3 3) -90]
Test Case: 416 | Input/Output: [(-7 54 -8 15) -8]
Test Case: 417 | Input/Output: [(69 -26 -43 -23) -43]
Test Case: 418 | Input/Output: [(-73 -88 -62 -88) -88]
Test Case: 419 | Input/Output: [(-52 10 -96 4) -96]
Test Case: 420 | Input/Output: [(-52 -13 4 -63) -63]
Test Case: 421 | Input/Output: [(66 88 -80 41) -80]
Test Case: 422 | Input/Output: [(-17 66 76 6) -17]
Test Case: 423 | Input/Output: [(-46 -26 17 -63) -63]
Test Case: 424 | Input/Output: [(87 5 -51 79) -51]
Test Case: 425 | Input/Output: [(-80 -92 -30 -7) -92]
Test Case: 426 | Input/Output: [(80 14 39 -73) -73]
Test Case: 427 | Input/Output: [(93 -83 -5 76) -83]
Test Case: 428 | Input/Output: [(4 -84 5 33) -84]
Test Case: 429 | Input/Output: [(93 -35 38 -93) -93]
Test Case: 430 | Input/Output: [(56 -36 82 29) -36]
Test Case: 431 | Input/Output: [(-61 -32 -93 -44) -93]
Test Case: 432 | Input/Output: [(46 -18 40 44) -18]
Test Case: 433 | Input/Output: [(-78 -3 52 85) -78]
Test Case: 434 | Input/Output: [(45 -63 -10 -26) -63]
Test Case: 435 | Input/Output: [(74 59 10 23) 10]
Test Case: 436 | Input/Output: [(-96 42 54 -72) -96]
Test Case: 437 | Input/Output: [(65 69 -59 29) -59]
Test Case: 438 | Input/Output: [(8 -25 -21 -16) -25]
Test Case: 439 | Input/Output: [(-96 -51 -65 96) -96]
Test Case: 440 | Input/Output: [(-10 -99 72 -58) -99]
Test Case: 441 | Input/Output: [(81 92 8 35) 8]
Test Case: 442 | Input/Output: [(-56 53 36 80) -56]
Test Case: 443 | Input/Output: [(-7 8 93 64) -7]
Test Case: 444 | Input/Output: [(-79 46 -97 44) -97]
Test Case: 445 | Input/Output: [(-80 -71 35 -93) -93]
Test Case: 446 | Input/Output: [(18 -10 10 -30) -30]
Test Case: 447 | Input/Output: [(25 56 -97 -81) -97]
Test Case: 448 | Input/Output: [(-68 95 29 93) -68]
Test Case: 449 | Input/Output: [(-88 93 -19 11) -88]
Test Case: 450 | Input/Output: [(-98 98 45 53) -98]
Test Case: 451 | Input/Output: [(-2 -88 -49 45) -88]
Test Case: 452 | Input/Output: [(84 38 11 -85) -85]
Test Case: 453 | Input/Output: [(39 -76 -75 44) -76]
Test Case: 454 | Input/Output: [(67 14 57 71) 14]
Test Case: 455 | Input/Output: [(61 -56 17 -69) -69]
Test Case: 456 | Input/Output: [(-30 -88 -95 -37) -95]
Test Case: 457 | Input/Output: [(38 81 -24 93) -24]
Test Case: 458 | Input/Output: [(-45 1 69 -5) -45]
Test Case: 459 | Input/Output: [(12 -50 -12 14) -50]
Test Case: 460 | Input/Output: [(-28 -92 -48 -62) -92]
Test Case: 461 | Input/Output: [(72 -32 -54 -54) -54]
Test Case: 462 | Input/Output: [(37 49 68 -79) -79]
Test Case: 463 | Input/Output: [(85 83 70 91) 70]
Test Case: 464 | Input/Output: [(-75 -37 -67 -55) -75]
Test Case: 465 | Input/Output: [(-53 -82 -98 -66) -98]
Test Case: 466 | Input/Output: [(-95 23 52 64) -95]
Test Case: 467 | Input/Output: [(-57 36 -21 93) -57]
Test Case: 468 | Input/Output: [(-79 95 -36 23) -79]
Test Case: 469 | Input/Output: [(16 -62 -65 -74) -74]
Test Case: 470 | Input/Output: [(-73 67 78 -38) -73]
Test Case: 471 | Input/Output: [(78 60 -39 -75) -75]
Test Case: 472 | Input/Output: [(60 42 -98 -39) -98]
Test Case: 473 | Input/Output: [(-77 87 -9 78) -77]
Test Case: 474 | Input/Output: [(-5 -78 -73 73) -78]
Test Case: 475 | Input/Output: [(99 98 12 88) 12]
Test Case: 476 | Input/Output: [(3 -48 18 48) -48]
Test Case: 477 | Input/Output: [(35 46 27 98) 27]
Test Case: 478 | Input/Output: [(61 39 -22 -31) -31]
Test Case: 479 | Input/Output: [(-6 -27 -5 57) -27]
Test Case: 480 | Input/Output: [(70 16 -88 -81) -88]
Test Case: 481 | Input/Output: [(-57 2 36 -34) -57]
Test Case: 482 | Input/Output: [(0 55 -82 -24) -82]
Test Case: 483 | Input/Output: [(-26 -74 -37 20) -74]
Test Case: 484 | Input/Output: [(-72 68 23 -47) -72]
Test Case: 485 | Input/Output: [(32 -17 29 36) -17]
Test Case: 486 | Input/Output: [(-64 -3 -46 -36) -64]
Test Case: 487 | Input/Output: [(-90 -92 59 -31) -92]
Test Case: 488 | Input/Output: [(-84 -61 -21 94) -84]
Test Case: 489 | Input/Output: [(41 -73 -52 -6) -73]
Test Case: 490 | Input/Output: [(76 -27 -29 19) -29]
Test Case: 491 | Input/Output: [(-31 1 86 2) -31]
Test Case: 492 | Input/Output: [(-53 -70 56 71) -70]
Test Case: 493 | Input/Output: [(90 35 51 82) 35]
Test Case: 494 | Input/Output: [(-28 -47 -98 -64) -98]
Test Case: 495 | Input/Output: [(56 57 -64 95) -64]
Test Case: 496 | Input/Output: [(-52 -44 -99 94) -99]
Test Case: 497 | Input/Output: [(79 76 -28 -72) -72]
Test Case: 498 | Input/Output: [(-72 75 -96 -85) -96]
Test Case: 499 | Input/Output: [(45 45 32 100) 32]
Test Case: 500 | Input/Output: [(56 38 96 -77) -77]
Test Case: 501 | Input/Output: [(-2 -28 73 87) -28]
Test Case: 502 | Input/Output: [(6 89 78 -84) -84]
Test Case: 503 | Input/Output: [(-14 89 98 -79) -79]
Test Case: 504 | Input/Output: [(-99 46 63 11) -99]
Test Case: 505 | Input/Output: [(16 16 -26 -53) -53]
Test Case: 506 | Input/Output: [(-87 40 -55 7) -87]
Test Case: 507 | Input/Output: [(14 69 -38 -76) -76]
Test Case: 508 | Input/Output: [(-20 53 27 -39) -39]
Test Case: 509 | Input/Output: [(85 21 38 -37) -37]
Test Case: 510 | Input/Output: [(49 -48 -72 -21) -72]
Test Case: 511 | Input/Output: [(-99 -28 -5 4) -99]
Test Case: 512 | Input/Output: [(-33 -26 26 9) -33]
Test Case: 513 | Input/Output: [(14 33 -21 -96) -96]
Test Case: 514 | Input/Output: [(34 -19 -1 13) -19]
Test Case: 515 | Input/Output: [(-45 -8 28 -68) -68]
Test Case: 516 | Input/Output: [(67 96 -74 83) -74]
Test Case: 517 | Input/Output: [(-11 17 -54 -8) -54]
Test Case: 518 | Input/Output: [(70 -67 -1 -50) -67]
Test Case: 519 | Input/Output: [(58 32 71 -85) -85]
Test Case: 520 | Input/Output: [(-31 -25 95 39) -31]
Test Case: 521 | Input/Output: [(61 88 -62 -64) -64]
Test Case: 522 | Input/Output: [(-34 -30 1 7) -34]
Test Case: 523 | Input/Output: [(60 36 57 28) 28]
Test Case: 524 | Input/Output: [(84 -71 -100 -40) -100]
Test Case: 525 | Input/Output: [(-57 -51 -29 97) -57]
Test Case: 526 | Input/Output: [(25 93 -63 74) -63]
Test Case: 527 | Input/Output: [(-92 -27 -6 -68) -92]
Test Case: 528 | Input/Output: [(60 86 -61 -30) -61]
Test Case: 529 | Input/Output: [(87 41 16 -47) -47]
Test Case: 530 | Input/Output: [(43 -73 10 92) -73]
Test Case: 531 | Input/Output: [(49 64 -29 73) -29]
Test Case: 532 | Input/Output: [(5 87 -39 -4) -39]
Test Case: 533 | Input/Output: [(-29 73 -5 19) -29]
Test Case: 534 | Input/Output: [(-50 -42 85 81) -50]
Test Case: 535 | Input/Output: [(14 -85 -4 -24) -85]
Test Case: 536 | Input/Output: [(25 -40 67 87) -40]
Test Case: 537 | Input/Output: [(9 -19 -48 51) -48]
Test Case: 538 | Input/Output: [(-29 -28 -80 67) -80]
Test Case: 539 | Input/Output: [(-73 1 -68 -95) -95]
Test Case: 540 | Input/Output: [(8 47 22 99) 8]
Test Case: 541 | Input/Output: [(95 -4 36 85) -4]
Test Case: 542 | Input/Output: [(68 54 -11 -80) -80]
Test Case: 543 | Input/Output: [(-62 -15 -97 40) -97]
Test Case: 544 | Input/Output: [(-56 68 -68 -3) -68]
Test Case: 545 | Input/Output: [(87 23 -48 43) -48]
Test Case: 546 | Input/Output: [(-44 17 -82 35) -82]
Test Case: 547 | Input/Output: [(-88 -11 63 74) -88]
Test Case: 548 | Input/Output: [(-32 -63 15 92) -63]
Test Case: 549 | Input/Output: [(65 -54 -66 82) -66]
Test Case: 550 | Input/Output: [(69 57 -71 9) -71]
Test Case: 551 | Input/Output: [(12 -44 38 -47) -47]
Test Case: 552 | Input/Output: [(-59 -16 11 31) -59]
Test Case: 553 | Input/Output: [(-30 44 28 100) -30]
Test Case: 554 | Input/Output: [(52 -50 76 22) -50]
Test Case: 555 | Input/Output: [(90 -67 30 -23) -67]
Test Case: 556 | Input/Output: [(85 37 33 34) 33]
Test Case: 557 | Input/Output: [(-84 -10 32 -75) -84]
Test Case: 558 | Input/Output: [(-14 -27 -65 -10) -65]
Test Case: 559 | Input/Output: [(70 -23 26 -86) -86]
Test Case: 560 | Input/Output: [(26 -1 31 57) -1]
Test Case: 561 | Input/Output: [(14 67 21 59) 14]
Test Case: 562 | Input/Output: [(64 -46 35 -21) -46]
Test Case: 563 | Input/Output: [(-30 34 -60 -59) -60]
Test Case: 564 | Input/Output: [(-12 69 0 -61) -61]
Test Case: 565 | Input/Output: [(100 1 51 18) 1]
Test Case: 566 | Input/Output: [(-48 -47 -41 40) -48]
Test Case: 567 | Input/Output: [(-97 93 97 -47) -97]
Test Case: 568 | Input/Output: [(24 -34 26 75) -34]
Test Case: 569 | Input/Output: [(-14 -5 55 -44) -44]
Test Case: 570 | Input/Output: [(-86 29 -16 -89) -89]
Test Case: 571 | Input/Output: [(-95 -4 82 70) -95]
Test Case: 572 | Input/Output: [(-47 -8 65 86) -47]
Test Case: 573 | Input/Output: [(-60 -79 -25 49) -79]
Test Case: 574 | Input/Output: [(70 30 -23 92) -23]
Test Case: 575 | Input/Output: [(-48 -26 -81 15) -81]
Test Case: 576 | Input/Output: [(-28 -36 -9 85) -36]
Test Case: 577 | Input/Output: [(71 72 -81 -26) -81]
Test Case: 578 | Input/Output: [(68 29 41 96) 29]
Test Case: 579 | Input/Output: [(-18 77 -6 -22) -22]
Test Case: 580 | Input/Output: [(39 59 22 97) 22]
Test Case: 581 | Input/Output: [(6 -13 13 -42) -42]
Test Case: 582 | Input/Output: [(-42 -55 97 -22) -55]
Test Case: 583 | Input/Output: [(-32 -67 -56 73) -67]
Test Case: 584 | Input/Output: [(-67 66 -74 -12) -74]
Test Case: 585 | Input/Output: [(35 0 -37 -90) -90]
Test Case: 586 | Input/Output: [(46 -89 48 -48) -89]
Test Case: 587 | Input/Output: [(40 17 -74 -38) -74]
Test Case: 588 | Input/Output: [(-7 63 15 18) -7]
Test Case: 589 | Input/Output: [(31 -7 -60 40) -60]
Test Case: 590 | Input/Output: [(25 11 -25 -56) -56]
Test Case: 591 | Input/Output: [(-32 -77 -50 -71) -77]
Test Case: 592 | Input/Output: [(14 65 -86 1) -86]
Test Case: 593 | Input/Output: [(-30 -40 -30 4) -40]
Test Case: 594 | Input/Output: [(22 55 -18 94) -18]
Test Case: 595 | Input/Output: [(72 74 67 -2) -2]
Test Case: 596 | Input/Output: [(7 -86 -29 42) -86]
Test Case: 597 | Input/Output: [(34 89 51 -74) -74]
Test Case: 598 | Input/Output: [(-75 -55 -27 19) -75]
Test Case: 599 | Input/Output: [(-79 100 -53 33) -79]
Test Case: 600 | Input/Output: [(-92 -4 -99 23) -99]
Test Case: 601 | Input/Output: [(-25 -25 94 -60) -60]
Test Case: 602 | Input/Output: [(-48 66 -99 86) -99]
Test Case: 603 | Input/Output: [(-16 -60 48 -89) -89]
Test Case: 604 | Input/Output: [(-34 -33 1 78) -34]
Test Case: 605 | Input/Output: [(-34 -15 -64 20) -64]
Test Case: 606 | Input/Output: [(-71 -63 88 62) -71]
Test Case: 607 | Input/Output: [(5 -76 -28 -47) -76]
Test Case: 608 | Input/Output: [(-46 72 2 88) -46]
Test Case: 609 | Input/Output: [(79 -41 -10 -9) -41]
Test Case: 610 | Input/Output: [(96 -86 -64 84) -86]
Test Case: 611 | Input/Output: [(-7 -58 -67 -20) -67]
Test Case: 612 | Input/Output: [(32 -61 -85 86) -85]
Test Case: 613 | Input/Output: [(51 -71 -35 16) -71]
Test Case: 614 | Input/Output: [(-77 19 -72 -47) -77]
Test Case: 615 | Input/Output: [(23 29 65 -61) -61]
Test Case: 616 | Input/Output: [(-11 -65 75 32) -65]
Test Case: 617 | Input/Output: [(85 17 11 82) 11]
Test Case: 618 | Input/Output: [(53 -3 -57 -55) -57]
Test Case: 619 | Input/Output: [(64 46 -53 46) -53]
Test Case: 620 | Input/Output: [(48 90 18 -17) -17]
Test Case: 621 | Input/Output: [(-90 28 -55 -49) -90]
Test Case: 622 | Input/Output: [(-84 7 -20 -61) -84]
Test Case: 623 | Input/Output: [(54 -78 -3 -29) -78]
Test Case: 624 | Input/Output: [(-38 -70 -72 29) -72]
Test Case: 625 | Input/Output: [(-98 11 -4 26) -98]
Test Case: 626 | Input/Output: [(87 -69 -90 8) -90]
Test Case: 627 | Input/Output: [(25 -70 -87 85) -87]
Test Case: 628 | Input/Output: [(19 -83 83 -19) -83]
Test Case: 629 | Input/Output: [(-85 5 90 -80) -85]
Test Case: 630 | Input/Output: [(65 67 33 -92) -92]
Test Case: 631 | Input/Output: [(-25 55 15 10) -25]
Test Case: 632 | Input/Output: [(83 60 -22 -67) -67]
Test Case: 633 | Input/Output: [(78 -29 -29 82) -29]
Test Case: 634 | Input/Output: [(33 6 -86 -9) -86]
Test Case: 635 | Input/Output: [(-12 -99 53 68) -99]
Test Case: 636 | Input/Output: [(-36 -55 44 64) -55]
Test Case: 637 | Input/Output: [(87 31 -71 65) -71]
Test Case: 638 | Input/Output: [(-22 16 -7 83) -22]
Test Case: 639 | Input/Output: [(6 -11 69 -74) -74]
Test Case: 640 | Input/Output: [(-95 -77 -30 23) -95]
Test Case: 641 | Input/Output: [(-98 -68 -49 -93) -98]
Test Case: 642 | Input/Output: [(-77 -67 -21 1) -77]
Test Case: 643 | Input/Output: [(-46 -67 -61 18) -67]
Test Case: 644 | Input/Output: [(1 -65 -4 68) -65]
Test Case: 645 | Input/Output: [(-75 -23 -29 18) -75]
Test Case: 646 | Input/Output: [(-50 94 -21 19) -50]
Test Case: 647 | Input/Output: [(63 62 57 -64) -64]
Test Case: 648 | Input/Output: [(45 -13 -29 -44) -44]
Test Case: 649 | Input/Output: [(-8 -5 68 -34) -34]
Test Case: 650 | Input/Output: [(-89 -67 30 -38) -89]
Test Case: 651 | Input/Output: [(-13 -55 -43 52) -55]
Test Case: 652 | Input/Output: [(77 91 -99 -82) -99]
Test Case: 653 | Input/Output: [(57 10 92 71) 10]
Test Case: 654 | Input/Output: [(-59 -74 83 -60) -74]
Test Case: 655 | Input/Output: [(47 3 -51 -89) -89]
Test Case: 656 | Input/Output: [(97 70 60 29) 29]
Test Case: 657 | Input/Output: [(-65 53 -64 93) -65]
Test Case: 658 | Input/Output: [(94 -61 34 -4) -61]
Test Case: 659 | Input/Output: [(-78 38 -5 -52) -78]
Test Case: 660 | Input/Output: [(80 -5 -79 65) -79]
Test Case: 661 | Input/Output: [(-4 71 78 -92) -92]
Test Case: 662 | Input/Output: [(30 94 18 30) 18]
Test Case: 663 | Input/Output: [(62 -66 -58 74) -66]
Test Case: 664 | Input/Output: [(63 -19 3 12) -19]
Test Case: 665 | Input/Output: [(-41 -81 86 -56) -81]
Test Case: 666 | Input/Output: [(23 91 -5 -77) -77]
Test Case: 667 | Input/Output: [(29 90 10 20) 10]
Test Case: 668 | Input/Output: [(35 -19 91 7) -19]
Test Case: 669 | Input/Output: [(-100 35 -28 -13) -100]
Test Case: 670 | Input/Output: [(-60 -79 52 -60) -79]
Test Case: 671 | Input/Output: [(61 -13 -38 92) -38]
Test Case: 672 | Input/Output: [(66 -86 -47 -4) -86]
Test Case: 673 | Input/Output: [(79 -17 -38 28) -38]
Test Case: 674 | Input/Output: [(51 -36 51 66) -36]
Test Case: 675 | Input/Output: [(9 -29 -76 -52) -76]
Test Case: 676 | Input/Output: [(-46 92 -68 72) -68]
Test Case: 677 | Input/Output: [(-27 44 -55 -15) -55]
Test Case: 678 | Input/Output: [(-94 88 33 -37) -94]
Test Case: 679 | Input/Output: [(1 68 -18 -61) -61]
Test Case: 680 | Input/Output: [(28 -32 42 -89) -89]
Test Case: 681 | Input/Output: [(6 -77 -57 31) -77]
Test Case: 682 | Input/Output: [(-60 33 -2 -66) -66]
Test Case: 683 | Input/Output: [(-49 -33 86 10) -49]
Test Case: 684 | Input/Output: [(-47 22 59 75) -47]
Test Case: 685 | Input/Output: [(-96 -6 -96 73) -96]
Test Case: 686 | Input/Output: [(78 32 -67 57) -67]
Test Case: 687 | Input/Output: [(80 -26 -80 96) -80]
Test Case: 688 | Input/Output: [(-44 45 42 5) -44]
Test Case: 689 | Input/Output: [(53 -4 -31 17) -31]
Test Case: 690 | Input/Output: [(-33 -56 70 80) -56]
Test Case: 691 | Input/Output: [(71 91 -74 10) -74]
Test Case: 692 | Input/Output: [(-17 92 12 -64) -64]
Test Case: 693 | Input/Output: [(-72 59 62 -11) -72]
Test Case: 694 | Input/Output: [(39 -66 -6 -12) -66]
Test Case: 695 | Input/Output: [(2 53 65 61) 2]
Test Case: 696 | Input/Output: [(-59 -17 -51 -96) -96]
Test Case: 697 | Input/Output: [(15 45 19 -26) -26]
Test Case: 698 | Input/Output: [(46 -35 -9 -59) -59]
Test Case: 699 | Input/Output: [(38 7 -34 9) -34]
Test Case: 700 | Input/Output: [(-89 77 81 52) -89]
Test Case: 701 | Input/Output: [(-69 -100 -46 58) -100]
Test Case: 702 | Input/Output: [(55 -1 88 41) -1]
Test Case: 703 | Input/Output: [(-10 9 -9 99) -10]
Test Case: 704 | Input/Output: [(6 29 48 35) 6]
Test Case: 705 | Input/Output: [(-98 90 -18 57) -98]
Test Case: 706 | Input/Output: [(-89 -64 -19 77) -89]
Test Case: 707 | Input/Output: [(19 -37 -76 -34) -76]
Test Case: 708 | Input/Output: [(14 52 -44 -10) -44]
Test Case: 709 | Input/Output: [(77 97 85 -87) -87]
Test Case: 710 | Input/Output: [(-100 51 -95 16) -100]
Test Case: 711 | Input/Output: [(-18 86 -89 -39) -89]
Test Case: 712 | Input/Output: [(-54 73 -96 -73) -96]
Test Case: 713 | Input/Output: [(38 81 -84 -82) -84]
Test Case: 714 | Input/Output: [(22 -61 -40 90) -61]
Test Case: 715 | Input/Output: [(13 -23 -50 -92) -92]
Test Case: 716 | Input/Output: [(-76 67 74 13) -76]
Test Case: 717 | Input/Output: [(76 33 -48 72) -48]
Test Case: 718 | Input/Output: [(-76 -59 52 88) -76]
Test Case: 719 | Input/Output: [(97 -32 -99 84) -99]
Test Case: 720 | Input/Output: [(-15 92 -37 53) -37]
Test Case: 721 | Input/Output: [(82 -4 100 -11) -11]
Test Case: 722 | Input/Output: [(-76 -41 -51 -7) -76]
Test Case: 723 | Input/Output: [(55 -14 -16 -51) -51]
Test Case: 724 | Input/Output: [(48 -19 35 52) -19]
Test Case: 725 | Input/Output: [(20 -98 -43 -92) -98]
Test Case: 726 | Input/Output: [(22 -22 -37 91) -37]
Test Case: 727 | Input/Output: [(6 66 32 96) 6]
Test Case: 728 | Input/Output: [(-86 -44 -31 -26) -86]
Test Case: 729 | Input/Output: [(68 -66 79 -41) -66]
Test Case: 730 | Input/Output: [(12 47 -79 47) -79]
Test Case: 731 | Input/Output: [(-93 16 85 71) -93]
Test Case: 732 | Input/Output: [(52 54 8 -93) -93]
Test Case: 733 | Input/Output: [(-76 -65 -82 88) -82]
Test Case: 734 | Input/Output: [(-66 66 -21 -35) -66]
Test Case: 735 | Input/Output: [(61 40 -62 -10) -62]
Test Case: 736 | Input/Output: [(47 78 17 22) 17]
Test Case: 737 | Input/Output: [(18 39 -72 -29) -72]
Test Case: 738 | Input/Output: [(-42 89 69 -31) -42]
Test Case: 739 | Input/Output: [(95 85 -46 -8) -46]
Test Case: 740 | Input/Output: [(-22 14 29 -58) -58]
Test Case: 741 | Input/Output: [(-63 -93 98 4) -93]
Test Case: 742 | Input/Output: [(-60 32 -87 -9) -87]
Test Case: 743 | Input/Output: [(-83 -47 1 85) -83]
Test Case: 744 | Input/Output: [(36 88 -41 30) -41]
Test Case: 745 | Input/Output: [(-68 -100 -55 -62) -100]
Test Case: 746 | Input/Output: [(48 86 70 75) 48]
Test Case: 747 | Input/Output: [(81 3 90 12) 3]
Test Case: 748 | Input/Output: [(-9 99 -54 74) -54]
Test Case: 749 | Input/Output: [(-76 -89 -84 59) -89]
Test Case: 750 | Input/Output: [(52 -39 -3 -68) -68]
Test Case: 751 | Input/Output: [(-94 24 -90 -50) -94]
Test Case: 752 | Input/Output: [(-40 -20 -95 -44) -95]
Test Case: 753 | Input/Output: [(24 -36 -3 99) -36]
Test Case: 754 | Input/Output: [(20 66 -16 -2) -16]
Test Case: 755 | Input/Output: [(5 31 -51 88) -51]
Test Case: 756 | Input/Output: [(38 -3 -39 -39) -39]
Test Case: 757 | Input/Output: [(22 -44 41 28) -44]
Test Case: 758 | Input/Output: [(-27 -67 -61 9) -67]
Test Case: 759 | Input/Output: [(90 -24 -37 49) -37]
Test Case: 760 | Input/Output: [(94 -14 -48 90) -48]
Test Case: 761 | Input/Output: [(-46 -20 -58 -25) -58]
Test Case: 762 | Input/Output: [(-80 -82 48 -65) -82]
Test Case: 763 | Input/Output: [(62 97 -88 29) -88]
Test Case: 764 | Input/Output: [(-92 -3 -96 -45) -96]
Test Case: 765 | Input/Output: [(-63 -58 76 -25) -63]
Test Case: 766 | Input/Output: [(-26 -2 77 65) -26]
Test Case: 767 | Input/Output: [(21 93 20 -46) -46]
Test Case: 768 | Input/Output: [(-4 -55 40 80) -55]
Test Case: 769 | Input/Output: [(-79 57 90 18) -79]
Test Case: 770 | Input/Output: [(16 -18 -10 53) -18]
Test Case: 771 | Input/Output: [(-81 41 -88 -52) -88]
Test Case: 772 | Input/Output: [(28 -43 -47 -85) -85]
Test Case: 773 | Input/Output: [(5 -75 -29 95) -75]
Test Case: 774 | Input/Output: [(-24 2 69 46) -24]
Test Case: 775 | Input/Output: [(-33 -65 26 -58) -65]
Test Case: 776 | Input/Output: [(88 -54 4 -64) -64]
Test Case: 777 | Input/Output: [(13 55 92 7) 7]
Test Case: 778 | Input/Output: [(-93 91 68 24) -93]
Test Case: 779 | Input/Output: [(94 40 -3 43) -3]
Test Case: 780 | Input/Output: [(5 93 34 -15) -15]
Test Case: 781 | Input/Output: [(1 16 -52 55) -52]
Test Case: 782 | Input/Output: [(88 59 1 -81) -81]
Test Case: 783 | Input/Output: [(62 54 68 97) 54]
Test Case: 784 | Input/Output: [(35 -38 90 99) -38]
Test Case: 785 | Input/Output: [(25 -47 10 -64) -64]
Test Case: 786 | Input/Output: [(-35 20 50 -64) -64]
Test Case: 787 | Input/Output: [(98 -41 -5 -47) -47]
Test Case: 788 | Input/Output: [(-64 75 -11 -73) -73]
Test Case: 789 | Input/Output: [(12 60 -11 -28) -28]
Test Case: 790 | Input/Output: [(-22 -14 -8 28) -22]
Test Case: 791 | Input/Output: [(86 9 -37 -27) -37]
Test Case: 792 | Input/Output: [(58 -94 -25 45) -94]
Test Case: 793 | Input/Output: [(74 88 45 -81) -81]
Test Case: 794 | Input/Output: [(2 48 -56 62) -56]
Test Case: 795 | Input/Output: [(-66 89 -100 -20) -100]
Test Case: 796 | Input/Output: [(-32 -60 69 59) -60]
Test Case: 797 | Input/Output: [(61 -35 24 -49) -49]
Test Case: 798 | Input/Output: [(-32 62 -31 97) -32]
Test Case: 799 | Input/Output: [(2 -62 -25 38) -62]
Test Case: 800 | Input/Output: [(-97 22 -67 54) -97]
Test Case: 801 | Input/Output: [(90 16 -3 -48) -48]
Test Case: 802 | Input/Output: [(-88 -100 -4 33) -100]
Test Case: 803 | Input/Output: [(-56 71 35 4) -56]
Test Case: 804 | Input/Output: [(85 86 -5 35) -5]
Test Case: 805 | Input/Output: [(-62 1 -18 42) -62]
Test Case: 806 | Input/Output: [(50 -29 19 68) -29]
Test Case: 807 | Input/Output: [(30 72 67 74) 30]
Test Case: 808 | Input/Output: [(-79 -28 81 -60) -79]
Test Case: 809 | Input/Output: [(-96 70 58 -52) -96]
Test Case: 810 | Input/Output: [(19 -10 88 1) -10]
Test Case: 811 | Input/Output: [(-96 64 85 -38) -96]
Test Case: 812 | Input/Output: [(-7 -21 56 17) -21]
Test Case: 813 | Input/Output: [(49 -24 -58 -35) -58]
Test Case: 814 | Input/Output: [(-21 10 -94 16) -94]
Test Case: 815 | Input/Output: [(5 -44 12 -28) -44]
Test Case: 816 | Input/Output: [(-1 84 5 -37) -37]
Test Case: 817 | Input/Output: [(43 47 -74 29) -74]
Test Case: 818 | Input/Output: [(35 88 77 -12) -12]
Test Case: 819 | Input/Output: [(-37 -79 71 79) -79]
Test Case: 820 | Input/Output: [(49 81 87 -24) -24]
Test Case: 821 | Input/Output: [(6 -67 -30 38) -67]
Test Case: 822 | Input/Output: [(71 29 -9 61) -9]
Test Case: 823 | Input/Output: [(95 -33 100 2) -33]
Test Case: 824 | Input/Output: [(87 -81 86 -49) -81]
Test Case: 825 | Input/Output: [(-45 -36 -16 -68) -68]
Test Case: 826 | Input/Output: [(-51 -58 24 -5) -58]
Test Case: 827 | Input/Output: [(94 -48 -48 -30) -48]
Test Case: 828 | Input/Output: [(-5 -99 -77 43) -99]
Test Case: 829 | Input/Output: [(38 90 65 -25) -25]
Test Case: 830 | Input/Output: [(98 -85 43 -80) -85]
Test Case: 831 | Input/Output: [(-27 67 -23 73) -27]
Test Case: 832 | Input/Output: [(30 -49 -86 74) -86]
Test Case: 833 | Input/Output: [(20 -20 28 96) -20]
Test Case: 834 | Input/Output: [(23 45 -7 -92) -92]
Test Case: 835 | Input/Output: [(-70 54 -53 20) -70]
Test Case: 836 | Input/Output: [(44 3 66 -74) -74]
Test Case: 837 | Input/Output: [(-64 -51 80 2) -64]
Test Case: 838 | Input/Output: [(90 -1 -97 -16) -97]
Test Case: 839 | Input/Output: [(-43 14 -88 37) -88]
Test Case: 840 | Input/Output: [(-50 93 55 -25) -50]
Test Case: 841 | Input/Output: [(46 11 34 -45) -45]
Test Case: 842 | Input/Output: [(-35 29 68 77) -35]
Test Case: 843 | Input/Output: [(26 11 -77 -12) -77]
Test Case: 844 | Input/Output: [(39 -59 93 -59) -59]
Test Case: 845 | Input/Output: [(17 79 -91 -37) -91]
Test Case: 846 | Input/Output: [(-25 -37 -28 -1) -37]
Test Case: 847 | Input/Output: [(-15 -76 87 78) -76]
Test Case: 848 | Input/Output: [(-90 -34 -30 -99) -99]
Test Case: 849 | Input/Output: [(-12 -6 86 22) -12]
Test Case: 850 | Input/Output: [(-26 -12 -70 45) -70]
Test Case: 851 | Input/Output: [(97 -70 -34 -7) -70]
Test Case: 852 | Input/Output: [(-37 -51 -13 91) -51]
Test Case: 853 | Input/Output: [(32 -65 -90 -76) -90]
Test Case: 854 | Input/Output: [(-50 72 -21 -90) -90]
Test Case: 855 | Input/Output: [(27 10 38 69) 10]
Test Case: 856 | Input/Output: [(84 53 -97 57) -97]
Test Case: 857 | Input/Output: [(37 -80 -26 -15) -80]
Test Case: 858 | Input/Output: [(88 -19 92 -8) -19]
Test Case: 859 | Input/Output: [(-46 -67 100 -16) -67]
Test Case: 860 | Input/Output: [(24 26 37 -64) -64]
Test Case: 861 | Input/Output: [(-47 56 -96 -1) -96]
Test Case: 862 | Input/Output: [(38 -93 -8 10) -93]
Test Case: 863 | Input/Output: [(66 86 -95 -12) -95]
Test Case: 864 | Input/Output: [(-91 -73 -75 -60) -91]
Test Case: 865 | Input/Output: [(86 92 14 -51) -51]
Test Case: 866 | Input/Output: [(80 14 55 74) 14]
Test Case: 867 | Input/Output: [(-54 49 40 -42) -54]
Test Case: 868 | Input/Output: [(-10 -33 10 27) -33]
Test Case: 869 | Input/Output: [(39 10 -23 -63) -63]
Test Case: 870 | Input/Output: [(32 65 83 38) 32]
Test Case: 871 | Input/Output: [(-25 -32 -89 -3) -89]
Test Case: 872 | Input/Output: [(15 -43 75 -57) -57]
Test Case: 873 | Input/Output: [(48 25 39 79) 25]
Test Case: 874 | Input/Output: [(66 -59 60 5) -59]
Test Case: 875 | Input/Output: [(42 -28 2 -44) -44]
Test Case: 876 | Input/Output: [(51 -97 -63 34) -97]
Test Case: 877 | Input/Output: [(-89 73 -95 8) -95]
Test Case: 878 | Input/Output: [(-56 -65 -85 -87) -87]
Test Case: 879 | Input/Output: [(-51 45 14 46) -51]
Test Case: 880 | Input/Output: [(59 -19 54 -29) -29]
Test Case: 881 | Input/Output: [(15 14 75 -99) -99]
Test Case: 882 | Input/Output: [(-44 -33 -92 11) -92]
Test Case: 883 | Input/Output: [(1 -34 85 26) -34]
Test Case: 884 | Input/Output: [(-28 -98 48 69) -98]
Test Case: 885 | Input/Output: [(62 85 5 38) 5]
Test Case: 886 | Input/Output: [(17 20 84 22) 17]
Test Case: 887 | Input/Output: [(-1 51 -21 55) -21]
Test Case: 888 | Input/Output: [(-53 54 -16 42) -53]
Test Case: 889 | Input/Output: [(50 45 99 37) 37]
Test Case: 890 | Input/Output: [(-43 -37 -100 22) -100]
Test Case: 891 | Input/Output: [(87 -88 -15 62) -88]
Test Case: 892 | Input/Output: [(-78 -59 6 94) -78]
Test Case: 893 | Input/Output: [(-47 -93 -8 -18) -93]
Test Case: 894 | Input/Output: [(78 -87 -44 -26) -87]
Test Case: 895 | Input/Output: [(2 -22 -39 68) -39]
Test Case: 896 | Input/Output: [(77 53 -100 -61) -100]
Test Case: 897 | Input/Output: [(27 19 22 8) 8]
Test Case: 898 | Input/Output: [(-92 34 97 33) -92]
Test Case: 899 | Input/Output: [(-23 -62 -19 -64) -64]
Test Case: 900 | Input/Output: [(48 -40 -78 14) -78]
Test Case: 901 | Input/Output: [(2 -20 -40 61) -40]
Test Case: 902 | Input/Output: [(-22 -17 -90 -54) -90]
Test Case: 903 | Input/Output: [(83 72 95 -78) -78]
Test Case: 904 | Input/Output: [(50 -34 69 -67) -67]
Test Case: 905 | Input/Output: [(100 -1 1 -51) -51]
Test Case: 906 | Input/Output: [(93 40 82 -13) -13]
Test Case: 907 | Input/Output: [(-54 -65 -92 -48) -92]
Test Case: 908 | Input/Output: [(96 -85 -25 -94) -94]
Test Case: 909 | Input/Output: [(3 87 -28 23) -28]
Test Case: 910 | Input/Output: [(8 31 71 78) 8]
Test Case: 911 | Input/Output: [(84 37 34 87) 34]
Test Case: 912 | Input/Output: [(80 -32 -56 40) -56]
Test Case: 913 | Input/Output: [(-83 3 58 -13) -83]
Test Case: 914 | Input/Output: [(77 72 -33 -64) -64]
Test Case: 915 | Input/Output: [(-10 13 -18 90) -18]
Test Case: 916 | Input/Output: [(-12 55 27 -64) -64]
Test Case: 917 | Input/Output: [(7 12 -80 -66) -80]
Test Case: 918 | Input/Output: [(29 -24 -66 -21) -66]
Test Case: 919 | Input/Output: [(-28 -85 -4 -60) -85]
Test Case: 920 | Input/Output: [(-42 5 -7 -78) -78]
Test Case: 921 | Input/Output: [(61 -21 37 -5) -21]
Test Case: 922 | Input/Output: [(51 -89 -6 32) -89]
Test Case: 923 | Input/Output: [(-38 64 49 -93) -93]
Test Case: 924 | Input/Output: [(-45 -17 -20 -98) -98]
Test Case: 925 | Input/Output: [(-6 15 -86 -8) -86]
Test Case: 926 | Input/Output: [(48 -31 97 -91) -91]
Test Case: 927 | Input/Output: [(-31 2 -6 -32) -32]
Test Case: 928 | Input/Output: [(5 -37 37 80) -37]
Test Case: 929 | Input/Output: [(32 97 34 76) 32]
Test Case: 930 | Input/Output: [(85 36 84 -8) -8]
Test Case: 931 | Input/Output: [(-16 56 19 99) -16]
Test Case: 932 | Input/Output: [(-65 82 43 44) -65]
Test Case: 933 | Input/Output: [(69 -34 -86 -34) -86]
Test Case: 934 | Input/Output: [(20 -74 -64 -87) -87]
Test Case: 935 | Input/Output: [(-62 -67 -68 -14) -68]
Test Case: 936 | Input/Output: [(-12 -5 7 93) -12]
Test Case: 937 | Input/Output: [(-37 -20 -22 -64) -64]
Test Case: 938 | Input/Output: [(60 -79 -98 2) -98]
Test Case: 939 | Input/Output: [(-19 -4 -71 -38) -71]
Test Case: 940 | Input/Output: [(97 -94 86 34) -94]
Test Case: 941 | Input/Output: [(-9 74 -79 63) -79]
Test Case: 942 | Input/Output: [(73 -7 -27 17) -27]
Test Case: 943 | Input/Output: [(77 -31 -79 -45) -79]
Test Case: 944 | Input/Output: [(97 6 94 13) 6]
Test Case: 945 | Input/Output: [(38 -44 31 49) -44]
Test Case: 946 | Input/Output: [(2 -31 -35 -91) -91]
Test Case: 947 | Input/Output: [(90 -35 59 55) -35]
Test Case: 948 | Input/Output: [(34 58 0 -67) -67]
Test Case: 949 | Input/Output: [(56 10 16 58) 10]
Test Case: 950 | Input/Output: [(30 3 -55 34) -55]
Test Case: 951 | Input/Output: [(-12 87 36 35) -12]
Test Case: 952 | Input/Output: [(-91 -45 88 77) -91]
Test Case: 953 | Input/Output: [(74 -12 80 -56) -56]
Test Case: 954 | Input/Output: [(-80 2 -14 -14) -80]
Test Case: 955 | Input/Output: [(-68 -47 -57 37) -68]
Test Case: 956 | Input/Output: [(51 10 -66 75) -66]
Test Case: 957 | Input/Output: [(53 -49 67 93) -49]
Test Case: 958 | Input/Output: [(-43 -38 -79 65) -79]
Test Case: 959 | Input/Output: [(-72 53 71 -38) -72]
Test Case: 960 | Input/Output: [(-4 -81 -54 -30) -81]
Test Case: 961 | Input/Output: [(-68 37 -3 44) -68]
Test Case: 962 | Input/Output: [(87 -29 56 -8) -29]
Test Case: 963 | Input/Output: [(75 -87 -95 2) -95]
Test Case: 964 | Input/Output: [(5 95 12 20) 5]
Test Case: 965 | Input/Output: [(39 -60 -62 -76) -76]
Test Case: 966 | Input/Output: [(-76 72 18 -10) -76]
Test Case: 967 | Input/Output: [(79 77 18 -4) -4]
Test Case: 968 | Input/Output: [(24 -81 49 63) -81]
Test Case: 969 | Input/Output: [(72 -31 18 -30) -31]
Test Case: 970 | Input/Output: [(96 77 47 -29) -29]
Test Case: 971 | Input/Output: [(7 81 -68 27) -68]
Test Case: 972 | Input/Output: [(78 29 -56 -12) -56]
Test Case: 973 | Input/Output: [(59 -56 75 18) -56]
Test Case: 974 | Input/Output: [(60 84 -20 -56) -56]
Test Case: 975 | Input/Output: [(35 -70 82 -68) -70]
Test Case: 976 | Input/Output: [(89 70 45 -14) -14]
Test Case: 977 | Input/Output: [(-16 -6 -46 93) -46]
Test Case: 978 | Input/Output: [(-5 -97 62 -48) -97]
Test Case: 979 | Input/Output: [(-68 96 37 15) -68]
Test Case: 980 | Input/Output: [(66 -55 -53 -37) -55]
Test Case: 981 | Input/Output: [(-86 -47 10 -53) -86]
Test Case: 982 | Input/Output: [(-59 -17 54 89) -59]
Test Case: 983 | Input/Output: [(52 45 -23 -30) -30]
Test Case: 984 | Input/Output: [(9 14 76 25) 9]
Test Case: 985 | Input/Output: [(40 93 1 -91) -91]
Test Case: 986 | Input/Output: [(-30 -9 61 7) -30]
Test Case: 987 | Input/Output: [(55 -9 -28 -83) -83]
Test Case: 988 | Input/Output: [(21 45 0 52) 0]
Test Case: 989 | Input/Output: [(64 -24 34 8) -24]
Test Case: 990 | Input/Output: [(-99 29 71 -52) -99]
Test Case: 991 | Input/Output: [(-50 -74 24 74) -74]
Test Case: 992 | Input/Output: [(8 -3 16 -87) -87]
Test Case: 993 | Input/Output: [(14 52 -10 37) -10]
Test Case: 994 | Input/Output: [(65 -73 74 70) -73]
Test Case: 995 | Input/Output: [(49 -35 -92 57) -92]
Test Case: 996 | Input/Output: [(-41 6 -10 87) -41]
Test Case: 997 | Input/Output: [(44 10 66 -74) -74]
Test Case: 998 | Input/Output: [(63 -3 1 -1) -3]
Test Case: 999 | Input/Output: [(36 52 -25 -94) -94]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -11 -85 -35 -78 -40 36 -76 120 23 -49 69 -2 -121 11 -81 23
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[69 -23 -23 -23] -23] [[-98 -98 -61 -98] -98] [[-21 -21 -21 94] -21] [[13 13 18 13] 13] [[-90 -90 -90 -38] -90] [[93 -26 -26 -26] -26] [[23 23 -21 23] -21] [[49 49 62 49] 49] [[-40 -40 43 -40] -40] [[-75 -97 -75 -75] -97] [(94 94 94 94) 94] [(6 6 6 6) 6] [(94 94 94 94) 94] [(80 80 80 80) 80] [(-38 -38 -38 -38) -38] [(31 5 2 85) 2] [(6 35 48 52) 6] [(68 11 54 36) 11] [(66 29 12 15) 12] [(20 92 92 72) 20] [(72 63 8 31) 8] [(18 0 73 69) 0] [(39 80 79 57) 39] [(45 80 43 80) 43] [(95 81 97 84) 81] [(94 22 2 82) 2] [(39 34 71 33) 33] [(68 49 81 94) 49] [(82 42 88 5) 5] [(53 87 7 49) 7] [(87 98 70 11) 11] [(21 28 49 96) 21] [(1 97 35 0) 0] [(73 88 88 38) 38] [(28 21 68 83) 21] [(41 43 -36 -24) -36] [(58 63 68 -98) -98] [(-86 93 46 -66) -86] [(-41 45 33 7) -41] [(46 96 3 84) 3] [(-72 -27 15 -41) -72] [(83 -58 -3 -55) -58] [(60 35 45 -52) -52] [(82 -85 100 94) -85] [(100 -77 54 93) -77] [(15 41 -72 65) -72] [(23 83 39 -83) -83] [(-38 -26 -69 50) -69] [(-86 -92 -52 -59) -92] [(99 -51 -19 -4) -51] [(-59 -36 57 32) -59] [(13 -61 18 -66) -66] [(-76 69 9 -90) -90] [(93 -1 -48 -88) -88] [(70 -29 -84 -24) -84] [(7 -20 -50 30) -50] [(-50 73 21 98) -50] [(96 82 98 89) 82] [(64 71 90 6) 6] [(-99 -42 -92 -27) -99] [(6 46 15 0) 0] [(39 30 62 -33) -33] [(-55 6 73 34) -55] [(100 -28 57 11) -28] [(14 84 28 -37) -37] [(-71 -83 61 -76) -83] [(-6 -79 -97 51) -97] [(94 -91 86 -17) -91] [(-85 45 -69 -2) -85] [(37 69 78 19) 19] [(-36 72 -67 -73) -73] [(23 4 41 -72) -72] [(26 -24 -69 -32) -69] [(-3 47 -21 24) -21] [(87 -27 39 89) -27] [(-46 29 -17 -49) -49] [(-87 53 -17 85) -87] [(-56 54 33 86) -56] [(-6 31 -30 -68) -68] [(-52 72 -78 20) -78] [(-15 -54 69 35) -54] [(-14 -49 55 41) -49] [(99 -78 -77 89) -78] [(-97 -64 73 -84) -97] [(-87 89 -48 -24) -87] [(8 -67 62 -86) -86] [(-70 -56 27 31) -70] [(-40 76 -25 37) -40] [(86 72 -77 -29) -77] [(-24 35 -100 100) -100] [(6 -58 -7 -73) -73] [(76 -47 -75 -24) -75] [(75 -33 -23 -14) -33] [(22 68 -20 70) -20] [(90 -66 61 31) -66])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_747} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_230} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_196} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_28} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_flush exec_when (integer_dup_items integer_empty) in4 print_integer exec_when (boolean_invert_first_then_and) exec_shove (in3 integer_stackdepth boolean_dup boolean_pop) boolean_shove exec_eq integer_dup_times exec_y_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_dup_times (integer_add)) (integer_sub boolean_dup_times exec_eq integer_add boolean_dup integer_sub exec_s () (integer_lt exec_yank integer_gte in1 exec_do*range (in4) boolean_frominteger integer_shove integer_lt integer_dec) () integer_inc integer_inc boolean_yankdup boolean_empty tagged_747 boolean_invert_first_then_and integer_inc exec_while (tagged_230 exec_do*range () print_boolean in4 tag_exec_196 (exec_do*times (integer_lt integer_dec) integer_stackdepth boolean_yankdup boolean_dup tag_exec_28 (integer_shove boolean_rot boolean_dup_items exec_y () in2 integer_shove) exec_dup_items boolean_eq) integer_dup print_boolean boolean_dup_times boolean_empty boolean_dup boolean_dup_times in1 integer_gte integer_swap exec_if (in4 integer_shove integer_pop integer_lte integer_mult integer_dup_times print_integer) (boolean_and boolean_flush exec_empty exec_flush integer_div exec_rot (integer_max integer_dup print_newline boolean_flush boolean_flush integer_mult) () ())))))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 119
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_747} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_230} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_196} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_28} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_flush exec_when (integer_dup_items integer_empty) in4 print_integer exec_when (boolean_invert_first_then_and) exec_shove (in3 integer_stackdepth boolean_dup boolean_pop) boolean_shove exec_eq integer_dup_times exec_y_when_autoconstructing (boolean_dup_items exec_s_when_autoconstructing () (exec_dup_times (integer_add)) (integer_sub boolean_dup_times exec_eq integer_add boolean_dup integer_sub exec_s () (integer_lt exec_yank integer_gte in1 exec_do*range (in4) boolean_frominteger integer_shove integer_lt integer_dec) () integer_inc integer_inc boolean_yankdup boolean_empty tagged_747 boolean_invert_first_then_and integer_inc exec_while (tagged_230 exec_do*range () print_boolean in4 tag_exec_196 (exec_do*times (integer_lt integer_dec) integer_stackdepth boolean_yankdup boolean_dup tag_exec_28 (integer_shove boolean_rot boolean_dup_items exec_y () in2 integer_shove) exec_dup_items boolean_eq) integer_dup print_boolean boolean_dup_times boolean_empty boolean_dup boolean_dup_times in1 integer_gte integer_swap exec_if (in4 integer_shove integer_pop integer_lte integer_mult integer_dup_times print_integer) (boolean_and boolean_flush exec_empty exec_flush integer_div exec_rot (integer_max integer_dup print_newline boolean_flush boolean_flush integer_mult) () ())))))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 119
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 6 3 10 1 1 8 6 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 6 3 10 1 1 8 6 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub print_exec (boolean_empty boolean_dup_times) exec_do*times ())) ()) ()))))))) () ()) ()) ())))) () ())
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 51
Size: 80
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.997 0.994 0.997 0.99 0.999 0.999 0.992 0.994 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.888
Average program size in population (points): 70.033
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 491401
--- Timings ---
Current time: 1559314584214 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.7 seconds, 26.4%
Fitness Testing:      1.9 seconds, 69.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_110} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_y_when_autoconstructing (integer_mod) boolean_yankdup exec_empty boolean_yank boolean_dup_times integer_yankdup boolean_flush integer_eq exec_swap (exec_do*count (integer_sub exec_do*range (exec_when (integer_lt) exec_shove () boolean_rot exec_when () exec_noop exec_k () (boolean_dup_times exec_empty boolean_pop boolean_frominteger boolean_yank boolean_rot integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_exec (exec_eq) exec_yankdup integer_empty boolean_dup_times integer_lt integer_inc boolean_empty print_exec (integer_dup_items boolean_swap exec_k_when_autoconstructing (boolean_flush integer_lte) (tag_integer_110 exec_dup (boolean_yank integer_yank)))))))) ())) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 135
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_110} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_y_when_autoconstructing (integer_mod) boolean_yankdup exec_empty boolean_yank boolean_dup_times integer_yankdup boolean_flush integer_eq exec_swap (exec_do*count (integer_sub exec_do*range (exec_when (integer_lt) exec_shove () boolean_rot exec_when () exec_noop exec_k () (boolean_dup_times exec_empty boolean_pop boolean_frominteger boolean_yank boolean_rot integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_exec (exec_eq) exec_yankdup integer_empty boolean_dup_times integer_lt integer_inc boolean_empty print_exec (integer_dup_items boolean_swap exec_k_when_autoconstructing (boolean_flush integer_lte) (tag_integer_110 exec_dup (boolean_yank integer_yank)))))))) ())) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 135
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (695 103 210 103 105 103 183 335 333 196)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (695 103 210 103 105 103 183 335 333 196)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_110} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank})
Best program: (exec_y_when_autoconstructing (integer_mod) boolean_yankdup exec_empty boolean_yank boolean_dup_times integer_yankdup boolean_flush integer_eq exec_swap (exec_do*count (integer_sub exec_do*range (exec_when (integer_lt) exec_shove () boolean_rot exec_when () exec_noop exec_k () (boolean_dup_times exec_empty boolean_pop boolean_frominteger boolean_yank boolean_rot integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_integer exec_eq) exec_yankdup integer_empty boolean_dup_times integer_lt integer_inc boolean_empty print_exec (integer_dup_items boolean_swap exec_k_when_autoconstructing (boolean_flush integer_lte) (tag_integer_110 exec_dup (boolean_yank integer_yank))))))) ())) ())
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 98
Size: 134
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.634
Median total errors in population: 8
Error averages by case: (0.305 0.897 0.79 0.897 0.895 0.897 0.817 0.665 0.667 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.39
Average program size in population (points): 89.166
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.497
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 949541
--- Timings ---
Current time: 1559314586958 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 44.2%
Fitness Testing:      2.5 seconds, 45.4%
Report:               0.5 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mod boolean_frominteger integer_gt boolean_dup integer_dec exec_k () (boolean_flush) exec_s_when_autoconstructing () (integer_lt boolean_shove boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap) ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mod boolean_frominteger integer_gt boolean_dup integer_dec exec_k () (boolean_flush) exec_s_when_autoconstructing () (integer_lt boolean_shove boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap) ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (381 381 381 93 381 381 381 83 93 306)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (381 381 381 93 381 381 381 83 93 306)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap})
Best program: (integer_mod boolean_frominteger integer_gt boolean_dup integer_dec exec_k () (boolean_flush) exec_s_when_autoconstructing (integer_lt boolean_shove boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank) integer_mod boolean_frominteger boolean_yankdup exec_empty exec_flush boolean_or in1) (boolean_swap) ()) () ())
Errors: [0 0 0 1 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 38
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.139
Median total errors in population: 9
Error averages by case: (0.619 0.619 0.619 0.907 0.619 0.619 0.619 0.917 0.907 0.694)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.907
Average program size in population (points): 79.224
Average percent parens in population: 0.298
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.926
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1319212
--- Timings ---
Current time: 1559314590176 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.9 seconds, 55.6%
Fitness Testing:      3.0 seconds, 33.9%
Report:               0.8 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_110} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank})
Lexicase best program: (exec_y_when_autoconstructing (integer_mod) boolean_yankdup exec_empty boolean_yank boolean_dup_times integer_yankdup boolean_flush integer_eq exec_swap (exec_do*count (integer_sub exec_do*range (exec_when (integer_lt) exec_shove () boolean_rot exec_when () exec_noop exec_k () (boolean_dup_times exec_empty boolean_pop boolean_frominteger boolean_yank boolean_rot integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range () boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times () integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_exec (exec_eq exec_yankdup integer_empty boolean_dup_times) integer_lt integer_inc integer_mult print_exec (integer_dup_items boolean_swap exec_k_when_autoconstructing (boolean_flush integer_lte) (tag_integer_110 exec_dup (boolean_yank integer_yank)))))) ())) ())
Lexicase best errors: [0 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 135
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_110} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank})
Zero cases best program: (exec_y_when_autoconstructing (integer_mod) boolean_yankdup exec_empty boolean_yank boolean_dup_times integer_yankdup boolean_flush integer_eq exec_swap (exec_do*count (integer_sub exec_do*range (exec_when (integer_lt) exec_shove () boolean_rot exec_when () exec_noop exec_k () (boolean_dup_times exec_empty boolean_pop boolean_frominteger boolean_yank boolean_rot integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range () boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times () integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_exec (exec_eq exec_yankdup integer_empty boolean_dup_times) integer_lt integer_inc integer_mult print_exec (integer_dup_items boolean_swap exec_k_when_autoconstructing (boolean_flush integer_lte) (tag_integer_110 exec_dup (boolean_yank integer_yank)))))) ())) ())
Zero cases best errors: [0 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 135
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (764 88 489 84 491 185 491 188 88 491)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (764 88 489 84 491 185 491 188 88 491)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec})
Best program: (exec_rot (in1) (integer_add boolean_yankdup exec_empty boolean_yank) (boolean_dup_times integer_yankdup boolean_flush) integer_eq exec_swap (exec_do*count (integer_sub exec_do*range (exec_when (integer_lt) exec_shove () boolean_rot exec_when () exec_noop exec_k () (boolean_dup_times exec_empty boolean_pop boolean_frominteger boolean_yank boolean_rot integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_exec ()))))) ())) ())
Errors: [0 1 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 82
Size: 117
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 6.641
Median total errors in population: 7
Error averages by case: (0.236 0.912 0.511 0.916 0.509 0.815 0.509 0.812 0.912 0.509)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.457
Average program size in population (points): 74.076
Average percent parens in population: 0.281
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.3965
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1637555
--- Timings ---
Current time: 1559314593067 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.2 seconds, 61.0%
Fitness Testing:      3.4 seconds, 28.8%
Report:               1.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_y_when_autoconstructing (integer_mod) boolean_yankdup exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub print_exec (boolean_empty boolean_dup_times) exec_do*times ())) ()) ()))))))) () ()) ())
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_y_when_autoconstructing (integer_mod) boolean_yankdup exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub print_exec (boolean_empty boolean_dup_times) exec_do*times ())) ()) ()))))))) () ()) ())
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 188 402 200 398 188 97 699 99 97)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (884 188 402 200 398 188 97 699 99 97)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_empty})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 boolean_eq exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap boolean_dup exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub print_exec (boolean_empty boolean_dup_times)) exec_empty) ()) ()))))))) () ()) ()) ()))) () ())
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 78
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 6.748
Median total errors in population: 7
Error averages by case: (0.116 0.812 0.598 0.8 0.602 0.812 0.903 0.301 0.901 0.903)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.106
Average program size in population (points): 70.91
Average percent parens in population: 0.280
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.889125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1952125
--- Timings ---
Current time: 1559314596039 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.5 seconds, 64.5%
Fitness Testing:      3.7 seconds, 25.2%
Report:               1.4 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_mod integer_mod boolean_frominteger integer_gt boolean_dup integer_dec boolean_not boolean_flush exec_s_when_autoconstructing () (integer_lt boolean_shove exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub print_exec (boolean_empty boolean_dup_times) exec_do*times ())) ()) ())))))) ())
Lexicase best errors: [1 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_mod integer_mod boolean_frominteger integer_gt boolean_dup integer_dec boolean_not boolean_flush exec_s_when_autoconstructing () (integer_lt boolean_shove exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub print_exec (boolean_empty boolean_dup_times) exec_do*times ())) ()) ())))))) ())
Zero cases best errors: [1 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 111 187 349 870 187 111 870 347 347)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (226 111 187 349 870 187 111 870 347 347)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_integer_196} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Best program: (tag_integer_196 exec_noop integer_dup_times boolean_or integer_min boolean_yank print_boolean boolean_dup_times boolean_xor integer_lt integer_add exec_if (integer_fromboolean integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub print_exec (boolean_empty boolean_dup_times) exec_do*times ())) ()) ())))))) ())
Errors: [1 1 1 0 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.395
Median total errors in population: 6
Error averages by case: (0.774 0.889 0.813 0.651 0.13 0.813 0.889 0.13 0.653 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.07
Average program size in population (points): 72.913
Average percent parens in population: 0.297
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.289625
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2293918
--- Timings ---
Current time: 1559314598720 milliseconds
Total Time:          17.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.5 seconds, 66.1%
Fitness Testing:      4.1 seconds, 23.3%
Report:               1.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_110} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) (boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_exec (boolean_pop) exec_yankdup integer_empty boolean_dup_times integer_lt integer_inc boolean_empty print_exec (integer_dup_items boolean_swap exec_k_when_autoconstructing (boolean_flush integer_lte) (tag_integer_110 exec_dup (boolean_yank integer_yank))))))))))) () ()) ()) ())))) () ())
Lexicase best errors: [0 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 132
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_exec_135} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_110} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_dup_items in1 print_exec () integer_rot boolean_xor exec_yank integer_empty exec_noop) (exec_do*range (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq integer_flush) integer_empty)) (boolean_xor integer_gte integer_add exec_s () (integer_max) (boolean_invert_first_then_and integer_rot) tag_exec_135 (in1) boolean_or integer_inc) exec_when (print_exec (boolean_pop) exec_yankdup integer_empty boolean_dup_times integer_lt integer_inc boolean_empty print_exec (integer_dup_items boolean_swap exec_k_when_autoconstructing (boolean_flush integer_lte) (tag_integer_110 exec_dup (boolean_yank integer_yank))))))))))) () ()) ()) ())))) () ())
Zero cases best errors: [0 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 132
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 309 202 670 136 307 225 203 309 67)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (308 309 202 670 136 307 225 203 309 67)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (exec_rot (in1) (integer_add exec_do*range () boolean_xor) (integer_mult) exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (exec_stackdepth boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max boolean_dup_items) (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing () ()) ()))))))) () ()) ()) () ()) ()) ())))) () ())
Errors: [0 0 1 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 51
Size: 86
Percent parens: 0.407
--- Population Statistics ---
Average total errors in population: 7.264
Median total errors in population: 8
Error averages by case: (0.692 0.691 0.798 0.33 0.864 0.693 0.775 0.797 0.691 0.933)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.289
Average program size in population (points): 77.878
Average percent parens in population: 0.298
Minimum age in population: 6.0
Maximum age in population: 10.78125
Average age in population: 8.80921875
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2636231
--- Timings ---
Current time: 1559314602167 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.2 seconds, 68.3%
Fitness Testing:      4.4 seconds, 21.3%
Report:               2.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Lexicase best program: (in3 integer_sub integer_yank exec_rot (integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_when () in3 integer_sub integer_yank exec_rot (integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_when () exec_dup (integer_rot exec_noop exec_y_when_autoconstructing (integer_mod) exec_rot (integer_max) (boolean_and exec_while (integer_shove boolean_shove boolean_dup_items) integer_sub) (print_exec () integer_stackdepth print_integer integer_lt exec_do*while (boolean_and print_exec (boolean_empty boolean_dup_times) exec_do*times ())))) () ())) ()) () ())) ())
Lexicase best errors: [0 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Zero cases best program: (in3 integer_sub integer_yank exec_rot (integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_when () in3 integer_sub integer_yank exec_rot (integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_when () exec_dup (integer_rot exec_noop exec_y_when_autoconstructing (integer_mod) exec_rot (integer_max) (boolean_and exec_while (integer_shove boolean_shove boolean_dup_items) integer_sub) (print_exec () integer_stackdepth print_integer integer_lt exec_do*while (boolean_and print_exec (boolean_empty boolean_dup_times) exec_do*times ())))) () ())) ()) () ())) ())
Zero cases best errors: [0 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 406 126 162 404 342 403 125 126 872)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (287 406 126 162 404 342 403 125 126 872)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_106} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times})
Best program: (in3 integer_sub integer_yank exec_rot (boolean_pop) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_when () exec_dup (integer_rot exec_noop integer_dup exec_do*range (exec_y (boolean_yank integer_lte integer_yankdup boolean_rot integer_stackdepth boolean_xor boolean_shove) boolean_invert_first_then_and) exec_while (integer_shove boolean_shove boolean_dup_items) integer_sub) print_exec () integer_stackdepth print_integer integer_lt exec_do*while (boolean_and integer_mult in1 exec_yankdup) exec_dup_items tag_integer_106 exec_do*while (integer_shove boolean_eq)) (boolean_empty boolean_dup_times) (exec_do*times ()))) ())
Errors: [0 1 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 65
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.747
Median total errors in population: 6
Error averages by case: (0.713 0.594 0.874 0.838 0.596 0.658 0.597 0.875 0.874 0.128)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.377
Average program size in population (points): 69.845
Average percent parens in population: 0.304
Minimum age in population: 7.5
Maximum age in population: 12.140625
Average age in population: 10.2905625
Median age in population: 10.3671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2991602
--- Timings ---
Current time: 1559314605161 milliseconds
Total Time:          24.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 69.3%
Fitness Testing:      4.8 seconds, 19.9%
Report:               2.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec (integer_rot boolean_xor exec_yank integer_empty exec_noop) exec_do*count (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq boolean_invert_first_then_and) integer_empty) (boolean_xor integer_gte integer_add exec_s () () ()))))) ())) ())))) () ()) ()) ())))) () ())
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 104
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec (integer_rot boolean_xor exec_yank integer_empty exec_noop) exec_do*count (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq boolean_invert_first_then_and) integer_empty) (boolean_xor integer_gte integer_add exec_s () () ()))))) ())) ())))) () ()) ()) ())))) () ())
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 104
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 637 231 229 864 230 2 2 482 384)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (384 637 231 229 864 230 2 2 482 384)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ()))))) () ()) ()) ())))) () ())
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.555
Median total errors in population: 6
Error averages by case: (0.616 0.363 0.769 0.771 0.136 0.77 0.998 0.998 0.518 0.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.816
Average program size in population (points): 70.795
Average percent parens in population: 0.293
Minimum age in population: 9.0
Maximum age in population: 13.7421875
Average age in population: 11.8848671875
Median age in population: 11.9765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3307358
--- Timings ---
Current time: 1559314608119 milliseconds
Total Time:          26.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.9 seconds, 70.6%
Fitness Testing:      5.1 seconds, 19.1%
Report:               2.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod exec_while (integer_dup exec_empty exec_flush boolean_or))) () ()))))) () ()) ()) ()))) () ())
Lexicase best errors: [1 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 63
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod exec_while (integer_dup exec_empty exec_flush boolean_or))) () ()))))) () ()) ()) ()))) () ())
Zero cases best errors: [1 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 63
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 3 277 373 373 373 276 3 276 373)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (230 3 277 373 373 373 276 3 276 373)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Best program: (integer_mult exec_s () (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap () (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or) ()) () ()))))) () ()) ()))))) ())
Errors: [1 1 1 0 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.443
Median total errors in population: 7
Error averages by case: (0.77 0.997 0.723 0.627 0.627 0.627 0.724 0.997 0.724 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.752
Average program size in population (points): 70.41
Average percent parens in population: 0.315
Minimum age in population: 10.375
Maximum age in population: 15.19140625
Average age in population: 13.56508203125
Median age in population: 13.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3629821
--- Timings ---
Current time: 1559314611014 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.1 seconds, 71.2%
Fitness Testing:      5.4 seconds, 18.4%
Report:               3.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: 93                 
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_gte in1 integer_add exec_do*range () boolean_xor integer_div boolean_empty print_integer boolean_shove integer_mult)
Lexicase best errors: [1 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_gte in1 integer_add exec_do*range () boolean_xor integer_div boolean_empty print_integer boolean_shove integer_mult)
Zero cases best errors: [1 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 332 332 189 704 273 193 273 794 190)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (100 332 332 189 704 273 193 273 794 190)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Best program: (integer_mod boolean_frominteger integer_gt boolean_dup integer_dec exec_k () (boolean_flush) exec_s_when_autoconstructing () (integer_lt boolean_shove boolean_not exec_rot (in2 exec_empty) () (integer_lte in1 boolean_eq boolean_flush print_integer boolean_xor exec_y_when_autoconstructing ()) integer_mod integer_dec) (exec_shove (integer_yank exec_y_when_autoconstructing (exec_when (boolean_flush print_boolean boolean_frominteger integer_dup exec_empty exec_flush boolean_or)))))
Errors: [1 1 1 1 0 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 47
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.62
Median total errors in population: 6
Error averages by case: (0.9 0.668 0.668 0.811 0.296 0.727 0.807 0.727 0.206 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.892
Average program size in population (points): 67.768
Average percent parens in population: 0.315
Minimum age in population: 12.125
Maximum age in population: 16.828125
Average age in population: 14.89844140625
Median age in population: 14.97265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3973656
--- Timings ---
Current time: 1559314613946 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.4 seconds, 71.6%
Fitness Testing:      5.8 seconds, 17.8%
Report:               3.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: 93                 
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction 48} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction -2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (integer_dup_times in1 48 integer_dup integer_eq integer_rot boolean_invert_second_then_and exec_s_when_autoconstructing (print_integer) (boolean_invert_first_then_and integer_add in1 in3 boolean_and boolean_not boolean_pop exec_pop (integer_min integer_pop exec_k (integer_gt boolean_invert_second_then_and exec_do*while (-2 print_integer integer_gt) boolean_yank) (integer_rot tagged_709 print_integer integer_fromboolean boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub exec_yankdup boolean_empty exec_yank exec_do*times ())) ()) ()))) ())))) () ())
Lexicase best errors: [0 1 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction 48} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction -2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (integer_dup_times in1 48 integer_dup integer_eq integer_rot boolean_invert_second_then_and exec_s_when_autoconstructing (print_integer) (boolean_invert_first_then_and integer_add in1 in3 boolean_and boolean_not boolean_pop exec_pop (integer_min integer_pop exec_k (integer_gt boolean_invert_second_then_and exec_do*while (-2 print_integer integer_gt) boolean_yank) (integer_rot tagged_709 print_integer integer_fromboolean boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub exec_yankdup boolean_empty exec_yank exec_do*times ())) ()) ()))) ())))) () ())
Zero cases best errors: [0 1 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 111 111 772 299 212 299 262 299 263)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (263 111 111 772 299 212 299 262 299 263)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction 48} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction -2} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_106} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -95} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_flush})
Best program: (in3 integer_sub boolean_pop boolean_yankdup integer_dup_times in1 48 integer_dup integer_eq integer_rot boolean_invert_second_then_and exec_s_when_autoconstructing (print_integer) (boolean_invert_first_then_and integer_add in1 in3 boolean_and boolean_not boolean_pop exec_pop (integer_min integer_pop exec_k (integer_gt boolean_invert_second_then_and exec_do*while (-2 integer_flush integer_gt) boolean_yank) (integer_stackdepth print_integer integer_lt exec_do*while (boolean_and integer_mult in1 exec_yankdup) exec_dup_items tag_integer_106 exec_do*while (integer_shove boolean_eq)) boolean_shove) boolean_or integer_dup_items integer_dec) (integer_fromboolean boolean_rot) exec_while () exec_empty integer_dup_items integer_sub exec_y_when_autoconstructing () exec_flush exec_do*while (exec_do*times (print_boolean exec_stackdepth -95 exec_do*range (in2 integer_stackdepth integer_div exec_do*count (integer_stackdepth exec_k_when_autoconstructing (integer_lte integer_sub exec_s_when_autoconstructing () (exec_do*range (integer_pop integer_yank exec_while (integer_dup) integer_flush)) ()) ())))))
Errors: [0 1 1 0 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 77
Size: 100
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 7.109
Median total errors in population: 6
Error averages by case: (0.737 0.889 0.889 0.228 0.701 0.788 0.701 0.738 0.701 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.2
Average program size in population (points): 64.909
Average percent parens in population: 0.311
Minimum age in population: 13.3125
Maximum age in population: 18.0927734375
Average age in population: 16.335439453125
Median age in population: 16.38671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4322101
--- Timings ---
Current time: 1559314617030 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.9 seconds, 72.4%
Fitness Testing:      6.2 seconds, 17.3%
Report:               3.6 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Lexicase best program: (in3 integer_sub integer_yank exec_rot (integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_when () exec_dup (integer_rot exec_noop integer_dup exec_do*range () boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ())))) () ())) ())
Lexicase best errors: [1 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Zero cases best program: (in3 integer_sub integer_yank exec_rot (integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_when () exec_dup (integer_rot exec_noop integer_dup exec_do*range () boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ())))) () ())) ())
Zero cases best errors: [1 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 193 861 193 285 193 100 188 583 288)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (288 193 861 193 285 193 100 188 583 288)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult})
Best program: (in3 integer_sub integer_yank boolean_empty print_integer boolean_shove integer_mult)
Errors: [1 0 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 7
Size: 8
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 6.828
Median total errors in population: 7
Error averages by case: (0.712 0.807 0.139 0.807 0.715 0.807 0.9 0.812 0.417 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.034
Average program size in population (points): 59.63
Average percent parens in population: 0.302
Minimum age in population: 14.921875
Maximum age in population: 19.7470703125
Average age in population: 17.8592724609375
Median age in population: 17.92138671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4650034
--- Timings ---
Current time: 1559314620307 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.6 seconds, 73.2%
Fitness Testing:      6.5 seconds, 16.6%
Report:               3.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_mod exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec (integer_rot boolean_xor exec_yank integer_empty exec_noop) exec_do*count (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq boolean_invert_first_then_and)) ())))) ()) ())))) () ()) ()) ())))) () ())
Lexicase best errors: [1 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 95
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (integer_mod exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec (integer_rot boolean_xor exec_yank integer_empty exec_noop) exec_do*count (integer_swap exec_dup_times (integer_eq) print_integer boolean_dup_times integer_min integer_eq boolean_invert_first_then_and)) ())))) ()) ())))) () ()) ()) ())))) () ())
Zero cases best errors: [1 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 95
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 94 234 104 105 234 88 104 450 450)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (88 94 234 104 105 234 88 104 450 450)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq})
Best program: (integer_pop integer_sub integer_yank exec_s_when_autoconstructing () (integer_dup_items integer_add) () integer_sub boolean_dup_times exec_k (exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range () print_boolean boolean_not in4 integer_rot tagged_709 print_integer boolean_flush boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub boolean_xor boolean_empty exec_when () integer_eq)) ()) ()) ())))) ())
Errors: [0 0 1 1 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 41
Size: 59
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 8.049
Median total errors in population: 8
Error averages by case: (0.912 0.906 0.766 0.896 0.895 0.766 0.912 0.896 0.55 0.55)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.319
Average program size in population (points): 55.336
Average percent parens in population: 0.296
Minimum age in population: 15.921875
Maximum age in population: 21.42578125
Average age in population: 19.36944580078125
Median age in population: 19.4541015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4923618
--- Timings ---
Current time: 1559314623324 milliseconds
Total Time:          42.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 73.9%
Fitness Testing:      6.8 seconds, 16.2%
Report:               4.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (integer_shove integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_lte integer_yankdup boolean_rot integer_stackdepth boolean_xor integer_inc) boolean_invert_first_then_and) exec_while (integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range (boolean_invert_first_then_and print_exec (exec_if (exec_dup_items) (in1 print_exec () integer_rot boolean_xor exec_yank integer_empty))))))) ())) () ()) ())))) () ())
Lexicase best errors: [0 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 96
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (integer_shove integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_lte integer_yankdup boolean_rot integer_stackdepth boolean_xor integer_inc) boolean_invert_first_then_and) exec_while (integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range (boolean_invert_first_then_and print_exec (exec_if (exec_dup_items) (in1 print_exec () integer_rot boolean_xor exec_yank integer_empty))))))) ())) () ()) ())))) () ())
Zero cases best errors: [0 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 96
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 890 247 198 197 246 444 247 198 245)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (247 890 247 198 197 246 444 247 198 245)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer)) () ()))))) () ()) ()) ())))) () ())
Errors: [0 0 0 1 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 56
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 6.841
Median total errors in population: 7
Error averages by case: (0.753 0.11 0.753 0.802 0.803 0.754 0.556 0.753 0.802 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.722
Average program size in population (points): 61.671
Average percent parens in population: 0.313
Minimum age in population: 17.74755859375
Maximum age in population: 22.8477783203125
Average age in population: 20.82086389160156
Median age in population: 20.879638671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5230120
--- Timings ---
Current time: 1559314626159 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 74.2%
Fitness Testing:      7.1 seconds, 15.9%
Report:               4.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_724} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_mult in3 exec_shove (exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_724 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ()))))) () ()) ()) ())))
Lexicase best errors: [0 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_724} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_mult in3 exec_shove (exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_724 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ()))))) () ()) ()) ())))
Zero cases best errors: [0 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (710 181 320 388 388 388 320 181 388 388)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (710 181 320 388 388 388 320 181 388 388)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div integer_dup_times boolean_flush integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_lte integer_yankdup boolean_rot exec_dup (boolean_xor integer_inc) boolean_invert_first_then_and) exec_while (integer_pop integer_yank) boolean_xor) exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div) boolean_swap exec_dup_items exec_flush boolean_stackdepth exec_do*range (boolean_invert_first_then_and print_exec (exec_if (exec_dup_items) (in1 print_exec () integer_rot boolean_xor exec_yank integer_empty))))))) ()))) () ()) ()) () ()) ()) ())))) () ())
Errors: [0 1 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 70
Size: 110
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 6.348
Median total errors in population: 7
Error averages by case: (0.29 0.819 0.68 0.612 0.612 0.612 0.68 0.819 0.612 0.612)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.379
Average program size in population (points): 66.902
Average percent parens in population: 0.332
Minimum age in population: 19.32080078125
Maximum age in population: 24.1588134765625
Average age in population: 22.25952471923828
Median age in population: 22.3197021484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5538041
--- Timings ---
Current time: 1559314629297 milliseconds
Total Time:          47.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 74.6%
Fitness Testing:      7.5 seconds, 15.6%
Report:               4.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (boolean_empty exec_shove (integer_fromboolean exec_swap (integer_stackdepth exec_if (integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_eq boolean_swap integer_rot exec_when (boolean_empty) tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ())))) () ()) ()) ()) ()))) () ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (boolean_empty exec_shove (integer_fromboolean exec_swap (integer_stackdepth exec_if (integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_eq boolean_swap integer_rot exec_when (boolean_empty) tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ())))) () ()) ()) ()) ()))) () ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 185 487 209 674 186 487 487 487 209)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (185 185 487 209 674 186 487 487 487 209)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (integer_rot exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_dup (boolean_invert_second_then_and exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (integer_div) in4 integer_pop) integer_gte boolean_invert_second_then_and) exec_rot (in1 exec_do*times () exec_pop (boolean_rot integer_add)) () ()) ())) ())))) () ()) ()) ())))) () ())
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 89
Percent parens: 0.382
--- Population Statistics ---
Average total errors in population: 6.404
Median total errors in population: 6
Error averages by case: (0.815 0.815 0.513 0.791 0.326 0.814 0.513 0.513 0.513 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.574
Average program size in population (points): 68.146
Average percent parens in population: 0.342
Minimum age in population: 20.570068359375
Maximum age in population: 25.81192016601562
Average age in population: 23.7108190612793
Median age in population: 23.78593444824219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5878682
--- Timings ---
Current time: 1559314632071 milliseconds
Total Time:          50.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 74.5%
Fitness Testing:      7.8 seconds, 15.4%
Report:               5.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: 93                 
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ()))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ()))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 300 389 1 387 1 299 1 300 1)
Population mean number of elite cases: 1.68
Count of perfect (error zero) individuals by case: (1 300 389 1 387 1 299 1 300 1)
Population mean number of perfect (error zero) cases: 1.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ()))
Errors: [0 1 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 8.32
Median total errors in population: 8
Error averages by case: (0.999 0.7 0.611 0.999 0.613 0.999 0.701 0.999 0.7 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.186
Average program size in population (points): 66.678
Average percent parens in population: 0.332
Minimum age in population: 21.570068359375
Maximum age in population: 27.10520935058594
Average age in population: 25.19309498596191
Median age in population: 25.25654602050781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6219707
--- Timings ---
Current time: 1559314634635 milliseconds
Total Time:          53.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.8 seconds, 74.6%
Fitness Testing:      8.2 seconds, 15.3%
Report:               5.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s})
Lexicase best program: (exec_rot (in1) (integer_add integer_mult) (exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer integer_dup_items integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div print_integer exec_pop (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec (integer_rot boolean_xor exec_yank integer_empty boolean_empty) exec_do*count (integer_swap exec_dup_times (integer_eq) exec_flush boolean_dup_times integer_min integer_eq boolean_invert_first_then_and) integer_empty) (boolean_xor integer_gte integer_add exec_s () () ()))))))) ())) ())))) () ()) ()) ())))) () ()))
Lexicase best errors: [1 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 116
Percent parens: 0.362
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s})
Zero cases best program: (exec_rot (in1) (integer_add integer_mult) (exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer integer_dup_items integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div print_integer exec_pop (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items in1 print_exec (integer_rot boolean_xor exec_yank integer_empty boolean_empty) exec_do*count (integer_swap exec_dup_times (integer_eq) exec_flush boolean_dup_times integer_min integer_eq boolean_invert_first_then_and) integer_empty) (boolean_xor integer_gte integer_add exec_s () () ()))))))) ())) ())))) () ()) ()) ())))) () ()))
Zero cases best errors: [1 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 116
Percent parens: 0.362
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 1 174 477 1 903 174 250 1 174)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (251 1 174 477 1 903 174 250 1 174)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (boolean_swap exec_swap (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_shove tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush boolean_stackdepth) exec_do*range (boolean_yank print_exec (exec_if (exec_dup_items) ())))) ())) ())))) () ()) ()) ()))) () ())
Errors: [1 1 0 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 46
Size: 76
Percent parens: 0.395
--- Population Statistics ---
Average total errors in population: 7.594
Median total errors in population: 8
Error averages by case: (0.749 0.999 0.826 0.523 0.999 0.097 0.826 0.75 0.999 0.826)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.295
Average program size in population (points): 60.923
Average percent parens in population: 0.318
Minimum age in population: 22.570068359375
Maximum age in population: 28.72602844238281
Average age in population: 26.3963041305542
Median age in population: 26.60038757324219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 280
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6448655
--- Timings ---
Current time: 1559314637250 milliseconds
Total Time:          55.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.9 seconds, 74.9%
Fitness Testing:      8.4 seconds, 15.0%
Report:               5.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ()) ())) ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ()) ())) ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 306 218 904 107 591 303 306 266 411)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (304 306 218 904 107 591 303 306 266 411)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ())) ())
Errors: [0 0 1 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 54
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 6.284
Median total errors in population: 7
Error averages by case: (0.696 0.694 0.782 0.096 0.893 0.409 0.697 0.694 0.734 0.589)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.457
Average program size in population (points): 61.574
Average percent parens in population: 0.323
Minimum age in population: 25.57080078125
Maximum age in population: 30.14447021484375
Average age in population: 27.92921733856201
Median age in population: 28.03851318359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6702757
--- Timings ---
Current time: 1559314640134 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.3 seconds, 75.2%
Fitness Testing:      8.7 seconds, 14.7%
Report:               5.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (integer_gt print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ())) ())
Lexicase best errors: [0 1 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (integer_gt print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ())) ())
Zero cases best errors: [0 1 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (681 115 501 501 123 179 115 123 501 123)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (681 115 501 501 123 179 115 123 501 123)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap))))) ())
Errors: [0 1 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 50
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.038
Median total errors in population: 6
Error averages by case: (0.319 0.885 0.499 0.499 0.877 0.821 0.885 0.877 0.499 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.186
Average program size in population (points): 57.904
Average percent parens in population: 0.321
Minimum age in population: 26.81118774414062
Maximum age in population: 31.27026176452637
Average age in population: 29.34861199569702
Median age in population: 29.42586135864258
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6886780
--- Timings ---
Current time: 1559314642819 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.5 seconds, 75.5%
Fitness Testing:      8.9 seconds, 14.4%
Report:               6.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mod boolean_frominteger integer_gt integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ())) ())
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mod boolean_frominteger integer_gt integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)))) ())) ())
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 154 283 335 153 154 335 335 886 335)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (116 154 283 335 153 154 335 335 886 335)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 exec_if (integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)) ())) ()))) ())
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 59
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 6.914
Median total errors in population: 8
Error averages by case: (0.884 0.846 0.717 0.665 0.847 0.846 0.665 0.665 0.114 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.378
Average program size in population (points): 60.677
Average percent parens in population: 0.331
Minimum age in population: 27.81118774414062
Maximum age in population: 32.71319389343262
Average age in population: 30.8899298658371
Median age in population: 30.95765018463135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7132916
--- Timings ---
Current time: 1559314645879 milliseconds
Total Time:          64.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.1 seconds, 75.9%
Fitness Testing:      9.2 seconds, 14.2%
Report:               6.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (print_integer tagged_527 integer_yank exec_dup_times ()) ())) ())) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (print_integer tagged_527 integer_yank exec_dup_times ()) ())) ())) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 412 412 289 412 109 114 924 114 412)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (109 412 412 289 412 109 114 924 114 412)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger in2 integer_lt integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) boolean_swap)) ())) ())
Errors: [1 0 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.693
Median total errors in population: 7
Error averages by case: (0.891 0.588 0.588 0.711 0.588 0.891 0.886 0.076 0.886 0.588)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.877
Average program size in population (points): 58.972
Average percent parens in population: 0.321
Minimum age in population: 29.60038757324219
Maximum age in population: 34.24736261367798
Average age in population: 32.38921716499329
Median age in population: 32.46115183830261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7350944
--- Timings ---
Current time: 1559314648830 milliseconds
Total Time:          67.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 76.3%
Fitness Testing:      9.4 seconds, 13.9%
Report:               6.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_flush integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_do*times (boolean_empty tagged_925 integer_shove integer_pop exec_rot () (boolean_xor) (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop))) ())))) () ()) ()) ())))) () ())
Lexicase best errors: [1 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 63
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (exec_swap (integer_flush integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_do*times (boolean_empty tagged_925 integer_shove integer_pop exec_rot () (boolean_xor) (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or) (exec_pop () in2 boolean_or print_integer exec_yank integer_pop))) ())))) () ()) ()) ())))) () ())
Zero cases best errors: [1 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 63
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 206 170 171 96 438 437 171 96 170)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (437 206 170 171 96 438 437 171 96 170)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_when (integer_gt integer_sub boolean_flush integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_mult tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty integer_dup boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod)) () ()))))) () ()) ())))) () ())
Errors: [1 1 0 0 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 35
Size: 57
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 7.608
Median total errors in population: 7
Error averages by case: (0.563 0.794 0.83 0.829 0.904 0.562 0.563 0.829 0.904 0.83)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.577
Average program size in population (points): 59.095
Average percent parens in population: 0.327
Minimum age in population: 31.09976387023926
Maximum age in population: 35.74474573135376
Average age in population: 33.86183703565598
Median age in population: 33.90823566913605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7551274
--- Timings ---
Current time: 1559314651607 milliseconds
Total Time:          70.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 76.6%
Fitness Testing:      9.7 seconds, 13.8%
Report:               6.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_868} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_eq})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush boolean_dup_times integer_rot exec_when (boolean_empty) tagged_868 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max integer_sub exec_if (integer_rot exec_do*range () print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and integer_lt integer_empty exec_shove (exec_empty print_exec (boolean_empty boolean_dup_times) integer_eq)) ()) ())) ())) ())
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_868} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_eq})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush boolean_dup_times integer_rot exec_when (boolean_empty) tagged_868 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max integer_sub exec_if (integer_rot exec_do*range () print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and integer_lt integer_empty exec_shove (exec_empty print_exec (boolean_empty boolean_dup_times) integer_eq)) ()) ())) ())) ())
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 186 283 351 185 187 87 623 820 283)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (352 186 283 351 185 187 87 623 820 283)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_mult integer_add integer_sub boolean_dup_times integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range () print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (integer_inc boolean_and boolean_invert_second_then_and exec_empty boolean_shove boolean_not boolean_frominteger in2 integer_dup integer_div exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap))) ()))))
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 59
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 6.643
Median total errors in population: 6
Error averages by case: (0.648 0.814 0.717 0.649 0.815 0.813 0.913 0.377 0.18 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.057
Average program size in population (points): 60.546
Average percent parens in population: 0.334
Minimum age in population: 32.83859825134277
Maximum age in population: 37.17324137687683
Average age in population: 35.34772996747494
Median age in population: 35.42456275224686
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7819374
--- Timings ---
Current time: 1559314654364 milliseconds
Total Time:          73.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.1 seconds, 76.7%
Fitness Testing:     10.0 seconds, 13.6%
Report:               7.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_pop integer_sub integer_yank exec_s_when_autoconstructing (print_integer integer_add) () (integer_sub boolean_dup_times integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range () print_boolean boolean_not in4 integer_rot tagged_709 print_integer) (exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and integer_mod integer_empty exec_shove ()) ()) ())))))))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 2, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_pop integer_sub integer_yank exec_s_when_autoconstructing (print_integer integer_add) () (integer_sub boolean_dup_times integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range () print_boolean boolean_not in4 integer_rot tagged_709 print_integer) (exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and boolean_invert_second_then_and integer_mod integer_empty exec_shove ()) ()) ())))))))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 113 359 359 362 686 218 360 196 360)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (360 113 359 359 362 686 218 360 196 360)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_mult exec_when (exec_swap (integer_stackdepth integer_add) ()) integer_sub boolean_dup_times integer_rot exec_when (boolean_empty boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (in4 integer_rot integer_mod boolean_frominteger boolean_yankdup exec_empty) (exec_flush boolean_or integer_mod) boolean_swap)))
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.627
Median total errors in population: 8
Error averages by case: (0.64 0.887 0.641 0.641 0.638 0.314 0.782 0.64 0.804 0.64)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.846
Average program size in population (points): 59.425
Average percent parens in population: 0.325
Minimum age in population: 34.14102029800415
Maximum age in population: 38.7537362575531
Average age in population: 36.90001258134842
Median age in population: 36.98113059997559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8089990
--- Timings ---
Current time: 1559314657239 milliseconds
Total Time:          76.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.5 seconds, 76.9%
Fitness Testing:     10.2 seconds, 13.5%
Report:               7.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup})
Lexicase best program: (in3 integer_sub integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_pop boolean_flush integer_yank integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 boolean_dup_times integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing () exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_s_when_autoconstructing () () (print_boolean boolean_not in4) integer_rot tagged_709 print_integer exec_pop () exec_when (integer_lt in2 integer_yankdup)) ()))) () ()) ()) () ()) ())
Lexicase best errors: [1 0 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 62
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup})
Zero cases best program: (in3 integer_sub integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_pop boolean_flush integer_yank integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_584 boolean_dup_times integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing () exec_stackdepth integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_s_when_autoconstructing () () (print_boolean boolean_not in4) integer_rot tagged_709 print_integer exec_pop () exec_when (integer_lt in2 integer_yankdup)) ()))) () ()) ()) () ()) ())
Zero cases best errors: [1 0 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 62
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 586 92 114 51 107 582 51 638 114)
Population mean number of elite cases: 2.43
Count of perfect (error zero) individuals by case: (92 586 92 114 51 107 582 51 638 114)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (boolean_yankdup exec_shove (exec_when (exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925 boolean_flush exec_if (integer_max boolean_stackdepth) (print_boolean boolean_not in4 integer_rot tagged_709 boolean_not boolean_or exec_stackdepth integer_max exec_k (exec_if (integer_max integer_lte) (print_boolean boolean_not in4 integer_rot boolean_rot print_integer exec_pop (print_integer exec_k_when_autoconstructing () ()))) ())))) () ()) ())))) () ())
Errors: [1 0 1 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 44
Size: 68
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.573
Median total errors in population: 7
Error averages by case: (0.908 0.414 0.908 0.886 0.949 0.893 0.418 0.949 0.362 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.724
Average program size in population (points): 59.281
Average percent parens in population: 0.306
Minimum age in population: 35.59918880462646
Maximum age in population: 40.31126275658607
Average age in population: 38.3282763543427
Median age in population: 38.40652120113373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8383168
--- Timings ---
Current time: 1559314660006 milliseconds
Total Time:          78.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 77.1%
Fitness Testing:     10.5 seconds, 13.4%
Report:               7.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in1 exec_shove (exec_when (exec_when (integer_mod integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div integer_rot integer_empty integer_dec exec_noop integer_eq exec_if (integer_mod boolean_swap integer_rot exec_when (boolean_empty) tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ()))) ()) () ()) ()))))) () ())
Lexicase best errors: [0 0 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in1 exec_shove (exec_when (exec_when (integer_mod integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div integer_rot integer_empty integer_dec exec_noop integer_eq exec_if (integer_mod boolean_swap integer_rot exec_when (boolean_empty) tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer tagged_527 integer_yank integer_mod boolean_frominteger integer_dup exec_empty exec_flush boolean_or)) () ()))) ()) () ()) ()))))) () ())
Zero cases best errors: [0 0 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 659 169 251 169 239 252 238 237 251)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (252 659 169 251 169 239 252 238 237 251)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in1 exec_shove (exec_when (exec_when (integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div exec_when (exec_if () (integer_mod boolean_swap integer_rot exec_if (boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush exec_pop () exec_do*range ()))) ()) ())) ())) ()))) () ()) ()))))) () ())
Errors: [0 0 1 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 74
Percent parens: 0.432
--- Population Statistics ---
Average total errors in population: 7.283
Median total errors in population: 8
Error averages by case: (0.748 0.341 0.831 0.749 0.831 0.761 0.748 0.762 0.763 0.749)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.233
Average program size in population (points): 60.215
Average percent parens in population: 0.325
Minimum age in population: 36.59918880462646
Maximum age in population: 41.83040618896484
Average age in population: 39.8169986653626
Median age in population: 39.8839225769043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8652278
--- Timings ---
Current time: 1559314662878 milliseconds
Total Time:          81.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 77.1%
Fitness Testing:     10.8 seconds, 13.3%
Report:               7.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_rot (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925) boolean_flush exec_y_when_autoconstructing (tagged_709 print_integer exec_pop (boolean_invert_first_then_and boolean_yank integer_inc boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub exec_flush boolean_or integer_mod) boolean_swap)))) ())
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_rot (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_925) boolean_flush exec_y_when_autoconstructing (tagged_709 print_integer exec_pop (boolean_invert_first_then_and boolean_yank integer_inc boolean_and boolean_invert_second_then_and exec_empty integer_empty exec_shove (integer_sub exec_flush boolean_or integer_mod) boolean_swap)))) ())
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (896 178 414 178 304 896 178 1000 306 718)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (896 178 414 178 304 896 178 0 306 718)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction tagged_868} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (boolean_flush) (exec_s_when_autoconstructing () (boolean_empty) (tagged_868 boolean_flush boolean_swap exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_shove exec_y_when_autoconstructing (exec_if (integer_max exec_do*range () print_boolean boolean_not in4 integer_max exec_do*range (print_boolean) boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) ())))))) ())
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 69
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 5.932
Median total errors in population: 6
Error averages by case: (0.104 0.822 0.586 0.822 0.696 0.104 0.822 1.0 0.694 0.282)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 40.393
Average program size in population (points): 60.196
Average percent parens in population: 0.323
Minimum age in population: 38.24118304252625
Maximum age in population: 43.09924941509962
Average age in population: 41.2609683592096
Median age in population: 41.36382118985057
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8962423
--- Timings ---
Current time: 1559314665922 milliseconds
Total Time:          84.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 77.2%
Fitness Testing:     11.2 seconds, 13.2%
Report:               8.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_866} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_boolean_669} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_rot (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_866) boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yankdup integer_pop exec_do*times (exec_dup_items exec_empty) exec_flush tag_boolean_669 integer_mod) (integer_stackdepth))) ()))) ())
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_866} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_boolean_669} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_rot (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_swap integer_rot exec_when (boolean_empty tagged_866) boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yankdup integer_pop exec_do*times (exec_dup_items exec_empty) exec_flush tag_boolean_669 integer_mod) (integer_stackdepth))) ()))) ())
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 181 897 388 3 181 388 899 893 507)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (3 181 897 388 3 181 388 899 893 507)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer})
Best program: (in3 integer_div boolean_yankdup integer_mod boolean_frominteger integer_gt boolean_dup exec_noop boolean_and exec_dup_items integer_flush exec_k_when_autoconstructing (exec_if () (integer_add integer_dup_times boolean_flush integer_shove boolean_shove integer_max integer_rot integer_empty integer_dec integer_empty integer_dec boolean_yank integer_eq) integer_min integer_mult integer_rot exec_empty exec_swap (tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_div print_boolean) (print_integer)) () ()))) ()) ())
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.66
Median total errors in population: 5
Error averages by case: (0.997 0.819 0.103 0.612 0.997 0.819 0.612 0.101 0.107 0.493)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.682
Average program size in population (points): 59.809
Average percent parens in population: 0.316
Minimum age in population: 39.4721662402153
Maximum age in population: 44.64935522153974
Average age in population: 42.75128619368002
Median age in population: 42.79282185249031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9217077
--- Timings ---
Current time: 1559314668523 milliseconds
Total Time:          87.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.5 seconds, 77.4%
Fitness Testing:     11.4 seconds, 13.1%
Report:               8.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction tagged_870} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_shove integer_yank exec_s_when_autoconstructing () (integer_dup_items integer_add) () exec_when (boolean_empty tagged_925 tagged_870 exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_do*times (exec_dup_items)) ())) ())))
Lexicase best errors: [1 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.412
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction tagged_870} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_shove integer_yank exec_s_when_autoconstructing () (integer_dup_items integer_add) () exec_when (boolean_empty tagged_925 tagged_870 exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_do*times (exec_dup_items)) ())) ())))
Zero cases best errors: [1 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.412
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 326 331 281 326 889 1000 281 283 283)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (1 326 331 281 326 889 0 281 283 283)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_exec})
Best program: (integer_mod boolean_frominteger integer_gt integer_lt exec_noop exec_yank integer_dec integer_flush exec_k_when_autoconstructing (integer_shove) (integer_add integer_dup_times boolean_flush integer_shove integer_fromboolean integer_max) integer_rot integer_empty integer_dec exec_noop integer_eq integer_min in4 integer_rot exec_when (boolean_empty) integer_mod boolean_swap integer_rot exec_if (boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush exec_pop () exec_do*range (boolean_yank exec_dup (exec_if (exec_dup_items in1 print_exec ()) ()))))) ()) ())) ())) ())
Errors: [1 0 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 58
Size: 82
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.999
Median total errors in population: 7
Error averages by case: (0.999 0.674 0.669 0.719 0.674 0.111 1.0 0.719 0.717 0.717)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 41.961
Average program size in population (points): 64.446
Average percent parens in population: 0.343
Minimum age in population: 41.29495705664158
Maximum age in population: 46.02928088791668
Average age in population: 44.20569372127578
Median age in population: 44.3230817746371
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 9445645
--- Timings ---
Current time: 1559314671342 milliseconds
Total Time:          90.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 77.5%
Fitness Testing:     11.7 seconds, 13.0%
Report:               8.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_max exec_y_when_autoconstructing (exec_do*range (boolean_yank exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (integer_dec) integer_lt) (boolean_shove boolean_not boolean_and in2 exec_if (integer_div boolean_or print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) (exec_flush boolean_or integer_mod) boolean_swap))) () ()) ()) ()))))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_max exec_y_when_autoconstructing (exec_do*range (boolean_yank exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if () (exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (integer_dec) integer_lt) (boolean_shove boolean_not boolean_and in2 exec_if (integer_div boolean_or print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) (exec_flush boolean_or integer_mod) boolean_swap))) () ()) ()) ()))))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 334 337 476 226 226 586 2 813 334)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (2 334 337 476 226 226 586 2 813 334)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 exec_shove (integer_pop integer_sub integer_yank integer_stackdepth exec_do*while (integer_flush) exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing () exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (exec_do*count (boolean_swap exec_dup_items exec_flush exec_pop (exec_do*range (boolean_yank)))))) ()) ())) ()) () ()) ()))) () ())
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 64
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 6.664
Median total errors in population: 6
Error averages by case: (0.998 0.666 0.663 0.524 0.774 0.774 0.414 0.998 0.187 0.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.072
Average program size in population (points): 63.13
Average percent parens in population: 0.345
Minimum age in population: 42.29495705664158
Maximum age in population: 47.86039734166116
Average age in population: 45.70679324421939
Median age in population: 45.70553360134363
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 9680043
--- Timings ---
Current time: 1559314674037 milliseconds
Total Time:          92.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.8 seconds, 77.5%
Fitness Testing:     12.0 seconds, 12.9%
Report:               8.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) ()))
Lexicase best errors: [1 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) ()))
Zero cases best errors: [1 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 53 609 376 180 180 848 292 180 53)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (345 53 609 376 180 180 848 292 180 53)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()))))
Errors: [1 1 0 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.884
Median total errors in population: 7
Error averages by case: (0.655 0.947 0.391 0.624 0.82 0.82 0.152 0.708 0.82 0.947)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.028
Average program size in population (points): 58.942
Average percent parens in population: 0.334
Minimum age in population: 43.29495705664158
Maximum age in population: 49.24793873401359
Average age in population: 47.07124388660491
Median age in population: 47.17350459680893
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9954748
--- Timings ---
Current time: 1559314676780 milliseconds
Total Time:          95.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.1 seconds, 77.5%
Fitness Testing:     12.3 seconds, 12.8%
Report:               9.1 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: 93                 
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_mult exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_invert_first_then_and integer_div exec_when (exec_if () (integer_mod boolean_swap integer_rot exec_if (boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () boolean_and exec_y_when_autoconstructing (exec_do*while (integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing () ()) ()))) ())))) ())) ())) ()))) ()) ()))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 85
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_mult exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_invert_first_then_and integer_div exec_when (exec_if () (integer_mod boolean_swap integer_rot exec_if (boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () boolean_and exec_y_when_autoconstructing (exec_do*while (integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing () ()) ()))) ())))) ())) ())) ()))) ()) ()))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 85
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 157 280 282 885 157 109 280 344 341)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (157 157 280 282 885 157 109 280 344 341)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_588} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_pop exec_y_when_autoconstructing (exec_do*range (exec_shove (integer_lte integer_mult) exec_s (exec_y_when_autoconstructing (in1 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_if (integer_div exec_dup (print_integer tagged_588 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap)) ())) ())))
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 49
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.008
Median total errors in population: 7
Error averages by case: (0.843 0.843 0.72 0.718 0.115 0.843 0.891 0.72 0.656 0.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.094
Average program size in population (points): 59.15
Average percent parens in population: 0.334
Minimum age in population: 45.50065726414323
Maximum age in population: 50.76468489202671
Average age in population: 48.52306126450887
Median age in population: 48.59003320732154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10205261
--- Timings ---
Current time: 1559314679675 milliseconds
Total Time:          98.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.5 seconds, 77.7%
Fitness Testing:     12.5 seconds, 12.7%
Report:               9.3 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_rot exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_noop exec_yank exec_dup_items integer_flush exec_k_when_autoconstructing (integer_shove) (integer_add integer_dup_times boolean_flush integer_shove boolean_shove integer_max integer_rot integer_empty integer_dec) exec_noop) integer_eq) integer_min integer_mult integer_rot exec_when (boolean_empty integer_mult integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_do*while (integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing () ()) ()))) ())))))) () ())
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_rot exec_s (exec_y_when_autoconstructing (in3 exec_shove (exec_noop exec_yank exec_dup_items integer_flush exec_k_when_autoconstructing (integer_shove) (integer_add integer_dup_times boolean_flush integer_shove boolean_shove integer_max integer_rot integer_empty integer_dec) exec_noop) integer_eq) integer_min integer_mult integer_rot exec_when (boolean_empty integer_mult integer_rot exec_when (boolean_empty tagged_925 boolean_flush boolean_and exec_y_when_autoconstructing (exec_do*while (integer_max exec_y_when_autoconstructing (exec_if (integer_max exec_do*range (print_boolean boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing () ()) ()))) ())))))) () ())
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 202 311 100 612 311 100 295 311 202)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (202 202 311 100 612 311 100 295 311 202)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and})
Best program: (exec_rot (integer_min in3 integer_yank boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_and) ()))) ())
Errors: [1 1 0 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 7.354
Median total errors in population: 6
Error averages by case: (0.798 0.798 0.689 0.9 0.388 0.689 0.9 0.705 0.689 0.798)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.452
Average program size in population (points): 59.862
Average percent parens in population: 0.336
Minimum age in population: 46.64913942664862
Maximum age in population: 52.04687103885226
Average age in population: 49.99132494555193
Median age in population: 50.09164574393071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 10423099
--- Timings ---
Current time: 1559314682418 milliseconds
Total Time:         101.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.7 seconds, 77.8%
Fitness Testing:     12.8 seconds, 12.6%
Report:               9.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_mult exec_s (integer_mod boolean_frominteger integer_mult) (exec_s (exec_y_when_autoconstructing (exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_empty integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_shove integer_max integer_rot integer_empty boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush exec_pop () exec_do*range (boolean_yank exec_dup (exec_if (exec_dup_items) ()))))) ()) ())) ())) ()) ())) ())) () ()) ())
Lexicase best errors: [1 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 85
Percent parens: 0.412
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_mult exec_s (integer_mod boolean_frominteger integer_mult) (exec_s (exec_y_when_autoconstructing (exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_empty integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (boolean_shove integer_max integer_rot integer_empty boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush exec_pop () exec_do*range (boolean_yank exec_dup (exec_if (exec_dup_items) ()))))) ()) ())) ())) ()) ())) ())) () ()) ())
Zero cases best errors: [1 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 85
Percent parens: 0.412
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 252 95 95 334 317 334 334 903 334)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (222 252 95 95 334 317 334 334 903 334)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_672} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction tag_boolean_677} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank})
Best program: (integer_pop in3 integer_yank exec_s_when_autoconstructing (integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (integer_inc) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not boolean_frominteger exec_shove (exec_when (exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and integer_div tag_integer_672 exec_if (boolean_dup_times boolean_swap integer_rot exec_when (tag_boolean_677) tagged_925 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 exec_if (integer_gt print_boolean) (print_integer tagged_527 integer_yank exec_yank)) () ()))) ()) () ()) ()))))) ())) ())
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 77
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 6.78
Median total errors in population: 7
Error averages by case: (0.778 0.748 0.905 0.905 0.666 0.683 0.666 0.666 0.097 0.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.851
Average program size in population (points): 55.407
Average percent parens in population: 0.331
Minimum age in population: 47.68530663102865
Maximum age in population: 53.439944100508
Average age in population: 51.46984787435894
Median age in population: 51.57472594140563
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 10672350
--- Timings ---
Current time: 1559314685467 milliseconds
Total Time:         104.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.3 seconds, 78.0%
Fitness Testing:     13.0 seconds, 12.5%
Report:               9.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush boolean_yankdup boolean_flush integer_gte) (integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_yank in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()))))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush boolean_yankdup boolean_flush integer_gte) (integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_yank in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()))))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (621 284 92 92 92 114 414 92 489 115)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (621 284 92 92 92 114 414 92 489 115)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()))))
Errors: [0 1 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.595
Median total errors in population: 8
Error averages by case: (0.379 0.716 0.908 0.908 0.908 0.886 0.586 0.908 0.511 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.74
Average program size in population (points): 57.345
Average percent parens in population: 0.337
Minimum age in population: 49.45140242762864
Maximum age in population: 55.04107590828789
Average age in population: 52.99359584093027
Median age in population: 53.10464816183958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 10870997
--- Timings ---
Current time: 1559314688454 milliseconds
Total Time:         107.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.9 seconds, 78.2%
Fitness Testing:     13.3 seconds, 12.4%
Report:              10.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mult integer_dec exec_y_when_autoconstructing (in1 exec_shove (exec_when (exec_when (boolean_dup) integer_dec exec_k (boolean_flush) (integer_sub) integer_lt) boolean_shove boolean_not boolean_frominteger in2 exec_if (boolean_swap exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap))))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mult integer_dec exec_y_when_autoconstructing (in1 exec_shove (exec_when (exec_when (boolean_dup) integer_dec exec_k (boolean_flush) (integer_sub) integer_lt) boolean_shove boolean_not boolean_frominteger in2 exec_if (boolean_swap exec_dup (print_integer tagged_527 integer_yank integer_mod boolean_frominteger boolean_yankdup exec_empty) exec_flush boolean_or integer_mod) (boolean_swap))))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 233 95 916 233 233 127 127 458 95)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (457 233 95 916 233 233 127 127 458 95)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction tagged_870} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items})
Best program: (integer_shove integer_yank exec_s_when_autoconstructing () (integer_dup_items integer_add) () exec_when (boolean_empty tagged_925 tagged_870 exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or integer_flush) (in2 boolean_or print_integer exec_do*times (exec_dup_items)))) ())))
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 33
Percent parens: 0.394
--- Population Statistics ---
Average total errors in population: 7.026
Median total errors in population: 8
Error averages by case: (0.543 0.767 0.905 0.084 0.767 0.767 0.873 0.873 0.542 0.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.287
Average program size in population (points): 51.361
Average percent parens in population: 0.330
Minimum age in population: 50.45140242762864
Maximum age in population: 56.37956796083017
Average age in population: 54.41829822337889
Median age in population: 54.49952884496452
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 11131225
--- Timings ---
Current time: 1559314691156 milliseconds
Total Time:         109.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.1 seconds, 78.3%
Fitness Testing:     13.6 seconds, 12.3%
Report:              10.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_348 exec_if (integer_mod boolean_not in4 integer_rot tagged_709 print_integer) (exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing () (exec_k_when_autoconstructing (boolean_and) ())))))
Lexicase best errors: [0 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_348 exec_if (integer_mod boolean_not in4 integer_rot tagged_709 print_integer) (exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing () (exec_k_when_autoconstructing (boolean_and) ())))))
Zero cases best errors: [0 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 110 233 232 232 339 339 110 339 915)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (110 110 233 232 232 339 339 110 339 915)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_integer_518} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction in2})
Best program: (integer_mult integer_add integer_sub boolean_dup_times integer_rot exec_when (boolean_empty tagged_925 boolean_flush) boolean_and exec_y_when_autoconstructing (exec_stackdepth integer_max exec_y_when_autoconstructing (exec_stackdepth integer_max boolean_xor boolean_swap boolean_not in4 integer_rot tag_integer_518 exec_if () (integer_mod boolean_swap integer_rot) exec_when (boolean_dup) integer_dec exec_k (boolean_flush exec_s_when_autoconstructing () (integer_lt boolean_shove boolean_not boolean_frominteger in2 print_integer exec_yank integer_pop exec_rot (in2) () ()) ()) ())))
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 42
Size: 57
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.041
Median total errors in population: 7
Error averages by case: (0.89 0.89 0.767 0.768 0.768 0.661 0.661 0.89 0.661 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.811
Average program size in population (points): 56.152
Average percent parens in population: 0.339
Minimum age in population: 52.42906005005352
Maximum age in population: 57.83868328193785
Average age in population: 55.90378138441112
Median age in population: 55.99233190845916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 11379131
--- Timings ---
Current time: 1559314693977 milliseconds
Total Time:         112.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.3 seconds, 78.4%
Fitness Testing:     13.8 seconds, 12.3%
Report:              10.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2})
Lexicase best program: (integer_rot exec_y_when_autoconstructing (in3 exec_shove (boolean_yank exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap () (exec_s_when_autoconstructing (integer_mod boolean_not in4 integer_rot tagged_709 in4 in4 integer_rot tagged_709 print_integer exec_pop (print_integer exec_pop (boolean_not exec_rot (in2) () ()))) () ())) ()))))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2})
Zero cases best program: (integer_rot exec_y_when_autoconstructing (in3 exec_shove (boolean_yank exec_when (exec_swap (integer_stackdepth integer_dup integer_flush exec_swap () (exec_s_when_autoconstructing (integer_mod boolean_not in4 integer_rot tagged_709 in4 in4 integer_rot tagged_709 print_integer exec_pop (print_integer exec_pop (boolean_not exec_rot (in2) () ()))) () ())) ()))))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 108 288 288 201 305 288 305 289 201)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (109 108 288 288 201 305 288 305 289 201)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (integer_inc exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()))))
Errors: [1 1 0 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.618
Median total errors in population: 8
Error averages by case: (0.891 0.892 0.712 0.712 0.799 0.695 0.712 0.695 0.711 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.74
Average program size in population (points): 52.791
Average percent parens in population: 0.338
Minimum age in population: 53.42906005005352
Maximum age in population: 59.26170193149665
Average age in population: 57.3660039072801
Median age in population: 57.4383799983334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 11629973
--- Timings ---
Current time: 1559314696673 milliseconds
Total Time:         115.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.5 seconds, 78.4%
Fitness Testing:     14.1 seconds, 12.2%
Report:              10.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_772} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_396} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec})
Lexicase best program: (integer_pop exec_y_when_autoconstructing (exec_do*range (exec_stackdepth boolean_eq integer_mult) exec_s (boolean_xor in1 exec_shove (exec_when (tagged_772 integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_invert_second_then_and exec_when (exec_if (integer_mod boolean_swap tagged_396) (exec_if (boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush exec_pop () integer_eq boolean_yank exec_dup (exec_if (exec_dup_items boolean_not print_exec ()) ())))) ()) ())) ())) ()))) () ()) ()))) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.398
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_772} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_396} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction print_exec})
Zero cases best program: (integer_pop exec_y_when_autoconstructing (exec_do*range (exec_stackdepth boolean_eq integer_mult) exec_s (boolean_xor in1 exec_shove (exec_when (tagged_772 integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_invert_second_then_and exec_when (exec_if (integer_mod boolean_swap tagged_396) (exec_if (boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (integer_div boolean_swap exec_dup_items exec_flush exec_pop () integer_eq boolean_yank exec_dup (exec_if (exec_dup_items boolean_not print_exec ()) ())))) ()) ())) ())) ()))) () ()) ()))) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.398
--- Lexicase Population Statistics ---
Count of elite individuals by case: (902 335 154 202 908 699 203 152 362 184)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (902 335 154 202 908 699 203 152 362 184)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction tag_integer_527} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_772} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_396} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div})
Best program: (tag_integer_527 exec_do*range (exec_stackdepth boolean_eq integer_mult) exec_s (exec_y_when_autoconstructing (in1 exec_shove (exec_when (tagged_772 integer_dec integer_dup integer_flush exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and boolean_invert_second_then_and exec_when (exec_if () (integer_mod integer_dec tagged_396 exec_if (boolean_empty integer_lt boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (exec_do*while (exec_pop () in2 boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (integer_div))) ())) ())) ())) ()))) () ()) ())))) () ())
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 72
Percent parens: 0.431
--- Population Statistics ---
Average total errors in population: 5.899
Median total errors in population: 6
Error averages by case: (0.098 0.665 0.846 0.798 0.092 0.301 0.797 0.848 0.638 0.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.294
Average program size in population (points): 50.154
Average percent parens in population: 0.333
Minimum age in population: 54.42906005005352
Maximum age in population: 60.78859722981906
Average age in population: 58.83880556630409
Median age in population: 58.93643065489414
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 11858796
--- Timings ---
Current time: 1559314699624 milliseconds
Total Time:         118.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.9 seconds, 78.5%
Fitness Testing:     14.4 seconds, 12.1%
Report:              10.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 2, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () () integer_mod exec_rot (in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) () ()))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 2, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () () integer_mod exec_rot (in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) () ()))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 910 195 217 380 914 117 195 118 117)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (216 910 195 217 380 914 117 195 118 117)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_rot (integer_div boolean_swap exec_dup_items exec_k_when_autoconstructing (exec_shove (integer_mult) exec_shove (exec_pop () in2 boolean_or boolean_or exec_pop () in2 boolean_or print_integer exec_yank integer_pop exec_do*times (exec_y_when_autoconstructing ()))) ()) () ()))))
Errors: [1 0 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 58
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.621
Median total errors in population: 6
Error averages by case: (0.784 0.09 0.805 0.783 0.62 0.086 0.883 0.805 0.882 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.503
Average program size in population (points): 52.612
Average percent parens in population: 0.340
Minimum age in population: 57.16396532440558
Maximum age in population: 62.30755619368392
Average age in population: 60.31183088706958
Median age in population: 60.40282253479836
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 12111300
--- Timings ---
Current time: 1559314702254 milliseconds
Total Time:         121.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.1 seconds, 78.5%
Fitness Testing:     14.6 seconds, 12.1%
Report:              11.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 boolean_not) integer_yank) (boolean_empty integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_invert_second_then_and) (integer_dec exec_k (boolean_shove integer_max in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_lt exec_k (boolean_shove integer_max integer_rot integer_empty boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove () exec_rot () (boolean_or exec_pop () boolean_eq boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_dup_items exec_do*times (exec_y_when_autoconstructing (integer_div exec_if (exec_dup_items) ()))))) ()) ()) ())) ()) ()) ())) ()) ())))
Lexicase best errors: [0 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.372
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 boolean_not) integer_yank) (boolean_empty integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_invert_second_then_and) (integer_dec exec_k (boolean_shove integer_max in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_lt exec_k (boolean_shove integer_max integer_rot integer_empty boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove () exec_rot () (boolean_or exec_pop () boolean_eq boolean_or print_integer exec_yank exec_k (exec_do*times (exec_y_when_autoconstructing (boolean_or exec_pop () in2 boolean_or print_integer exec_yank exec_dup_items exec_do*times (exec_y_when_autoconstructing (integer_div exec_if (exec_dup_items) ()))))) ()) ()) ())) ()) ()) ())) ()) ())))
Zero cases best errors: [0 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.372
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 220 681 223 223 118 904 220 223 343)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (562 220 681 223 223 118 904 220 223 343)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_700} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527})
Best program: (integer_lte integer_min in3 integer_yank boolean_flush boolean_empty boolean_flush integer_gte integer_div tag_integer_700 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (integer_div exec_dup (print_integer tagged_527))))
Errors: [0 1 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 28
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.283
Median total errors in population: 6
Error averages by case: (0.438 0.78 0.319 0.777 0.777 0.882 0.096 0.78 0.777 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.631
Average program size in population (points): 50.347
Average percent parens in population: 0.329
Minimum age in population: 58.16396532440558
Maximum age in population: 63.80691665636732
Average age in population: 61.81901953692919
Median age in population: 61.89220211563088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 12326692
--- Timings ---
Current time: 1559314705121 milliseconds
Total Time:         123.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.5 seconds, 78.7%
Fitness Testing:     14.9 seconds, 12.0%
Report:              11.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: 93                 
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mult exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_flush exec_k (exec_k (boolean_invert_first_then_and integer_div exec_when (exec_if () (integer_mod boolean_swap integer_rot exec_if (boolean_empty exec_flush boolean_or integer_mod) (boolean_swap)))) ()) ()) () ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 46
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mult exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_flush exec_k (exec_k (boolean_invert_first_then_and integer_div exec_when (exec_if () (integer_mod boolean_swap integer_rot exec_if (boolean_empty exec_flush boolean_or integer_mod) (boolean_swap)))) ()) ()) () ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 46
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 138 341 343 432 341 299 569 137 300)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (341 138 341 343 432 341 299 569 137 300)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush})
Best program: (integer_mult exec_rot (in1) (integer_max integer_yank) (integer_shove integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_s (boolean_dup) (boolean_and exec_k (boolean_flush exec_s_when_autoconstructing () (integer_lt) (boolean_shove boolean_not exec_do*while (in2 exec_if (exec_while () exec_flush integer_mult integer_rot exec_when (boolean_empty tagged_925 boolean_flush)) ()))) ()) ()))
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 50
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 6.759
Median total errors in population: 6
Error averages by case: (0.659 0.862 0.659 0.657 0.568 0.659 0.701 0.431 0.863 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.861
Average program size in population (points): 51.09
Average percent parens in population: 0.332
Minimum age in population: 59.16396532440558
Maximum age in population: 65.28425541480715
Average age in population: 63.28809404741276
Median age in population: 63.35088843677227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 12532953
--- Timings ---
Current time: 1559314707855 milliseconds
Total Time:         126.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.8 seconds, 78.8%
Fitness Testing:     15.1 seconds, 11.9%
Report:              11.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: 93                 
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_mod integer_pop exec_y_when_autoconstructing (exec_do*range (exec_shove (exec_when (integer_mult) exec_s (exec_y_when_autoconstructing (in1 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (exec_k_when_autoconstructing (boolean_and) ()) ()) ())) ()))))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.415
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_mod integer_pop exec_y_when_autoconstructing (exec_do*range (exec_shove (exec_when (integer_mult) exec_s (exec_y_when_autoconstructing (in1 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (exec_k_when_autoconstructing (boolean_and) ()) ()) ())) ()))))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.415
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 288 417 123 900 288 357 540 123 123)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (288 288 417 123 900 288 357 540 123 123)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_mult exec_rot (in1) (integer_add integer_yank) (boolean_flush boolean_frominteger) boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (integer_mod boolean_not integer_lt integer_rot tagged_709 print_integer exec_pop () boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()) ()) ()))
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 6.553
Median total errors in population: 7
Error averages by case: (0.712 0.712 0.583 0.877 0.1 0.712 0.643 0.46 0.877 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.561
Average program size in population (points): 50.659
Average percent parens in population: 0.331
Minimum age in population: 61.98453552980072
Maximum age in population: 66.92532834871224
Average age in population: 64.78443820811039
Median age in population: 64.8507209201864
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 12742231
--- Timings ---
Current time: 1559314710523 milliseconds
Total Time:         129.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.1 seconds, 78.9%
Fitness Testing:     15.3 seconds, 11.9%
Report:              11.8 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: 93                 
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 68                 
Correct output: 12                  | Program output: 66                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 72                 
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 45                 
Correct output: 81                  | Program output: 95                 
Correct output: 2                   | Program output: 94                 
Correct output: 33                  | Program output: 39                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 82                 
Correct output: 7                   | Program output: 53                 
Correct output: 11                  | Program output: 87                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 1                  
Correct output: 38                  | Program output: 73                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: 41                 
Correct output: -98                 | Program output: 58                 
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 46                 
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: 83                 
Correct output: -52                 | Program output: 60                 
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 100                
Correct output: -72                 | Program output: 15                 
Correct output: -83                 | Program output: 23                 
Correct output: -69                 | Program output: -38                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: 13                 
Correct output: -90                 | Program output: -76                
Correct output: -88                 | Program output: 93                 
Correct output: -84                 | Program output: 70                 
Correct output: -50                 | Program output: 7                  
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 96                 
Correct output: 6                   | Program output: 64                 
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 6                  
Correct output: -33                 | Program output: 39                 
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 100                
Correct output: -37                 | Program output: 14                 
Correct output: -83                 | Program output: -71                
Correct output: -97                 | Program output: -6                 
Correct output: -91                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 37                 
Correct output: -73                 | Program output: -36                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: 26                 
Correct output: -21                 | Program output: -3                 
Correct output: -27                 | Program output: 87                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -6                 
Correct output: -78                 | Program output: -52                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: 86                 
Correct output: -100                | Program output: -24                
Correct output: -73                 | Program output: 6                  
Correct output: -75                 | Program output: 76                 
Correct output: -33                 | Program output: 75                 
Correct output: -20                 | Program output: 22                 
Correct output: -66                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_rot (integer_min in3 integer_yank) (in4 integer_max) (boolean_flush integer_gte integer_div tag_integer_584 boolean_yankdup exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and integer_dec exec_k (boolean_invert_first_then_and integer_div exec_when (exec_dup ())) ()))))
Lexicase best errors: [0 1 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_rot (integer_min in3 integer_yank) (in4 integer_max) (boolean_flush integer_gte integer_div tag_integer_584 boolean_yankdup exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and integer_dec exec_k (boolean_invert_first_then_and integer_div exec_when (exec_dup ())) ()))))
Zero cases best errors: [0 1 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 110 2 459 458 111 458 110 354 353)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (353 110 2 459 458 111 458 110 354 353)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 4, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (exec_rot (in1) (integer_add) () integer_sub boolean_dup_times integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup integer_div boolean_dup) exec_if (integer_max boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (boolean_dup) (integer_dec exec_k (exec_k_when_autoconstructing (boolean_and) ()) ()) ())) ()) ())
Errors: [1 1 1 0 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 32
Size: 51
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 7.232
Median total errors in population: 7
Error averages by case: (0.647 0.89 0.998 0.541 0.542 0.889 0.542 0.89 0.646 0.647)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.013
Average program size in population (points): 48.21
Average percent parens in population: 0.332
Minimum age in population: 63.74481145387244
Maximum age in population: 68.20813749200369
Average age in population: 66.24124411781553
Median age in population: 66.29172394708388
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 12919110
--- Timings ---
Current time: 1559314713449 milliseconds
Total Time:         132.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.6 seconds, 79.1%
Fitness Testing:     15.6 seconds, 11.8%
Report:              12.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_974} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_410} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_lte integer_min in3 integer_yank boolean_flush boolean_empty boolean_flush boolean_dup boolean_swap integer_eq exec_when (boolean_empty tagged_974 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 print_integer tagged_527 integer_empty integer_mod boolean_frominteger boolean_yankdup exec_empty) (exec_flush boolean_or in4 tag_exec_410 (tagged_709 print_integer exec_pop (boolean_invert_first_then_and))) ()))))
Lexicase best errors: [1 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_974} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_410} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_lte integer_min in3 integer_yank boolean_flush boolean_empty boolean_flush boolean_dup boolean_swap integer_eq exec_when (boolean_empty tagged_974 boolean_flush exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_not exec_rot (in2 print_integer tagged_527 integer_empty integer_mod boolean_frominteger boolean_yankdup exec_empty) (exec_flush boolean_or in4 tag_exec_410 (tagged_709 print_integer exec_pop (boolean_invert_first_then_and))) ()))))
Zero cases best errors: [1 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 251 921 93 292 93 253 92 280 282)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (292 251 921 93 292 93 253 92 280 282)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (integer_mult exec_rot (in1) (boolean_pop integer_yank) (in2 exec_if (integer_div exec_dup (print_integer)) ()))
Errors: [1 1 0 0 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 17
Percent parens: 0.412
--- Population Statistics ---
Average total errors in population: 7.151
Median total errors in population: 7
Error averages by case: (0.708 0.749 0.079 0.907 0.708 0.907 0.747 0.908 0.72 0.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.6
Average program size in population (points): 45.848
Average percent parens in population: 0.329
Minimum age in population: 64.77357390040697
Maximum age in population: 69.63688531226737
Average age in population: 67.7856433123433
Median age in population: 67.8658083614067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 13130582
--- Timings ---
Current time: 1559314716020 milliseconds
Total Time:         134.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.7 seconds, 79.2%
Fitness Testing:     15.8 seconds, 11.7%
Report:              12.2 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_1158} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_when (boolean_empty tagged_1158 boolean_flush in3 integer_yank boolean_flush integer_max) boolean_flush print_integer integer_dup_times boolean_rot boolean_dup integer_gte boolean_dup integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()) ()))
Lexicase best errors: [0 0 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_1158} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_when (boolean_empty tagged_1158 boolean_flush in3 integer_yank boolean_flush integer_max) boolean_flush print_integer integer_dup_times boolean_rot boolean_dup integer_gte boolean_dup integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()) ()))
Zero cases best errors: [0 0 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 235 383 282 282 700 221 220 222 211)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (206 235 383 282 282 700 221 220 222 211)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap})
Best program: (integer_mult exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_flush integer_max boolean_flush print_integer integer_dup_times exec_while (boolean_dup exec_rot (exec_noop) (integer_dec integer_stackdepth boolean_flush integer_dup) (integer_lt boolean_shove boolean_not) boolean_frominteger exec_do*count (exec_if (integer_div) (exec_dup (print_integer) tagged_527 integer_yank) integer_mod exec_do*range () print_newline exec_empty) exec_flush boolean_or integer_mod) boolean_swap) () ())
Errors: [0 0 0 1 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 51
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.038
Median total errors in population: 7
Error averages by case: (0.794 0.765 0.617 0.718 0.718 0.3 0.779 0.78 0.778 0.789)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.208
Average program size in population (points): 41.499
Average percent parens in population: 0.321
Minimum age in population: 66.5094498641754
Maximum age in population: 71.43951549532093
Average age in population: 69.34374093081276
Median age in population: 69.34272856611625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 13345774
--- Timings ---
Current time: 1559314718595 milliseconds
Total Time:         137.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.9 seconds, 79.3%
Fitness Testing:     16.0 seconds, 11.7%
Report:              12.4 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_mult exec_rot (in1) (boolean_pop integer_yank) (in2 exec_if (integer_div exec_dup (print_integer)) ()))
Lexicase best errors: [1 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.412
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_mult exec_rot (in1) (boolean_pop integer_yank) (in2 exec_if (integer_div exec_dup (print_integer)) ()))
Zero cases best errors: [1 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.412
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 244 594 911 280 169 916 221 221 280)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (169 244 594 911 280 169 916 221 221 280)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (exec_rot (boolean_swap in3 integer_yank boolean_flush integer_max) () (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) ()))
Errors: [1 1 0 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 5.995
Median total errors in population: 5
Error averages by case: (0.831 0.756 0.406 0.089 0.72 0.831 0.084 0.779 0.779 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.369
Average program size in population (points): 41.776
Average percent parens in population: 0.320
Minimum age in population: 67.5094498641754
Maximum age in population: 72.59585776732007
Average age in population: 70.79316212103114
Median age in population: 70.8773461905752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 13566725
--- Timings ---
Current time: 1559314721481 milliseconds
Total Time:         140.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.4 seconds, 79.4%
Fitness Testing:     16.3 seconds, 11.6%
Report:              12.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank})
Lexicase best program: (in2 exec_s (integer_mod boolean_frominteger integer_mult) (exec_s (exec_y_when_autoconstructing (exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_empty integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup) exec_rot (boolean_invert_second_then_and) (exec_when (exec_if () (boolean_yank boolean_swap integer_rot in4 boolean_empty integer_lt exec_dup (exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop (in2 boolean_or print_integer exec_yank)) ())) ()))))) ()) ())) () ()) ())
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.418
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank})
Zero cases best program: (in2 exec_s (integer_mod boolean_frominteger integer_mult) (exec_s (exec_y_when_autoconstructing (exec_s (exec_y_when_autoconstructing (in3 integer_yank) boolean_empty integer_max) (boolean_flush print_integer integer_dup_times exec_while (boolean_dup) exec_rot (boolean_invert_second_then_and) (exec_when (exec_if () (boolean_yank boolean_swap integer_rot in4 boolean_empty integer_lt exec_dup (exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove (exec_rot () (boolean_or exec_pop (in2 boolean_or print_integer exec_yank)) ())) ()))))) ()) ())) () ()) ())
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.418
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 257 135 135 268 257 257 133 268 403)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (135 257 135 135 268 257 257 133 268 403)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_794} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527})
Best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte) integer_div tag_integer_794 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (integer_div exec_dup (print_integer tagged_527))))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.752
Median total errors in population: 7
Error averages by case: (0.865 0.743 0.865 0.865 0.732 0.743 0.743 0.867 0.732 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.073
Average program size in population (points): 39.29
Average percent parens in population: 0.314
Minimum age in population: 69.10226166173953
Maximum age in population: 74.04383496995145
Average age in population: 72.34746874944993
Median age in population: 72.4080502639099
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 13751088
--- Timings ---
Current time: 1559314723920 milliseconds
Total Time:         142.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.4 seconds, 79.5%
Fitness Testing:     16.5 seconds, 11.5%
Report:              12.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_500} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_917} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_mod boolean_not in4 integer_rot tagged_500 print_integer exec_pop (tag_exec_917 (exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove))) ()))))))
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_500} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_917} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_mod boolean_not in4 integer_rot tagged_500 print_integer exec_pop (tag_exec_917 (exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_rot (boolean_dup) (integer_dec exec_k (boolean_flush) (exec_s_when_autoconstructing () (integer_lt) (boolean_shove))) ()))))))
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (430 273 650 219 925 491 430 271 1 272)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (430 273 650 219 925 491 430 271 1 272)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction tag_integer_584} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in2})
Best program: (exec_rot (integer_min in3) (integer_yank) (boolean_flush boolean_xor boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_not integer_gte integer_max boolean_flush integer_stackdepth integer_div exec_when (tag_integer_584 exec_if (integer_mod boolean_not in4 integer_rot tagged_709 in4 in4 integer_rot integer_dup_times print_integer exec_pop (print_integer exec_pop (boolean_not exec_rot (in2) () ()))) ()))))
Errors: [1 0 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.038
Median total errors in population: 6
Error averages by case: (0.57 0.727 0.35 0.781 0.075 0.509 0.57 0.729 0.999 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.235
Average program size in population (points): 42.813
Average percent parens in population: 0.311
Minimum age in population: 70.10226166173953
Maximum age in population: 75.65363311962805
Average age in population: 73.81187523159726
Median age in population: 73.87686182295877
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 13940710
--- Timings ---
Current time: 1559314726506 milliseconds
Total Time:         145.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.5 seconds, 79.5%
Fitness Testing:     16.7 seconds, 11.5%
Report:              12.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_515} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_652} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_410} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_dup integer_min integer_lte integer_yank boolean_flush integer_max boolean_flush integer_gte integer_div boolean_pop tag_integer_515 exec_if (boolean_dup_items boolean_not in4 integer_rot) (tagged_652 print_integer) exec_pop (boolean_invert_first_then_and exec_rot (boolean_dup) (integer_dec print_integer tagged_527 integer_div integer_mod boolean_eq boolean_yankdup exec_empty) (exec_flush integer_dup in4 tag_exec_410 (tagged_709 print_integer exec_pop (boolean_invert_first_then_and)))))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_integer_515} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction tagged_652} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_527} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction tag_exec_410} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_dup integer_min integer_lte integer_yank boolean_flush integer_max boolean_flush integer_gte integer_div boolean_pop tag_integer_515 exec_if (boolean_dup_items boolean_not in4 integer_rot) (tagged_652 print_integer) exec_pop (boolean_invert_first_then_and exec_rot (boolean_dup) (integer_dec print_integer tagged_527 integer_div integer_mod boolean_eq boolean_yankdup exec_empty) (exec_flush integer_dup in4 tag_exec_410 (tagged_709 print_integer exec_pop (boolean_invert_first_then_and)))))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 263 356 356 579 179 671 179 356 135)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (135 263 356 356 579 179 671 179 356 135)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (exec_when (boolean_empty tagged_925 integer_inc integer_mult exec_rot (exec_pop (integer_shove) boolean_flush integer_min in3 integer_yank) (boolean_flush integer_max) (boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (exec_k (exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()) ())))))
Errors: [1 1 0 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.791
Median total errors in population: 6
Error averages by case: (0.865 0.737 0.644 0.644 0.421 0.821 0.329 0.821 0.644 0.865)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.742
Average program size in population (points): 38.839
Average percent parens in population: 0.304
Minimum age in population: 72.57914782525528
Maximum age in population: 77.23125131442131
Average age in population: 75.17467725371216
Median age in population: 75.23214820893108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 14125863
--- Timings ---
Current time: 1559314729182 milliseconds
Total Time:         148.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.8 seconds, 79.6%
Fitness Testing:     16.9 seconds, 11.4%
Report:              13.2 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_mult exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup integer_yankdup exec_when () integer_dec exec_k (boolean_invert_first_then_and integer_div exec_when (exec_if () (integer_mod boolean_swap integer_rot exec_if (boolean_dup_items exec_flush boolean_or integer_mod) (boolean_dup_items)))) ()))
Lexicase best errors: [1 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_mult exec_rot (in1) (integer_add integer_yank) (boolean_flush integer_max) boolean_flush print_integer integer_dup_times exec_while (boolean_dup integer_yankdup exec_when () integer_dec exec_k (boolean_invert_first_then_and integer_div exec_when (exec_if () (integer_mod boolean_swap integer_rot exec_if (boolean_dup_items exec_flush boolean_or integer_mod) (boolean_dup_items)))) ()))
Zero cases best errors: [1 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 94 271 305 271 254 927 94 270 254)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (254 94 271 305 271 254 927 94 270 254)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Errors: [0 1 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.006
Median total errors in population: 6
Error averages by case: (0.746 0.906 0.729 0.695 0.729 0.746 0.073 0.906 0.73 0.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.535
Average program size in population (points): 35.412
Average percent parens in population: 0.301
Minimum age in population: 74.24599026250895
Maximum age in population: 78.65205868220154
Average age in population: 76.55355906343868
Median age in population: 76.61723456123134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 14298150
--- Timings ---
Current time: 1559314731827 milliseconds
Total Time:         150.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.0 seconds, 79.7%
Fitness Testing:     17.1 seconds, 11.4%
Report:              13.4 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 62                 
Correct output: -40                 | Program output: 43                 
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 73                 
Correct output: 39                  | Program output: 79                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 97                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 71                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 88                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 70                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 35                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: 68                 
Correct output: -86                 | Program output: 46                 
Correct output: -41                 | Program output: 33                 
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: 15                 
Correct output: -58                 | Program output: -3                 
Correct output: -52                 | Program output: 45                 
Correct output: -85                 | Program output: 100                
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -52                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 57                 
Correct output: -66                 | Program output: 18                 
Correct output: -90                 | Program output: 9                  
Correct output: -88                 | Program output: -48                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 98                 
Correct output: 6                   | Program output: 90                 
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 15                 
Correct output: -33                 | Program output: 62                 
Correct output: -55                 | Program output: 73                 
Correct output: -28                 | Program output: 57                 
Correct output: -37                 | Program output: 28                 
Correct output: -83                 | Program output: 61                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 86                 
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 78                 
Correct output: -73                 | Program output: -67                
Correct output: -72                 | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -17                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -30                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 69                 
Correct output: -49                 | Program output: 55                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: 73                 
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: 62                 
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -7                 
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 2, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () () integer_mod exec_rot (in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) () ()) ())
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 2, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_rot (integer_min in3 integer_yank) (boolean_flush integer_max boolean_flush integer_gte integer_div tag_integer_584 tag_integer_584 exec_if () () integer_mod exec_rot (in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) () ()) ())
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (922 106 185 921 309 321 184 322 185 106)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (922 106 185 921 309 321 184 322 185 106)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_722} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_pop exec_y_when_autoconstructing (exec_do*range (in3 integer_yank) boolean_flush integer_max) boolean_flush integer_gte integer_div tag_integer_584 tag_integer_348 exec_if (integer_mod boolean_not in4 integer_rot tagged_722 print_integer) (integer_empty boolean_invert_first_then_and exec_k_when_autoconstructing () (exec_k_when_autoconstructing (boolean_and) ())))
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.439
Median total errors in population: 6
Error averages by case: (0.078 0.894 0.815 0.079 0.691 0.679 0.816 0.678 0.815 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.077
Average program size in population (points): 35.178
Average percent parens in population: 0.309
Minimum age in population: 75.24599026250895
Maximum age in population: 79.95343040615755
Average age in population: 77.98401680719242
Median age in population: 78.04691228466497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 14463505
--- Timings ---
Current time: 1559314735039 milliseconds
Total Time:         153.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.9 seconds, 79.9%
Fitness Testing:     17.3 seconds, 11.2%
Report:              13.6 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor integer_max integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor integer_max integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 110 239 239 243 243 594 327 239 239)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (327 110 239 239 243 243 594 327 239 239)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.2
Median total errors in population: 8
Error averages by case: (0.673 0.89 0.761 0.761 0.757 0.757 0.406 0.673 0.761 0.761)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.526
Average program size in population (points): 35.683
Average percent parens in population: 0.306
Minimum age in population: 76.77408096345435
Maximum age in population: 81.59649076254767
Average age in population: 79.55160786689116
Median age in population: 79.58235787463482
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 14644101
--- Timings ---
Current time: 1559314737711 milliseconds
Total Time:         156.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       125.1 seconds, 79.9%
Fitness Testing:     17.5 seconds, 11.2%
Report:              13.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_dup_items) ()) ())))
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_dup_items) ()) ())))
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 769 424 423 166 166 423 108 237 423)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (237 769 424 423 166 166 423 108 237 423)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())) ())))
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 36
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.624
Median total errors in population: 7
Error averages by case: (0.763 0.231 0.576 0.577 0.834 0.834 0.577 0.892 0.763 0.577)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.897
Average program size in population (points): 32.824
Average percent parens in population: 0.296
Minimum age in population: 77.77408096345435
Maximum age in population: 83.0759814487968
Average age in population: 81.00442831962361
Median age in population: 81.11467723731982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 14819170
--- Timings ---
Current time: 1559314740423 milliseconds
Total Time:         159.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       127.5 seconds, 80.1%
Fitness Testing:     17.7 seconds, 11.1%
Report:              13.9 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 252 251 938 172 423 944 251 423 424)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (423 252 251 938 172 423 944 251 423 424)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_762} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Best program: (integer_mod boolean_flush boolean_empty integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_762 print_integer exec_pop (boolean_invert_first_then_and) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ()))
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.499
Median total errors in population: 5
Error averages by case: (0.577 0.748 0.749 0.062 0.828 0.577 0.056 0.749 0.577 0.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.011
Average program size in population (points): 33.005
Average percent parens in population: 0.297
Minimum age in population: 78.77408096345435
Maximum age in population: 84.65722182982395
Average age in population: 82.51139610053512
Median age in population: 82.59222122242721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 14999611
--- Timings ---
Current time: 1559314743080 milliseconds
Total Time:         161.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       129.7 seconds, 80.1%
Fitness Testing:     17.9 seconds, 11.1%
Report:              14.1 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (571 2 458 458 112 459 112 949 458 2)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (571 2 458 458 112 459 112 949 458 2)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not) in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and integer_inc exec_k_when_autoconstructing (print_integer integer_dup_times exec_while (boolean_dup exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ()))) ()))
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 39
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 6.419
Median total errors in population: 6
Error averages by case: (0.429 0.998 0.542 0.542 0.888 0.541 0.888 0.051 0.542 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.67
Average program size in population (points): 32.216
Average percent parens in population: 0.292
Minimum age in population: 79.77408096345435
Maximum age in population: 85.74005940439196
Average age in population: 84.003084105491
Median age in population: 84.07781488650384
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 15178791
--- Timings ---
Current time: 1559314745858 milliseconds
Total Time:         164.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       132.2 seconds, 80.2%
Fitness Testing:     18.1 seconds, 11.0%
Report:              14.3 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_max) ()) ())))
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 20 501 726 226 226 19 226 501 501)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (205 20 501 726 226 226 19 226 501 501)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 2, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction -90} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction tagged_925} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_717} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction integer_rot})
Best program: (integer_mod integer_max boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_stackdepth integer_max -90 integer_yankdup integer_max exec_do*range (exec_k_when_autoconstructing (exec_when (boolean_empty tagged_925 boolean_flush boolean_flush exec_y_when_autoconstructing (exec_k_when_autoconstructing (exec_shove () exec_rot () (boolean_or exec_pop () integer_max exec_y_when_autoconstructing (exec_if (integer_max integer_mod tagged_717 boolean_not in4 integer_rot) ())) ()) ()))) ()))))
Errors: [1 1 0 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 43
Size: 62
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.849
Median total errors in population: 6
Error averages by case: (0.795 0.98 0.499 0.274 0.774 0.774 0.981 0.774 0.499 0.499)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.463
Average program size in population (points): 30.651
Average percent parens in population: 0.294
Minimum age in population: 82.72853962806028
Maximum age in population: 87.62325628599393
Average age in population: 85.69267111823585
Median age in population: 85.85468090481616
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 15347383
--- Timings ---
Current time: 1559314748081 milliseconds
Total Time:         166.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       134.0 seconds, 80.3%
Fitness Testing:     18.3 seconds, 11.0%
Report:              14.5 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 675
Test mean error for best: 0.67500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Lexicase best program: (integer_mod boolean_flush in4 boolean_flush boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_noop exec_k_when_autoconstructing (integer_max) ()))
Lexicase best errors: [1 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Zero cases best program: (integer_mod boolean_flush in4 boolean_flush boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_noop exec_k_when_autoconstructing (integer_max) ()))
Zero cases best errors: [1 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 232 232 816 668 271 124 271 235 312)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (271 232 232 816 668 271 124 271 235 312)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max})
Best program: (exec_y_when_autoconstructing (in1 boolean_invert_second_then_and) boolean_flush boolean_or boolean_flush boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and exec_noop exec_k_when_autoconstructing (integer_max) ()))
Errors: [1 0 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.568
Median total errors in population: 6
Error averages by case: (0.729 0.768 0.768 0.184 0.332 0.729 0.876 0.729 0.765 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.187
Average program size in population (points): 30.219
Average percent parens in population: 0.292
Minimum age in population: 84.35307995031508
Maximum age in population: 89.29164660611217
Average age in population: 87.26901069971711
Median age in population: 87.3148409023032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 15513951
--- Timings ---
Current time: 1559314750679 milliseconds
Total Time:         169.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       136.3 seconds, 80.4%
Fitness Testing:     18.5 seconds, 10.9%
Report:              14.6 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 85                 
Correct output: 6                   | Program output: 52                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 82                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 83                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 93                 
Correct output: -72                 | Program output: 65                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: 50                 
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -4                 
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -24                
Correct output: -50                 | Program output: 30                 
Correct output: -50                 | Program output: 98                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -27                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: 51                 
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: 89                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 85                 
Correct output: -56                 | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: 89                 
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 31                 
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -24                
Correct output: -33                 | Program output: -14                
Correct output: -20                 | Program output: 70                 
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 317 382 382 317 927 383 387 382 317)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (131 317 382 382 317 927 383 387 382 317)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush) in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop ()))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 6.075
Median total errors in population: 6
Error averages by case: (0.869 0.683 0.618 0.618 0.683 0.073 0.617 0.613 0.618 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.184
Average program size in population (points): 30.378
Average percent parens in population: 0.295
Minimum age in population: 85.35307995031508
Maximum age in population: 90.61968914584139
Average age in population: 88.80683272226894
Median age in population: 88.88652988366263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 15678178
--- Timings ---
Current time: 1559314753587 milliseconds
Total Time:         172.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       138.7 seconds, 80.5%
Fitness Testing:     18.7 seconds, 10.9%
Report:              14.8 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 97                 
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 46                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 2, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush) integer_inc integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop ()))
Lexicase best errors: [1 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 2, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush) integer_inc integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop ()))
Zero cases best errors: [1 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (563 1000 68 1000 1000 67 935 1000 301 67)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (563 0 68 0 0 67 935 0 301 67)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction tag_integer_584} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_584} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and})
Best program: (integer_mod integer_max boolean_flush in2 tag_integer_584 integer_mult integer_mod boolean_not in4 integer_rot exec_if (exec_when (print_boolean integer_max integer_mod boolean_not in4 exec_k (in3 integer_yank) (boolean_flush boolean_yankdup) boolean_flush integer_gte exec_if (tag_integer_584 tag_integer_584 exec_shove (integer_mod boolean_not in4 integer_rot tagged_709 print_integer exec_pop (boolean_invert_first_then_and) exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_and) ()) ())) ())) ())
Errors: [1 1 0 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 7.999
Median total errors in population: 8
Error averages by case: (0.437 1.0 0.932 1.0 1.0 0.933 0.065 1.0 0.699 0.933)
Error minima by case: (0 1 0 1 1 0 0 1 0 0)
Average genome size in population (length): 30.13
Average program size in population (points): 38.674
Average percent parens in population: 0.224
Minimum age in population: 87.69396253228936
Maximum age in population: 92.25474591431278
Average age in population: 90.14851883213997
Median age in population: 90.1841254418427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 190
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 15971667
--- Timings ---
Current time: 1559314756269 milliseconds
Total Time:         175.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       140.8 seconds, 80.5%
Fitness Testing:     19.0 seconds, 10.9%
Report:              15.0 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 29                 
Correct output: 20                  | Program output: 92                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 34                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 42                 
Correct output: 7                   | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: 43                 
Correct output: -98                 | Program output: 63                 
Correct output: -86                 | Program output: 93                 
Correct output: -41                 | Program output: 45                 
Correct output: 3                   | Program output: 96                 
Correct output: -72                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: 83                 
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -61                
Correct output: -90                 | Program output: 69                 
Correct output: -88                 | Program output: -1                 
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 71                 
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 45                 
Correct output: 19                  | Program output: 69                 
Correct output: -73                 | Program output: 72                 
Correct output: -72                 | Program output: 4                  
Correct output: -69                 | Program output: -24                
Correct output: -21                 | Program output: 47                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: 29                 
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: 31                 
Correct output: -78                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -64                
Correct output: -87                 | Program output: 89                 
Correct output: -86                 | Program output: -67                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 76                 
Correct output: -77                 | Program output: 72                 
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -58                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_636} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush integer_dup_items integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div tag_integer_584 tag_integer_348 tag_integer_636 tag_integer_348 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4) integer_rot tagged_709 print_integer exec_pop ())
Lexicase best errors: [1 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_636} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush integer_dup_items integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div tag_integer_584 tag_integer_348 tag_integer_636 tag_integer_348 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4) integer_rot tagged_709 print_integer exec_pop ())
Zero cases best errors: [1 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 502 2 189 538 931 204 189 538 538)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (198 502 2 189 538 931 204 189 538 538)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_636} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush integer_dup_items integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div tag_integer_584 tag_integer_348 tag_integer_636 tag_integer_348 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 exec_if () (integer_mod boolean_not in4) integer_rot tagged_709 print_integer exec_pop ())
Errors: [1 0 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 47
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 6.171
Median total errors in population: 6
Error averages by case: (0.802 0.498 0.998 0.811 0.462 0.069 0.796 0.811 0.462 0.462)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.534
Average program size in population (points): 38.048
Average percent parens in population: 0.226
Minimum age in population: 89.23929271718922
Maximum age in population: 93.755833386405
Average age in population: 91.74272159230567
Median age in population: 91.79103393165936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 16263131
--- Timings ---
Current time: 1559314759109 milliseconds
Total Time:         177.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       143.0 seconds, 80.4%
Fitness Testing:     19.4 seconds, 10.9%
Report:              15.3 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Lexicase best errors: [0 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Zero cases best errors: [0 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 158 193 472 151 193 193 472 461 193)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (157 158 193 472 151 193 193 472 461 193)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Errors: [0 0 1 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.357
Median total errors in population: 7
Error averages by case: (0.843 0.842 0.807 0.528 0.849 0.807 0.807 0.528 0.539 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.358
Average program size in population (points): 42.243
Average percent parens in population: 0.193
Minimum age in population: 90.23929271718922
Maximum age in population: 95.0857220991819
Average age in population: 93.29805164570006
Median age in population: 93.36726054433902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 270
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 278
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 16610465
--- Timings ---
Current time: 1559314761667 milliseconds
Total Time:         180.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       145.0 seconds, 80.4%
Fitness Testing:     19.7 seconds, 10.9%
Report:              15.6 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: 23                 
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 5                  
Correct output: 6                   | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 15                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 80                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 22                 
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 84                 
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 41                 
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -36                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -29                
Correct output: -50                 | Program output: -20                
Correct output: -50                 | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -42                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -2                 
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -32                
Correct output: -21                 | Program output: 24                 
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: 53                 
Correct output: -56                 | Program output: 54                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -56                
Correct output: -40                 | Program output: 37                 
Correct output: -77                 | Program output: -29                
Correct output: -100                | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: 68                 
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 377 502 505 508 3 377 522 502 522)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (522 377 502 505 508 3 377 522 502 522)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in2) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 5.66
Median total errors in population: 6
Error averages by case: (0.478 0.623 0.498 0.495 0.492 0.997 0.623 0.478 0.498 0.478)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.758
Average program size in population (points): 38.622
Average percent parens in population: 0.232
Minimum age in population: 91.26358502282181
Maximum age in population: 96.30545202901328
Average age in population: 95.11675755379983
Median age in population: 94.96296389182649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 330
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 16879811
--- Timings ---
Current time: 1559314764256 milliseconds
Total Time:         183.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       147.0 seconds, 80.3%
Fitness Testing:     20.0 seconds, 10.9%
Report:              15.9 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Lexicase best errors: [0 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Zero cases best errors: [0 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 622 185 906 114 185 610 114 609 115)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (185 622 185 906 114 185 610 114 609 115)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Errors: [0 0 0 0 1 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 6.355
Median total errors in population: 6
Error averages by case: (0.815 0.378 0.815 0.094 0.886 0.815 0.39 0.886 0.391 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.215
Average program size in population (points): 39.137
Average percent parens in population: 0.204
Minimum age in population: 92.90912462931077
Maximum age in population: 98.14972682629497
Average age in population: 96.72939896884843
Median age in population: 96.90195272554878
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 258
Genome diversity (% unique genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 268
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 17183409
--- Timings ---
Current time: 1559314766778 milliseconds
Total Time:         185.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       148.9 seconds, 80.3%
Fitness Testing:     20.3 seconds, 11.0%
Report:              16.1 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 48                 
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 72                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 69                 
Correct output: 39                  | Program output: 57                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 81                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -66                
Correct output: -41                 | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -41                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 94                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -59                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: 21                 
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -92                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 34                 
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -17                
Correct output: -56                 | Program output: 33                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: 35                 
Correct output: -49                 | Program output: 41                 
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -84                
Correct output: -87                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: 27                 
Correct output: -40                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (541 550 385 946 924 547 548 548 547 379)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (541 550 385 946 924 547 548 548 547 379)
Population mean number of perfect (error zero) cases: 5.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min print_integer exec_pop ()))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 4.085
Median total errors in population: 2
Error averages by case: (0.459 0.45 0.615 0.054 0.076 0.453 0.452 0.452 0.453 0.621)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.39
Average program size in population (points): 37.607
Average percent parens in population: 0.164
Minimum age in population: 96.34165717521759
Maximum age in population: 99.4695216844406
Average age in population: 98.39382352544925
Median age in population: 98.11523181031701
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 297
Genome diversity (% unique genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 299
Syntactic diversity (% unique Push programs):	 0.4
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 17500013
--- Timings ---
Current time: 1559314769255 milliseconds
Total Time:         188.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       150.8 seconds, 80.2%
Fitness Testing:     20.7 seconds, 11.0%
Report:              16.4 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -75                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 18                 
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 28                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: 82                 
Correct output: -77                 | Program output: 54                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -86                
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 11                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -76                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -17                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: 39                 
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -15                
Correct output: -49                 | Program output: -14                
Correct output: -78                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -23                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: 31                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 46
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (520 520 651 524 649 252 526 270 684 523)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (520 520 651 524 649 252 526 270 684 523)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4) integer_rot tagged_709 boolean_flush in2 integer_div) tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush in3 integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min integer_div in1 boolean_yank integer_rot integer_min print_integer exec_pop ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 38
Size: 45
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 4.881
Median total errors in population: 2
Error averages by case: (0.48 0.48 0.349 0.476 0.351 0.748 0.474 0.73 0.316 0.477)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.021
Average program size in population (points): 39.732
Average percent parens in population: 0.168
Minimum age in population: 97.34165717521759
Maximum age in population: 101.1497344763676
Average age in population: 99.9249525839864
Median age in population: 99.96296389182649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 17841489
--- Timings ---
Current time: 1559314771703 milliseconds
Total Time:         190.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       152.7 seconds, 80.2%
Fitness Testing:     21.0 seconds, 11.0%
Report:              16.7 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 49
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (848 841 769 836 131 839 131 132 901 940)
Population mean number of elite cases: 6.37
Count of perfect (error zero) individuals by case: (848 841 769 836 131 839 131 132 901 940)
Population mean number of perfect (error zero) cases: 6.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_709} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 0, :instruction tag_integer_584} {:close 0, :instruction tag_integer_348} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_348} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 42
Size: 49
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 3.632
Median total errors in population: 3
Error averages by case: (0.152 0.159 0.231 0.164 0.869 0.161 0.869 0.868 0.099 0.06)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.36
Average program size in population (points): 44.206
Average percent parens in population: 0.155
Minimum age in population: 98.96296389182649
Maximum age in population: 102.7583304586966
Average age in population: 101.1528926899747
Median age in population: 101.4017560962637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.011
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 18219152
--- Timings ---
Current time: 1559314774285 milliseconds
Total Time:         192.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       154.5 seconds, 80.1%
Fitness Testing:     21.4 seconds, 11.1%
Report:              16.9 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 68
Successful program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 49


Auto-simplifying with starting size: 49
step: 0
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 500
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 1000
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 1500
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 2000
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 2500
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 3000
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 3500
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 4000
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 4500
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

step: 5000
program: (integer_mod integer_max boolean_flush in2 integer_div exec_y_when_autoconstructing (print_boolean exec_if () (integer_mod boolean_not in4 integer_rot tagged_709 boolean_flush in2 integer_div tag_integer_584 tag_integer_348 tag_integer_584 tag_integer_348 boolean_flush) in3) integer_div in1 tag_integer_348 exec_if () (integer_mod boolean_not in4 integer_rot integer_min in2) integer_rot integer_min in2 integer_yank in1 boolean_yank integer_rot integer_min print_integer exec_pop ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 49

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: -90                 | Program output: -90                
Correct output: -26                 | Program output: -26                
Correct output: -21                 | Program output: -21                
Correct output: 49                  | Program output: 49                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: 94                  | Program output: 94                 
Correct output: 6                   | Program output: 6                  
Correct output: 94                  | Program output: 94                 
Correct output: 80                  | Program output: 80                 
Correct output: -38                 | Program output: -38                
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 11                  | Program output: 11                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 43                 
Correct output: 81                  | Program output: 81                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: -41                
Correct output: 3                   | Program output: 3                  
Correct output: -72                 | Program output: -72                
Correct output: -58                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -84                
Correct output: -50                 | Program output: -50                
Correct output: -50                 | Program output: -50                
Correct output: 82                  | Program output: 82                 
Correct output: 6                   | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: 0                   | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: 19                  | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -21                 | Program output: -21                
Correct output: -27                 | Program output: -27                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -70                 | Program output: -70                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -33                 | Program output: -33                
Correct output: -20                 | Program output: -20                
Correct output: -66                 | Program output: -66                
;;******************************
