Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-26 -26 -26 30] -26] [[81 81 47 81] 47] [[-50 -50 -50 -30] -50] [[89 21 21 21] 21] [[-55 -23 -23 -23] -55] [[38 38 -70 38] -70] [[68 -84 68 68] -84] [[-34 96 96 96] -34] [[-70 -70 -70 -59] -70] [[66 63 66 66] 63] [(-3 -3 -3 -3) -3] [(28 28 28 28) 28] [(19 19 19 19) 19] [(-9 -9 -9 -9) -9] [(-96 -96 -96 -96) -96] [(84 93 77 11) 11] [(65 54 68 16) 16] [(56 22 3 58) 3] [(68 56 60 53) 53] [(47 6 17 54) 6] [(49 34 20 27) 20] [(74 20 26 21) 20] [(78 40 55 21) 21] [(21 88 7 5) 5] [(94 99 72 78) 72] [(1 96 60 94) 1] [(27 2 21 76) 2] [(49 38 14 34) 14] [(52 88 14 73) 14] [(72 78 43 15) 15] [(71 4 89 86) 4] [(91 88 44 42) 42] [(32 13 73 78) 13] [(44 63 54 29) 29] [(84 78 78 43) 43] [(0 -98 57 -47) -98] [(17 10 81 53) 10] [(-24 85 3 0) -24] [(-61 11 -67 -80) -80] [(55 93 -51 -5) -51] [(-14 51 71 -40) -40] [(-86 6 13 56) -86] [(73 98 -22 53) -22] [(64 -36 -95 -96) -96] [(96 -67 -50 38) -67] [(-16 -32 78 13) -32] [(63 34 80 -29) -29] [(-45 -80 65 39) -80] [(59 -27 -89 -24) -89] [(-61 30 -45 57) -61] [(-75 -6 -35 10) -75] [(-9 -65 -62 39) -65] [(36 -86 -53 -37) -86] [(-34 37 96 72) -34] [(35 -21 -86 -37) -86] [(47 18 80 33) 18] [(58 -54 -11 -17) -54] [(-73 43 -55 11) -73] [(32 35 -88 68) -88] [(18 78 -10 -14) -14] [(38 -47 -38 -3) -47] [(50 -79 -3 27) -79] [(-51 12 -70 34) -70] [(67 -64 33 90) -64] [(76 -42 -43 73) -43] [(-75 6 100 8) -75] [(61 -59 49 40) -59] [(16 51 -72 -75) -75] [(-48 64 -67 58) -67] [(1 -7 41 -59) -59] [(62 -73 33 -61) -73] [(-74 55 -1 6) -74] [(-56 22 12 -20) -56] [(-71 18 -41 25) -71] [(-88 -98 43 75) -98] [(-47 21 -39 39) -47] [(-75 -33 9 94) -75] [(-55 -91 -27 -2) -91] [(-24 25 13 14) -24] [(19 -15 82 71) -15] [(21 65 41 24) 21] [(17 -34 -69 -30) -69] [(-39 -59 4 -59) -59] [(-12 83 -65 -74) -74] [(-99 -65 70 74) -99] [(-57 -71 29 22) -71] [(-78 -30 52 81) -78] [(65 78 47 -17) -17] [(48 -70 -54 -50) -70] [(-52 73 -39 -61) -61] [(1 -55 24 24) -55] [(47 -71 93 -57) -71] [(-84 -98 68 5) -98] [(-59 -3 14 86) -59] [(48 -46 -12 -1) -46])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-26 -26 -26 30] -26]
Train Case:   6 | Input/Output: [[81 81 47 81] 47]
Train Case:   7 | Input/Output: [[-50 -50 -50 -30] -50]
Train Case:   8 | Input/Output: [[89 21 21 21] 21]
Train Case:   9 | Input/Output: [[-55 -23 -23 -23] -55]
Train Case:  10 | Input/Output: [[38 38 -70 38] -70]
Train Case:  11 | Input/Output: [[68 -84 68 68] -84]
Train Case:  12 | Input/Output: [[-34 96 96 96] -34]
Train Case:  13 | Input/Output: [[-70 -70 -70 -59] -70]
Train Case:  14 | Input/Output: [[66 63 66 66] 63]
Train Case:  15 | Input/Output: [(-3 -3 -3 -3) -3]
Train Case:  16 | Input/Output: [(28 28 28 28) 28]
Train Case:  17 | Input/Output: [(19 19 19 19) 19]
Train Case:  18 | Input/Output: [(-9 -9 -9 -9) -9]
Train Case:  19 | Input/Output: [(-96 -96 -96 -96) -96]
Train Case:  20 | Input/Output: [(84 93 77 11) 11]
Train Case:  21 | Input/Output: [(65 54 68 16) 16]
Train Case:  22 | Input/Output: [(56 22 3 58) 3]
Train Case:  23 | Input/Output: [(68 56 60 53) 53]
Train Case:  24 | Input/Output: [(47 6 17 54) 6]
Train Case:  25 | Input/Output: [(49 34 20 27) 20]
Train Case:  26 | Input/Output: [(74 20 26 21) 20]
Train Case:  27 | Input/Output: [(78 40 55 21) 21]
Train Case:  28 | Input/Output: [(21 88 7 5) 5]
Train Case:  29 | Input/Output: [(94 99 72 78) 72]
Train Case:  30 | Input/Output: [(1 96 60 94) 1]
Train Case:  31 | Input/Output: [(27 2 21 76) 2]
Train Case:  32 | Input/Output: [(49 38 14 34) 14]
Train Case:  33 | Input/Output: [(52 88 14 73) 14]
Train Case:  34 | Input/Output: [(72 78 43 15) 15]
Train Case:  35 | Input/Output: [(71 4 89 86) 4]
Train Case:  36 | Input/Output: [(91 88 44 42) 42]
Train Case:  37 | Input/Output: [(32 13 73 78) 13]
Train Case:  38 | Input/Output: [(44 63 54 29) 29]
Train Case:  39 | Input/Output: [(84 78 78 43) 43]
Train Case:  40 | Input/Output: [(0 -98 57 -47) -98]
Train Case:  41 | Input/Output: [(17 10 81 53) 10]
Train Case:  42 | Input/Output: [(-24 85 3 0) -24]
Train Case:  43 | Input/Output: [(-61 11 -67 -80) -80]
Train Case:  44 | Input/Output: [(55 93 -51 -5) -51]
Train Case:  45 | Input/Output: [(-14 51 71 -40) -40]
Train Case:  46 | Input/Output: [(-86 6 13 56) -86]
Train Case:  47 | Input/Output: [(73 98 -22 53) -22]
Train Case:  48 | Input/Output: [(64 -36 -95 -96) -96]
Train Case:  49 | Input/Output: [(96 -67 -50 38) -67]
Train Case:  50 | Input/Output: [(-16 -32 78 13) -32]
Train Case:  51 | Input/Output: [(63 34 80 -29) -29]
Train Case:  52 | Input/Output: [(-45 -80 65 39) -80]
Train Case:  53 | Input/Output: [(59 -27 -89 -24) -89]
Train Case:  54 | Input/Output: [(-61 30 -45 57) -61]
Train Case:  55 | Input/Output: [(-75 -6 -35 10) -75]
Train Case:  56 | Input/Output: [(-9 -65 -62 39) -65]
Train Case:  57 | Input/Output: [(36 -86 -53 -37) -86]
Train Case:  58 | Input/Output: [(-34 37 96 72) -34]
Train Case:  59 | Input/Output: [(35 -21 -86 -37) -86]
Train Case:  60 | Input/Output: [(47 18 80 33) 18]
Train Case:  61 | Input/Output: [(58 -54 -11 -17) -54]
Train Case:  62 | Input/Output: [(-73 43 -55 11) -73]
Train Case:  63 | Input/Output: [(32 35 -88 68) -88]
Train Case:  64 | Input/Output: [(18 78 -10 -14) -14]
Train Case:  65 | Input/Output: [(38 -47 -38 -3) -47]
Train Case:  66 | Input/Output: [(50 -79 -3 27) -79]
Train Case:  67 | Input/Output: [(-51 12 -70 34) -70]
Train Case:  68 | Input/Output: [(67 -64 33 90) -64]
Train Case:  69 | Input/Output: [(76 -42 -43 73) -43]
Train Case:  70 | Input/Output: [(-75 6 100 8) -75]
Train Case:  71 | Input/Output: [(61 -59 49 40) -59]
Train Case:  72 | Input/Output: [(16 51 -72 -75) -75]
Train Case:  73 | Input/Output: [(-48 64 -67 58) -67]
Train Case:  74 | Input/Output: [(1 -7 41 -59) -59]
Train Case:  75 | Input/Output: [(62 -73 33 -61) -73]
Train Case:  76 | Input/Output: [(-74 55 -1 6) -74]
Train Case:  77 | Input/Output: [(-56 22 12 -20) -56]
Train Case:  78 | Input/Output: [(-71 18 -41 25) -71]
Train Case:  79 | Input/Output: [(-88 -98 43 75) -98]
Train Case:  80 | Input/Output: [(-47 21 -39 39) -47]
Train Case:  81 | Input/Output: [(-75 -33 9 94) -75]
Train Case:  82 | Input/Output: [(-55 -91 -27 -2) -91]
Train Case:  83 | Input/Output: [(-24 25 13 14) -24]
Train Case:  84 | Input/Output: [(19 -15 82 71) -15]
Train Case:  85 | Input/Output: [(21 65 41 24) 21]
Train Case:  86 | Input/Output: [(17 -34 -69 -30) -69]
Train Case:  87 | Input/Output: [(-39 -59 4 -59) -59]
Train Case:  88 | Input/Output: [(-12 83 -65 -74) -74]
Train Case:  89 | Input/Output: [(-99 -65 70 74) -99]
Train Case:  90 | Input/Output: [(-57 -71 29 22) -71]
Train Case:  91 | Input/Output: [(-78 -30 52 81) -78]
Train Case:  92 | Input/Output: [(65 78 47 -17) -17]
Train Case:  93 | Input/Output: [(48 -70 -54 -50) -70]
Train Case:  94 | Input/Output: [(-52 73 -39 -61) -61]
Train Case:  95 | Input/Output: [(1 -55 24 24) -55]
Train Case:  96 | Input/Output: [(47 -71 93 -57) -71]
Train Case:  97 | Input/Output: [(-84 -98 68 5) -98]
Train Case:  98 | Input/Output: [(-59 -3 14 86) -59]
Train Case:  99 | Input/Output: [(48 -46 -12 -1) -46]
Test Case:   0 | Input/Output: [[-77 67 -77 -77] -77]
Test Case:   1 | Input/Output: [[-24 0 -24 -24] -24]
Test Case:   2 | Input/Output: [[12 93 93 93] 12]
Test Case:   3 | Input/Output: [[-80 98 98 98] -80]
Test Case:   4 | Input/Output: [[-63 -63 -100 -63] -100]
Test Case:   5 | Input/Output: [[90 90 -72 90] -72]
Test Case:   6 | Input/Output: [[37 37 37 70] 37]
Test Case:   7 | Input/Output: [[26 26 -21 26] -21]
Test Case:   8 | Input/Output: [[18 15 15 15] 15]
Test Case:   9 | Input/Output: [[79 7 7 7] 7]
Test Case:  10 | Input/Output: [[52 52 28 52] 28]
Test Case:  11 | Input/Output: [[66 24 24 24] 24]
Test Case:  12 | Input/Output: [[-92 -92 22 -92] -92]
Test Case:  13 | Input/Output: [[60 60 -71 60] -71]
Test Case:  14 | Input/Output: [[72 -90 -90 -90] -90]
Test Case:  15 | Input/Output: [[-60 -52 -52 -52] -60]
Test Case:  16 | Input/Output: [[-83 -22 -22 -22] -83]
Test Case:  17 | Input/Output: [[68 -46 -46 -46] -46]
Test Case:  18 | Input/Output: [[12 12 12 43] 12]
Test Case:  19 | Input/Output: [[-5 -14 -14 -14] -14]
Test Case:  20 | Input/Output: [[24 -48 -48 -48] -48]
Test Case:  21 | Input/Output: [[-61 -61 36 -61] -61]
Test Case:  22 | Input/Output: [[-80 -60 -60 -60] -80]
Test Case:  23 | Input/Output: [[-42 -42 -42 55] -42]
Test Case:  24 | Input/Output: [[89 15 15 15] 15]
Test Case:  25 | Input/Output: [[70 70 70 -54] -54]
Test Case:  26 | Input/Output: [[-35 -35 -35 -79] -79]
Test Case:  27 | Input/Output: [[62 62 34 62] 34]
Test Case:  28 | Input/Output: [[-14 -14 31 -14] -14]
Test Case:  29 | Input/Output: [[-39 -33 -39 -39] -39]
Test Case:  30 | Input/Output: [[90 90 90 -87] -87]
Test Case:  31 | Input/Output: [[14 23 14 14] 14]
Test Case:  32 | Input/Output: [[-41 -14 -41 -41] -41]
Test Case:  33 | Input/Output: [[-46 -27 -46 -46] -46]
Test Case:  34 | Input/Output: [[-26 -26 68 -26] -26]
Test Case:  35 | Input/Output: [[98 98 -71 98] -71]
Test Case:  36 | Input/Output: [[81 81 81 89] 81]
Test Case:  37 | Input/Output: [[-62 -62 -62 40] -62]
Test Case:  38 | Input/Output: [[70 70 70 25] 25]
Test Case:  39 | Input/Output: [[-50 -50 -50 -24] -50]
Test Case:  40 | Input/Output: [[-33 -33 -33 73] -33]
Test Case:  41 | Input/Output: [[75 60 75 75] 60]
Test Case:  42 | Input/Output: [[-70 -70 -47 -70] -70]
Test Case:  43 | Input/Output: [[-88 -88 -88 97] -88]
Test Case:  44 | Input/Output: [[-92 -92 -92 50] -92]
Test Case:  45 | Input/Output: [[-66 37 37 37] -66]
Test Case:  46 | Input/Output: [[-60 -60 -60 -22] -60]
Test Case:  47 | Input/Output: [[-88 -91 -91 -91] -91]
Test Case:  48 | Input/Output: [[52 52 100 52] 52]
Test Case:  49 | Input/Output: [[-80 24 -80 -80] -80]
Test Case:  50 | Input/Output: [[60 60 60 46] 46]
Test Case:  51 | Input/Output: [[8 8 -28 8] -28]
Test Case:  52 | Input/Output: [[92 92 -54 92] -54]
Test Case:  53 | Input/Output: [[80 -21 -21 -21] -21]
Test Case:  54 | Input/Output: [[-97 51 -97 -97] -97]
Test Case:  55 | Input/Output: [[-78 -27 -27 -27] -78]
Test Case:  56 | Input/Output: [[43 43 43 23] 23]
Test Case:  57 | Input/Output: [[68 68 68 -33] -33]
Test Case:  58 | Input/Output: [[20 54 20 20] 20]
Test Case:  59 | Input/Output: [[-85 -85 -85 55] -85]
Test Case:  60 | Input/Output: [[4 4 4 97] 4]
Test Case:  61 | Input/Output: [[41 41 41 23] 23]
Test Case:  62 | Input/Output: [[6 -67 6 6] -67]
Test Case:  63 | Input/Output: [[24 41 41 41] 24]
Test Case:  64 | Input/Output: [[81 -79 -79 -79] -79]
Test Case:  65 | Input/Output: [[-72 -72 71 -72] -72]
Test Case:  66 | Input/Output: [[-86 -86 61 -86] -86]
Test Case:  67 | Input/Output: [[-38 47 -38 -38] -38]
Test Case:  68 | Input/Output: [[92 92 67 92] 67]
Test Case:  69 | Input/Output: [[82 82 100 82] 82]
Test Case:  70 | Input/Output: [[-78 -11 -11 -11] -78]
Test Case:  71 | Input/Output: [[-57 -57 -57 -32] -57]
Test Case:  72 | Input/Output: [[59 31 59 59] 31]
Test Case:  73 | Input/Output: [[-52 -52 -52 -88] -88]
Test Case:  74 | Input/Output: [[-87 -71 -87 -87] -87]
Test Case:  75 | Input/Output: [[-37 -55 -55 -55] -55]
Test Case:  76 | Input/Output: [[-46 -46 -46 -7] -46]
Test Case:  77 | Input/Output: [[-30 -94 -30 -30] -94]
Test Case:  78 | Input/Output: [[16 29 29 29] 16]
Test Case:  79 | Input/Output: [[-39 -39 -39 26] -39]
Test Case:  80 | Input/Output: [[-46 94 94 94] -46]
Test Case:  81 | Input/Output: [[46 -8 46 46] -8]
Test Case:  82 | Input/Output: [[54 -94 54 54] -94]
Test Case:  83 | Input/Output: [[6 6 -36 6] -36]
Test Case:  84 | Input/Output: [[-5 -5 -5 33] -5]
Test Case:  85 | Input/Output: [[74 12 74 74] 12]
Test Case:  86 | Input/Output: [[-58 -58 -58 -2] -58]
Test Case:  87 | Input/Output: [[73 73 73 -23] -23]
Test Case:  88 | Input/Output: [[-99 -34 -34 -34] -99]
Test Case:  89 | Input/Output: [[-9 91 -9 -9] -9]
Test Case:  90 | Input/Output: [[-68 -44 -68 -68] -68]
Test Case:  91 | Input/Output: [[-56 -56 -69 -56] -69]
Test Case:  92 | Input/Output: [[98 98 -76 98] -76]
Test Case:  93 | Input/Output: [[-37 -37 50 -37] -37]
Test Case:  94 | Input/Output: [[61 61 42 61] 42]
Test Case:  95 | Input/Output: [[26 50 26 26] 26]
Test Case:  96 | Input/Output: [[92 94 94 94] 92]
Test Case:  97 | Input/Output: [[43 43 -58 43] -58]
Test Case:  98 | Input/Output: [[-44 -77 -77 -77] -77]
Test Case:  99 | Input/Output: [[31 -88 -88 -88] -88]
Test Case: 100 | Input/Output: [(41 41 41 41) 41]
Test Case: 101 | Input/Output: [(20 20 20 20) 20]
Test Case: 102 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 103 | Input/Output: [(80 80 80 80) 80]
Test Case: 104 | Input/Output: [(43 43 43 43) 43]
Test Case: 105 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 106 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 107 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 108 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 109 | Input/Output: [(2 2 2 2) 2]
Test Case: 110 | Input/Output: [(47 47 47 47) 47]
Test Case: 111 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 112 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 113 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 114 | Input/Output: [(22 22 22 22) 22]
Test Case: 115 | Input/Output: [(11 11 11 11) 11]
Test Case: 116 | Input/Output: [(28 28 28 28) 28]
Test Case: 117 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 118 | Input/Output: [(30 30 30 30) 30]
Test Case: 119 | Input/Output: [(15 15 15 15) 15]
Test Case: 120 | Input/Output: [(61 61 61 61) 61]
Test Case: 121 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 122 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 123 | Input/Output: [(29 29 29 29) 29]
Test Case: 124 | Input/Output: [(53 53 53 53) 53]
Test Case: 125 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 126 | Input/Output: [(5 5 5 5) 5]
Test Case: 127 | Input/Output: [(74 74 74 74) 74]
Test Case: 128 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 129 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 130 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 131 | Input/Output: [(33 33 33 33) 33]
Test Case: 132 | Input/Output: [(5 5 5 5) 5]
Test Case: 133 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 134 | Input/Output: [(93 93 93 93) 93]
Test Case: 135 | Input/Output: [(80 80 80 80) 80]
Test Case: 136 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 137 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 138 | Input/Output: [(95 95 95 95) 95]
Test Case: 139 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 140 | Input/Output: [(24 24 24 24) 24]
Test Case: 141 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 142 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 143 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 144 | Input/Output: [(78 78 78 78) 78]
Test Case: 145 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 146 | Input/Output: [(63 63 63 63) 63]
Test Case: 147 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 148 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 149 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 150 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 151 | Input/Output: [(26 26 26 26) 26]
Test Case: 152 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 153 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 154 | Input/Output: [(29 29 29 29) 29]
Test Case: 155 | Input/Output: [(85 85 85 85) 85]
Test Case: 156 | Input/Output: [(45 45 45 45) 45]
Test Case: 157 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 158 | Input/Output: [(17 17 17 17) 17]
Test Case: 159 | Input/Output: [(84 84 84 84) 84]
Test Case: 160 | Input/Output: [(78 78 78 78) 78]
Test Case: 161 | Input/Output: [(31 31 31 31) 31]
Test Case: 162 | Input/Output: [(51 51 51 51) 51]
Test Case: 163 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 164 | Input/Output: [(98 98 98 98) 98]
Test Case: 165 | Input/Output: [(32 32 32 32) 32]
Test Case: 166 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 167 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 168 | Input/Output: [(51 51 51 51) 51]
Test Case: 169 | Input/Output: [(66 66 66 66) 66]
Test Case: 170 | Input/Output: [(39 39 39 39) 39]
Test Case: 171 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 172 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 173 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 174 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 175 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 176 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 177 | Input/Output: [(37 37 37 37) 37]
Test Case: 178 | Input/Output: [(86 86 86 86) 86]
Test Case: 179 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 180 | Input/Output: [(77 77 77 77) 77]
Test Case: 181 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 182 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 183 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 184 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 185 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 186 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 187 | Input/Output: [(27 27 27 27) 27]
Test Case: 188 | Input/Output: [(61 61 61 61) 61]
Test Case: 189 | Input/Output: [(80 80 80 80) 80]
Test Case: 190 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 191 | Input/Output: [(98 98 98 98) 98]
Test Case: 192 | Input/Output: [(84 84 84 84) 84]
Test Case: 193 | Input/Output: [(35 35 35 35) 35]
Test Case: 194 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 195 | Input/Output: [(19 19 19 19) 19]
Test Case: 196 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 197 | Input/Output: [(50 50 50 50) 50]
Test Case: 198 | Input/Output: [(31 31 31 31) 31]
Test Case: 199 | Input/Output: [(85 85 85 85) 85]
Test Case: 200 | Input/Output: [(48 32 36 60) 32]
Test Case: 201 | Input/Output: [(87 35 22 50) 22]
Test Case: 202 | Input/Output: [(46 46 72 78) 46]
Test Case: 203 | Input/Output: [(87 49 25 81) 25]
Test Case: 204 | Input/Output: [(15 74 60 46) 15]
Test Case: 205 | Input/Output: [(33 94 92 76) 33]
Test Case: 206 | Input/Output: [(63 41 95 35) 35]
Test Case: 207 | Input/Output: [(100 68 3 100) 3]
Test Case: 208 | Input/Output: [(42 3 94 34) 3]
Test Case: 209 | Input/Output: [(33 8 33 24) 8]
Test Case: 210 | Input/Output: [(39 83 5 7) 5]
Test Case: 211 | Input/Output: [(23 21 76 59) 21]
Test Case: 212 | Input/Output: [(40 64 33 5) 5]
Test Case: 213 | Input/Output: [(61 53 52 52) 52]
Test Case: 214 | Input/Output: [(29 29 14 73) 14]
Test Case: 215 | Input/Output: [(45 77 50 45) 45]
Test Case: 216 | Input/Output: [(5 65 26 77) 5]
Test Case: 217 | Input/Output: [(80 11 14 51) 11]
Test Case: 218 | Input/Output: [(64 85 19 40) 19]
Test Case: 219 | Input/Output: [(94 75 74 88) 74]
Test Case: 220 | Input/Output: [(89 73 19 66) 19]
Test Case: 221 | Input/Output: [(77 63 25 83) 25]
Test Case: 222 | Input/Output: [(18 49 95 56) 18]
Test Case: 223 | Input/Output: [(70 11 79 23) 11]
Test Case: 224 | Input/Output: [(78 24 21 0) 0]
Test Case: 225 | Input/Output: [(59 18 4 6) 4]
Test Case: 226 | Input/Output: [(77 28 0 68) 0]
Test Case: 227 | Input/Output: [(56 49 22 79) 22]
Test Case: 228 | Input/Output: [(63 73 69 3) 3]
Test Case: 229 | Input/Output: [(87 67 97 35) 35]
Test Case: 230 | Input/Output: [(11 99 20 35) 11]
Test Case: 231 | Input/Output: [(98 33 20 5) 5]
Test Case: 232 | Input/Output: [(63 16 54 75) 16]
Test Case: 233 | Input/Output: [(60 36 4 67) 4]
Test Case: 234 | Input/Output: [(61 72 72 12) 12]
Test Case: 235 | Input/Output: [(47 96 52 26) 26]
Test Case: 236 | Input/Output: [(37 32 42 31) 31]
Test Case: 237 | Input/Output: [(46 74 81 9) 9]
Test Case: 238 | Input/Output: [(1 66 100 3) 1]
Test Case: 239 | Input/Output: [(12 36 71 30) 12]
Test Case: 240 | Input/Output: [(84 79 34 89) 34]
Test Case: 241 | Input/Output: [(60 7 90 32) 7]
Test Case: 242 | Input/Output: [(12 64 24 37) 12]
Test Case: 243 | Input/Output: [(15 56 47 22) 15]
Test Case: 244 | Input/Output: [(22 49 35 75) 22]
Test Case: 245 | Input/Output: [(3 3 6 56) 3]
Test Case: 246 | Input/Output: [(50 51 11 78) 11]
Test Case: 247 | Input/Output: [(3 55 0 69) 0]
Test Case: 248 | Input/Output: [(36 69 34 43) 34]
Test Case: 249 | Input/Output: [(84 83 3 79) 3]
Test Case: 250 | Input/Output: [(25 85 51 45) 25]
Test Case: 251 | Input/Output: [(31 65 13 87) 13]
Test Case: 252 | Input/Output: [(36 33 86 84) 33]
Test Case: 253 | Input/Output: [(33 24 79 62) 24]
Test Case: 254 | Input/Output: [(40 11 19 19) 11]
Test Case: 255 | Input/Output: [(95 32 0 42) 0]
Test Case: 256 | Input/Output: [(52 31 61 39) 31]
Test Case: 257 | Input/Output: [(100 39 23 6) 6]
Test Case: 258 | Input/Output: [(50 93 42 30) 30]
Test Case: 259 | Input/Output: [(66 59 36 18) 18]
Test Case: 260 | Input/Output: [(97 74 10 1) 1]
Test Case: 261 | Input/Output: [(68 45 82 4) 4]
Test Case: 262 | Input/Output: [(25 78 42 62) 25]
Test Case: 263 | Input/Output: [(81 13 15 64) 13]
Test Case: 264 | Input/Output: [(83 31 29 48) 29]
Test Case: 265 | Input/Output: [(21 49 41 33) 21]
Test Case: 266 | Input/Output: [(19 6 92 54) 6]
Test Case: 267 | Input/Output: [(7 94 61 46) 7]
Test Case: 268 | Input/Output: [(14 68 54 0) 0]
Test Case: 269 | Input/Output: [(67 56 34 92) 34]
Test Case: 270 | Input/Output: [(64 71 3 71) 3]
Test Case: 271 | Input/Output: [(100 2 30 23) 2]
Test Case: 272 | Input/Output: [(38 44 39 77) 38]
Test Case: 273 | Input/Output: [(62 64 39 64) 39]
Test Case: 274 | Input/Output: [(7 25 22 7) 7]
Test Case: 275 | Input/Output: [(52 83 84 61) 52]
Test Case: 276 | Input/Output: [(61 67 2 5) 2]
Test Case: 277 | Input/Output: [(36 1 87 29) 1]
Test Case: 278 | Input/Output: [(67 47 62 31) 31]
Test Case: 279 | Input/Output: [(27 81 71 22) 22]
Test Case: 280 | Input/Output: [(59 18 33 35) 18]
Test Case: 281 | Input/Output: [(42 40 0 11) 0]
Test Case: 282 | Input/Output: [(8 35 90 9) 8]
Test Case: 283 | Input/Output: [(49 86 77 31) 31]
Test Case: 284 | Input/Output: [(69 38 16 52) 16]
Test Case: 285 | Input/Output: [(66 10 64 94) 10]
Test Case: 286 | Input/Output: [(55 97 93 56) 55]
Test Case: 287 | Input/Output: [(1 70 78 88) 1]
Test Case: 288 | Input/Output: [(89 69 88 18) 18]
Test Case: 289 | Input/Output: [(66 0 85 24) 0]
Test Case: 290 | Input/Output: [(30 1 6 72) 1]
Test Case: 291 | Input/Output: [(29 82 80 30) 29]
Test Case: 292 | Input/Output: [(48 17 64 2) 2]
Test Case: 293 | Input/Output: [(0 55 93 43) 0]
Test Case: 294 | Input/Output: [(49 31 79 25) 25]
Test Case: 295 | Input/Output: [(22 38 79 90) 22]
Test Case: 296 | Input/Output: [(9 16 28 40) 9]
Test Case: 297 | Input/Output: [(27 12 65 6) 6]
Test Case: 298 | Input/Output: [(95 82 99 68) 68]
Test Case: 299 | Input/Output: [(75 24 0 59) 0]
Test Case: 300 | Input/Output: [(47 31 20 16) 16]
Test Case: 301 | Input/Output: [(13 26 58 89) 13]
Test Case: 302 | Input/Output: [(8 15 29 65) 8]
Test Case: 303 | Input/Output: [(31 90 32 77) 31]
Test Case: 304 | Input/Output: [(38 3 5 17) 3]
Test Case: 305 | Input/Output: [(50 60 45 17) 17]
Test Case: 306 | Input/Output: [(54 70 38 44) 38]
Test Case: 307 | Input/Output: [(38 91 41 48) 38]
Test Case: 308 | Input/Output: [(56 91 26 40) 26]
Test Case: 309 | Input/Output: [(37 63 24 0) 0]
Test Case: 310 | Input/Output: [(89 0 100 100) 0]
Test Case: 311 | Input/Output: [(66 21 52 3) 3]
Test Case: 312 | Input/Output: [(43 98 80 78) 43]
Test Case: 313 | Input/Output: [(7 18 67 46) 7]
Test Case: 314 | Input/Output: [(40 89 3 54) 3]
Test Case: 315 | Input/Output: [(5 40 2 94) 2]
Test Case: 316 | Input/Output: [(15 94 71 65) 15]
Test Case: 317 | Input/Output: [(88 63 11 33) 11]
Test Case: 318 | Input/Output: [(55 21 82 5) 5]
Test Case: 319 | Input/Output: [(27 85 76 67) 27]
Test Case: 320 | Input/Output: [(61 18 87 9) 9]
Test Case: 321 | Input/Output: [(90 50 56 64) 50]
Test Case: 322 | Input/Output: [(71 62 76 2) 2]
Test Case: 323 | Input/Output: [(12 56 84 96) 12]
Test Case: 324 | Input/Output: [(77 47 18 38) 18]
Test Case: 325 | Input/Output: [(81 22 85 59) 22]
Test Case: 326 | Input/Output: [(34 14 90 57) 14]
Test Case: 327 | Input/Output: [(39 98 32 61) 32]
Test Case: 328 | Input/Output: [(3 91 41 62) 3]
Test Case: 329 | Input/Output: [(40 22 32 90) 22]
Test Case: 330 | Input/Output: [(69 55 49 98) 49]
Test Case: 331 | Input/Output: [(23 71 77 73) 23]
Test Case: 332 | Input/Output: [(73 77 32 7) 7]
Test Case: 333 | Input/Output: [(86 23 3 51) 3]
Test Case: 334 | Input/Output: [(93 45 71 61) 45]
Test Case: 335 | Input/Output: [(62 84 63 84) 62]
Test Case: 336 | Input/Output: [(38 52 97 76) 38]
Test Case: 337 | Input/Output: [(61 35 68 100) 35]
Test Case: 338 | Input/Output: [(95 73 66 20) 20]
Test Case: 339 | Input/Output: [(28 77 97 65) 28]
Test Case: 340 | Input/Output: [(91 55 91 5) 5]
Test Case: 341 | Input/Output: [(47 68 83 75) 47]
Test Case: 342 | Input/Output: [(78 15 91 87) 15]
Test Case: 343 | Input/Output: [(28 57 45 13) 13]
Test Case: 344 | Input/Output: [(51 1 58 81) 1]
Test Case: 345 | Input/Output: [(79 85 58 75) 58]
Test Case: 346 | Input/Output: [(98 47 56 86) 47]
Test Case: 347 | Input/Output: [(66 26 79 82) 26]
Test Case: 348 | Input/Output: [(75 28 1 73) 1]
Test Case: 349 | Input/Output: [(10 62 98 4) 4]
Test Case: 350 | Input/Output: [(74 68 52 68) 52]
Test Case: 351 | Input/Output: [(27 5 23 95) 5]
Test Case: 352 | Input/Output: [(17 96 39 43) 17]
Test Case: 353 | Input/Output: [(55 51 44 14) 14]
Test Case: 354 | Input/Output: [(92 27 33 88) 27]
Test Case: 355 | Input/Output: [(78 19 32 90) 19]
Test Case: 356 | Input/Output: [(44 47 19 48) 19]
Test Case: 357 | Input/Output: [(13 63 84 67) 13]
Test Case: 358 | Input/Output: [(63 48 97 97) 48]
Test Case: 359 | Input/Output: [(72 39 32 82) 32]
Test Case: 360 | Input/Output: [(35 63 9 18) 9]
Test Case: 361 | Input/Output: [(94 54 3 74) 3]
Test Case: 362 | Input/Output: [(97 2 26 7) 2]
Test Case: 363 | Input/Output: [(33 76 95 56) 33]
Test Case: 364 | Input/Output: [(23 36 46 56) 23]
Test Case: 365 | Input/Output: [(4 24 38 58) 4]
Test Case: 366 | Input/Output: [(54 76 28 71) 28]
Test Case: 367 | Input/Output: [(40 100 72 10) 10]
Test Case: 368 | Input/Output: [(63 75 88 33) 33]
Test Case: 369 | Input/Output: [(16 74 14 16) 14]
Test Case: 370 | Input/Output: [(93 92 5 46) 5]
Test Case: 371 | Input/Output: [(18 0 6 85) 0]
Test Case: 372 | Input/Output: [(56 87 78 15) 15]
Test Case: 373 | Input/Output: [(83 76 41 95) 41]
Test Case: 374 | Input/Output: [(9 11 41 22) 9]
Test Case: 375 | Input/Output: [(43 11 12 64) 11]
Test Case: 376 | Input/Output: [(45 92 95 13) 13]
Test Case: 377 | Input/Output: [(98 33 37 51) 33]
Test Case: 378 | Input/Output: [(15 64 47 87) 15]
Test Case: 379 | Input/Output: [(7 12 83 55) 7]
Test Case: 380 | Input/Output: [(38 26 21 29) 21]
Test Case: 381 | Input/Output: [(81 95 92 51) 51]
Test Case: 382 | Input/Output: [(29 38 85 91) 29]
Test Case: 383 | Input/Output: [(4 9 98 25) 4]
Test Case: 384 | Input/Output: [(89 7 4 45) 4]
Test Case: 385 | Input/Output: [(36 63 85 49) 36]
Test Case: 386 | Input/Output: [(28 37 83 61) 28]
Test Case: 387 | Input/Output: [(75 93 18 90) 18]
Test Case: 388 | Input/Output: [(14 53 61 74) 14]
Test Case: 389 | Input/Output: [(7 74 2 88) 2]
Test Case: 390 | Input/Output: [(13 45 27 37) 13]
Test Case: 391 | Input/Output: [(11 15 68 6) 6]
Test Case: 392 | Input/Output: [(45 32 75 84) 32]
Test Case: 393 | Input/Output: [(24 11 3 44) 3]
Test Case: 394 | Input/Output: [(13 92 18 14) 13]
Test Case: 395 | Input/Output: [(70 18 19 69) 18]
Test Case: 396 | Input/Output: [(48 49 16 18) 16]
Test Case: 397 | Input/Output: [(57 82 8 2) 2]
Test Case: 398 | Input/Output: [(77 77 90 37) 37]
Test Case: 399 | Input/Output: [(12 55 25 23) 12]
Test Case: 400 | Input/Output: [(-45 61 61 60) -45]
Test Case: 401 | Input/Output: [(-30 -19 -44 -54) -54]
Test Case: 402 | Input/Output: [(-85 -5 32 96) -85]
Test Case: 403 | Input/Output: [(-23 -23 -49 -62) -62]
Test Case: 404 | Input/Output: [(-19 -62 72 57) -62]
Test Case: 405 | Input/Output: [(68 -96 -35 -60) -96]
Test Case: 406 | Input/Output: [(93 -68 -85 91) -85]
Test Case: 407 | Input/Output: [(-14 -25 -72 -90) -90]
Test Case: 408 | Input/Output: [(99 31 80 73) 31]
Test Case: 409 | Input/Output: [(77 -37 75 72) -37]
Test Case: 410 | Input/Output: [(-53 72 -71 -78) -78]
Test Case: 411 | Input/Output: [(98 23 -29 -9) -29]
Test Case: 412 | Input/Output: [(-53 70 45 -38) -53]
Test Case: 413 | Input/Output: [(26 -91 12 -43) -91]
Test Case: 414 | Input/Output: [(-44 5 97 -78) -78]
Test Case: 415 | Input/Output: [(-58 -3 -2 -65) -65]
Test Case: 416 | Input/Output: [(7 -53 25 63) -53]
Test Case: 417 | Input/Output: [(71 46 -5 -40) -40]
Test Case: 418 | Input/Output: [(-66 8 -65 6) -66]
Test Case: 419 | Input/Output: [(-100 -69 -4 -87) -100]
Test Case: 420 | Input/Output: [(2 17 -45 53) -45]
Test Case: 421 | Input/Output: [(-52 93 24 -84) -84]
Test Case: 422 | Input/Output: [(-59 91 -31 3) -59]
Test Case: 423 | Input/Output: [(-2 67 17 11) -2]
Test Case: 424 | Input/Output: [(-45 99 -77 -93) -93]
Test Case: 425 | Input/Output: [(-43 50 30 -57) -57]
Test Case: 426 | Input/Output: [(27 -66 -26 -67) -67]
Test Case: 427 | Input/Output: [(-84 -4 -17 -23) -84]
Test Case: 428 | Input/Output: [(7 -47 -94 -76) -94]
Test Case: 429 | Input/Output: [(-57 59 -93 81) -93]
Test Case: 430 | Input/Output: [(-11 -4 -33 96) -33]
Test Case: 431 | Input/Output: [(-85 -76 92 37) -85]
Test Case: 432 | Input/Output: [(8 62 -58 12) -58]
Test Case: 433 | Input/Output: [(49 -90 85 0) -90]
Test Case: 434 | Input/Output: [(-48 96 98 -57) -57]
Test Case: 435 | Input/Output: [(94 46 26 54) 26]
Test Case: 436 | Input/Output: [(48 4 98 -56) -56]
Test Case: 437 | Input/Output: [(78 64 52 57) 52]
Test Case: 438 | Input/Output: [(25 -91 7 -37) -91]
Test Case: 439 | Input/Output: [(-91 -8 77 4) -91]
Test Case: 440 | Input/Output: [(19 -99 -47 21) -99]
Test Case: 441 | Input/Output: [(-46 -93 29 -92) -93]
Test Case: 442 | Input/Output: [(-25 -32 17 -97) -97]
Test Case: 443 | Input/Output: [(-2 -84 -63 -16) -84]
Test Case: 444 | Input/Output: [(28 84 5 -28) -28]
Test Case: 445 | Input/Output: [(71 -33 -58 67) -58]
Test Case: 446 | Input/Output: [(1 -16 10 -96) -96]
Test Case: 447 | Input/Output: [(65 -34 88 -64) -64]
Test Case: 448 | Input/Output: [(-74 58 -99 96) -99]
Test Case: 449 | Input/Output: [(-5 17 59 23) -5]
Test Case: 450 | Input/Output: [(93 -94 13 -61) -94]
Test Case: 451 | Input/Output: [(-14 -76 47 -18) -76]
Test Case: 452 | Input/Output: [(-55 -87 48 21) -87]
Test Case: 453 | Input/Output: [(-10 -28 95 86) -28]
Test Case: 454 | Input/Output: [(-76 49 88 17) -76]
Test Case: 455 | Input/Output: [(79 -86 73 -36) -86]
Test Case: 456 | Input/Output: [(30 -93 8 -77) -93]
Test Case: 457 | Input/Output: [(-72 -32 39 25) -72]
Test Case: 458 | Input/Output: [(40 -30 -88 36) -88]
Test Case: 459 | Input/Output: [(-49 33 -14 54) -49]
Test Case: 460 | Input/Output: [(-26 0 47 42) -26]
Test Case: 461 | Input/Output: [(92 3 -36 69) -36]
Test Case: 462 | Input/Output: [(-42 100 96 -25) -42]
Test Case: 463 | Input/Output: [(-83 77 -14 -13) -83]
Test Case: 464 | Input/Output: [(-99 76 84 -43) -99]
Test Case: 465 | Input/Output: [(-30 34 -40 -68) -68]
Test Case: 466 | Input/Output: [(4 2 -28 73) -28]
Test Case: 467 | Input/Output: [(-49 89 -11 36) -49]
Test Case: 468 | Input/Output: [(6 87 -29 -80) -80]
Test Case: 469 | Input/Output: [(75 83 -2 -45) -45]
Test Case: 470 | Input/Output: [(-73 -12 -96 74) -96]
Test Case: 471 | Input/Output: [(3 -81 -36 -41) -81]
Test Case: 472 | Input/Output: [(-63 40 7 43) -63]
Test Case: 473 | Input/Output: [(-53 -86 83 -92) -92]
Test Case: 474 | Input/Output: [(92 -82 -84 78) -84]
Test Case: 475 | Input/Output: [(-62 -30 -26 70) -62]
Test Case: 476 | Input/Output: [(40 -17 -79 43) -79]
Test Case: 477 | Input/Output: [(20 51 29 36) 20]
Test Case: 478 | Input/Output: [(-87 75 -24 84) -87]
Test Case: 479 | Input/Output: [(-3 88 97 -28) -28]
Test Case: 480 | Input/Output: [(69 -96 55 -69) -96]
Test Case: 481 | Input/Output: [(-16 -44 78 72) -44]
Test Case: 482 | Input/Output: [(36 -62 59 46) -62]
Test Case: 483 | Input/Output: [(89 38 46 32) 32]
Test Case: 484 | Input/Output: [(16 26 43 -70) -70]
Test Case: 485 | Input/Output: [(-41 -67 -9 -10) -67]
Test Case: 486 | Input/Output: [(4 -56 57 18) -56]
Test Case: 487 | Input/Output: [(-86 82 -78 -65) -86]
Test Case: 488 | Input/Output: [(-64 71 7 -41) -64]
Test Case: 489 | Input/Output: [(-7 -97 -3 63) -97]
Test Case: 490 | Input/Output: [(-60 -63 79 -89) -89]
Test Case: 491 | Input/Output: [(43 -39 80 -47) -47]
Test Case: 492 | Input/Output: [(92 -58 -65 94) -65]
Test Case: 493 | Input/Output: [(-30 25 18 -31) -31]
Test Case: 494 | Input/Output: [(-43 50 -18 25) -43]
Test Case: 495 | Input/Output: [(97 79 -97 5) -97]
Test Case: 496 | Input/Output: [(-94 19 14 68) -94]
Test Case: 497 | Input/Output: [(-68 -63 47 93) -68]
Test Case: 498 | Input/Output: [(-12 25 2 -85) -85]
Test Case: 499 | Input/Output: [(-61 73 29 92) -61]
Test Case: 500 | Input/Output: [(-95 -67 87 -27) -95]
Test Case: 501 | Input/Output: [(-47 -47 -77 67) -77]
Test Case: 502 | Input/Output: [(-18 14 67 -10) -18]
Test Case: 503 | Input/Output: [(-22 23 -37 86) -37]
Test Case: 504 | Input/Output: [(4 -80 47 0) -80]
Test Case: 505 | Input/Output: [(63 -36 -32 -62) -62]
Test Case: 506 | Input/Output: [(-69 -8 94 32) -69]
Test Case: 507 | Input/Output: [(-77 12 46 -82) -82]
Test Case: 508 | Input/Output: [(55 -68 94 31) -68]
Test Case: 509 | Input/Output: [(-11 1 23 42) -11]
Test Case: 510 | Input/Output: [(56 -85 79 52) -85]
Test Case: 511 | Input/Output: [(-13 75 -38 -7) -38]
Test Case: 512 | Input/Output: [(57 50 -78 52) -78]
Test Case: 513 | Input/Output: [(-48 -29 -58 -45) -58]
Test Case: 514 | Input/Output: [(-29 65 -79 67) -79]
Test Case: 515 | Input/Output: [(-18 -20 33 -51) -51]
Test Case: 516 | Input/Output: [(-19 45 56 -12) -19]
Test Case: 517 | Input/Output: [(4 -40 -15 49) -40]
Test Case: 518 | Input/Output: [(-64 -81 -88 -65) -88]
Test Case: 519 | Input/Output: [(75 34 -7 66) -7]
Test Case: 520 | Input/Output: [(11 -1 -38 -25) -38]
Test Case: 521 | Input/Output: [(7 10 18 -100) -100]
Test Case: 522 | Input/Output: [(-17 -50 25 22) -50]
Test Case: 523 | Input/Output: [(-2 10 -65 49) -65]
Test Case: 524 | Input/Output: [(86 3 -94 15) -94]
Test Case: 525 | Input/Output: [(19 76 -76 65) -76]
Test Case: 526 | Input/Output: [(-34 -88 -77 -15) -88]
Test Case: 527 | Input/Output: [(7 66 75 38) 7]
Test Case: 528 | Input/Output: [(-52 -82 -73 -80) -82]
Test Case: 529 | Input/Output: [(71 11 38 -52) -52]
Test Case: 530 | Input/Output: [(-47 -45 -76 -44) -76]
Test Case: 531 | Input/Output: [(-44 71 58 -54) -54]
Test Case: 532 | Input/Output: [(-27 -42 -67 -57) -67]
Test Case: 533 | Input/Output: [(59 66 75 37) 37]
Test Case: 534 | Input/Output: [(10 -33 73 55) -33]
Test Case: 535 | Input/Output: [(73 46 49 -92) -92]
Test Case: 536 | Input/Output: [(-36 33 -19 15) -36]
Test Case: 537 | Input/Output: [(-81 -5 -91 -30) -91]
Test Case: 538 | Input/Output: [(83 -97 -68 -33) -97]
Test Case: 539 | Input/Output: [(48 -90 -56 77) -90]
Test Case: 540 | Input/Output: [(-13 -49 26 18) -49]
Test Case: 541 | Input/Output: [(81 -59 95 31) -59]
Test Case: 542 | Input/Output: [(19 -99 87 -35) -99]
Test Case: 543 | Input/Output: [(-2 -64 -57 -86) -86]
Test Case: 544 | Input/Output: [(42 -84 95 78) -84]
Test Case: 545 | Input/Output: [(15 42 26 72) 15]
Test Case: 546 | Input/Output: [(-9 20 -3 -24) -24]
Test Case: 547 | Input/Output: [(-12 -70 63 58) -70]
Test Case: 548 | Input/Output: [(-98 80 49 -15) -98]
Test Case: 549 | Input/Output: [(31 85 2 -41) -41]
Test Case: 550 | Input/Output: [(-53 95 -89 39) -89]
Test Case: 551 | Input/Output: [(22 -34 -9 98) -34]
Test Case: 552 | Input/Output: [(33 77 -43 -40) -43]
Test Case: 553 | Input/Output: [(82 -50 -91 94) -91]
Test Case: 554 | Input/Output: [(23 -8 -72 -84) -84]
Test Case: 555 | Input/Output: [(-95 -52 67 -9) -95]
Test Case: 556 | Input/Output: [(-90 -2 -29 -15) -90]
Test Case: 557 | Input/Output: [(10 63 -40 75) -40]
Test Case: 558 | Input/Output: [(-83 -38 -27 79) -83]
Test Case: 559 | Input/Output: [(18 -80 -3 -96) -96]
Test Case: 560 | Input/Output: [(-93 21 31 58) -93]
Test Case: 561 | Input/Output: [(-33 32 83 -9) -33]
Test Case: 562 | Input/Output: [(-3 97 44 60) -3]
Test Case: 563 | Input/Output: [(24 -93 34 -1) -93]
Test Case: 564 | Input/Output: [(34 -19 -41 -84) -84]
Test Case: 565 | Input/Output: [(-71 59 13 52) -71]
Test Case: 566 | Input/Output: [(-76 -14 -61 -76) -76]
Test Case: 567 | Input/Output: [(3 -48 -82 -9) -82]
Test Case: 568 | Input/Output: [(-7 -80 -85 -88) -88]
Test Case: 569 | Input/Output: [(-66 98 -58 45) -66]
Test Case: 570 | Input/Output: [(-96 52 66 -47) -96]
Test Case: 571 | Input/Output: [(67 -33 5 7) -33]
Test Case: 572 | Input/Output: [(-52 -40 -39 47) -52]
Test Case: 573 | Input/Output: [(-81 78 46 32) -81]
Test Case: 574 | Input/Output: [(57 87 -15 39) -15]
Test Case: 575 | Input/Output: [(50 20 11 64) 11]
Test Case: 576 | Input/Output: [(-56 -32 -75 -14) -75]
Test Case: 577 | Input/Output: [(38 -59 -2 67) -59]
Test Case: 578 | Input/Output: [(-57 -15 40 30) -57]
Test Case: 579 | Input/Output: [(-90 54 -90 12) -90]
Test Case: 580 | Input/Output: [(36 46 18 38) 18]
Test Case: 581 | Input/Output: [(-21 -76 -100 94) -100]
Test Case: 582 | Input/Output: [(-95 -78 -94 53) -95]
Test Case: 583 | Input/Output: [(-73 -94 -99 53) -99]
Test Case: 584 | Input/Output: [(-71 68 -23 -60) -71]
Test Case: 585 | Input/Output: [(-38 92 86 -84) -84]
Test Case: 586 | Input/Output: [(80 -14 -33 94) -33]
Test Case: 587 | Input/Output: [(65 -77 11 -13) -77]
Test Case: 588 | Input/Output: [(86 2 23 22) 2]
Test Case: 589 | Input/Output: [(50 56 27 67) 27]
Test Case: 590 | Input/Output: [(-9 45 -29 27) -29]
Test Case: 591 | Input/Output: [(73 -46 -37 36) -46]
Test Case: 592 | Input/Output: [(-71 -8 -31 -85) -85]
Test Case: 593 | Input/Output: [(-27 79 -85 -50) -85]
Test Case: 594 | Input/Output: [(-6 58 -56 89) -56]
Test Case: 595 | Input/Output: [(-2 18 -7 -6) -7]
Test Case: 596 | Input/Output: [(-72 19 18 36) -72]
Test Case: 597 | Input/Output: [(90 42 -77 -84) -84]
Test Case: 598 | Input/Output: [(38 -24 -72 -94) -94]
Test Case: 599 | Input/Output: [(-13 -61 -77 -18) -77]
Test Case: 600 | Input/Output: [(72 61 42 74) 42]
Test Case: 601 | Input/Output: [(-54 33 -18 -10) -54]
Test Case: 602 | Input/Output: [(-34 -58 -33 2) -58]
Test Case: 603 | Input/Output: [(83 99 59 59) 59]
Test Case: 604 | Input/Output: [(-70 -67 -97 59) -97]
Test Case: 605 | Input/Output: [(-29 3 -73 32) -73]
Test Case: 606 | Input/Output: [(-77 51 -9 5) -77]
Test Case: 607 | Input/Output: [(-51 78 -54 55) -54]
Test Case: 608 | Input/Output: [(75 99 70 67) 67]
Test Case: 609 | Input/Output: [(32 -73 -59 73) -73]
Test Case: 610 | Input/Output: [(3 68 3 -39) -39]
Test Case: 611 | Input/Output: [(27 57 -74 -73) -74]
Test Case: 612 | Input/Output: [(19 13 34 -60) -60]
Test Case: 613 | Input/Output: [(-59 4 46 16) -59]
Test Case: 614 | Input/Output: [(-35 -33 -84 73) -84]
Test Case: 615 | Input/Output: [(-69 13 74 -21) -69]
Test Case: 616 | Input/Output: [(-57 -5 54 12) -57]
Test Case: 617 | Input/Output: [(9 63 25 -67) -67]
Test Case: 618 | Input/Output: [(-29 -4 10 -24) -29]
Test Case: 619 | Input/Output: [(82 93 -70 61) -70]
Test Case: 620 | Input/Output: [(100 91 -100 26) -100]
Test Case: 621 | Input/Output: [(66 29 -32 98) -32]
Test Case: 622 | Input/Output: [(-64 -67 -44 -74) -74]
Test Case: 623 | Input/Output: [(-10 -92 69 -38) -92]
Test Case: 624 | Input/Output: [(-77 -17 -70 -88) -88]
Test Case: 625 | Input/Output: [(63 -29 -40 -30) -40]
Test Case: 626 | Input/Output: [(59 -3 33 -4) -4]
Test Case: 627 | Input/Output: [(65 94 84 19) 19]
Test Case: 628 | Input/Output: [(65 67 74 -87) -87]
Test Case: 629 | Input/Output: [(-4 -11 36 42) -11]
Test Case: 630 | Input/Output: [(-93 72 50 57) -93]
Test Case: 631 | Input/Output: [(-34 27 25 66) -34]
Test Case: 632 | Input/Output: [(-73 -54 98 60) -73]
Test Case: 633 | Input/Output: [(-50 -30 -92 -87) -92]
Test Case: 634 | Input/Output: [(61 21 11 96) 11]
Test Case: 635 | Input/Output: [(-86 -88 -48 -95) -95]
Test Case: 636 | Input/Output: [(49 -11 49 37) -11]
Test Case: 637 | Input/Output: [(-69 -52 68 -41) -69]
Test Case: 638 | Input/Output: [(-6 -37 33 65) -37]
Test Case: 639 | Input/Output: [(-13 21 -86 63) -86]
Test Case: 640 | Input/Output: [(-90 60 -7 -21) -90]
Test Case: 641 | Input/Output: [(13 -86 63 100) -86]
Test Case: 642 | Input/Output: [(16 72 -32 60) -32]
Test Case: 643 | Input/Output: [(-58 25 -39 -92) -92]
Test Case: 644 | Input/Output: [(-99 71 63 -3) -99]
Test Case: 645 | Input/Output: [(95 79 38 -57) -57]
Test Case: 646 | Input/Output: [(9 52 84 66) 9]
Test Case: 647 | Input/Output: [(79 -39 -93 16) -93]
Test Case: 648 | Input/Output: [(-81 -61 -25 -81) -81]
Test Case: 649 | Input/Output: [(-82 5 -95 -85) -95]
Test Case: 650 | Input/Output: [(59 95 27 -90) -90]
Test Case: 651 | Input/Output: [(-36 66 1 -49) -49]
Test Case: 652 | Input/Output: [(-93 -5 47 -50) -93]
Test Case: 653 | Input/Output: [(-28 20 -65 -58) -65]
Test Case: 654 | Input/Output: [(-1 -29 62 61) -29]
Test Case: 655 | Input/Output: [(73 64 51 25) 25]
Test Case: 656 | Input/Output: [(98 99 -69 -85) -85]
Test Case: 657 | Input/Output: [(91 -81 46 -34) -81]
Test Case: 658 | Input/Output: [(63 3 66 60) 3]
Test Case: 659 | Input/Output: [(-100 82 62 1) -100]
Test Case: 660 | Input/Output: [(56 -50 -3 98) -50]
Test Case: 661 | Input/Output: [(-34 30 73 10) -34]
Test Case: 662 | Input/Output: [(53 69 -21 -65) -65]
Test Case: 663 | Input/Output: [(29 95 -7 16) -7]
Test Case: 664 | Input/Output: [(44 -81 -81 70) -81]
Test Case: 665 | Input/Output: [(-17 76 77 -69) -69]
Test Case: 666 | Input/Output: [(31 -68 93 -94) -94]
Test Case: 667 | Input/Output: [(59 82 -98 -92) -98]
Test Case: 668 | Input/Output: [(70 -23 -47 33) -47]
Test Case: 669 | Input/Output: [(44 -52 -40 -56) -56]
Test Case: 670 | Input/Output: [(-75 99 9 -67) -75]
Test Case: 671 | Input/Output: [(-15 -39 15 -93) -93]
Test Case: 672 | Input/Output: [(67 -24 -79 -5) -79]
Test Case: 673 | Input/Output: [(97 82 -54 0) -54]
Test Case: 674 | Input/Output: [(-64 10 -40 -54) -64]
Test Case: 675 | Input/Output: [(54 -53 -81 -46) -81]
Test Case: 676 | Input/Output: [(88 -43 54 -76) -76]
Test Case: 677 | Input/Output: [(-45 52 -42 33) -45]
Test Case: 678 | Input/Output: [(91 -26 92 43) -26]
Test Case: 679 | Input/Output: [(51 1 31 80) 1]
Test Case: 680 | Input/Output: [(37 -13 58 83) -13]
Test Case: 681 | Input/Output: [(-23 85 27 -71) -71]
Test Case: 682 | Input/Output: [(-84 10 -64 -99) -99]
Test Case: 683 | Input/Output: [(-82 -88 33 6) -88]
Test Case: 684 | Input/Output: [(-75 53 30 -67) -75]
Test Case: 685 | Input/Output: [(-31 -15 -71 8) -71]
Test Case: 686 | Input/Output: [(-55 31 83 57) -55]
Test Case: 687 | Input/Output: [(94 -54 2 -3) -54]
Test Case: 688 | Input/Output: [(-55 78 -11 -36) -55]
Test Case: 689 | Input/Output: [(-100 39 52 45) -100]
Test Case: 690 | Input/Output: [(57 -66 83 -84) -84]
Test Case: 691 | Input/Output: [(-98 -50 -7 -86) -98]
Test Case: 692 | Input/Output: [(-40 -70 -66 -34) -70]
Test Case: 693 | Input/Output: [(7 -19 -70 53) -70]
Test Case: 694 | Input/Output: [(-77 -66 -9 -12) -77]
Test Case: 695 | Input/Output: [(58 -94 -98 -67) -98]
Test Case: 696 | Input/Output: [(98 27 35 54) 27]
Test Case: 697 | Input/Output: [(66 5 -26 -78) -78]
Test Case: 698 | Input/Output: [(-28 19 93 35) -28]
Test Case: 699 | Input/Output: [(9 -90 85 -98) -98]
Test Case: 700 | Input/Output: [(-79 -38 65 71) -79]
Test Case: 701 | Input/Output: [(90 51 -58 -31) -58]
Test Case: 702 | Input/Output: [(40 68 -44 100) -44]
Test Case: 703 | Input/Output: [(35 82 79 28) 28]
Test Case: 704 | Input/Output: [(99 -70 82 15) -70]
Test Case: 705 | Input/Output: [(-35 94 -35 42) -35]
Test Case: 706 | Input/Output: [(50 -26 -14 48) -26]
Test Case: 707 | Input/Output: [(42 -89 88 -14) -89]
Test Case: 708 | Input/Output: [(-64 74 -41 63) -64]
Test Case: 709 | Input/Output: [(-46 66 -61 -50) -61]
Test Case: 710 | Input/Output: [(-53 51 12 64) -53]
Test Case: 711 | Input/Output: [(-22 -99 -67 -49) -99]
Test Case: 712 | Input/Output: [(-88 53 25 28) -88]
Test Case: 713 | Input/Output: [(-7 86 -72 48) -72]
Test Case: 714 | Input/Output: [(-80 28 -9 -38) -80]
Test Case: 715 | Input/Output: [(-75 26 93 41) -75]
Test Case: 716 | Input/Output: [(-28 -15 -59 76) -59]
Test Case: 717 | Input/Output: [(42 -41 87 -33) -41]
Test Case: 718 | Input/Output: [(-36 7 8 96) -36]
Test Case: 719 | Input/Output: [(57 70 -53 80) -53]
Test Case: 720 | Input/Output: [(-40 -11 -65 40) -65]
Test Case: 721 | Input/Output: [(32 54 -51 58) -51]
Test Case: 722 | Input/Output: [(86 -46 -5 57) -46]
Test Case: 723 | Input/Output: [(7 74 1 97) 1]
Test Case: 724 | Input/Output: [(95 -55 57 42) -55]
Test Case: 725 | Input/Output: [(-10 30 82 -35) -35]
Test Case: 726 | Input/Output: [(45 49 -96 19) -96]
Test Case: 727 | Input/Output: [(-92 -26 87 -61) -92]
Test Case: 728 | Input/Output: [(-84 -100 90 66) -100]
Test Case: 729 | Input/Output: [(36 -83 31 4) -83]
Test Case: 730 | Input/Output: [(79 -86 -17 93) -86]
Test Case: 731 | Input/Output: [(-43 -15 31 -30) -43]
Test Case: 732 | Input/Output: [(-88 -96 67 22) -96]
Test Case: 733 | Input/Output: [(-75 71 -24 21) -75]
Test Case: 734 | Input/Output: [(50 5 -72 -83) -83]
Test Case: 735 | Input/Output: [(63 67 -44 63) -44]
Test Case: 736 | Input/Output: [(-45 32 18 -57) -57]
Test Case: 737 | Input/Output: [(72 61 47 -83) -83]
Test Case: 738 | Input/Output: [(25 -94 12 93) -94]
Test Case: 739 | Input/Output: [(38 96 -95 -6) -95]
Test Case: 740 | Input/Output: [(83 81 44 -1) -1]
Test Case: 741 | Input/Output: [(-99 12 58 -32) -99]
Test Case: 742 | Input/Output: [(-74 53 93 46) -74]
Test Case: 743 | Input/Output: [(8 -67 29 11) -67]
Test Case: 744 | Input/Output: [(-51 -91 95 11) -91]
Test Case: 745 | Input/Output: [(-30 99 41 -28) -30]
Test Case: 746 | Input/Output: [(59 -48 -96 69) -96]
Test Case: 747 | Input/Output: [(-18 -34 -55 97) -55]
Test Case: 748 | Input/Output: [(5 48 53 38) 5]
Test Case: 749 | Input/Output: [(-34 39 12 -48) -48]
Test Case: 750 | Input/Output: [(96 -23 75 -45) -45]
Test Case: 751 | Input/Output: [(-53 -42 -47 -59) -59]
Test Case: 752 | Input/Output: [(34 89 82 -47) -47]
Test Case: 753 | Input/Output: [(13 -56 -27 -41) -56]
Test Case: 754 | Input/Output: [(-69 59 63 94) -69]
Test Case: 755 | Input/Output: [(17 73 2 73) 2]
Test Case: 756 | Input/Output: [(70 -63 -57 5) -63]
Test Case: 757 | Input/Output: [(-86 93 31 -46) -86]
Test Case: 758 | Input/Output: [(-33 -39 32 95) -39]
Test Case: 759 | Input/Output: [(-28 78 -81 85) -81]
Test Case: 760 | Input/Output: [(-72 59 22 81) -72]
Test Case: 761 | Input/Output: [(-88 47 41 -39) -88]
Test Case: 762 | Input/Output: [(24 18 -10 65) -10]
Test Case: 763 | Input/Output: [(-63 26 43 0) -63]
Test Case: 764 | Input/Output: [(4 -42 -74 67) -74]
Test Case: 765 | Input/Output: [(27 7 -71 18) -71]
Test Case: 766 | Input/Output: [(96 10 -3 1) -3]
Test Case: 767 | Input/Output: [(-57 30 -2 -21) -57]
Test Case: 768 | Input/Output: [(-47 92 85 0) -47]
Test Case: 769 | Input/Output: [(58 -43 -31 -27) -43]
Test Case: 770 | Input/Output: [(-86 -50 -33 43) -86]
Test Case: 771 | Input/Output: [(73 14 87 80) 14]
Test Case: 772 | Input/Output: [(23 84 28 -93) -93]
Test Case: 773 | Input/Output: [(5 -6 -52 47) -52]
Test Case: 774 | Input/Output: [(-13 86 21 -57) -57]
Test Case: 775 | Input/Output: [(8 2 21 -94) -94]
Test Case: 776 | Input/Output: [(-99 22 -9 20) -99]
Test Case: 777 | Input/Output: [(-90 94 83 -15) -90]
Test Case: 778 | Input/Output: [(-17 -48 -1 77) -48]
Test Case: 779 | Input/Output: [(98 -76 80 -5) -76]
Test Case: 780 | Input/Output: [(58 4 -55 -47) -55]
Test Case: 781 | Input/Output: [(-17 36 60 -3) -17]
Test Case: 782 | Input/Output: [(11 3 -96 62) -96]
Test Case: 783 | Input/Output: [(21 -23 -48 38) -48]
Test Case: 784 | Input/Output: [(-40 29 -84 -55) -84]
Test Case: 785 | Input/Output: [(-71 -28 97 -30) -71]
Test Case: 786 | Input/Output: [(48 -46 80 -83) -83]
Test Case: 787 | Input/Output: [(85 -56 -99 -80) -99]
Test Case: 788 | Input/Output: [(10 72 96 63) 10]
Test Case: 789 | Input/Output: [(62 95 12 76) 12]
Test Case: 790 | Input/Output: [(2 10 50 54) 2]
Test Case: 791 | Input/Output: [(31 59 66 65) 31]
Test Case: 792 | Input/Output: [(31 -82 34 84) -82]
Test Case: 793 | Input/Output: [(50 -3 -39 -85) -85]
Test Case: 794 | Input/Output: [(26 -11 -64 -37) -64]
Test Case: 795 | Input/Output: [(-94 9 32 -66) -94]
Test Case: 796 | Input/Output: [(89 -71 28 -26) -71]
Test Case: 797 | Input/Output: [(-75 -14 -19 -11) -75]
Test Case: 798 | Input/Output: [(2 -79 -12 -49) -79]
Test Case: 799 | Input/Output: [(97 -46 -21 88) -46]
Test Case: 800 | Input/Output: [(-6 58 54 -100) -100]
Test Case: 801 | Input/Output: [(12 1 31 1) 1]
Test Case: 802 | Input/Output: [(-82 -24 -21 92) -82]
Test Case: 803 | Input/Output: [(-3 87 13 73) -3]
Test Case: 804 | Input/Output: [(2 -40 -32 -62) -62]
Test Case: 805 | Input/Output: [(38 56 9 16) 9]
Test Case: 806 | Input/Output: [(-91 -90 -53 -12) -91]
Test Case: 807 | Input/Output: [(-14 -47 -64 59) -64]
Test Case: 808 | Input/Output: [(-93 83 14 -28) -93]
Test Case: 809 | Input/Output: [(-27 60 -82 -76) -82]
Test Case: 810 | Input/Output: [(17 29 -9 -62) -62]
Test Case: 811 | Input/Output: [(57 -100 -73 -8) -100]
Test Case: 812 | Input/Output: [(-57 50 -22 19) -57]
Test Case: 813 | Input/Output: [(35 10 10 -74) -74]
Test Case: 814 | Input/Output: [(-49 -31 -49 -35) -49]
Test Case: 815 | Input/Output: [(32 74 -44 -52) -52]
Test Case: 816 | Input/Output: [(-6 -97 99 -35) -97]
Test Case: 817 | Input/Output: [(-88 -47 55 -49) -88]
Test Case: 818 | Input/Output: [(2 -80 8 44) -80]
Test Case: 819 | Input/Output: [(-90 43 -3 29) -90]
Test Case: 820 | Input/Output: [(-11 72 -44 -60) -60]
Test Case: 821 | Input/Output: [(21 -6 -89 -73) -89]
Test Case: 822 | Input/Output: [(77 80 -88 -13) -88]
Test Case: 823 | Input/Output: [(-51 -35 -8 11) -51]
Test Case: 824 | Input/Output: [(-80 4 83 31) -80]
Test Case: 825 | Input/Output: [(-64 94 98 97) -64]
Test Case: 826 | Input/Output: [(61 40 26 -72) -72]
Test Case: 827 | Input/Output: [(-83 -47 -75 58) -83]
Test Case: 828 | Input/Output: [(48 -17 70 18) -17]
Test Case: 829 | Input/Output: [(-96 -20 -43 -60) -96]
Test Case: 830 | Input/Output: [(3 -93 8 -15) -93]
Test Case: 831 | Input/Output: [(17 22 -25 7) -25]
Test Case: 832 | Input/Output: [(65 43 -19 31) -19]
Test Case: 833 | Input/Output: [(-70 9 -21 4) -70]
Test Case: 834 | Input/Output: [(-1 -74 22 -43) -74]
Test Case: 835 | Input/Output: [(-18 98 64 56) -18]
Test Case: 836 | Input/Output: [(-72 -25 -37 -8) -72]
Test Case: 837 | Input/Output: [(-58 -41 -44 38) -58]
Test Case: 838 | Input/Output: [(71 -8 94 47) -8]
Test Case: 839 | Input/Output: [(83 10 11 -84) -84]
Test Case: 840 | Input/Output: [(-75 88 -86 -32) -86]
Test Case: 841 | Input/Output: [(-69 -64 53 98) -69]
Test Case: 842 | Input/Output: [(-14 53 -55 -5) -55]
Test Case: 843 | Input/Output: [(-64 -40 77 -79) -79]
Test Case: 844 | Input/Output: [(-46 95 3 -43) -46]
Test Case: 845 | Input/Output: [(-64 48 2 -50) -64]
Test Case: 846 | Input/Output: [(-16 22 -27 -72) -72]
Test Case: 847 | Input/Output: [(66 96 -15 -24) -24]
Test Case: 848 | Input/Output: [(-39 -77 -88 5) -88]
Test Case: 849 | Input/Output: [(-67 98 45 10) -67]
Test Case: 850 | Input/Output: [(39 -34 -41 97) -41]
Test Case: 851 | Input/Output: [(-2 -18 -25 -77) -77]
Test Case: 852 | Input/Output: [(-46 35 -58 -65) -65]
Test Case: 853 | Input/Output: [(99 -41 77 58) -41]
Test Case: 854 | Input/Output: [(90 96 -20 91) -20]
Test Case: 855 | Input/Output: [(11 -72 56 73) -72]
Test Case: 856 | Input/Output: [(-39 -90 74 89) -90]
Test Case: 857 | Input/Output: [(-60 27 -53 50) -60]
Test Case: 858 | Input/Output: [(87 67 -93 -41) -93]
Test Case: 859 | Input/Output: [(-64 -89 28 85) -89]
Test Case: 860 | Input/Output: [(-55 -87 44 -29) -87]
Test Case: 861 | Input/Output: [(61 1 74 -85) -85]
Test Case: 862 | Input/Output: [(19 -3 100 -50) -50]
Test Case: 863 | Input/Output: [(20 -39 -43 -51) -51]
Test Case: 864 | Input/Output: [(-27 56 -89 93) -89]
Test Case: 865 | Input/Output: [(-35 56 47 -74) -74]
Test Case: 866 | Input/Output: [(-72 -95 46 -50) -95]
Test Case: 867 | Input/Output: [(-41 35 -42 99) -42]
Test Case: 868 | Input/Output: [(81 19 -45 -9) -45]
Test Case: 869 | Input/Output: [(62 -11 -1 -27) -27]
Test Case: 870 | Input/Output: [(-12 -34 -16 3) -34]
Test Case: 871 | Input/Output: [(-57 9 50 -84) -84]
Test Case: 872 | Input/Output: [(-73 34 57 -81) -81]
Test Case: 873 | Input/Output: [(-12 40 51 7) -12]
Test Case: 874 | Input/Output: [(24 83 -73 -97) -97]
Test Case: 875 | Input/Output: [(-48 29 -25 -71) -71]
Test Case: 876 | Input/Output: [(-86 67 96 -5) -86]
Test Case: 877 | Input/Output: [(86 -39 71 -7) -39]
Test Case: 878 | Input/Output: [(-85 -7 46 1) -85]
Test Case: 879 | Input/Output: [(-43 -54 -48 -89) -89]
Test Case: 880 | Input/Output: [(59 44 -63 31) -63]
Test Case: 881 | Input/Output: [(54 -51 15 -9) -51]
Test Case: 882 | Input/Output: [(31 89 47 91) 31]
Test Case: 883 | Input/Output: [(-81 36 16 25) -81]
Test Case: 884 | Input/Output: [(90 35 0 51) 0]
Test Case: 885 | Input/Output: [(-15 -6 -42 -21) -42]
Test Case: 886 | Input/Output: [(75 88 5 -37) -37]
Test Case: 887 | Input/Output: [(-87 63 -28 -61) -87]
Test Case: 888 | Input/Output: [(21 -76 6 -25) -76]
Test Case: 889 | Input/Output: [(-16 -53 4 11) -53]
Test Case: 890 | Input/Output: [(-1 81 29 95) -1]
Test Case: 891 | Input/Output: [(83 82 28 -9) -9]
Test Case: 892 | Input/Output: [(19 2 17 8) 2]
Test Case: 893 | Input/Output: [(87 56 -31 50) -31]
Test Case: 894 | Input/Output: [(-72 25 100 -89) -89]
Test Case: 895 | Input/Output: [(-53 -51 69 41) -53]
Test Case: 896 | Input/Output: [(-78 -67 -37 -8) -78]
Test Case: 897 | Input/Output: [(80 -36 -88 -52) -88]
Test Case: 898 | Input/Output: [(13 -95 15 84) -95]
Test Case: 899 | Input/Output: [(-86 -25 3 45) -86]
Test Case: 900 | Input/Output: [(86 57 -94 -76) -94]
Test Case: 901 | Input/Output: [(-87 74 -65 92) -87]
Test Case: 902 | Input/Output: [(-81 -1 15 23) -81]
Test Case: 903 | Input/Output: [(-83 24 82 68) -83]
Test Case: 904 | Input/Output: [(92 -32 -78 -2) -78]
Test Case: 905 | Input/Output: [(-6 77 -30 36) -30]
Test Case: 906 | Input/Output: [(-24 43 -71 -8) -71]
Test Case: 907 | Input/Output: [(45 63 83 12) 12]
Test Case: 908 | Input/Output: [(76 49 8 100) 8]
Test Case: 909 | Input/Output: [(26 4 69 -55) -55]
Test Case: 910 | Input/Output: [(77 -89 26 -61) -89]
Test Case: 911 | Input/Output: [(-87 19 47 -39) -87]
Test Case: 912 | Input/Output: [(-77 -90 -32 -34) -90]
Test Case: 913 | Input/Output: [(64 93 -42 -86) -86]
Test Case: 914 | Input/Output: [(-80 78 -68 50) -80]
Test Case: 915 | Input/Output: [(-9 98 -18 -93) -93]
Test Case: 916 | Input/Output: [(33 -40 23 -65) -65]
Test Case: 917 | Input/Output: [(16 -3 -14 -48) -48]
Test Case: 918 | Input/Output: [(-21 34 71 77) -21]
Test Case: 919 | Input/Output: [(87 72 74 20) 20]
Test Case: 920 | Input/Output: [(-77 -37 43 99) -77]
Test Case: 921 | Input/Output: [(-57 -93 94 75) -93]
Test Case: 922 | Input/Output: [(-5 3 -50 -60) -60]
Test Case: 923 | Input/Output: [(-17 28 -72 -34) -72]
Test Case: 924 | Input/Output: [(-30 53 -99 -58) -99]
Test Case: 925 | Input/Output: [(-61 -87 38 -90) -90]
Test Case: 926 | Input/Output: [(36 -15 2 -87) -87]
Test Case: 927 | Input/Output: [(-26 -46 26 -98) -98]
Test Case: 928 | Input/Output: [(13 21 63 12) 12]
Test Case: 929 | Input/Output: [(26 3 82 -73) -73]
Test Case: 930 | Input/Output: [(-22 -4 52 -33) -33]
Test Case: 931 | Input/Output: [(-30 -21 -76 42) -76]
Test Case: 932 | Input/Output: [(72 -27 -19 -84) -84]
Test Case: 933 | Input/Output: [(-13 33 89 38) -13]
Test Case: 934 | Input/Output: [(66 68 -76 -26) -76]
Test Case: 935 | Input/Output: [(52 -5 -86 -45) -86]
Test Case: 936 | Input/Output: [(77 -72 21 -63) -72]
Test Case: 937 | Input/Output: [(95 2 99 20) 2]
Test Case: 938 | Input/Output: [(-73 40 84 -100) -100]
Test Case: 939 | Input/Output: [(-84 34 -44 11) -84]
Test Case: 940 | Input/Output: [(-4 2 58 95) -4]
Test Case: 941 | Input/Output: [(11 -97 5 -84) -97]
Test Case: 942 | Input/Output: [(-71 -37 71 84) -71]
Test Case: 943 | Input/Output: [(-60 94 -37 -51) -60]
Test Case: 944 | Input/Output: [(86 -64 -44 14) -64]
Test Case: 945 | Input/Output: [(-96 -8 21 -75) -96]
Test Case: 946 | Input/Output: [(44 89 84 -69) -69]
Test Case: 947 | Input/Output: [(79 61 93 37) 37]
Test Case: 948 | Input/Output: [(33 -52 -100 -26) -100]
Test Case: 949 | Input/Output: [(76 -47 -60 45) -60]
Test Case: 950 | Input/Output: [(-100 13 81 -61) -100]
Test Case: 951 | Input/Output: [(9 -57 -19 -14) -57]
Test Case: 952 | Input/Output: [(59 -19 -46 -89) -89]
Test Case: 953 | Input/Output: [(89 94 79 53) 53]
Test Case: 954 | Input/Output: [(-64 44 -81 -90) -90]
Test Case: 955 | Input/Output: [(91 -5 -60 -84) -84]
Test Case: 956 | Input/Output: [(-89 -31 12 68) -89]
Test Case: 957 | Input/Output: [(55 -82 -34 -60) -82]
Test Case: 958 | Input/Output: [(41 -85 38 -70) -85]
Test Case: 959 | Input/Output: [(-39 -96 -40 53) -96]
Test Case: 960 | Input/Output: [(-3 -68 -48 -5) -68]
Test Case: 961 | Input/Output: [(89 -28 -98 24) -98]
Test Case: 962 | Input/Output: [(46 -50 -15 95) -50]
Test Case: 963 | Input/Output: [(-30 -28 -40 36) -40]
Test Case: 964 | Input/Output: [(-71 31 6 79) -71]
Test Case: 965 | Input/Output: [(-50 97 79 91) -50]
Test Case: 966 | Input/Output: [(-4 92 92 28) -4]
Test Case: 967 | Input/Output: [(45 -63 -99 19) -99]
Test Case: 968 | Input/Output: [(53 69 -37 98) -37]
Test Case: 969 | Input/Output: [(-94 68 -100 66) -100]
Test Case: 970 | Input/Output: [(23 -50 -79 8) -79]
Test Case: 971 | Input/Output: [(49 10 100 -81) -81]
Test Case: 972 | Input/Output: [(13 4 -70 -69) -70]
Test Case: 973 | Input/Output: [(30 69 11 33) 11]
Test Case: 974 | Input/Output: [(6 36 -21 13) -21]
Test Case: 975 | Input/Output: [(-28 -60 -61 -80) -80]
Test Case: 976 | Input/Output: [(12 -12 -6 -88) -88]
Test Case: 977 | Input/Output: [(31 28 52 35) 28]
Test Case: 978 | Input/Output: [(4 -96 -31 16) -96]
Test Case: 979 | Input/Output: [(68 -70 18 50) -70]
Test Case: 980 | Input/Output: [(-30 -19 -43 24) -43]
Test Case: 981 | Input/Output: [(-81 -25 -25 77) -81]
Test Case: 982 | Input/Output: [(85 -45 44 -58) -58]
Test Case: 983 | Input/Output: [(-1 -100 -60 -100) -100]
Test Case: 984 | Input/Output: [(24 -59 -28 64) -59]
Test Case: 985 | Input/Output: [(8 -23 99 -53) -53]
Test Case: 986 | Input/Output: [(-48 -63 46 12) -63]
Test Case: 987 | Input/Output: [(0 -10 -61 -22) -61]
Test Case: 988 | Input/Output: [(-68 -11 -69 91) -69]
Test Case: 989 | Input/Output: [(-39 83 16 17) -39]
Test Case: 990 | Input/Output: [(-40 -90 68 -61) -90]
Test Case: 991 | Input/Output: [(-57 -64 98 -79) -79]
Test Case: 992 | Input/Output: [(-35 23 -31 -24) -35]
Test Case: 993 | Input/Output: [(87 -92 61 71) -92]
Test Case: 994 | Input/Output: [(-1 -100 -38 41) -100]
Test Case: 995 | Input/Output: [(34 66 31 -11) -11]
Test Case: 996 | Input/Output: [(-21 -74 92 -76) -76]
Test Case: 997 | Input/Output: [(-6 -86 -86 -80) -86]
Test Case: 998 | Input/Output: [(12 26 12 13) 12]
Test Case: 999 | Input/Output: [(85 84 -17 -68) -68]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 110 113 58 -49 64 122 -21 90 -54 -29 -4 -123 -9 -79 -13 58
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-26 -26 -26 30] -26] [[81 81 47 81] 47] [[-50 -50 -50 -30] -50] [[89 21 21 21] 21] [[-55 -23 -23 -23] -55] [[38 38 -70 38] -70] [[68 -84 68 68] -84] [[-34 96 96 96] -34] [[-70 -70 -70 -59] -70] [[66 63 66 66] 63] [(-3 -3 -3 -3) -3] [(28 28 28 28) 28] [(19 19 19 19) 19] [(-9 -9 -9 -9) -9] [(-96 -96 -96 -96) -96] [(84 93 77 11) 11] [(65 54 68 16) 16] [(56 22 3 58) 3] [(68 56 60 53) 53] [(47 6 17 54) 6] [(49 34 20 27) 20] [(74 20 26 21) 20] [(78 40 55 21) 21] [(21 88 7 5) 5] [(94 99 72 78) 72] [(1 96 60 94) 1] [(27 2 21 76) 2] [(49 38 14 34) 14] [(52 88 14 73) 14] [(72 78 43 15) 15] [(71 4 89 86) 4] [(91 88 44 42) 42] [(32 13 73 78) 13] [(44 63 54 29) 29] [(84 78 78 43) 43] [(0 -98 57 -47) -98] [(17 10 81 53) 10] [(-24 85 3 0) -24] [(-61 11 -67 -80) -80] [(55 93 -51 -5) -51] [(-14 51 71 -40) -40] [(-86 6 13 56) -86] [(73 98 -22 53) -22] [(64 -36 -95 -96) -96] [(96 -67 -50 38) -67] [(-16 -32 78 13) -32] [(63 34 80 -29) -29] [(-45 -80 65 39) -80] [(59 -27 -89 -24) -89] [(-61 30 -45 57) -61] [(-75 -6 -35 10) -75] [(-9 -65 -62 39) -65] [(36 -86 -53 -37) -86] [(-34 37 96 72) -34] [(35 -21 -86 -37) -86] [(47 18 80 33) 18] [(58 -54 -11 -17) -54] [(-73 43 -55 11) -73] [(32 35 -88 68) -88] [(18 78 -10 -14) -14] [(38 -47 -38 -3) -47] [(50 -79 -3 27) -79] [(-51 12 -70 34) -70] [(67 -64 33 90) -64] [(76 -42 -43 73) -43] [(-75 6 100 8) -75] [(61 -59 49 40) -59] [(16 51 -72 -75) -75] [(-48 64 -67 58) -67] [(1 -7 41 -59) -59] [(62 -73 33 -61) -73] [(-74 55 -1 6) -74] [(-56 22 12 -20) -56] [(-71 18 -41 25) -71] [(-88 -98 43 75) -98] [(-47 21 -39 39) -47] [(-75 -33 9 94) -75] [(-55 -91 -27 -2) -91] [(-24 25 13 14) -24] [(19 -15 82 71) -15] [(21 65 41 24) 21] [(17 -34 -69 -30) -69] [(-39 -59 4 -59) -59] [(-12 83 -65 -74) -74] [(-99 -65 70 74) -99] [(-57 -71 29 22) -71] [(-78 -30 52 81) -78] [(65 78 47 -17) -17] [(48 -70 -54 -50) -70] [(-52 73 -39 -61) -61] [(1 -55 24 24) -55] [(47 -71 93 -57) -71] [(-84 -98 68 5) -98] [(-59 -3 14 86) -59] [(48 -46 -12 -1) -46])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: 30                 
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -30                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -59                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: -47                
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: 56                 
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 38                 
Correct output: -32                 | Program output: 13                 
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: 39                 
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: 57                 
Correct output: -75                 | Program output: 10                 
Correct output: -65                 | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: 72                 
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: 11                 
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 27                 
Correct output: -70                 | Program output: 34                 
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: 73                 
Correct output: -75                 | Program output: 8                  
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: 58                 
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: 6                  
Correct output: -56                 | Program output: -20                
Correct output: -71                 | Program output: 25                 
Correct output: -98                 | Program output: 75                 
Correct output: -47                 | Program output: 39                 
Correct output: -75                 | Program output: 94                 
Correct output: -91                 | Program output: -2                 
Correct output: -24                 | Program output: 14                 
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -99                 | Program output: 74                 
Correct output: -71                 | Program output: 22                 
Correct output: -78                 | Program output: 81                 
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: 5                  
Correct output: -59                 | Program output: 86                 
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 8 1000 4 1 8 1 1000 4 1)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (1 8 0 4 1 8 1 0 4 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 9.972
Median total errors in population: 10
Error averages by case: (0.999 0.992 1.0 0.996 0.999 0.992 0.999 1.0 0.996 0.999)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 50.937
Average program size in population (points): 69.889
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 474884
--- Timings ---
Current time: 1559314336847 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 32.7%
Fitness Testing:      1.6 seconds, 63.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: 30                 
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -30                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -59                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: -47                
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: 56                 
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 38                 
Correct output: -32                 | Program output: 13                 
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: 39                 
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: 57                 
Correct output: -75                 | Program output: 10                 
Correct output: -65                 | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: 72                 
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: 11                 
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 27                 
Correct output: -70                 | Program output: 34                 
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: 73                 
Correct output: -75                 | Program output: 8                  
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: 58                 
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: 6                  
Correct output: -56                 | Program output: -20                
Correct output: -71                 | Program output: 25                 
Correct output: -98                 | Program output: 75                 
Correct output: -47                 | Program output: 39                 
Correct output: -75                 | Program output: 94                 
Correct output: -91                 | Program output: -2                 
Correct output: -24                 | Program output: 14                 
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -99                 | Program output: 74                 
Correct output: -71                 | Program output: 22                 
Correct output: -78                 | Program output: 81                 
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: 5                  
Correct output: -59                 | Program output: 86                 
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Lexicase best errors: [1 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Zero cases best errors: [1 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 945 1000 1000 1000 629 315 629 629 1000)
Population mean number of elite cases: 8.15
Count of perfect (error zero) individuals by case: (0 945 0 0 0 629 315 629 629 0)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Errors: [1 0 1 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.853
Median total errors in population: 6
Error averages by case: (1.0 0.055 1.0 1.0 1.0 0.371 0.685 0.371 0.371 1.0)
Error minima by case: (1 0 1 1 1 0 0 0 0 1)
Average genome size in population (length): 25.025
Average program size in population (points): 34.303
Average percent parens in population: 0.220
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.493
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 563
Genome diversity (% unique genomes):	 0.27
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 577
Syntactic diversity (% unique Push programs):	 0.256
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 751385
--- Timings ---
Current time: 1559314338828 milliseconds
Total Time:           4.7 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         2.3 seconds, 49.5%
Fitness Testing:      2.0 seconds, 41.4%
Report:               0.3 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 620
Test mean error for best: 0.62000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: 55                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: 64                 
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: 35                 
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: 18                 
Correct output: -47                 | Program output: 38                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: 16                 
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: 47                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 2, :instruction integer_div} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_469} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_s_when_autoconstructing () (integer_dup_items) (exec_if (integer_stackdepth exec_yank exec_y_when_autoconstructing (integer_max integer_empty exec_when (boolean_xor integer_shove exec_s (exec_shove () boolean_or integer_yankdup) (boolean_dup_times in1 integer_div) () print_integer) integer_inc) integer_gt boolean_dup integer_gte integer_mod integer_dup) (tag_exec_469 (boolean_empty boolean_and boolean_shove))))
Lexicase best errors: [1 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 2, :instruction integer_div} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_exec_469} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_s_when_autoconstructing () (integer_dup_items) (exec_if (integer_stackdepth exec_yank exec_y_when_autoconstructing (integer_max integer_empty exec_when (boolean_xor integer_shove exec_s (exec_shove () boolean_or integer_yankdup) (boolean_dup_times in1 integer_div) () print_integer) integer_inc) integer_gt boolean_dup integer_gte integer_mod integer_dup) (tag_exec_469 (boolean_empty boolean_and boolean_shove))))
Zero cases best errors: [1 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 955 953 1000 235 235 718 1000)
Population mean number of elite cases: 8.10
Count of perfect (error zero) individuals by case: (0 0 0 955 953 0 235 235 718 0)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot})
Best program: (in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger boolean_empty exec_y_when_autoconstructing (boolean_eq) exec_s (integer_sub exec_rot (integer_swap integer_div boolean_yank exec_shove (exec_y (integer_dup_times exec_s_when_autoconstructing (integer_eq exec_do*times () exec_s_when_autoconstructing (integer_add) (exec_noop boolean_rot integer_rot) ()) () ()))) () ()) () ())
Errors: [1 1 1 0 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 46
Percent parens: 0.391
--- Population Statistics ---
Average total errors in population: 6.904
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.045 0.047 1.0 0.765 0.765 0.282 1.0)
Error minima by case: (1 1 1 0 0 1 0 0 0 1)
Average genome size in population (length): 19.545
Average program size in population (points): 26.367
Average percent parens in population: 0.207
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9755
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 579
Genome diversity (% unique genomes):	 0.303
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 615
Syntactic diversity (% unique Push programs):	 0.288
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 999178
--- Timings ---
Current time: 1559314341405 milliseconds
Total Time:           6.7 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.9 seconds, 58.3%
Fitness Testing:      2.2 seconds, 32.8%
Report:               0.5 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: 30                 
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -30                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -59                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: -47                
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: 56                 
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 38                 
Correct output: -32                 | Program output: 13                 
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: 39                 
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: 57                 
Correct output: -75                 | Program output: 10                 
Correct output: -65                 | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: 72                 
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: 11                 
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 27                 
Correct output: -70                 | Program output: 34                 
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: 73                 
Correct output: -75                 | Program output: 8                  
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: 58                 
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: 6                  
Correct output: -56                 | Program output: -20                
Correct output: -71                 | Program output: 25                 
Correct output: -98                 | Program output: 75                 
Correct output: -47                 | Program output: 39                 
Correct output: -75                 | Program output: 94                 
Correct output: -91                 | Program output: -2                 
Correct output: -24                 | Program output: 14                 
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -99                 | Program output: 74                 
Correct output: -71                 | Program output: 22                 
Correct output: -78                 | Program output: 81                 
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: 5                  
Correct output: -59                 | Program output: 86                 
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Lexicase best errors: [0 1 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Zero cases best errors: [0 1 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 1000 1000 625 625 1000 295 295 295 618)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (295 0 0 625 625 0 295 295 295 618)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty})
Best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_or print_integer exec_do*times (integer_dup integer_empty))
Errors: [0 1 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.952
Median total errors in population: 7
Error averages by case: (0.705 1.0 1.0 0.375 0.375 1.0 0.705 0.705 0.705 0.382)
Error minima by case: (0 1 1 0 0 1 0 0 0 0)
Average genome size in population (length): 33.016
Average program size in population (points): 46.899
Average percent parens in population: 0.270
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5265
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1444222
--- Timings ---
Current time: 1559314343579 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.5 seconds, 58.2%
Fitness Testing:      2.6 seconds, 27.9%
Report:               1.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 620
Test mean error for best: 0.62000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: 55                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: 64                 
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: 35                 
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: 18                 
Correct output: -47                 | Program output: 38                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: 16                 
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: 47                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot})
Lexicase best program: (in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger boolean_empty exec_y_when_autoconstructing (boolean_eq) exec_s (integer_sub exec_rot (integer_swap integer_div boolean_yank exec_shove (exec_y (integer_dup_times exec_s_when_autoconstructing (integer_eq exec_do*times (exec_s_when_autoconstructing (integer_add) (exec_noop boolean_rot) ())) () ()))) () ()) () ())
Lexicase best errors: [1 1 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 45
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot})
Zero cases best program: (in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger boolean_empty exec_y_when_autoconstructing (boolean_eq) exec_s (integer_sub exec_rot (integer_swap integer_div boolean_yank exec_shove (exec_y (integer_dup_times exec_s_when_autoconstructing (integer_eq exec_do*times (exec_s_when_autoconstructing (integer_add) (exec_noop boolean_rot) ())) () ()))) () ()) () ())
Zero cases best errors: [1 1 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 45
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 1000 386 1000 387 1000)
Population mean number of elite cases: 8.77
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 386 0 387 0)
Population mean number of perfect (error zero) cases: 0.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_105} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_105} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction -52} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot})
Best program: (exec_yankdup exec_yank integer_flush integer_flush in4 integer_dup_times integer_dup_items integer_flush integer_swap integer_gte exec_s_when_autoconstructing () (in1 exec_y_when_autoconstructing () print_integer boolean_invert_first_then_and integer_shove tag_integer_105 boolean_pop boolean_empty exec_y_when_autoconstructing (boolean_eq) exec_s (print_integer boolean_invert_first_then_and integer_shove tag_integer_105 boolean_pop boolean_or in1 -52) (exec_shove (exec_s_when_autoconstructing (integer_eq exec_do*times () exec_s_when_autoconstructing (integer_add) (exec_noop boolean_rot integer_rot) ()) () ())) ()) ())
Errors: [1 1 1 1 1 1 0 1 0 1]
Total: 8
Mean: 0.8
Genome size: 39
Size: 56
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 9.227
Median total errors in population: 10
Error averages by case: (1.0 1.0 1.0 1.0 1.0 1.0 0.614 1.0 0.613 1.0)
Error minima by case: (1 1 1 1 1 1 0 1 0 1)
Average genome size in population (length): 22.575
Average program size in population (points): 31.501
Average percent parens in population: 0.236
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.0275
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 325
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1786202
--- Timings ---
Current time: 1559314346032 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.2 seconds, 61.6%
Fitness Testing:      3.0 seconds, 25.6%
Report:               1.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 620
Test mean error for best: 0.62000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: 55                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: 64                 
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: 35                 
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: 18                 
Correct output: -47                 | Program output: 38                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: 16                 
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: 47                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 2, :instruction integer_div} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_s_when_autoconstructing () (integer_dup_items) (exec_if (integer_stackdepth exec_yank exec_y_when_autoconstructing (integer_max integer_empty exec_when (boolean_xor integer_shove exec_s (exec_shove () boolean_or integer_yankdup) (boolean_dup_times in1 integer_div) () print_integer) exec_y (integer_dup_times exec_s_when_autoconstructing () () ()))) ()))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.421
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 2, :instruction integer_div} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_s_when_autoconstructing () (integer_dup_items) (exec_if (integer_stackdepth exec_yank exec_y_when_autoconstructing (integer_max integer_empty exec_when (boolean_xor integer_shove exec_s (exec_shove () boolean_or integer_yankdup) (boolean_dup_times in1 integer_div) () print_integer) exec_y (integer_dup_times exec_s_when_autoconstructing () () ()))) ()))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.421
--- Lexicase Population Statistics ---
Count of elite individuals by case: (920 1000 2 1000 919 1000 920 2 920 1000)
Population mean number of elite cases: 7.68
Count of perfect (error zero) individuals by case: (920 0 2 0 919 0 920 2 920 0)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction 18} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty})
Best program: (in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger boolean_empty exec_y_when_autoconstructing (boolean_eq) exec_s (integer_sub exec_rot (integer_swap integer_div boolean_flush exec_shove (exec_y (integer_dup_times boolean_stackdepth exec_pop (18 print_newline integer_lte exec_do*while (exec_y (exec_if (exec_swap (exec_s_when_autoconstructing () (boolean_empty) ()) ()) ())))))) () ()) () ())
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 52
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 6.317
Median total errors in population: 6
Error averages by case: (0.08 1.0 0.998 1.0 0.081 1.0 0.08 0.998 0.08 1.0)
Error minima by case: (0 1 0 1 0 1 0 0 0 1)
Average genome size in population (length): 37.849
Average program size in population (points): 55.623
Average percent parens in population: 0.321
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.6275625
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2355442
--- Timings ---
Current time: 1559314349266 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.7 seconds, 61.6%
Fitness Testing:      3.5 seconds, 24.6%
Report:               1.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 620
Test mean error for best: 0.62000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: 55                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: 64                 
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: 35                 
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: 18                 
Correct output: -47                 | Program output: 38                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: 16                 
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: 47                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction 18} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_sub integer_lt exec_dup (boolean_invert_first_then_and integer_dup_items) in1 integer_lt boolean_dup_times exec_do*range () integer_eq boolean_stackdepth integer_add boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer boolean_eq boolean_invert_first_then_and) (integer_dup_items exec_yankdup boolean_yank boolean_stackdepth exec_pop (18 print_newline integer_lte exec_do*while (exec_y (exec_if (exec_swap (exec_s_when_autoconstructing () (boolean_empty) ()) ()) ())))) ()))) () ())))
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.369
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction 18} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_sub integer_lt exec_dup (boolean_invert_first_then_and integer_dup_items) in1 integer_lt boolean_dup_times exec_do*range () integer_eq boolean_stackdepth integer_add boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer boolean_eq boolean_invert_first_then_and) (integer_dup_items exec_yankdup boolean_yank boolean_stackdepth exec_pop (18 print_newline integer_lte exec_do*while (exec_y (exec_if (exec_swap (exec_s_when_autoconstructing () (boolean_empty) ()) ()) ())))) ()))) () ())))
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.369
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 538 1000 1000 1000 538 393 934 537 1)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (538 538 0 0 0 538 393 934 537 1)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_105} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or})
Best program: (exec_yankdup exec_yank integer_flush integer_flush in4 integer_dup_times integer_dup_items integer_flush integer_swap integer_gte exec_s_when_autoconstructing () (in1 exec_y_when_autoconstructing () print_integer boolean_invert_first_then_and integer_shove tag_integer_105 boolean_pop boolean_or) ())
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.521
Median total errors in population: 5
Error averages by case: (0.462 0.462 1.0 1.0 1.0 0.462 0.607 0.066 0.463 0.999)
Error minima by case: (0 0 1 1 1 0 0 0 0 0)
Average genome size in population (length): 36.87
Average program size in population (points): 54.429
Average percent parens in population: 0.321
Minimum age in population: 7.0
Maximum age in population: 11.125
Average age in population: 9.17453125
Median age in population: 9.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2783251
--- Timings ---
Current time: 1559314351349 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.2 seconds, 59.4%
Fitness Testing:      3.9 seconds, 22.6%
Report:               3.0 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 620
Test mean error for best: 0.62000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: 55                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: 64                 
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: 35                 
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: 18                 
Correct output: -47                 | Program output: 38                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: 16                 
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: 47                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot})
Lexicase best program: (in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger boolean_empty exec_y_when_autoconstructing (boolean_eq) exec_s (integer_sub exec_rot (integer_swap integer_div boolean_yank exec_shove (exec_y (integer_dup_times exec_s_when_autoconstructing (integer_eq) (exec_do*times () exec_s_when_autoconstructing (integer_add) (exec_noop boolean_rot integer_rot) ()) ()))) () ()) () ())
Lexicase best errors: [0 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot})
Zero cases best program: (in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger boolean_empty exec_y_when_autoconstructing (boolean_eq) exec_s (integer_sub exec_rot (integer_swap integer_div boolean_yank exec_shove (exec_y (integer_dup_times exec_s_when_autoconstructing (integer_eq) (exec_do*times () exec_s_when_autoconstructing (integer_add) (exec_noop boolean_rot integer_rot) ()) ()))) () ()) () ())
Zero cases best errors: [0 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (612 162 147 612 612 1000 914 612 612 1000)
Population mean number of elite cases: 6.28
Count of perfect (error zero) individuals by case: (612 162 147 612 612 0 914 612 612 0)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max})
Best program: (exec_yankdup exec_yank integer_flush integer_flush in4 integer_dup_times integer_dup_items integer_flush integer_swap integer_gte exec_s_when_autoconstructing () (in1 exec_y_when_autoconstructing () print_integer boolean_invert_first_then_and integer_max) ())
Errors: [0 1 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 5.717
Median total errors in population: 4
Error averages by case: (0.388 0.838 0.853 0.388 0.388 1.0 0.086 0.388 0.388 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 33.437
Average program size in population (points): 48.795
Average percent parens in population: 0.307
Minimum age in population: 8.0
Maximum age in population: 12.796875
Average age in population: 10.678359375
Median age in population: 10.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3227627
--- Timings ---
Current time: 1559314353613 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.9 seconds, 60.9%
Fitness Testing:      4.3 seconds, 22.0%
Report:               3.2 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 620
Test mean error for best: 0.62000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: 55                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: 64                 
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: 35                 
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: 18                 
Correct output: -47                 | Program output: 38                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: 16                 
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: 47                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction 18} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (exec_yankdup integer_gte integer_eq exec_dup (boolean_invert_first_then_and integer_dup_items) in1 integer_lt boolean_dup_times exec_do*range () integer_eq boolean_stackdepth integer_add boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer boolean_eq boolean_invert_first_then_and integer_dup_items exec_yankdup boolean_yank boolean_stackdepth exec_pop (18 print_newline integer_lte exec_do*while (exec_y (exec_if (exec_swap (exec_s_when_autoconstructing () (boolean_empty) ()) ()) ())))) () ()))) () ()))) () ())))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction 18} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (exec_yankdup integer_gte integer_eq exec_dup (boolean_invert_first_then_and integer_dup_items) in1 integer_lt boolean_dup_times exec_do*range () integer_eq boolean_stackdepth integer_add boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer boolean_eq boolean_invert_first_then_and integer_dup_items exec_yankdup boolean_yank boolean_stackdepth exec_pop (18 print_newline integer_lte exec_do*while (exec_y (exec_if (exec_swap (exec_s_when_autoconstructing () (boolean_empty) ()) ()) ())))) () ()))) () ()))) () ())))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (784 1000 654 915 655 1000 1000 132 655 1000)
Population mean number of elite cases: 7.80
Count of perfect (error zero) individuals by case: (784 0 654 915 655 0 0 132 655 0)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 2, :instruction integer_div} {:close 1, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_add})
Best program: (integer_sub integer_lt exec_dup (boolean_invert_first_then_and integer_dup_items) exec_if (integer_stackdepth exec_yank exec_y_when_autoconstructing (integer_max integer_empty exec_when (boolean_xor integer_shove exec_s (exec_shove () boolean_or integer_yankdup) (boolean_dup_times in1 integer_div) () print_integer) integer_inc) integer_gt exec_do*times () exec_s_when_autoconstructing (integer_add) () ()) ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 41
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 6.205
Median total errors in population: 5
Error averages by case: (0.216 1.0 0.346 0.085 0.345 1.0 1.0 0.868 0.345 1.0)
Error minima by case: (0 1 0 0 0 1 1 0 0 1)
Average genome size in population (length): 31.059
Average program size in population (points): 45.425
Average percent parens in population: 0.307
Minimum age in population: 9.0
Maximum age in population: 14.1171875
Average age in population: 12.1763828125
Median age in population: 12.28515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3676429
--- Timings ---
Current time: 1559314356245 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 62.7%
Fitness Testing:      4.7 seconds, 21.3%
Report:               3.4 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: 30                 
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -30                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -59                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: -47                
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: 56                 
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 38                 
Correct output: -32                 | Program output: 13                 
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: 39                 
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: 57                 
Correct output: -75                 | Program output: 10                 
Correct output: -65                 | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: 72                 
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: 11                 
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 27                 
Correct output: -70                 | Program output: 34                 
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: 73                 
Correct output: -75                 | Program output: 8                  
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: 58                 
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: 6                  
Correct output: -56                 | Program output: -20                
Correct output: -71                 | Program output: 25                 
Correct output: -98                 | Program output: 75                 
Correct output: -47                 | Program output: 39                 
Correct output: -75                 | Program output: 94                 
Correct output: -91                 | Program output: -2                 
Correct output: -24                 | Program output: 14                 
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -99                 | Program output: 74                 
Correct output: -71                 | Program output: 22                 
Correct output: -78                 | Program output: 81                 
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: 5                  
Correct output: -59                 | Program output: 86                 
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_105} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction -52} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_224} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_597} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush})
Lexicase best program: (in1 integer_shove integer_flush in4 integer_dup_times integer_dup_items integer_flush integer_swap integer_gte exec_s_when_autoconstructing () (in1 in4) (print_integer boolean_invert_first_then_and integer_shove tag_integer_105 boolean_pop boolean_or in1 -52) exec_do*while (integer_sub exec_while () exec_yankdup exec_s_when_autoconstructing (integer_mod integer_yankdup integer_mod integer_lte integer_inc boolean_frominteger exec_flush tag_exec_224 (integer_fromboolean exec_s (exec_k_when_autoconstructing () (boolean_yank boolean_frominteger in1 boolean_shove exec_dup_times (integer_div integer_sub integer_mod in1 tag_exec_597 (exec_pop ()) exec_when (exec_s () (exec_dup (integer_pop) exec_rot (boolean_yank exec_while (integer_flush)) () ()) ())))) () ())) () ()))
Lexicase best errors: [1 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 82
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_105} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction -52} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_exec_224} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_597} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush})
Zero cases best program: (in1 integer_shove integer_flush in4 integer_dup_times integer_dup_items integer_flush integer_swap integer_gte exec_s_when_autoconstructing () (in1 in4) (print_integer boolean_invert_first_then_and integer_shove tag_integer_105 boolean_pop boolean_or in1 -52) exec_do*while (integer_sub exec_while () exec_yankdup exec_s_when_autoconstructing (integer_mod integer_yankdup integer_mod integer_lte integer_inc boolean_frominteger exec_flush tag_exec_224 (integer_fromboolean exec_s (exec_k_when_autoconstructing () (boolean_yank boolean_frominteger in1 boolean_shove exec_dup_times (integer_div integer_sub integer_mod in1 tag_exec_597 (exec_pop ()) exec_when (exec_s () (exec_dup (integer_pop) exec_rot (boolean_yank exec_while (integer_flush)) () ()) ())))) () ())) () ()))
Zero cases best errors: [1 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 82
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 207 207 1000 736 1000 944 1000 1000)
Population mean number of elite cases: 8.09
Count of perfect (error zero) individuals by case: (0 0 207 207 0 736 0 944 0 0)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction 18} {:close 0, :instruction print_newline})
Best program: (exec_yankdup exec_yank integer_flush integer_flush in4 boolean_stackdepth integer_add boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer boolean_eq boolean_invert_first_then_and integer_dup_items exec_yankdup boolean_yank boolean_stackdepth exec_pop (18 print_newline)) () ())))
Errors: [1 1 0 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.906
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.793 0.793 1.0 0.264 1.0 0.056 1.0 1.0)
Error minima by case: (1 1 0 0 1 0 1 0 1 1)
Average genome size in population (length): 30.691
Average program size in population (points): 45.043
Average percent parens in population: 0.308
Minimum age in population: 10.0
Maximum age in population: 15.87890625
Average age in population: 13.66872265625
Median age in population: 13.74609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4141321
--- Timings ---
Current time: 1559314359288 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 64.5%
Fitness Testing:      5.1 seconds, 20.4%
Report:               3.7 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: 30                 
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -30                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -59                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: -47                
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: 56                 
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 38                 
Correct output: -32                 | Program output: 13                 
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: 39                 
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: 57                 
Correct output: -75                 | Program output: 10                 
Correct output: -65                 | Program output: 39                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: 72                 
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: 11                 
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 27                 
Correct output: -70                 | Program output: 34                 
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: 73                 
Correct output: -75                 | Program output: 8                  
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: 58                 
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: 6                  
Correct output: -56                 | Program output: -20                
Correct output: -71                 | Program output: 25                 
Correct output: -98                 | Program output: 75                 
Correct output: -47                 | Program output: 39                 
Correct output: -75                 | Program output: 94                 
Correct output: -91                 | Program output: -2                 
Correct output: -24                 | Program output: 14                 
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -99                 | Program output: 74                 
Correct output: -71                 | Program output: 22                 
Correct output: -78                 | Program output: 81                 
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: 5                  
Correct output: -59                 | Program output: 86                 
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_dup_times boolean_dup_times in4 boolean_invert_first_then_and integer_dup_items in1 integer_lt boolean_dup_times exec_do*range () integer_eq integer_swap integer_add boolean_dup print_integer)
Lexicase best errors: [1 1 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 16
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_dup_times boolean_dup_times in4 boolean_invert_first_then_and integer_dup_items in1 integer_lt boolean_dup_times exec_do*range () integer_eq integer_swap integer_add boolean_dup print_integer)
Zero cases best errors: [1 1 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 16
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 637 637 1000 297 1000 1000 1000 293 1000)
Population mean number of elite cases: 7.86
Count of perfect (error zero) individuals by case: (0 637 637 0 297 0 0 0 293 0)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap})
Best program: (integer_min integer_eq boolean_dup_times integer_flush in4 boolean_rot boolean_swap print_integer boolean_frominteger boolean_empty exec_y_when_autoconstructing (boolean_eq exec_s (integer_sub exec_rot (integer_swap) () ()) () ()))
Errors: [1 0 0 1 1 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.136
Median total errors in population: 8
Error averages by case: (1.0 0.363 0.363 1.0 0.703 1.0 1.0 1.0 0.707 1.0)
Error minima by case: (1 0 0 1 0 1 1 1 0 1)
Average genome size in population (length): 31.722
Average program size in population (points): 45.932
Average percent parens in population: 0.300
Minimum age in population: 11.0
Maximum age in population: 17.46484375
Average age in population: 15.183564453125
Median age in population: 15.2783203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4504568
--- Timings ---
Current time: 1559314361329 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.7 seconds, 65.1%
Fitness Testing:      5.5 seconds, 20.1%
Report:               3.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 620
Test mean error for best: 0.62000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: 55                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: 64                 
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: 59                 
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: 36                 
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: 35                 
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: 58                 
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: 18                 
Correct output: -47                 | Program output: 38                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: 16                 
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: 47                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_sub integer_lt exec_dup (boolean_invert_first_then_and integer_dup_items) in1 integer_lt boolean_dup_times exec_do*range () integer_eq boolean_stackdepth integer_add boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer boolean_eq) (boolean_invert_first_then_and integer_dup_items exec_yankdup boolean_yank) ())))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_sub integer_lt exec_dup (boolean_invert_first_then_and integer_dup_items) in1 integer_lt boolean_dup_times exec_do*range () integer_eq boolean_stackdepth integer_add boolean_dup print_integer exec_shove (exec_do*range (exec_s_when_autoconstructing (exec_dup_times (exec_yank) print_integer boolean_eq) (boolean_invert_first_then_and integer_dup_items exec_yankdup boolean_yank) ())))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 443 443 489 1000 443 489 443 1000 1000)
Population mean number of elite cases: 6.75
Count of perfect (error zero) individuals by case: (0 443 443 489 0 443 489 443 0 0)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_105} {:close 0, :instruction exec_shove})
Best program: (exec_yankdup exec_yank integer_flush integer_flush in4 integer_dup_times integer_flush integer_swap integer_gte exec_s_when_autoconstructing () (in1 exec_y_when_autoconstructing () print_integer boolean_yank integer_shove tag_integer_105 exec_shove ()) ())
Errors: [1 0 0 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.25
Median total errors in population: 8
Error averages by case: (1.0 0.557 0.557 0.511 1.0 0.557 0.511 0.557 1.0 1.0)
Error minima by case: (1 0 0 0 1 0 0 0 1 1)
Average genome size in population (length): 31.263
Average program size in population (points): 45.499
Average percent parens in population: 0.302
Minimum age in population: 12.0
Maximum age in population: 18.5947265625
Average age in population: 16.628220703125
Median age in population: 16.69921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4901093
--- Timings ---
Current time: 1559314363486 milliseconds
Total Time:          29.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.3 seconds, 65.8%
Fitness Testing:      5.8 seconds, 19.8%
Report:               4.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 38                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 27                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: 73                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Lexicase best errors: [1 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Zero cases best errors: [1 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 619 1000 1000 1000 1000 313 619 1000)
Population mean number of elite cases: 8.55
Count of perfect (error zero) individuals by case: (0 0 619 0 0 0 0 313 619 0)
Population mean number of perfect (error zero) cases: 1.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Errors: [1 1 0 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 8.449
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.381 1.0 1.0 1.0 1.0 0.687 0.381 1.0)
Error minima by case: (1 1 0 1 1 1 1 0 0 1)
Average genome size in population (length): 29.149
Average program size in population (points): 42.68
Average percent parens in population: 0.306
Minimum age in population: 14.84765625
Maximum age in population: 20.13818359375
Average age in population: 18.09042919921875
Median age in population: 18.166015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5330288
--- Timings ---
Current time: 1559314365759 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.0 seconds, 66.3%
Fitness Testing:      6.2 seconds, 19.7%
Report:               4.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 38                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 27                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: 73                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 exec_do*while (boolean_dup_times) in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Lexicase best errors: [0 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 exec_do*while (boolean_dup_times) in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Zero cases best errors: [0 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (893 1000 1000 923 1000 921 922 893 894 2)
Population mean number of elite cases: 8.45
Count of perfect (error zero) individuals by case: (893 0 0 923 0 921 922 893 894 2)
Population mean number of perfect (error zero) cases: 5.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Errors: [0 1 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 4.552
Median total errors in population: 4
Error averages by case: (0.107 1.0 1.0 0.077 1.0 0.079 0.078 0.107 0.106 0.998)
Error minima by case: (0 1 1 0 1 0 0 0 0 0)
Average genome size in population (length): 16.978
Average program size in population (points): 19.013
Average percent parens in population: 0.107
Minimum age in population: 20.35546875
Maximum age in population: 21.35546875
Average age in population: 20.85146875
Median age in population: 20.35546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 748
Genome diversity (% unique genomes):	 0.21
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 784
Syntactic diversity (% unique Push programs):	 0.186
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5513312
--- Timings ---
Current time: 1559314367669 milliseconds
Total Time:          33.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.5 seconds, 67.1%
Fitness Testing:      6.4 seconds, 19.1%
Report:               4.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 518
Test mean error for best: 0.51800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 47                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 77                 
Correct output: 16                  | Program output: 68                 
Correct output: 3                   | Program output: 3                  
Correct output: 53                  | Program output: 60                 
Correct output: 6                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 20                  | Program output: 26                 
Correct output: 21                  | Program output: 55                 
Correct output: 5                   | Program output: 7                  
Correct output: 72                  | Program output: 72                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 89                 
Correct output: 42                  | Program output: 44                 
Correct output: 13                  | Program output: 73                 
Correct output: 29                  | Program output: 54                 
Correct output: 43                  | Program output: 78                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 81                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -95                
Correct output: -67                 | Program output: -50                
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: 80                 
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -86                
Correct output: 18                  | Program output: 80                 
Correct output: -54                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -14                 | Program output: -10                
Correct output: -47                 | Program output: -38                
Correct output: -79                 | Program output: -3                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 33                 
Correct output: -43                 | Program output: -43                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 49                 
Correct output: -75                 | Program output: -72                
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 41                 
Correct output: -73                 | Program output: 33                 
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 82                 
Correct output: 21                  | Program output: 41                 
Correct output: -69                 | Program output: -69                
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 47                 
Correct output: -70                 | Program output: -54                
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 24                 
Correct output: -71                 | Program output: 93                 
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_dup_items boolean_dup_times in3 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Lexicase best errors: [1 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_dup_items boolean_dup_times in3 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Zero cases best errors: [1 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (49 3 922 932 3 955 923 285 3 959)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (49 3 922 932 3 955 923 285 3 959)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_dup_items boolean_dup_times in3 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot boolean_swap print_integer boolean_frominteger)
Errors: [1 1 0 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 4.966
Median total errors in population: 5
Error averages by case: (0.951 0.997 0.078 0.068 0.997 0.045 0.077 0.715 0.997 0.041)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.054
Average program size in population (points): 19.113
Average percent parens in population: 0.108
Minimum age in population: 21.35546875
Maximum age in population: 23.35546875
Average age in population: 22.33396875
Median age in population: 22.35546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 420
Genome diversity (% unique genomes):	 0.284
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 467
Syntactic diversity (% unique Push programs):	 0.238
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5698719
--- Timings ---
Current time: 1559314369433 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.0 seconds, 67.8%
Fitness Testing:      6.6 seconds, 18.6%
Report:               4.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 63                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 93                 
Correct output: 16                  | Program output: 54                 
Correct output: 3                   | Program output: 22                 
Correct output: 53                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 21                  | Program output: 40                 
Correct output: 5                   | Program output: 88                 
Correct output: 72                  | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 14                  | Program output: 38                 
Correct output: 14                  | Program output: 88                 
Correct output: 15                  | Program output: 78                 
Correct output: 4                   | Program output: 4                  
Correct output: 42                  | Program output: 88                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 63                 
Correct output: 43                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: 10                  | Program output: 10                 
Correct output: -24                 | Program output: 85                 
Correct output: -80                 | Program output: 11                 
Correct output: -51                 | Program output: 93                 
Correct output: -40                 | Program output: 51                 
Correct output: -86                 | Program output: 6                  
Correct output: -22                 | Program output: 98                 
Correct output: -96                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: -61                 | Program output: 30                 
Correct output: -75                 | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: 37                 
Correct output: -86                 | Program output: -21                
Correct output: 18                  | Program output: 18                 
Correct output: -54                 | Program output: -54                
Correct output: -73                 | Program output: 43                 
Correct output: -88                 | Program output: 35                 
Correct output: -14                 | Program output: 78                 
Correct output: -47                 | Program output: -47                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: 12                 
Correct output: -64                 | Program output: -64                
Correct output: -43                 | Program output: -42                
Correct output: -75                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -75                 | Program output: 51                 
Correct output: -67                 | Program output: 64                 
Correct output: -59                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 55                 
Correct output: -56                 | Program output: 22                 
Correct output: -71                 | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: 21                 
Correct output: -75                 | Program output: -33                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: 21                  | Program output: 65                 
Correct output: -69                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: 83                 
Correct output: -99                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -30                
Correct output: -17                 | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 73                 
Correct output: -55                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 in3 boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot in2 print_integer boolean_frominteger)
Lexicase best errors: [1 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 in3 boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot in2 print_integer boolean_frominteger)
Zero cases best errors: [1 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 394 930 954 14 394 265 281 396 394)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (10 394 930 954 14 394 265 281 396 394)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_eq boolean_dup_times in4 in3 boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot in2 print_integer boolean_frominteger)
Errors: [1 0 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 5.968
Median total errors in population: 7
Error averages by case: (0.99 0.606 0.07 0.046 0.986 0.606 0.735 0.719 0.604 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.779
Average program size in population (points): 19.239
Average percent parens in population: 0.126
Minimum age in population: 22.35546875
Maximum age in population: 25.35546875
Average age in population: 23.87946875
Median age in population: 23.85546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.32
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.274
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5884231
--- Timings ---
Current time: 1559314371431 milliseconds
Total Time:          37.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.6 seconds, 68.7%
Fitness Testing:      6.8 seconds, 18.1%
Report:               4.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 533
Test mean error for best: 0.53300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 84                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 68                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 49                 
Correct output: 20                  | Program output: 74                 
Correct output: 21                  | Program output: 78                 
Correct output: 5                   | Program output: 21                 
Correct output: 72                  | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 49                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 72                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 91                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 84                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 73                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 96                 
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: -37                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -37                
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: -17                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -3                 
Correct output: -79                 | Program output: 50                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 67                 
Correct output: -43                 | Program output: 76                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 61                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 19                 
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -30                
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -50                
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: -1                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot exec_do*times (print_integer boolean_frominteger))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot exec_do*times (print_integer boolean_frominteger))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 197 462 360 461 955 107 462 484 484)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (484 197 462 360 461 955 107 462 484 484)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_eq boolean_or in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot exec_do*times (print_integer boolean_frominteger))
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 20
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 5.544
Median total errors in population: 6
Error averages by case: (0.516 0.803 0.538 0.64 0.539 0.045 0.893 0.538 0.516 0.516)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.413
Average program size in population (points): 20.141
Average percent parens in population: 0.134
Minimum age in population: 23.35546875
Maximum age in population: 27.10546875
Average age in population: 25.43884375
Median age in population: 25.35546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.316
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.262
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6173120
--- Timings ---
Current time: 1559314373802 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.4 seconds, 69.4%
Fitness Testing:      7.0 seconds, 17.7%
Report:               5.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 475
Test mean error for best: 0.47500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 68                 
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 76                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 86                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: 0                  
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -95                
Correct output: -67                 | Program output: -50                
Correct output: -32                 | Program output: -16                
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -9                 
Correct output: -86                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -86                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -14                 | Program output: -10                
Correct output: -47                 | Program output: -38                
Correct output: -79                 | Program output: -3                 
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: 90                 
Correct output: -43                 | Program output: -43                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 40                 
Correct output: -75                 | Program output: -72                
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: 1                  
Correct output: -73                 | Program output: -61                
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: 71                 
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -69                
Correct output: -59                 | Program output: -39                
Correct output: -74                 | Program output: -12                
Correct output: -99                 | Program output: -99                
Correct output: -71                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -54                
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: 1                  
Correct output: -71                 | Program output: -57                
Correct output: -98                 | Program output: -84                
Correct output: -59                 | Program output: -59                
Correct output: -46                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 integer_dup boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot exec_do*times (print_integer boolean_frominteger))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 integer_dup boolean_or in1 integer_shove exec_dup (boolean_rot) boolean_rot exec_do*times (print_integer boolean_frominteger))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 305 307 627 306 415 410 307 628 957)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (18 305 307 627 306 415 410 307 628 957)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_eq boolean_dup_times in4 in3 boolean_dup_times in1 boolean_flush boolean_or in1 integer_shove boolean_rot boolean_rot exec_do*times (print_integer boolean_frominteger))
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 16
Size: 18
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.72
Median total errors in population: 5
Error averages by case: (0.982 0.695 0.693 0.373 0.694 0.585 0.59 0.693 0.372 0.043)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.135
Average program size in population (points): 19.901
Average percent parens in population: 0.137
Minimum age in population: 24.35546875
Maximum age in population: 28.73046875
Average age in population: 26.90721875
Median age in population: 26.98046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.368
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.306
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6541494
--- Timings ---
Current time: 1559314376074 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.1 seconds, 69.6%
Fitness Testing:      7.3 seconds, 17.4%
Report:               5.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 47                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 77                 
Correct output: 16                  | Program output: 68                 
Correct output: 3                   | Program output: 3                  
Correct output: 53                  | Program output: 60                 
Correct output: 6                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 20                  | Program output: 26                 
Correct output: 21                  | Program output: 55                 
Correct output: 5                   | Program output: 7                  
Correct output: 72                  | Program output: 72                 
Correct output: 1                   | Program output: 60                 
Correct output: 2                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 89                 
Correct output: 42                  | Program output: 44                 
Correct output: 13                  | Program output: 73                 
Correct output: 29                  | Program output: 54                 
Correct output: 43                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: 10                  | Program output: 81                 
Correct output: -24                 | Program output: 3                  
Correct output: -80                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: 71                 
Correct output: -86                 | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 80                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: -61                 | Program output: -45                
Correct output: -75                 | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: 96                 
Correct output: -86                 | Program output: -21                
Correct output: 18                  | Program output: 80                 
Correct output: -54                 | Program output: -54                
Correct output: -73                 | Program output: -55                
Correct output: -88                 | Program output: -88                
Correct output: -14                 | Program output: -10                
Correct output: -47                 | Program output: -47                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -43                 | Program output: -42                
Correct output: -75                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -75                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -1                 
Correct output: -56                 | Program output: 12                 
Correct output: -71                 | Program output: -41                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -39                
Correct output: -75                 | Program output: -33                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: 21                  | Program output: 41                 
Correct output: -69                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -65                
Correct output: -99                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -30                
Correct output: -17                 | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_dup_items exec_dup_times () in3 boolean_flush boolean_dup_times in1 boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_dup_items exec_dup_times () in3 boolean_flush boolean_dup_times in1 boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 344 428 474 8 114 453 428 453 453)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (471 344 428 474 8 114 453 428 453 453)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_dup_items exec_dup_times () in3 boolean_flush boolean_dup_times in1 boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.374
Median total errors in population: 6
Error averages by case: (0.529 0.656 0.572 0.526 0.992 0.886 0.547 0.572 0.547 0.547)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.154
Average program size in population (points): 23.099
Average percent parens in population: 0.129
Minimum age in population: 25.35546875
Maximum age in population: 30.38671875
Average age in population: 28.6909375
Median age in population: 28.79296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.362
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.316
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7014037
--- Timings ---
Current time: 1559314378297 milliseconds
Total Time:          44.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.8 seconds, 69.8%
Fitness Testing:      7.6 seconds, 17.3%
Report:               5.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 577
Test mean error for best: 0.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -34                 | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 58                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 54                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 94                 
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 73                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 89                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 78                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: -98                
Correct output: 10                  | Program output: 53                 
Correct output: -24                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: 56                 
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: -61                 | Program output: 57                 
Correct output: -75                 | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: 72                 
Correct output: -86                 | Program output: -21                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -54                
Correct output: -73                 | Program output: 11                 
Correct output: -88                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: 34                 
Correct output: -64                 | Program output: -64                
Correct output: -43                 | Program output: -42                
Correct output: -75                 | Program output: 8                  
Correct output: -59                 | Program output: -59                
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: 58                 
Correct output: -59                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: 6                  
Correct output: -56                 | Program output: -20                
Correct output: -71                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: 39                 
Correct output: -75                 | Program output: -33                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: 21                  | Program output: 24                 
Correct output: -69                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -99                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -30                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_eq boolean_dup_times in4 in3 exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 18
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_eq boolean_dup_times in4 in3 exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 18
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (420 469 469 421 964 964 85 888 458 394)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (420 469 469 421 964 964 85 888 458 394)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_eq boolean_dup_times in4 in3 boolean_dup_times in1 boolean_flush boolean_or boolean_flush boolean_dup_times in1 boolean_flush boolean_or exec_rot (in1 exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 4.468
Median total errors in population: 4
Error averages by case: (0.58 0.531 0.531 0.579 0.036 0.036 0.915 0.112 0.542 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.881
Average program size in population (points): 22.361
Average percent parens in population: 0.198
Minimum age in population: 28.04296875
Maximum age in population: 32.04296875
Average age in population: 30.3470625
Median age in population: 30.35546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 324
Genome diversity (% unique genomes):	 0.262
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 333
Syntactic diversity (% unique Push programs):	 0.234
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7322005
--- Timings ---
Current time: 1559314380481 milliseconds
Total Time:          46.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.6 seconds, 70.3%
Fitness Testing:      7.9 seconds, 17.0%
Report:               5.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 393
Test mean error for best: 0.39300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 56                 
Correct output: 53                  | Program output: 53                 
Correct output: 6                   | Program output: 47                 
Correct output: 20                  | Program output: 27                 
Correct output: 20                  | Program output: 21                 
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 72                  | Program output: 78                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 27                 
Correct output: 14                  | Program output: 34                 
Correct output: 14                  | Program output: 52                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: -98                 | Program output: -98                
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -5                 
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: 53                 
Correct output: -96                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -21                
Correct output: 18                  | Program output: 33                 
Correct output: -54                 | Program output: -54                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 32                 
Correct output: -14                 | Program output: -14                
Correct output: -47                 | Program output: -47                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -51                
Correct output: -64                 | Program output: -64                
Correct output: -43                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -48                
Correct output: -59                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -33                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -99                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -30                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Lexicase best errors: [0 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Zero cases best errors: [0 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 345 337 555 949 451 554 554 5 770)
Population mean number of elite cases: 4.81
Count of perfect (error zero) individuals by case: (290 345 337 555 949 451 554 554 5 770)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_eq boolean_dup_times in4 boolean_flush boolean_dup_times in1 boolean_flush boolean_or integer_min integer_shove exec_dup (in2) boolean_rot integer_yankdup print_integer boolean_frominteger)
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 5.19
Median total errors in population: 4
Error averages by case: (0.71 0.655 0.663 0.445 0.051 0.549 0.446 0.446 0.995 0.23)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.042
Average program size in population (points): 26.069
Average percent parens in population: 0.199
Minimum age in population: 29.91796875
Maximum age in population: 33.46484375
Average age in population: 31.76715625
Median age in population: 31.8828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.304
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.267
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7798143
--- Timings ---
Current time: 1559314382741 milliseconds
Total Time:          48.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.3 seconds, 70.6%
Fitness Testing:      8.3 seconds, 17.0%
Report:               5.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 380
Test mean error for best: 0.38000
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 47                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 77                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 3                  
Correct output: 53                  | Program output: 60                 
Correct output: 6                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 20                  | Program output: 26                 
Correct output: 21                  | Program output: 55                 
Correct output: 5                   | Program output: 7                  
Correct output: 72                  | Program output: 72                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 44                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -21                
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -14                 | Program output: -10                
Correct output: -47                 | Program output: -47                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -43                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -75                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -33                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -65                
Correct output: -99                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -30                
Correct output: -17                 | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 662 621 293 258 470 697 659 699 915)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (662 662 621 293 258 470 697 659 699 915)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger})
Best program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.064
Median total errors in population: 5
Error averages by case: (0.338 0.338 0.379 0.707 0.742 0.53 0.303 0.341 0.301 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.994
Average program size in population (points): 26.947
Average percent parens in population: 0.182
Minimum age in population: 32.59765625
Maximum age in population: 35.31640625
Average age in population: 34.37433203125
Median age in population: 34.30859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.33
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.304
Total error diversity:				 0.01
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8164445
--- Timings ---
Current time: 1559314385032 milliseconds
Total Time:          50.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 70.9%
Fitness Testing:      8.6 seconds, 16.8%
Report:               6.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 21
Successful program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 25


Auto-simplifying with starting size: 25
step: 0
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 500
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 1000
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 1500
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 2000
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 2500
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 3000
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 3500
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 4000
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 4500
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

step: 5000
program: (integer_min integer_dup_items boolean_dup_times in3 in1 boolean_flush boolean_or in1 integer_shove integer_min boolean_flush boolean_or exec_rot (integer_shove exec_dup (in2) boolean_rot) (integer_yankdup print_integer boolean_frominteger) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 25

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 380
Test mean error for best: 0.38000
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 47                 
Correct output: -50                 | Program output: -50                
Correct output: 21                  | Program output: 21                 
Correct output: -55                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: 63                  | Program output: 66                 
Correct output: -3                  | Program output: -3                 
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 77                 
Correct output: 16                  | Program output: 65                 
Correct output: 3                   | Program output: 3                  
Correct output: 53                  | Program output: 60                 
Correct output: 6                   | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 20                  | Program output: 26                 
Correct output: 21                  | Program output: 55                 
Correct output: 5                   | Program output: 7                  
Correct output: 72                  | Program output: 72                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 71                 
Correct output: 42                  | Program output: 44                 
Correct output: 13                  | Program output: 32                 
Correct output: 29                  | Program output: 44                 
Correct output: 43                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: 10                  | Program output: 17                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -36                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: 63                 
Correct output: -80                 | Program output: -80                
Correct output: -89                 | Program output: -27                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -21                
Correct output: 18                  | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -14                 | Program output: -10                
Correct output: -47                 | Program output: -47                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -43                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -75                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -59                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -74                 | Program output: -74                
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -33                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: -24                
Correct output: -15                 | Program output: -15                
Correct output: 21                  | Program output: 21                 
Correct output: -69                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -65                
Correct output: -99                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -30                
Correct output: -17                 | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -3                 
Correct output: -46                 | Program output: -46                
;;******************************
