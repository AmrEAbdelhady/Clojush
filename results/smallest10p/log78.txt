Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -12 -78 -12] -78] [[-20 -20 81 -20] -20] [[24 -47 24 24] -47] [[-24 -24 -24 -67] -67] [[34 34 34 -26] -26] [[-28 -28 -28 72] -28] [[55 -54 55 55] -54] [[-76 -76 -6 -76] -76] [[9 64 9 9] 9] [[54 54 54 -42] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-12 -12 -78 -12] -78]
Train Case:   6 | Input/Output: [[-20 -20 81 -20] -20]
Train Case:   7 | Input/Output: [[24 -47 24 24] -47]
Train Case:   8 | Input/Output: [[-24 -24 -24 -67] -67]
Train Case:   9 | Input/Output: [[34 34 34 -26] -26]
Train Case:  10 | Input/Output: [[-28 -28 -28 72] -28]
Train Case:  11 | Input/Output: [[55 -54 55 55] -54]
Train Case:  12 | Input/Output: [[-76 -76 -6 -76] -76]
Train Case:  13 | Input/Output: [[9 64 9 9] 9]
Train Case:  14 | Input/Output: [[54 54 54 -42] -42]
Train Case:  15 | Input/Output: [(96 96 96 96) 96]
Train Case:  16 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(78 78 78 78) 78]
Train Case:  19 | Input/Output: [(68 68 68 68) 68]
Train Case:  20 | Input/Output: [(32 34 13 85) 13]
Train Case:  21 | Input/Output: [(93 25 3 96) 3]
Train Case:  22 | Input/Output: [(75 32 1 3) 1]
Train Case:  23 | Input/Output: [(96 58 20 39) 20]
Train Case:  24 | Input/Output: [(8 94 4 34) 4]
Train Case:  25 | Input/Output: [(78 76 29 19) 19]
Train Case:  26 | Input/Output: [(29 56 55 15) 15]
Train Case:  27 | Input/Output: [(67 99 63 33) 33]
Train Case:  28 | Input/Output: [(41 64 42 30) 30]
Train Case:  29 | Input/Output: [(96 25 93 14) 14]
Train Case:  30 | Input/Output: [(77 73 49 44) 44]
Train Case:  31 | Input/Output: [(12 61 86 21) 12]
Train Case:  32 | Input/Output: [(30 12 1 56) 1]
Train Case:  33 | Input/Output: [(88 9 15 13) 9]
Train Case:  34 | Input/Output: [(41 67 77 66) 41]
Train Case:  35 | Input/Output: [(69 36 47 0) 0]
Train Case:  36 | Input/Output: [(38 94 41 49) 38]
Train Case:  37 | Input/Output: [(52 10 66 13) 10]
Train Case:  38 | Input/Output: [(32 88 92 17) 17]
Train Case:  39 | Input/Output: [(36 75 48 73) 36]
Train Case:  40 | Input/Output: [(15 59 73 27) 15]
Train Case:  41 | Input/Output: [(87 -57 -1 -34) -57]
Train Case:  42 | Input/Output: [(-24 -95 76 -47) -95]
Train Case:  43 | Input/Output: [(-38 -72 -53 -73) -73]
Train Case:  44 | Input/Output: [(-66 32 40 56) -66]
Train Case:  45 | Input/Output: [(-6 88 -11 43) -11]
Train Case:  46 | Input/Output: [(-57 -12 49 4) -57]
Train Case:  47 | Input/Output: [(86 48 -95 -38) -95]
Train Case:  48 | Input/Output: [(-53 75 28 -31) -53]
Train Case:  49 | Input/Output: [(-11 -56 40 -3) -56]
Train Case:  50 | Input/Output: [(-79 82 -48 -5) -79]
Train Case:  51 | Input/Output: [(92 -6 19 92) -6]
Train Case:  52 | Input/Output: [(-65 37 25 82) -65]
Train Case:  53 | Input/Output: [(-19 -71 -5 -76) -76]
Train Case:  54 | Input/Output: [(25 -73 97 -73) -73]
Train Case:  55 | Input/Output: [(-70 -60 -28 -46) -70]
Train Case:  56 | Input/Output: [(37 -68 -33 -69) -69]
Train Case:  57 | Input/Output: [(-19 82 5 49) -19]
Train Case:  58 | Input/Output: [(29 95 25 -98) -98]
Train Case:  59 | Input/Output: [(59 1 -48 -62) -62]
Train Case:  60 | Input/Output: [(-92 11 85 80) -92]
Train Case:  61 | Input/Output: [(72 55 -4 -70) -70]
Train Case:  62 | Input/Output: [(8 61 -76 -30) -76]
Train Case:  63 | Input/Output: [(-67 31 4 -65) -67]
Train Case:  64 | Input/Output: [(4 3 -16 -44) -44]
Train Case:  65 | Input/Output: [(-45 49 85 20) -45]
Train Case:  66 | Input/Output: [(43 20 89 88) 20]
Train Case:  67 | Input/Output: [(-48 -89 -24 -27) -89]
Train Case:  68 | Input/Output: [(22 -68 18 44) -68]
Train Case:  69 | Input/Output: [(-2 -59 99 31) -59]
Train Case:  70 | Input/Output: [(-52 34 -96 -45) -96]
Train Case:  71 | Input/Output: [(-47 16 -17 -71) -71]
Train Case:  72 | Input/Output: [(-18 84 48 0) -18]
Train Case:  73 | Input/Output: [(-72 -43 96 72) -72]
Train Case:  74 | Input/Output: [(97 -55 92 63) -55]
Train Case:  75 | Input/Output: [(-94 85 -42 39) -94]
Train Case:  76 | Input/Output: [(20 -19 41 -77) -77]
Train Case:  77 | Input/Output: [(78 -81 -43 79) -81]
Train Case:  78 | Input/Output: [(-73 -59 -69 -78) -78]
Train Case:  79 | Input/Output: [(77 32 -46 30) -46]
Train Case:  80 | Input/Output: [(90 60 56 -25) -25]
Train Case:  81 | Input/Output: [(-38 52 69 -35) -38]
Train Case:  82 | Input/Output: [(-4 -68 8 -85) -85]
Train Case:  83 | Input/Output: [(61 -26 99 -66) -66]
Train Case:  84 | Input/Output: [(-78 -7 -28 -39) -78]
Train Case:  85 | Input/Output: [(60 -56 -48 -32) -56]
Train Case:  86 | Input/Output: [(0 -60 15 84) -60]
Train Case:  87 | Input/Output: [(81 -61 -34 25) -61]
Train Case:  88 | Input/Output: [(-30 41 99 -49) -49]
Train Case:  89 | Input/Output: [(-52 -73 -26 -85) -85]
Train Case:  90 | Input/Output: [(-59 32 -83 32) -83]
Train Case:  91 | Input/Output: [(-72 73 24 95) -72]
Train Case:  92 | Input/Output: [(56 9 -14 1) -14]
Train Case:  93 | Input/Output: [(-43 97 73 -73) -73]
Train Case:  94 | Input/Output: [(-21 -7 62 93) -21]
Train Case:  95 | Input/Output: [(-19 -89 19 13) -89]
Train Case:  96 | Input/Output: [(-81 2 -91 -47) -91]
Train Case:  97 | Input/Output: [(-59 -55 -88 4) -88]
Train Case:  98 | Input/Output: [(37 25 36 40) 25]
Train Case:  99 | Input/Output: [(25 33 -55 -97) -97]
Test Case:   0 | Input/Output: [[-34 -89 -34 -34] -89]
Test Case:   1 | Input/Output: [[100 -65 100 100] -65]
Test Case:   2 | Input/Output: [[50 50 -9 50] -9]
Test Case:   3 | Input/Output: [[4 -29 -29 -29] -29]
Test Case:   4 | Input/Output: [[-15 -84 -15 -15] -84]
Test Case:   5 | Input/Output: [[6 6 6 -7] -7]
Test Case:   6 | Input/Output: [[-52 -67 -52 -52] -67]
Test Case:   7 | Input/Output: [[-15 -15 -15 -68] -68]
Test Case:   8 | Input/Output: [[56 56 -29 56] -29]
Test Case:   9 | Input/Output: [[61 -8 61 61] -8]
Test Case:  10 | Input/Output: [[-95 -95 -95 85] -95]
Test Case:  11 | Input/Output: [[-14 -14 -14 -33] -33]
Test Case:  12 | Input/Output: [[-37 -37 43 -37] -37]
Test Case:  13 | Input/Output: [[12 12 82 12] 12]
Test Case:  14 | Input/Output: [[-98 83 83 83] -98]
Test Case:  15 | Input/Output: [[-5 -5 -5 3] -5]
Test Case:  16 | Input/Output: [[18 50 18 18] 18]
Test Case:  17 | Input/Output: [[-81 42 42 42] -81]
Test Case:  18 | Input/Output: [[-4 12 12 12] -4]
Test Case:  19 | Input/Output: [[-90 -7 -7 -7] -90]
Test Case:  20 | Input/Output: [[-45 -45 -45 89] -45]
Test Case:  21 | Input/Output: [[-51 -51 -51 -66] -66]
Test Case:  22 | Input/Output: [[23 -83 23 23] -83]
Test Case:  23 | Input/Output: [[0 0 0 -40] -40]
Test Case:  24 | Input/Output: [[39 39 39 -89] -89]
Test Case:  25 | Input/Output: [[-18 -21 -21 -21] -21]
Test Case:  26 | Input/Output: [[-85 -85 -85 -12] -85]
Test Case:  27 | Input/Output: [[68 68 68 42] 42]
Test Case:  28 | Input/Output: [[-50 -50 70 -50] -50]
Test Case:  29 | Input/Output: [[-5 -40 -40 -40] -40]
Test Case:  30 | Input/Output: [[-80 -19 -80 -80] -80]
Test Case:  31 | Input/Output: [[98 -33 -33 -33] -33]
Test Case:  32 | Input/Output: [[33 -23 33 33] -23]
Test Case:  33 | Input/Output: [[38 -76 -76 -76] -76]
Test Case:  34 | Input/Output: [[-55 75 -55 -55] -55]
Test Case:  35 | Input/Output: [[-18 -18 30 -18] -18]
Test Case:  36 | Input/Output: [[62 62 -65 62] -65]
Test Case:  37 | Input/Output: [[18 -52 -52 -52] -52]
Test Case:  38 | Input/Output: [[52 83 52 52] 52]
Test Case:  39 | Input/Output: [[-8 -7 -7 -7] -8]
Test Case:  40 | Input/Output: [[-57 89 -57 -57] -57]
Test Case:  41 | Input/Output: [[8 8 8 -76] -76]
Test Case:  42 | Input/Output: [[46 -54 46 46] -54]
Test Case:  43 | Input/Output: [[39 12 39 39] 12]
Test Case:  44 | Input/Output: [[-71 -98 -98 -98] -98]
Test Case:  45 | Input/Output: [[77 -23 77 77] -23]
Test Case:  46 | Input/Output: [[-78 -78 -78 40] -78]
Test Case:  47 | Input/Output: [[36 36 76 36] 36]
Test Case:  48 | Input/Output: [[72 72 37 72] 37]
Test Case:  49 | Input/Output: [[15 15 91 15] 15]
Test Case:  50 | Input/Output: [[89 -16 -16 -16] -16]
Test Case:  51 | Input/Output: [[58 58 0 58] 0]
Test Case:  52 | Input/Output: [[-29 -29 -43 -29] -43]
Test Case:  53 | Input/Output: [[-3 20 -3 -3] -3]
Test Case:  54 | Input/Output: [[-87 -77 -87 -87] -87]
Test Case:  55 | Input/Output: [[57 -40 -40 -40] -40]
Test Case:  56 | Input/Output: [[-40 -40 -40 78] -40]
Test Case:  57 | Input/Output: [[-7 85 85 85] -7]
Test Case:  58 | Input/Output: [[-81 -81 73 -81] -81]
Test Case:  59 | Input/Output: [[76 76 64 76] 64]
Test Case:  60 | Input/Output: [[86 86 -60 86] -60]
Test Case:  61 | Input/Output: [[-54 12 -54 -54] -54]
Test Case:  62 | Input/Output: [[-25 -25 -25 94] -25]
Test Case:  63 | Input/Output: [[-95 -95 -95 -34] -95]
Test Case:  64 | Input/Output: [[39 39 39 -63] -63]
Test Case:  65 | Input/Output: [[76 76 85 76] 76]
Test Case:  66 | Input/Output: [[6 84 84 84] 6]
Test Case:  67 | Input/Output: [[-89 0 0 0] -89]
Test Case:  68 | Input/Output: [[-46 45 -46 -46] -46]
Test Case:  69 | Input/Output: [[-71 -71 -71 -44] -71]
Test Case:  70 | Input/Output: [[-67 -67 -67 75] -67]
Test Case:  71 | Input/Output: [[-4 -53 -53 -53] -53]
Test Case:  72 | Input/Output: [[-16 -83 -83 -83] -83]
Test Case:  73 | Input/Output: [[78 -54 78 78] -54]
Test Case:  74 | Input/Output: [[86 -11 86 86] -11]
Test Case:  75 | Input/Output: [[43 43 -38 43] -38]
Test Case:  76 | Input/Output: [[-95 -43 -95 -95] -95]
Test Case:  77 | Input/Output: [[30 -32 -32 -32] -32]
Test Case:  78 | Input/Output: [[85 85 85 -5] -5]
Test Case:  79 | Input/Output: [[51 51 -60 51] -60]
Test Case:  80 | Input/Output: [[-78 81 81 81] -78]
Test Case:  81 | Input/Output: [[91 20 20 20] 20]
Test Case:  82 | Input/Output: [[-51 36 -51 -51] -51]
Test Case:  83 | Input/Output: [[52 -88 -88 -88] -88]
Test Case:  84 | Input/Output: [[-63 -63 -63 -31] -63]
Test Case:  85 | Input/Output: [[88 88 88 -30] -30]
Test Case:  86 | Input/Output: [[17 17 17 7] 7]
Test Case:  87 | Input/Output: [[-43 -77 -43 -43] -77]
Test Case:  88 | Input/Output: [[13 13 58 13] 13]
Test Case:  89 | Input/Output: [[-31 -92 -31 -31] -92]
Test Case:  90 | Input/Output: [[27 -43 27 27] -43]
Test Case:  91 | Input/Output: [[-60 -44 -60 -60] -60]
Test Case:  92 | Input/Output: [[71 20 71 71] 20]
Test Case:  93 | Input/Output: [[5 -24 5 5] -24]
Test Case:  94 | Input/Output: [[25 73 25 25] 25]
Test Case:  95 | Input/Output: [[27 27 27 99] 27]
Test Case:  96 | Input/Output: [[-3 -3 -3 31] -3]
Test Case:  97 | Input/Output: [[-21 -21 29 -21] -21]
Test Case:  98 | Input/Output: [[27 27 27 -87] -87]
Test Case:  99 | Input/Output: [[2 34 2 2] 2]
Test Case: 100 | Input/Output: [(75 75 75 75) 75]
Test Case: 101 | Input/Output: [(18 18 18 18) 18]
Test Case: 102 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 103 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 104 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 105 | Input/Output: [(23 23 23 23) 23]
Test Case: 106 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 107 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 108 | Input/Output: [(79 79 79 79) 79]
Test Case: 109 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 110 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 111 | Input/Output: [(89 89 89 89) 89]
Test Case: 112 | Input/Output: [(54 54 54 54) 54]
Test Case: 113 | Input/Output: [(17 17 17 17) 17]
Test Case: 114 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 115 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 116 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 117 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 118 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 119 | Input/Output: [(79 79 79 79) 79]
Test Case: 120 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 121 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 122 | Input/Output: [(98 98 98 98) 98]
Test Case: 123 | Input/Output: [(56 56 56 56) 56]
Test Case: 124 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 125 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 126 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 127 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 128 | Input/Output: [(75 75 75 75) 75]
Test Case: 129 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 130 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 131 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 132 | Input/Output: [(74 74 74 74) 74]
Test Case: 133 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 134 | Input/Output: [(100 100 100 100) 100]
Test Case: 135 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 136 | Input/Output: [(53 53 53 53) 53]
Test Case: 137 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 138 | Input/Output: [(29 29 29 29) 29]
Test Case: 139 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 140 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 141 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 142 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 143 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 144 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 145 | Input/Output: [(25 25 25 25) 25]
Test Case: 146 | Input/Output: [(1 1 1 1) 1]
Test Case: 147 | Input/Output: [(45 45 45 45) 45]
Test Case: 148 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 149 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 150 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 151 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 152 | Input/Output: [(8 8 8 8) 8]
Test Case: 153 | Input/Output: [(9 9 9 9) 9]
Test Case: 154 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 155 | Input/Output: [(2 2 2 2) 2]
Test Case: 156 | Input/Output: [(14 14 14 14) 14]
Test Case: 157 | Input/Output: [(89 89 89 89) 89]
Test Case: 158 | Input/Output: [(71 71 71 71) 71]
Test Case: 159 | Input/Output: [(18 18 18 18) 18]
Test Case: 160 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 161 | Input/Output: [(25 25 25 25) 25]
Test Case: 162 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 163 | Input/Output: [(1 1 1 1) 1]
Test Case: 164 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 165 | Input/Output: [(77 77 77 77) 77]
Test Case: 166 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 167 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 168 | Input/Output: [(40 40 40 40) 40]
Test Case: 169 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 170 | Input/Output: [(9 9 9 9) 9]
Test Case: 171 | Input/Output: [(53 53 53 53) 53]
Test Case: 172 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 173 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 174 | Input/Output: [(7 7 7 7) 7]
Test Case: 175 | Input/Output: [(51 51 51 51) 51]
Test Case: 176 | Input/Output: [(28 28 28 28) 28]
Test Case: 177 | Input/Output: [(33 33 33 33) 33]
Test Case: 178 | Input/Output: [(62 62 62 62) 62]
Test Case: 179 | Input/Output: [(72 72 72 72) 72]
Test Case: 180 | Input/Output: [(70 70 70 70) 70]
Test Case: 181 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 182 | Input/Output: [(65 65 65 65) 65]
Test Case: 183 | Input/Output: [(81 81 81 81) 81]
Test Case: 184 | Input/Output: [(61 61 61 61) 61]
Test Case: 185 | Input/Output: [(79 79 79 79) 79]
Test Case: 186 | Input/Output: [(7 7 7 7) 7]
Test Case: 187 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 188 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 189 | Input/Output: [(88 88 88 88) 88]
Test Case: 190 | Input/Output: [(9 9 9 9) 9]
Test Case: 191 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 192 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 193 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 194 | Input/Output: [(18 18 18 18) 18]
Test Case: 195 | Input/Output: [(55 55 55 55) 55]
Test Case: 196 | Input/Output: [(20 20 20 20) 20]
Test Case: 197 | Input/Output: [(62 62 62 62) 62]
Test Case: 198 | Input/Output: [(27 27 27 27) 27]
Test Case: 199 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 200 | Input/Output: [(42 78 55 54) 42]
Test Case: 201 | Input/Output: [(97 44 22 47) 22]
Test Case: 202 | Input/Output: [(100 63 55 71) 55]
Test Case: 203 | Input/Output: [(51 54 38 60) 38]
Test Case: 204 | Input/Output: [(60 57 99 56) 56]
Test Case: 205 | Input/Output: [(47 27 39 46) 27]
Test Case: 206 | Input/Output: [(52 3 6 88) 3]
Test Case: 207 | Input/Output: [(32 16 4 12) 4]
Test Case: 208 | Input/Output: [(11 5 8 46) 5]
Test Case: 209 | Input/Output: [(85 8 23 22) 8]
Test Case: 210 | Input/Output: [(82 37 95 13) 13]
Test Case: 211 | Input/Output: [(65 55 33 55) 33]
Test Case: 212 | Input/Output: [(19 20 82 36) 19]
Test Case: 213 | Input/Output: [(94 55 17 2) 2]
Test Case: 214 | Input/Output: [(97 64 21 12) 12]
Test Case: 215 | Input/Output: [(44 97 83 64) 44]
Test Case: 216 | Input/Output: [(81 67 40 57) 40]
Test Case: 217 | Input/Output: [(100 82 1 58) 1]
Test Case: 218 | Input/Output: [(93 33 46 26) 26]
Test Case: 219 | Input/Output: [(30 45 89 11) 11]
Test Case: 220 | Input/Output: [(32 33 11 9) 9]
Test Case: 221 | Input/Output: [(40 63 55 59) 40]
Test Case: 222 | Input/Output: [(4 64 68 41) 4]
Test Case: 223 | Input/Output: [(85 59 27 41) 27]
Test Case: 224 | Input/Output: [(91 6 96 48) 6]
Test Case: 225 | Input/Output: [(50 30 23 99) 23]
Test Case: 226 | Input/Output: [(56 23 28 52) 23]
Test Case: 227 | Input/Output: [(64 64 52 43) 43]
Test Case: 228 | Input/Output: [(42 66 25 26) 25]
Test Case: 229 | Input/Output: [(71 55 37 2) 2]
Test Case: 230 | Input/Output: [(82 30 56 52) 30]
Test Case: 231 | Input/Output: [(87 89 28 36) 28]
Test Case: 232 | Input/Output: [(97 15 63 65) 15]
Test Case: 233 | Input/Output: [(59 65 91 0) 0]
Test Case: 234 | Input/Output: [(16 84 30 58) 16]
Test Case: 235 | Input/Output: [(34 69 84 57) 34]
Test Case: 236 | Input/Output: [(3 54 72 19) 3]
Test Case: 237 | Input/Output: [(13 52 16 38) 13]
Test Case: 238 | Input/Output: [(17 86 97 8) 8]
Test Case: 239 | Input/Output: [(49 49 30 42) 30]
Test Case: 240 | Input/Output: [(55 8 49 45) 8]
Test Case: 241 | Input/Output: [(41 66 90 18) 18]
Test Case: 242 | Input/Output: [(93 48 49 2) 2]
Test Case: 243 | Input/Output: [(40 14 22 69) 14]
Test Case: 244 | Input/Output: [(56 27 32 77) 27]
Test Case: 245 | Input/Output: [(6 31 45 75) 6]
Test Case: 246 | Input/Output: [(20 88 24 20) 20]
Test Case: 247 | Input/Output: [(40 37 65 25) 25]
Test Case: 248 | Input/Output: [(52 96 83 21) 21]
Test Case: 249 | Input/Output: [(27 29 11 8) 8]
Test Case: 250 | Input/Output: [(14 0 62 3) 0]
Test Case: 251 | Input/Output: [(56 38 74 37) 37]
Test Case: 252 | Input/Output: [(41 83 78 30) 30]
Test Case: 253 | Input/Output: [(34 65 25 89) 25]
Test Case: 254 | Input/Output: [(2 63 16 88) 2]
Test Case: 255 | Input/Output: [(88 35 24 79) 24]
Test Case: 256 | Input/Output: [(79 69 61 47) 47]
Test Case: 257 | Input/Output: [(34 36 95 32) 32]
Test Case: 258 | Input/Output: [(31 19 63 62) 19]
Test Case: 259 | Input/Output: [(22 36 70 15) 15]
Test Case: 260 | Input/Output: [(25 87 21 64) 21]
Test Case: 261 | Input/Output: [(0 73 84 22) 0]
Test Case: 262 | Input/Output: [(73 72 19 12) 12]
Test Case: 263 | Input/Output: [(68 61 32 9) 9]
Test Case: 264 | Input/Output: [(0 82 65 61) 0]
Test Case: 265 | Input/Output: [(15 1 93 98) 1]
Test Case: 266 | Input/Output: [(49 15 95 98) 15]
Test Case: 267 | Input/Output: [(40 14 60 2) 2]
Test Case: 268 | Input/Output: [(29 96 75 75) 29]
Test Case: 269 | Input/Output: [(20 16 45 60) 16]
Test Case: 270 | Input/Output: [(55 95 55 68) 55]
Test Case: 271 | Input/Output: [(35 36 92 9) 9]
Test Case: 272 | Input/Output: [(40 65 73 39) 39]
Test Case: 273 | Input/Output: [(41 42 69 95) 41]
Test Case: 274 | Input/Output: [(78 56 48 52) 48]
Test Case: 275 | Input/Output: [(60 5 96 73) 5]
Test Case: 276 | Input/Output: [(49 73 100 49) 49]
Test Case: 277 | Input/Output: [(47 6 99 13) 6]
Test Case: 278 | Input/Output: [(45 83 95 15) 15]
Test Case: 279 | Input/Output: [(17 51 78 11) 11]
Test Case: 280 | Input/Output: [(100 85 35 9) 9]
Test Case: 281 | Input/Output: [(88 37 96 97) 37]
Test Case: 282 | Input/Output: [(31 67 49 8) 8]
Test Case: 283 | Input/Output: [(87 7 89 39) 7]
Test Case: 284 | Input/Output: [(37 62 1 58) 1]
Test Case: 285 | Input/Output: [(82 98 74 14) 14]
Test Case: 286 | Input/Output: [(35 65 99 3) 3]
Test Case: 287 | Input/Output: [(60 29 98 24) 24]
Test Case: 288 | Input/Output: [(72 10 51 91) 10]
Test Case: 289 | Input/Output: [(41 75 7 87) 7]
Test Case: 290 | Input/Output: [(86 91 7 9) 7]
Test Case: 291 | Input/Output: [(93 0 22 12) 0]
Test Case: 292 | Input/Output: [(96 65 84 24) 24]
Test Case: 293 | Input/Output: [(44 80 94 54) 44]
Test Case: 294 | Input/Output: [(98 83 57 33) 33]
Test Case: 295 | Input/Output: [(24 12 92 61) 12]
Test Case: 296 | Input/Output: [(14 15 62 17) 14]
Test Case: 297 | Input/Output: [(7 47 17 8) 7]
Test Case: 298 | Input/Output: [(48 81 37 2) 2]
Test Case: 299 | Input/Output: [(26 71 19 3) 3]
Test Case: 300 | Input/Output: [(47 67 49 71) 47]
Test Case: 301 | Input/Output: [(50 52 87 71) 50]
Test Case: 302 | Input/Output: [(94 4 78 61) 4]
Test Case: 303 | Input/Output: [(84 70 32 31) 31]
Test Case: 304 | Input/Output: [(91 37 27 56) 27]
Test Case: 305 | Input/Output: [(86 40 45 16) 16]
Test Case: 306 | Input/Output: [(87 53 65 11) 11]
Test Case: 307 | Input/Output: [(76 93 10 60) 10]
Test Case: 308 | Input/Output: [(44 50 73 92) 44]
Test Case: 309 | Input/Output: [(11 89 91 18) 11]
Test Case: 310 | Input/Output: [(0 33 7 77) 0]
Test Case: 311 | Input/Output: [(13 53 65 8) 8]
Test Case: 312 | Input/Output: [(87 17 3 14) 3]
Test Case: 313 | Input/Output: [(21 20 78 81) 20]
Test Case: 314 | Input/Output: [(13 41 77 61) 13]
Test Case: 315 | Input/Output: [(12 59 80 24) 12]
Test Case: 316 | Input/Output: [(51 75 8 48) 8]
Test Case: 317 | Input/Output: [(29 67 51 55) 29]
Test Case: 318 | Input/Output: [(34 70 87 81) 34]
Test Case: 319 | Input/Output: [(21 17 65 69) 17]
Test Case: 320 | Input/Output: [(5 78 62 77) 5]
Test Case: 321 | Input/Output: [(64 52 99 99) 52]
Test Case: 322 | Input/Output: [(15 45 54 74) 15]
Test Case: 323 | Input/Output: [(13 83 76 11) 11]
Test Case: 324 | Input/Output: [(59 62 25 33) 25]
Test Case: 325 | Input/Output: [(57 85 3 35) 3]
Test Case: 326 | Input/Output: [(41 75 2 82) 2]
Test Case: 327 | Input/Output: [(26 84 46 96) 26]
Test Case: 328 | Input/Output: [(61 32 53 31) 31]
Test Case: 329 | Input/Output: [(78 86 65 48) 48]
Test Case: 330 | Input/Output: [(71 93 100 70) 70]
Test Case: 331 | Input/Output: [(23 10 83 50) 10]
Test Case: 332 | Input/Output: [(93 78 28 78) 28]
Test Case: 333 | Input/Output: [(74 40 77 86) 40]
Test Case: 334 | Input/Output: [(52 69 91 31) 31]
Test Case: 335 | Input/Output: [(7 24 77 71) 7]
Test Case: 336 | Input/Output: [(36 100 18 50) 18]
Test Case: 337 | Input/Output: [(59 3 77 78) 3]
Test Case: 338 | Input/Output: [(83 64 91 21) 21]
Test Case: 339 | Input/Output: [(39 71 4 72) 4]
Test Case: 340 | Input/Output: [(52 29 76 37) 29]
Test Case: 341 | Input/Output: [(88 90 97 39) 39]
Test Case: 342 | Input/Output: [(67 35 88 9) 9]
Test Case: 343 | Input/Output: [(0 26 56 75) 0]
Test Case: 344 | Input/Output: [(41 47 25 20) 20]
Test Case: 345 | Input/Output: [(48 18 14 7) 7]
Test Case: 346 | Input/Output: [(29 49 28 65) 28]
Test Case: 347 | Input/Output: [(40 50 3 97) 3]
Test Case: 348 | Input/Output: [(83 28 16 54) 16]
Test Case: 349 | Input/Output: [(63 29 56 36) 29]
Test Case: 350 | Input/Output: [(49 76 43 11) 11]
Test Case: 351 | Input/Output: [(60 4 16 16) 4]
Test Case: 352 | Input/Output: [(50 99 64 22) 22]
Test Case: 353 | Input/Output: [(21 98 95 24) 21]
Test Case: 354 | Input/Output: [(53 96 68 90) 53]
Test Case: 355 | Input/Output: [(81 39 26 98) 26]
Test Case: 356 | Input/Output: [(56 26 75 39) 26]
Test Case: 357 | Input/Output: [(27 45 71 72) 27]
Test Case: 358 | Input/Output: [(73 27 100 6) 6]
Test Case: 359 | Input/Output: [(41 80 48 99) 41]
Test Case: 360 | Input/Output: [(83 4 20 7) 4]
Test Case: 361 | Input/Output: [(89 68 14 10) 10]
Test Case: 362 | Input/Output: [(84 10 67 13) 10]
Test Case: 363 | Input/Output: [(34 80 6 39) 6]
Test Case: 364 | Input/Output: [(16 54 66 63) 16]
Test Case: 365 | Input/Output: [(15 37 81 77) 15]
Test Case: 366 | Input/Output: [(89 67 83 93) 67]
Test Case: 367 | Input/Output: [(7 94 70 81) 7]
Test Case: 368 | Input/Output: [(55 51 21 97) 21]
Test Case: 369 | Input/Output: [(1 42 53 86) 1]
Test Case: 370 | Input/Output: [(60 60 41 66) 41]
Test Case: 371 | Input/Output: [(39 2 13 84) 2]
Test Case: 372 | Input/Output: [(92 46 68 68) 46]
Test Case: 373 | Input/Output: [(63 57 90 34) 34]
Test Case: 374 | Input/Output: [(30 62 19 72) 19]
Test Case: 375 | Input/Output: [(51 34 33 72) 33]
Test Case: 376 | Input/Output: [(25 42 88 17) 17]
Test Case: 377 | Input/Output: [(19 3 33 94) 3]
Test Case: 378 | Input/Output: [(37 85 30 79) 30]
Test Case: 379 | Input/Output: [(3 47 61 6) 3]
Test Case: 380 | Input/Output: [(16 21 83 4) 4]
Test Case: 381 | Input/Output: [(86 99 13 24) 13]
Test Case: 382 | Input/Output: [(1 10 51 16) 1]
Test Case: 383 | Input/Output: [(32 94 83 28) 28]
Test Case: 384 | Input/Output: [(39 63 19 98) 19]
Test Case: 385 | Input/Output: [(49 94 27 76) 27]
Test Case: 386 | Input/Output: [(28 2 13 5) 2]
Test Case: 387 | Input/Output: [(56 40 83 25) 25]
Test Case: 388 | Input/Output: [(19 0 85 73) 0]
Test Case: 389 | Input/Output: [(25 97 67 19) 19]
Test Case: 390 | Input/Output: [(48 87 35 11) 11]
Test Case: 391 | Input/Output: [(10 32 64 90) 10]
Test Case: 392 | Input/Output: [(63 42 94 48) 42]
Test Case: 393 | Input/Output: [(0 5 67 98) 0]
Test Case: 394 | Input/Output: [(81 58 62 4) 4]
Test Case: 395 | Input/Output: [(69 4 42 75) 4]
Test Case: 396 | Input/Output: [(22 91 2 29) 2]
Test Case: 397 | Input/Output: [(38 89 64 51) 38]
Test Case: 398 | Input/Output: [(18 95 99 30) 18]
Test Case: 399 | Input/Output: [(93 63 51 89) 51]
Test Case: 400 | Input/Output: [(-27 -70 77 63) -70]
Test Case: 401 | Input/Output: [(64 32 -92 33) -92]
Test Case: 402 | Input/Output: [(-23 81 -87 84) -87]
Test Case: 403 | Input/Output: [(46 16 17 32) 16]
Test Case: 404 | Input/Output: [(-77 67 48 -11) -77]
Test Case: 405 | Input/Output: [(19 23 35 3) 3]
Test Case: 406 | Input/Output: [(-62 -68 92 -45) -68]
Test Case: 407 | Input/Output: [(-86 -21 44 35) -86]
Test Case: 408 | Input/Output: [(-89 16 22 -7) -89]
Test Case: 409 | Input/Output: [(14 19 -47 -98) -98]
Test Case: 410 | Input/Output: [(-95 88 -31 -58) -95]
Test Case: 411 | Input/Output: [(8 76 92 75) 8]
Test Case: 412 | Input/Output: [(-28 100 10 50) -28]
Test Case: 413 | Input/Output: [(-88 30 62 58) -88]
Test Case: 414 | Input/Output: [(-79 49 9 81) -79]
Test Case: 415 | Input/Output: [(45 -97 -77 63) -97]
Test Case: 416 | Input/Output: [(56 -75 94 -83) -83]
Test Case: 417 | Input/Output: [(-94 54 -58 23) -94]
Test Case: 418 | Input/Output: [(98 -60 -25 92) -60]
Test Case: 419 | Input/Output: [(52 58 32 72) 32]
Test Case: 420 | Input/Output: [(9 -26 59 80) -26]
Test Case: 421 | Input/Output: [(-75 61 -39 20) -75]
Test Case: 422 | Input/Output: [(-14 28 -94 -91) -94]
Test Case: 423 | Input/Output: [(-42 -80 -23 -90) -90]
Test Case: 424 | Input/Output: [(-54 -18 -85 -43) -85]
Test Case: 425 | Input/Output: [(-96 -30 -100 -28) -100]
Test Case: 426 | Input/Output: [(54 91 11 24) 11]
Test Case: 427 | Input/Output: [(-19 -57 -26 -6) -57]
Test Case: 428 | Input/Output: [(31 67 72 12) 12]
Test Case: 429 | Input/Output: [(61 48 -96 -2) -96]
Test Case: 430 | Input/Output: [(33 41 -19 -34) -34]
Test Case: 431 | Input/Output: [(-75 77 -14 53) -75]
Test Case: 432 | Input/Output: [(-18 -42 13 -22) -42]
Test Case: 433 | Input/Output: [(-44 24 90 87) -44]
Test Case: 434 | Input/Output: [(-57 1 73 -5) -57]
Test Case: 435 | Input/Output: [(100 67 58 -37) -37]
Test Case: 436 | Input/Output: [(98 -85 -57 -32) -85]
Test Case: 437 | Input/Output: [(13 48 -66 94) -66]
Test Case: 438 | Input/Output: [(91 -34 -53 21) -53]
Test Case: 439 | Input/Output: [(66 -30 -63 -70) -70]
Test Case: 440 | Input/Output: [(0 -8 -14 -71) -71]
Test Case: 441 | Input/Output: [(99 -68 -63 -28) -68]
Test Case: 442 | Input/Output: [(74 0 -78 85) -78]
Test Case: 443 | Input/Output: [(-88 29 -27 -45) -88]
Test Case: 444 | Input/Output: [(-5 -81 -75 -45) -81]
Test Case: 445 | Input/Output: [(12 -69 64 -49) -69]
Test Case: 446 | Input/Output: [(25 -41 -78 57) -78]
Test Case: 447 | Input/Output: [(-67 77 -83 -49) -83]
Test Case: 448 | Input/Output: [(60 77 -70 -96) -96]
Test Case: 449 | Input/Output: [(86 100 -48 6) -48]
Test Case: 450 | Input/Output: [(-41 7 -19 -70) -70]
Test Case: 451 | Input/Output: [(18 -18 -35 -67) -67]
Test Case: 452 | Input/Output: [(32 81 8 -62) -62]
Test Case: 453 | Input/Output: [(-52 51 -61 2) -61]
Test Case: 454 | Input/Output: [(-45 -42 -79 86) -79]
Test Case: 455 | Input/Output: [(-44 -45 97 -19) -45]
Test Case: 456 | Input/Output: [(17 -7 -45 71) -45]
Test Case: 457 | Input/Output: [(-53 -32 -62 -83) -83]
Test Case: 458 | Input/Output: [(54 -81 94 3) -81]
Test Case: 459 | Input/Output: [(81 -63 53 84) -63]
Test Case: 460 | Input/Output: [(-29 -21 17 71) -29]
Test Case: 461 | Input/Output: [(-77 -83 -91 -43) -91]
Test Case: 462 | Input/Output: [(100 100 -57 81) -57]
Test Case: 463 | Input/Output: [(78 54 7 6) 6]
Test Case: 464 | Input/Output: [(-31 67 74 36) -31]
Test Case: 465 | Input/Output: [(-81 58 85 -55) -81]
Test Case: 466 | Input/Output: [(80 47 50 -59) -59]
Test Case: 467 | Input/Output: [(-14 9 80 -85) -85]
Test Case: 468 | Input/Output: [(33 18 47 -85) -85]
Test Case: 469 | Input/Output: [(-26 87 -72 -27) -72]
Test Case: 470 | Input/Output: [(-37 -83 -15 70) -83]
Test Case: 471 | Input/Output: [(-49 -33 -45 -7) -49]
Test Case: 472 | Input/Output: [(-30 25 -94 22) -94]
Test Case: 473 | Input/Output: [(31 -20 51 -88) -88]
Test Case: 474 | Input/Output: [(-67 84 22 9) -67]
Test Case: 475 | Input/Output: [(78 10 -71 34) -71]
Test Case: 476 | Input/Output: [(-16 -25 91 62) -25]
Test Case: 477 | Input/Output: [(58 -82 -42 -70) -82]
Test Case: 478 | Input/Output: [(-33 52 97 -98) -98]
Test Case: 479 | Input/Output: [(100 67 23 12) 12]
Test Case: 480 | Input/Output: [(-12 -80 -65 58) -80]
Test Case: 481 | Input/Output: [(-52 49 -26 -92) -92]
Test Case: 482 | Input/Output: [(-30 21 -86 -55) -86]
Test Case: 483 | Input/Output: [(-81 24 -22 -21) -81]
Test Case: 484 | Input/Output: [(9 48 -22 -53) -53]
Test Case: 485 | Input/Output: [(-80 53 -42 -28) -80]
Test Case: 486 | Input/Output: [(77 39 74 -35) -35]
Test Case: 487 | Input/Output: [(90 90 -75 86) -75]
Test Case: 488 | Input/Output: [(-24 73 -50 -55) -55]
Test Case: 489 | Input/Output: [(-72 55 -100 -73) -100]
Test Case: 490 | Input/Output: [(45 0 100 0) 0]
Test Case: 491 | Input/Output: [(43 46 -85 -75) -85]
Test Case: 492 | Input/Output: [(75 -44 -61 -100) -100]
Test Case: 493 | Input/Output: [(-75 -11 13 -58) -75]
Test Case: 494 | Input/Output: [(-96 66 44 -84) -96]
Test Case: 495 | Input/Output: [(-86 -46 20 50) -86]
Test Case: 496 | Input/Output: [(39 82 24 -53) -53]
Test Case: 497 | Input/Output: [(-70 82 86 -42) -70]
Test Case: 498 | Input/Output: [(21 32 -100 -25) -100]
Test Case: 499 | Input/Output: [(-85 77 36 45) -85]
Test Case: 500 | Input/Output: [(73 80 55 48) 48]
Test Case: 501 | Input/Output: [(-12 -2 94 85) -12]
Test Case: 502 | Input/Output: [(57 -14 -92 -7) -92]
Test Case: 503 | Input/Output: [(54 62 -39 52) -39]
Test Case: 504 | Input/Output: [(71 -21 -87 48) -87]
Test Case: 505 | Input/Output: [(-49 -58 97 -76) -76]
Test Case: 506 | Input/Output: [(46 61 -84 -67) -84]
Test Case: 507 | Input/Output: [(-9 -88 98 25) -88]
Test Case: 508 | Input/Output: [(90 -24 -7 -9) -24]
Test Case: 509 | Input/Output: [(-27 86 60 -63) -63]
Test Case: 510 | Input/Output: [(57 -81 99 -21) -81]
Test Case: 511 | Input/Output: [(-94 -65 -14 18) -94]
Test Case: 512 | Input/Output: [(11 -37 -65 53) -65]
Test Case: 513 | Input/Output: [(96 11 36 58) 11]
Test Case: 514 | Input/Output: [(-89 8 -34 82) -89]
Test Case: 515 | Input/Output: [(12 62 -21 69) -21]
Test Case: 516 | Input/Output: [(-68 57 68 -79) -79]
Test Case: 517 | Input/Output: [(17 28 -12 13) -12]
Test Case: 518 | Input/Output: [(-83 88 -78 -61) -83]
Test Case: 519 | Input/Output: [(-96 24 -9 -58) -96]
Test Case: 520 | Input/Output: [(-27 -84 70 85) -84]
Test Case: 521 | Input/Output: [(-13 -14 -9 17) -14]
Test Case: 522 | Input/Output: [(-73 -82 -98 56) -98]
Test Case: 523 | Input/Output: [(92 -50 36 -59) -59]
Test Case: 524 | Input/Output: [(-91 -71 18 83) -91]
Test Case: 525 | Input/Output: [(-44 -44 -57 -45) -57]
Test Case: 526 | Input/Output: [(-65 18 -78 84) -78]
Test Case: 527 | Input/Output: [(38 -10 -59 76) -59]
Test Case: 528 | Input/Output: [(98 -67 -32 68) -67]
Test Case: 529 | Input/Output: [(-13 -61 95 -100) -100]
Test Case: 530 | Input/Output: [(84 -76 75 -77) -77]
Test Case: 531 | Input/Output: [(81 52 80 -52) -52]
Test Case: 532 | Input/Output: [(-26 -72 57 48) -72]
Test Case: 533 | Input/Output: [(38 -53 96 9) -53]
Test Case: 534 | Input/Output: [(-6 9 90 -39) -39]
Test Case: 535 | Input/Output: [(21 67 22 73) 21]
Test Case: 536 | Input/Output: [(-35 50 -13 56) -35]
Test Case: 537 | Input/Output: [(-79 40 47 -99) -99]
Test Case: 538 | Input/Output: [(-25 56 11 60) -25]
Test Case: 539 | Input/Output: [(35 -48 -70 -1) -70]
Test Case: 540 | Input/Output: [(-54 -45 72 -76) -76]
Test Case: 541 | Input/Output: [(-59 91 78 1) -59]
Test Case: 542 | Input/Output: [(-54 63 -59 76) -59]
Test Case: 543 | Input/Output: [(-80 49 37 45) -80]
Test Case: 544 | Input/Output: [(-98 -87 -85 90) -98]
Test Case: 545 | Input/Output: [(62 -43 9 -86) -86]
Test Case: 546 | Input/Output: [(13 51 -65 76) -65]
Test Case: 547 | Input/Output: [(-34 85 -21 -57) -57]
Test Case: 548 | Input/Output: [(63 -47 -92 80) -92]
Test Case: 549 | Input/Output: [(-74 -67 67 71) -74]
Test Case: 550 | Input/Output: [(-56 82 -93 79) -93]
Test Case: 551 | Input/Output: [(84 -27 -25 -28) -28]
Test Case: 552 | Input/Output: [(-85 -48 35 -39) -85]
Test Case: 553 | Input/Output: [(36 -43 -96 -19) -96]
Test Case: 554 | Input/Output: [(61 -76 47 9) -76]
Test Case: 555 | Input/Output: [(-26 19 8 -62) -62]
Test Case: 556 | Input/Output: [(57 -48 -17 -31) -48]
Test Case: 557 | Input/Output: [(70 -4 -93 -95) -95]
Test Case: 558 | Input/Output: [(-72 -34 -38 41) -72]
Test Case: 559 | Input/Output: [(-88 3 92 -87) -88]
Test Case: 560 | Input/Output: [(4 26 -60 51) -60]
Test Case: 561 | Input/Output: [(25 94 -51 -65) -65]
Test Case: 562 | Input/Output: [(-49 60 -78 12) -78]
Test Case: 563 | Input/Output: [(47 60 75 -99) -99]
Test Case: 564 | Input/Output: [(83 95 41 -2) -2]
Test Case: 565 | Input/Output: [(11 80 48 -86) -86]
Test Case: 566 | Input/Output: [(-70 26 69 36) -70]
Test Case: 567 | Input/Output: [(86 -83 87 -33) -83]
Test Case: 568 | Input/Output: [(74 -6 49 -30) -30]
Test Case: 569 | Input/Output: [(99 10 -67 29) -67]
Test Case: 570 | Input/Output: [(-63 45 55 -58) -63]
Test Case: 571 | Input/Output: [(16 82 -91 -25) -91]
Test Case: 572 | Input/Output: [(29 -71 -76 100) -76]
Test Case: 573 | Input/Output: [(63 -52 -73 99) -73]
Test Case: 574 | Input/Output: [(50 80 -6 -93) -93]
Test Case: 575 | Input/Output: [(8 28 -51 82) -51]
Test Case: 576 | Input/Output: [(97 7 -85 79) -85]
Test Case: 577 | Input/Output: [(100 36 -42 30) -42]
Test Case: 578 | Input/Output: [(-91 -13 -32 0) -91]
Test Case: 579 | Input/Output: [(11 35 -82 44) -82]
Test Case: 580 | Input/Output: [(-57 4 -14 -10) -57]
Test Case: 581 | Input/Output: [(-42 -20 48 81) -42]
Test Case: 582 | Input/Output: [(66 62 -59 -4) -59]
Test Case: 583 | Input/Output: [(-51 42 41 33) -51]
Test Case: 584 | Input/Output: [(-7 -44 -32 79) -44]
Test Case: 585 | Input/Output: [(-66 -90 -88 20) -90]
Test Case: 586 | Input/Output: [(-11 -16 -29 -89) -89]
Test Case: 587 | Input/Output: [(36 -74 -60 41) -74]
Test Case: 588 | Input/Output: [(-34 -91 -91 -58) -91]
Test Case: 589 | Input/Output: [(-14 98 78 -29) -29]
Test Case: 590 | Input/Output: [(-73 -50 -49 -96) -96]
Test Case: 591 | Input/Output: [(67 70 16 -78) -78]
Test Case: 592 | Input/Output: [(-75 0 3 69) -75]
Test Case: 593 | Input/Output: [(-38 75 98 -45) -45]
Test Case: 594 | Input/Output: [(95 -94 71 -59) -94]
Test Case: 595 | Input/Output: [(-13 -95 82 -61) -95]
Test Case: 596 | Input/Output: [(66 -14 -10 13) -14]
Test Case: 597 | Input/Output: [(-20 0 71 19) -20]
Test Case: 598 | Input/Output: [(28 -64 33 -88) -88]
Test Case: 599 | Input/Output: [(-67 27 -11 59) -67]
Test Case: 600 | Input/Output: [(-5 -19 93 -29) -29]
Test Case: 601 | Input/Output: [(-40 76 -85 -6) -85]
Test Case: 602 | Input/Output: [(-65 -21 27 -62) -65]
Test Case: 603 | Input/Output: [(12 98 -80 -1) -80]
Test Case: 604 | Input/Output: [(25 73 59 22) 22]
Test Case: 605 | Input/Output: [(-77 -50 -89 -44) -89]
Test Case: 606 | Input/Output: [(-35 -39 97 7) -39]
Test Case: 607 | Input/Output: [(-93 -100 -64 -84) -100]
Test Case: 608 | Input/Output: [(23 -20 80 38) -20]
Test Case: 609 | Input/Output: [(69 -78 -79 46) -79]
Test Case: 610 | Input/Output: [(-97 -50 -11 -91) -97]
Test Case: 611 | Input/Output: [(-96 78 -35 44) -96]
Test Case: 612 | Input/Output: [(68 78 58 -32) -32]
Test Case: 613 | Input/Output: [(-67 96 -43 10) -67]
Test Case: 614 | Input/Output: [(12 63 29 -42) -42]
Test Case: 615 | Input/Output: [(15 -40 56 -22) -40]
Test Case: 616 | Input/Output: [(43 -98 37 -4) -98]
Test Case: 617 | Input/Output: [(65 71 -64 -5) -64]
Test Case: 618 | Input/Output: [(-71 67 89 9) -71]
Test Case: 619 | Input/Output: [(25 -23 -66 84) -66]
Test Case: 620 | Input/Output: [(24 -97 48 98) -97]
Test Case: 621 | Input/Output: [(-5 -39 -30 69) -39]
Test Case: 622 | Input/Output: [(-47 1 10 45) -47]
Test Case: 623 | Input/Output: [(22 -37 -44 -65) -65]
Test Case: 624 | Input/Output: [(25 -91 3 -9) -91]
Test Case: 625 | Input/Output: [(-65 -82 6 -30) -82]
Test Case: 626 | Input/Output: [(-11 22 -90 49) -90]
Test Case: 627 | Input/Output: [(-78 -61 -20 -51) -78]
Test Case: 628 | Input/Output: [(-50 -15 -60 56) -60]
Test Case: 629 | Input/Output: [(46 95 -95 -69) -95]
Test Case: 630 | Input/Output: [(-81 58 6 86) -81]
Test Case: 631 | Input/Output: [(62 98 -34 -8) -34]
Test Case: 632 | Input/Output: [(39 0 76 51) 0]
Test Case: 633 | Input/Output: [(-82 98 -30 66) -82]
Test Case: 634 | Input/Output: [(-16 70 -54 47) -54]
Test Case: 635 | Input/Output: [(29 18 -69 30) -69]
Test Case: 636 | Input/Output: [(37 85 51 -69) -69]
Test Case: 637 | Input/Output: [(70 28 7 40) 7]
Test Case: 638 | Input/Output: [(11 -79 67 -22) -79]
Test Case: 639 | Input/Output: [(96 -66 15 -71) -71]
Test Case: 640 | Input/Output: [(-38 -21 -76 -11) -76]
Test Case: 641 | Input/Output: [(-41 -79 49 -72) -79]
Test Case: 642 | Input/Output: [(56 58 -4 80) -4]
Test Case: 643 | Input/Output: [(-32 -57 68 9) -57]
Test Case: 644 | Input/Output: [(-96 38 -65 54) -96]
Test Case: 645 | Input/Output: [(16 -96 -83 -68) -96]
Test Case: 646 | Input/Output: [(-97 66 41 -49) -97]
Test Case: 647 | Input/Output: [(-94 95 -76 33) -94]
Test Case: 648 | Input/Output: [(52 -25 -55 54) -55]
Test Case: 649 | Input/Output: [(92 -31 68 58) -31]
Test Case: 650 | Input/Output: [(-58 83 -41 40) -58]
Test Case: 651 | Input/Output: [(70 -42 -22 -69) -69]
Test Case: 652 | Input/Output: [(55 68 56 28) 28]
Test Case: 653 | Input/Output: [(-23 48 62 -60) -60]
Test Case: 654 | Input/Output: [(85 -17 -35 86) -35]
Test Case: 655 | Input/Output: [(-10 29 -85 39) -85]
Test Case: 656 | Input/Output: [(46 -1 -56 81) -56]
Test Case: 657 | Input/Output: [(-90 77 -23 53) -90]
Test Case: 658 | Input/Output: [(-28 -83 -96 50) -96]
Test Case: 659 | Input/Output: [(-21 -83 22 69) -83]
Test Case: 660 | Input/Output: [(84 32 -18 -51) -51]
Test Case: 661 | Input/Output: [(92 79 28 -63) -63]
Test Case: 662 | Input/Output: [(72 -45 -91 88) -91]
Test Case: 663 | Input/Output: [(34 67 -87 -81) -87]
Test Case: 664 | Input/Output: [(-60 74 33 41) -60]
Test Case: 665 | Input/Output: [(93 -34 -54 -80) -80]
Test Case: 666 | Input/Output: [(10 72 47 -55) -55]
Test Case: 667 | Input/Output: [(-7 25 24 11) -7]
Test Case: 668 | Input/Output: [(49 78 -88 31) -88]
Test Case: 669 | Input/Output: [(-14 -26 -11 53) -26]
Test Case: 670 | Input/Output: [(-10 56 -58 -45) -58]
Test Case: 671 | Input/Output: [(60 46 -67 -62) -67]
Test Case: 672 | Input/Output: [(-92 68 -93 -69) -93]
Test Case: 673 | Input/Output: [(-17 37 -95 36) -95]
Test Case: 674 | Input/Output: [(81 69 -93 73) -93]
Test Case: 675 | Input/Output: [(48 -23 -49 29) -49]
Test Case: 676 | Input/Output: [(97 26 -11 -1) -11]
Test Case: 677 | Input/Output: [(-85 80 -23 79) -85]
Test Case: 678 | Input/Output: [(58 91 64 -72) -72]
Test Case: 679 | Input/Output: [(81 -10 0 52) -10]
Test Case: 680 | Input/Output: [(-17 45 -62 1) -62]
Test Case: 681 | Input/Output: [(-47 8 18 80) -47]
Test Case: 682 | Input/Output: [(91 3 -96 79) -96]
Test Case: 683 | Input/Output: [(93 -36 32 96) -36]
Test Case: 684 | Input/Output: [(-60 77 66 18) -60]
Test Case: 685 | Input/Output: [(53 -65 -15 -44) -65]
Test Case: 686 | Input/Output: [(-100 -75 91 -16) -100]
Test Case: 687 | Input/Output: [(-10 -30 -69 97) -69]
Test Case: 688 | Input/Output: [(38 -4 55 64) -4]
Test Case: 689 | Input/Output: [(-47 66 -77 22) -77]
Test Case: 690 | Input/Output: [(-100 -80 69 36) -100]
Test Case: 691 | Input/Output: [(-78 92 65 62) -78]
Test Case: 692 | Input/Output: [(-95 47 -57 -78) -95]
Test Case: 693 | Input/Output: [(-98 -32 8 65) -98]
Test Case: 694 | Input/Output: [(-5 76 61 -100) -100]
Test Case: 695 | Input/Output: [(-71 53 1 3) -71]
Test Case: 696 | Input/Output: [(-97 -3 -1 73) -97]
Test Case: 697 | Input/Output: [(31 56 72 61) 31]
Test Case: 698 | Input/Output: [(67 15 4 84) 4]
Test Case: 699 | Input/Output: [(-11 -34 -98 60) -98]
Test Case: 700 | Input/Output: [(68 -66 1 17) -66]
Test Case: 701 | Input/Output: [(-31 -10 -11 -47) -47]
Test Case: 702 | Input/Output: [(-78 56 83 29) -78]
Test Case: 703 | Input/Output: [(-96 -8 48 100) -96]
Test Case: 704 | Input/Output: [(86 -13 -23 -98) -98]
Test Case: 705 | Input/Output: [(21 74 -43 -28) -43]
Test Case: 706 | Input/Output: [(-70 -20 -33 -19) -70]
Test Case: 707 | Input/Output: [(-20 100 -21 -9) -21]
Test Case: 708 | Input/Output: [(28 40 -23 -90) -90]
Test Case: 709 | Input/Output: [(-47 96 -70 -64) -70]
Test Case: 710 | Input/Output: [(87 79 -26 -51) -51]
Test Case: 711 | Input/Output: [(61 74 82 23) 23]
Test Case: 712 | Input/Output: [(-39 100 -53 -4) -53]
Test Case: 713 | Input/Output: [(-35 13 -26 32) -35]
Test Case: 714 | Input/Output: [(15 -16 39 -39) -39]
Test Case: 715 | Input/Output: [(29 -8 53 0) -8]
Test Case: 716 | Input/Output: [(-29 -14 -12 56) -29]
Test Case: 717 | Input/Output: [(-62 -13 -97 42) -97]
Test Case: 718 | Input/Output: [(51 62 -90 -72) -90]
Test Case: 719 | Input/Output: [(-61 -63 -26 50) -63]
Test Case: 720 | Input/Output: [(41 51 6 75) 6]
Test Case: 721 | Input/Output: [(-61 33 4 -36) -61]
Test Case: 722 | Input/Output: [(17 -14 88 -72) -72]
Test Case: 723 | Input/Output: [(62 1 -38 -22) -38]
Test Case: 724 | Input/Output: [(-81 89 9 40) -81]
Test Case: 725 | Input/Output: [(89 48 24 -76) -76]
Test Case: 726 | Input/Output: [(61 -56 38 -51) -56]
Test Case: 727 | Input/Output: [(-91 -73 -7 7) -91]
Test Case: 728 | Input/Output: [(-23 56 55 37) -23]
Test Case: 729 | Input/Output: [(82 -44 -91 -2) -91]
Test Case: 730 | Input/Output: [(-37 92 -99 -76) -99]
Test Case: 731 | Input/Output: [(-93 -26 87 75) -93]
Test Case: 732 | Input/Output: [(-68 -65 -46 -71) -71]
Test Case: 733 | Input/Output: [(-80 93 -50 61) -80]
Test Case: 734 | Input/Output: [(1 66 77 81) 1]
Test Case: 735 | Input/Output: [(-82 55 7 96) -82]
Test Case: 736 | Input/Output: [(43 -54 -16 -66) -66]
Test Case: 737 | Input/Output: [(-93 54 -11 39) -93]
Test Case: 738 | Input/Output: [(83 -2 -94 9) -94]
Test Case: 739 | Input/Output: [(-77 -7 -6 96) -77]
Test Case: 740 | Input/Output: [(74 -86 -10 -94) -94]
Test Case: 741 | Input/Output: [(-65 11 -82 -48) -82]
Test Case: 742 | Input/Output: [(65 -50 -85 84) -85]
Test Case: 743 | Input/Output: [(62 30 71 10) 10]
Test Case: 744 | Input/Output: [(12 -19 93 47) -19]
Test Case: 745 | Input/Output: [(31 29 93 6) 6]
Test Case: 746 | Input/Output: [(-64 -57 -52 -19) -64]
Test Case: 747 | Input/Output: [(86 -55 74 48) -55]
Test Case: 748 | Input/Output: [(32 -64 -71 -4) -71]
Test Case: 749 | Input/Output: [(55 -21 55 -84) -84]
Test Case: 750 | Input/Output: [(-62 85 74 98) -62]
Test Case: 751 | Input/Output: [(10 -23 79 -8) -23]
Test Case: 752 | Input/Output: [(-89 62 30 -99) -99]
Test Case: 753 | Input/Output: [(-87 -83 84 -57) -87]
Test Case: 754 | Input/Output: [(78 -21 38 92) -21]
Test Case: 755 | Input/Output: [(-78 -43 -53 -9) -78]
Test Case: 756 | Input/Output: [(72 -99 46 13) -99]
Test Case: 757 | Input/Output: [(-97 -80 28 59) -97]
Test Case: 758 | Input/Output: [(91 31 -6 -83) -83]
Test Case: 759 | Input/Output: [(-43 25 -55 7) -55]
Test Case: 760 | Input/Output: [(15 42 -87 95) -87]
Test Case: 761 | Input/Output: [(99 20 -1 4) -1]
Test Case: 762 | Input/Output: [(72 73 75 77) 72]
Test Case: 763 | Input/Output: [(-11 19 -44 -30) -44]
Test Case: 764 | Input/Output: [(93 96 -57 7) -57]
Test Case: 765 | Input/Output: [(-37 -6 -26 -98) -98]
Test Case: 766 | Input/Output: [(-34 28 35 -58) -58]
Test Case: 767 | Input/Output: [(-48 66 -84 -16) -84]
Test Case: 768 | Input/Output: [(-94 -84 37 -46) -94]
Test Case: 769 | Input/Output: [(81 -22 -71 79) -71]
Test Case: 770 | Input/Output: [(2 -24 -21 54) -24]
Test Case: 771 | Input/Output: [(8 35 -26 9) -26]
Test Case: 772 | Input/Output: [(69 79 -12 -26) -26]
Test Case: 773 | Input/Output: [(77 93 63 20) 20]
Test Case: 774 | Input/Output: [(-17 -14 -57 -25) -57]
Test Case: 775 | Input/Output: [(-47 -22 -77 49) -77]
Test Case: 776 | Input/Output: [(63 -80 -69 86) -80]
Test Case: 777 | Input/Output: [(47 85 -55 -59) -59]
Test Case: 778 | Input/Output: [(-59 87 11 16) -59]
Test Case: 779 | Input/Output: [(-19 53 45 28) -19]
Test Case: 780 | Input/Output: [(-99 -96 -13 -30) -99]
Test Case: 781 | Input/Output: [(91 -89 39 48) -89]
Test Case: 782 | Input/Output: [(-97 -63 72 15) -97]
Test Case: 783 | Input/Output: [(12 90 -18 -30) -30]
Test Case: 784 | Input/Output: [(-53 53 50 -11) -53]
Test Case: 785 | Input/Output: [(61 2 -55 96) -55]
Test Case: 786 | Input/Output: [(-56 -19 97 4) -56]
Test Case: 787 | Input/Output: [(-92 -7 76 -83) -92]
Test Case: 788 | Input/Output: [(-33 25 -54 66) -54]
Test Case: 789 | Input/Output: [(-49 45 -11 -14) -49]
Test Case: 790 | Input/Output: [(4 47 99 -85) -85]
Test Case: 791 | Input/Output: [(-30 -56 91 -17) -56]
Test Case: 792 | Input/Output: [(48 -72 -35 -52) -72]
Test Case: 793 | Input/Output: [(91 77 -25 90) -25]
Test Case: 794 | Input/Output: [(29 92 -31 44) -31]
Test Case: 795 | Input/Output: [(-36 91 8 24) -36]
Test Case: 796 | Input/Output: [(-90 -78 65 100) -90]
Test Case: 797 | Input/Output: [(-64 100 -78 42) -78]
Test Case: 798 | Input/Output: [(-64 -83 -69 78) -83]
Test Case: 799 | Input/Output: [(-74 -3 -56 -10) -74]
Test Case: 800 | Input/Output: [(8 95 80 -49) -49]
Test Case: 801 | Input/Output: [(17 63 46 55) 17]
Test Case: 802 | Input/Output: [(72 -30 77 12) -30]
Test Case: 803 | Input/Output: [(-58 28 -58 -37) -58]
Test Case: 804 | Input/Output: [(90 -4 -11 3) -11]
Test Case: 805 | Input/Output: [(-31 -77 87 -82) -82]
Test Case: 806 | Input/Output: [(-34 79 -11 -96) -96]
Test Case: 807 | Input/Output: [(9 -8 -89 -39) -89]
Test Case: 808 | Input/Output: [(-31 -66 -59 42) -66]
Test Case: 809 | Input/Output: [(-26 -20 16 65) -26]
Test Case: 810 | Input/Output: [(-79 9 49 10) -79]
Test Case: 811 | Input/Output: [(4 -98 -26 -70) -98]
Test Case: 812 | Input/Output: [(-30 -68 -45 -51) -68]
Test Case: 813 | Input/Output: [(-10 80 -62 31) -62]
Test Case: 814 | Input/Output: [(-64 91 -16 65) -64]
Test Case: 815 | Input/Output: [(45 -2 -59 0) -59]
Test Case: 816 | Input/Output: [(61 95 -10 -24) -24]
Test Case: 817 | Input/Output: [(92 74 -55 -39) -55]
Test Case: 818 | Input/Output: [(97 -62 9 25) -62]
Test Case: 819 | Input/Output: [(7 71 -51 14) -51]
Test Case: 820 | Input/Output: [(55 32 -88 90) -88]
Test Case: 821 | Input/Output: [(-43 -30 23 -59) -59]
Test Case: 822 | Input/Output: [(-85 -46 54 47) -85]
Test Case: 823 | Input/Output: [(-90 79 9 -58) -90]
Test Case: 824 | Input/Output: [(92 -1 -8 -71) -71]
Test Case: 825 | Input/Output: [(42 87 82 -89) -89]
Test Case: 826 | Input/Output: [(-4 -7 -81 82) -81]
Test Case: 827 | Input/Output: [(-73 -29 66 87) -73]
Test Case: 828 | Input/Output: [(-35 6 -21 43) -35]
Test Case: 829 | Input/Output: [(84 -59 -41 71) -59]
Test Case: 830 | Input/Output: [(47 58 -83 11) -83]
Test Case: 831 | Input/Output: [(78 91 -87 93) -87]
Test Case: 832 | Input/Output: [(-13 -94 0 61) -94]
Test Case: 833 | Input/Output: [(-71 -48 71 -54) -71]
Test Case: 834 | Input/Output: [(23 61 96 36) 23]
Test Case: 835 | Input/Output: [(-38 -93 71 37) -93]
Test Case: 836 | Input/Output: [(63 1 97 -89) -89]
Test Case: 837 | Input/Output: [(74 58 -38 9) -38]
Test Case: 838 | Input/Output: [(45 -51 81 -91) -91]
Test Case: 839 | Input/Output: [(-96 -89 64 -69) -96]
Test Case: 840 | Input/Output: [(-96 -86 69 -59) -96]
Test Case: 841 | Input/Output: [(25 -71 46 61) -71]
Test Case: 842 | Input/Output: [(-98 92 -24 -3) -98]
Test Case: 843 | Input/Output: [(-87 74 23 92) -87]
Test Case: 844 | Input/Output: [(-93 -68 -23 22) -93]
Test Case: 845 | Input/Output: [(-40 -38 -60 54) -60]
Test Case: 846 | Input/Output: [(-34 80 -56 70) -56]
Test Case: 847 | Input/Output: [(31 44 -76 -5) -76]
Test Case: 848 | Input/Output: [(37 -63 96 -68) -68]
Test Case: 849 | Input/Output: [(-16 -25 -92 -95) -95]
Test Case: 850 | Input/Output: [(98 61 56 91) 56]
Test Case: 851 | Input/Output: [(-81 19 54 24) -81]
Test Case: 852 | Input/Output: [(-23 -55 80 -39) -55]
Test Case: 853 | Input/Output: [(-74 88 90 -90) -90]
Test Case: 854 | Input/Output: [(69 49 -56 53) -56]
Test Case: 855 | Input/Output: [(-84 -90 24 -70) -90]
Test Case: 856 | Input/Output: [(65 -96 22 -50) -96]
Test Case: 857 | Input/Output: [(10 14 -61 41) -61]
Test Case: 858 | Input/Output: [(-25 -61 -63 -89) -89]
Test Case: 859 | Input/Output: [(-68 -18 66 -43) -68]
Test Case: 860 | Input/Output: [(-58 40 79 94) -58]
Test Case: 861 | Input/Output: [(-8 -99 6 -85) -99]
Test Case: 862 | Input/Output: [(77 -3 71 -73) -73]
Test Case: 863 | Input/Output: [(-4 -47 70 -92) -92]
Test Case: 864 | Input/Output: [(-63 -53 52 78) -63]
Test Case: 865 | Input/Output: [(-57 -84 38 -26) -84]
Test Case: 866 | Input/Output: [(-40 56 21 41) -40]
Test Case: 867 | Input/Output: [(-17 -94 -29 -72) -94]
Test Case: 868 | Input/Output: [(-82 -54 62 85) -82]
Test Case: 869 | Input/Output: [(-70 -34 82 17) -70]
Test Case: 870 | Input/Output: [(9 60 -64 -69) -69]
Test Case: 871 | Input/Output: [(94 -12 100 36) -12]
Test Case: 872 | Input/Output: [(-39 72 75 54) -39]
Test Case: 873 | Input/Output: [(-90 -73 33 -10) -90]
Test Case: 874 | Input/Output: [(77 98 84 -77) -77]
Test Case: 875 | Input/Output: [(-67 75 -40 -85) -85]
Test Case: 876 | Input/Output: [(83 -80 70 -100) -100]
Test Case: 877 | Input/Output: [(21 -74 -96 57) -96]
Test Case: 878 | Input/Output: [(-26 75 87 -31) -31]
Test Case: 879 | Input/Output: [(97 24 -69 81) -69]
Test Case: 880 | Input/Output: [(-29 -6 24 -40) -40]
Test Case: 881 | Input/Output: [(-29 -3 -63 73) -63]
Test Case: 882 | Input/Output: [(42 75 -53 -67) -67]
Test Case: 883 | Input/Output: [(-27 49 -21 61) -27]
Test Case: 884 | Input/Output: [(71 90 1 -30) -30]
Test Case: 885 | Input/Output: [(-75 -45 33 74) -75]
Test Case: 886 | Input/Output: [(15 50 17 6) 6]
Test Case: 887 | Input/Output: [(-66 78 -74 -90) -90]
Test Case: 888 | Input/Output: [(-83 34 3 34) -83]
Test Case: 889 | Input/Output: [(61 -74 25 30) -74]
Test Case: 890 | Input/Output: [(20 -38 -64 -89) -89]
Test Case: 891 | Input/Output: [(-28 34 -92 75) -92]
Test Case: 892 | Input/Output: [(-70 -47 -34 46) -70]
Test Case: 893 | Input/Output: [(-36 31 -25 -18) -36]
Test Case: 894 | Input/Output: [(-32 -58 -92 -79) -92]
Test Case: 895 | Input/Output: [(-9 -29 63 3) -29]
Test Case: 896 | Input/Output: [(-2 -1 -67 63) -67]
Test Case: 897 | Input/Output: [(41 5 47 37) 5]
Test Case: 898 | Input/Output: [(-96 26 -52 97) -96]
Test Case: 899 | Input/Output: [(-90 67 38 -67) -90]
Test Case: 900 | Input/Output: [(-34 -55 86 -64) -64]
Test Case: 901 | Input/Output: [(37 -72 -30 69) -72]
Test Case: 902 | Input/Output: [(-39 61 -93 88) -93]
Test Case: 903 | Input/Output: [(-58 81 84 -51) -58]
Test Case: 904 | Input/Output: [(45 -80 37 70) -80]
Test Case: 905 | Input/Output: [(61 -58 -91 51) -91]
Test Case: 906 | Input/Output: [(19 -54 -26 52) -54]
Test Case: 907 | Input/Output: [(22 27 43 -12) -12]
Test Case: 908 | Input/Output: [(79 -32 -43 -83) -83]
Test Case: 909 | Input/Output: [(-78 71 70 -67) -78]
Test Case: 910 | Input/Output: [(42 -16 93 -62) -62]
Test Case: 911 | Input/Output: [(60 50 52 70) 50]
Test Case: 912 | Input/Output: [(58 85 28 45) 28]
Test Case: 913 | Input/Output: [(-69 -58 -93 42) -93]
Test Case: 914 | Input/Output: [(-52 82 -21 49) -52]
Test Case: 915 | Input/Output: [(61 -78 77 -66) -78]
Test Case: 916 | Input/Output: [(14 62 -70 -97) -97]
Test Case: 917 | Input/Output: [(13 98 34 -5) -5]
Test Case: 918 | Input/Output: [(63 21 -54 88) -54]
Test Case: 919 | Input/Output: [(-68 -77 55 28) -77]
Test Case: 920 | Input/Output: [(18 -95 -2 95) -95]
Test Case: 921 | Input/Output: [(-35 -17 -57 -91) -91]
Test Case: 922 | Input/Output: [(93 -83 9 -37) -83]
Test Case: 923 | Input/Output: [(16 21 22 -41) -41]
Test Case: 924 | Input/Output: [(21 84 78 38) 21]
Test Case: 925 | Input/Output: [(-60 78 80 -99) -99]
Test Case: 926 | Input/Output: [(-49 74 25 47) -49]
Test Case: 927 | Input/Output: [(-74 -27 -30 -78) -78]
Test Case: 928 | Input/Output: [(-54 -95 -8 -21) -95]
Test Case: 929 | Input/Output: [(94 37 43 -43) -43]
Test Case: 930 | Input/Output: [(-92 -85 -33 65) -92]
Test Case: 931 | Input/Output: [(-81 44 -13 78) -81]
Test Case: 932 | Input/Output: [(-77 81 -41 31) -77]
Test Case: 933 | Input/Output: [(-68 -9 86 -60) -68]
Test Case: 934 | Input/Output: [(34 9 39 15) 9]
Test Case: 935 | Input/Output: [(92 31 -4 -49) -49]
Test Case: 936 | Input/Output: [(-54 63 -72 -27) -72]
Test Case: 937 | Input/Output: [(-75 -15 -32 -26) -75]
Test Case: 938 | Input/Output: [(-57 -27 44 -84) -84]
Test Case: 939 | Input/Output: [(-81 99 75 61) -81]
Test Case: 940 | Input/Output: [(-25 -18 -11 -53) -53]
Test Case: 941 | Input/Output: [(-78 9 -65 70) -78]
Test Case: 942 | Input/Output: [(35 -88 26 -53) -88]
Test Case: 943 | Input/Output: [(-74 71 7 32) -74]
Test Case: 944 | Input/Output: [(11 -59 -76 17) -76]
Test Case: 945 | Input/Output: [(57 63 6 -81) -81]
Test Case: 946 | Input/Output: [(33 -23 59 57) -23]
Test Case: 947 | Input/Output: [(81 82 -48 -17) -48]
Test Case: 948 | Input/Output: [(-67 88 -85 52) -85]
Test Case: 949 | Input/Output: [(52 -31 3 51) -31]
Test Case: 950 | Input/Output: [(40 23 -11 -11) -11]
Test Case: 951 | Input/Output: [(29 -14 86 63) -14]
Test Case: 952 | Input/Output: [(70 -8 87 97) -8]
Test Case: 953 | Input/Output: [(-40 -42 -59 -79) -79]
Test Case: 954 | Input/Output: [(13 32 -57 59) -57]
Test Case: 955 | Input/Output: [(26 76 50 52) 26]
Test Case: 956 | Input/Output: [(-87 59 94 10) -87]
Test Case: 957 | Input/Output: [(65 -29 54 78) -29]
Test Case: 958 | Input/Output: [(79 -93 -29 28) -93]
Test Case: 959 | Input/Output: [(-51 22 61 42) -51]
Test Case: 960 | Input/Output: [(-84 88 13 20) -84]
Test Case: 961 | Input/Output: [(6 -90 81 -37) -90]
Test Case: 962 | Input/Output: [(46 -68 21 -82) -82]
Test Case: 963 | Input/Output: [(-24 20 82 -4) -24]
Test Case: 964 | Input/Output: [(39 -99 83 -49) -99]
Test Case: 965 | Input/Output: [(-52 75 -71 96) -71]
Test Case: 966 | Input/Output: [(89 27 -72 -63) -72]
Test Case: 967 | Input/Output: [(-41 97 53 92) -41]
Test Case: 968 | Input/Output: [(-88 -93 84 53) -93]
Test Case: 969 | Input/Output: [(-55 -21 -30 41) -55]
Test Case: 970 | Input/Output: [(13 9 84 47) 9]
Test Case: 971 | Input/Output: [(64 -17 -58 -4) -58]
Test Case: 972 | Input/Output: [(70 41 9 9) 9]
Test Case: 973 | Input/Output: [(-36 -5 -40 41) -40]
Test Case: 974 | Input/Output: [(0 52 98 31) 0]
Test Case: 975 | Input/Output: [(10 23 -81 83) -81]
Test Case: 976 | Input/Output: [(-88 -93 43 4) -93]
Test Case: 977 | Input/Output: [(-35 35 49 -14) -35]
Test Case: 978 | Input/Output: [(-40 -15 35 89) -40]
Test Case: 979 | Input/Output: [(22 26 -80 -54) -80]
Test Case: 980 | Input/Output: [(83 25 93 54) 25]
Test Case: 981 | Input/Output: [(28 0 -98 87) -98]
Test Case: 982 | Input/Output: [(-90 2 -24 -35) -90]
Test Case: 983 | Input/Output: [(88 -43 63 31) -43]
Test Case: 984 | Input/Output: [(29 93 25 -63) -63]
Test Case: 985 | Input/Output: [(23 76 96 -92) -92]
Test Case: 986 | Input/Output: [(15 -51 -86 -86) -86]
Test Case: 987 | Input/Output: [(-2 39 55 -71) -71]
Test Case: 988 | Input/Output: [(93 -71 -13 35) -71]
Test Case: 989 | Input/Output: [(-8 32 -37 -43) -43]
Test Case: 990 | Input/Output: [(-31 83 82 48) -31]
Test Case: 991 | Input/Output: [(26 61 -68 -3) -68]
Test Case: 992 | Input/Output: [(-79 -48 52 -6) -79]
Test Case: 993 | Input/Output: [(-19 54 83 -97) -97]
Test Case: 994 | Input/Output: [(-65 -29 -41 -75) -75]
Test Case: 995 | Input/Output: [(24 68 -79 -86) -86]
Test Case: 996 | Input/Output: [(-93 40 -19 -37) -93]
Test Case: 997 | Input/Output: [(93 85 13 -22) -22]
Test Case: 998 | Input/Output: [(63 -66 0 -29) -66]
Test Case: 999 | Input/Output: [(3 31 -8 24) -8]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 57 38 -101 -113 -57 -107 -64 72 -86 20 -10 91 105 -4 -108 97
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -12 -78 -12] -78] [[-20 -20 81 -20] -20] [[24 -47 24 24] -47] [[-24 -24 -24 -67] -67] [[34 34 34 -26] -26] [[-28 -28 -28 72] -28] [[55 -54 55 55] -54] [[-76 -76 -6 -76] -76] [[9 64 9 9] 9] [[54 54 54 -42] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 682
Test mean error for best: 0.68200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_579} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_683} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 1, :instruction 85} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_614} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Lexicase best program: (integer_yankdup integer_inc boolean_pop integer_div integer_eq boolean_invert_second_then_and tag_integer_579 exec_eq integer_max boolean_invert_second_then_and exec_yank integer_dup_items boolean_swap exec_pop (exec_do*times (print_newline boolean_xor) integer_flush exec_dup_items) exec_noop exec_empty boolean_yankdup integer_empty print_integer boolean_invert_second_then_and exec_while (integer_eq exec_noop boolean_not exec_when (exec_y_when_autoconstructing () exec_dup_items boolean_xor boolean_shove integer_dup_items exec_s_when_autoconstructing (integer_stackdepth integer_lt tag_integer_683 exec_dup_items integer_swap integer_fromboolean boolean_xor) (85) (integer_mult boolean_or tagged_614 boolean_frominteger integer_empty integer_div boolean_swap in2 boolean_dup) print_integer integer_inc exec_while (integer_swap exec_while (exec_dup_items) exec_dup (boolean_rot boolean_shove exec_noop exec_dup_times (integer_rot boolean_invert_second_then_and)) integer_yank exec_dup (print_integer exec_dup_times (boolean_invert_first_then_and exec_dup_times () integer_inc) exec_dup_times () exec_do*times (exec_shove (boolean_rot) integer_gt)) exec_dup_items integer_fromboolean) exec_s_when_autoconstructing () (boolean_shove integer_pop) (exec_yank exec_while (exec_do*times (integer_yank boolean_xor exec_shove (boolean_dup_times exec_k (integer_dup print_integer) ())))))))
Lexicase best errors: [1 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 120
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_579} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_683} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 1, :instruction 85} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_614} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer})
Zero cases best program: (integer_yankdup integer_inc boolean_pop integer_div integer_eq boolean_invert_second_then_and tag_integer_579 exec_eq integer_max boolean_invert_second_then_and exec_yank integer_dup_items boolean_swap exec_pop (exec_do*times (print_newline boolean_xor) integer_flush exec_dup_items) exec_noop exec_empty boolean_yankdup integer_empty print_integer boolean_invert_second_then_and exec_while (integer_eq exec_noop boolean_not exec_when (exec_y_when_autoconstructing () exec_dup_items boolean_xor boolean_shove integer_dup_items exec_s_when_autoconstructing (integer_stackdepth integer_lt tag_integer_683 exec_dup_items integer_swap integer_fromboolean boolean_xor) (85) (integer_mult boolean_or tagged_614 boolean_frominteger integer_empty integer_div boolean_swap in2 boolean_dup) print_integer integer_inc exec_while (integer_swap exec_while (exec_dup_items) exec_dup (boolean_rot boolean_shove exec_noop exec_dup_times (integer_rot boolean_invert_second_then_and)) integer_yank exec_dup (print_integer exec_dup_times (boolean_invert_first_then_and exec_dup_times () integer_inc) exec_dup_times () exec_do*times (exec_shove (boolean_rot) integer_gt)) exec_dup_items integer_fromboolean) exec_s_when_autoconstructing () (boolean_shove integer_pop) (exec_yank exec_while (exec_do*times (integer_yank boolean_xor exec_shove (boolean_dup_times exec_k (integer_dup print_integer) ())))))))
Zero cases best errors: [1 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 120
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 7 3 3 2 3 7 3 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 7 3 3 2 3 7 3 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction 87} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -19} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times})
Best program: (exec_stackdepth integer_gte integer_fromboolean boolean_frominteger boolean_stackdepth boolean_flush in2 exec_k_when_autoconstructing () (print_integer boolean_swap integer_gt exec_noop exec_flush exec_while (integer_sub) exec_do*range (integer_gte) exec_dup_items) in1 integer_fromboolean boolean_not boolean_yank exec_y_when_autoconstructing () boolean_pop boolean_invert_second_then_and integer_rot 87 integer_stackdepth integer_fromboolean exec_when (integer_yankdup) -19 boolean_flush integer_add integer_gte boolean_dup exec_swap () (integer_lte exec_y_when_autoconstructing (print_exec (exec_yank boolean_flush print_exec (exec_when (boolean_dup_items) integer_mult boolean_dup integer_mult) exec_flush exec_flush) integer_eq) boolean_and) exec_eq boolean_swap integer_dup_items integer_gte print_exec () exec_do*times (exec_while (exec_do*times ())))
Errors: [1 0 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 77
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.997 0.993 0.997 0.997 0.998 0.997 0.993 0.997 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.613
Average program size in population (points): 72.629
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 485717
--- Timings ---
Current time: 1559314652061 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.3%
Fitness Testing:      1.7 seconds, 66.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction tagged_393} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Lexicase best program: (print_boolean boolean_or exec_dup_items exec_stackdepth in4 tagged_393 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_noop boolean_flush integer_min print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction tagged_393} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Zero cases best program: (print_boolean boolean_or exec_dup_items exec_stackdepth in4 tagged_393 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_noop boolean_flush integer_min print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (720 339 380 844 339 125 1 2 848 124)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (720 339 380 844 339 125 1 2 848 124)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction tagged_393} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Best program: (print_boolean boolean_or exec_dup_items exec_stackdepth in4 tagged_393 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_noop boolean_flush integer_min print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 57
Size: 68
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 6.278
Median total errors in population: 6
Error averages by case: (0.28 0.661 0.62 0.156 0.661 0.875 0.999 0.998 0.152 0.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.499
Average program size in population (points): 73.236
Average percent parens in population: 0.229
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.505
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 952591
--- Timings ---
Current time: 1559314655047 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 46.5%
Fitness Testing:      2.3 seconds, 45.6%
Report:               0.3 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction tagged_393} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Lexicase best program: (print_boolean boolean_or exec_dup_items exec_stackdepth in4 tagged_393 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_noop boolean_flush integer_min print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction tagged_393} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Zero cases best program: (print_boolean boolean_or exec_dup_items exec_stackdepth in4 tagged_393 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_noop boolean_flush integer_min print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 297 123 501 906 123 123 485 297 502)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (485 297 123 501 906 123 123 485 297 502)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction tagged_393} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Best program: (print_boolean boolean_or exec_dup_items exec_stackdepth in4 tagged_393 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_noop boolean_flush integer_min print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush integer_yank integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Errors: [0 1 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 68
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 6.158
Median total errors in population: 6
Error averages by case: (0.515 0.703 0.877 0.499 0.094 0.877 0.877 0.515 0.703 0.498)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.046
Average program size in population (points): 50.054
Average percent parens in population: 0.206
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.125
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1807963
--- Timings ---
Current time: 1559314658678 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 50.7%
Fitness Testing:      3.2 seconds, 35.9%
Report:               1.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 179
Test mean error for best: 0.17900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 325 599 275 568 291 597 617 292 291)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (325 325 599 275 568 291 597 617 292 291)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 53
Size: 65
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 5.82
Median total errors in population: 5
Error averages by case: (0.675 0.675 0.401 0.725 0.432 0.709 0.403 0.383 0.708 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.509
Average program size in population (points): 70.536
Average percent parens in population: 0.180
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.74425
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2877016
--- Timings ---
Current time: 1559314662647 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 53.0%
Fitness Testing:      4.1 seconds, 32.2%
Report:               1.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 179
Test mean error for best: 0.17900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (exec_dup (boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 66
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (exec_dup (boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 66
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (550 577 930 558 339 551 557 915 555 576)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (550 577 930 558 339 551 557 915 555 576)
Population mean number of perfect (error zero) cases: 6.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (exec_k_when_autoconstructing (boolean_swap integer_mult integer_add) (exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 53
Size: 65
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 3.892
Median total errors in population: 1
Error averages by case: (0.45 0.423 0.07 0.442 0.661 0.449 0.443 0.085 0.445 0.424)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.139
Average program size in population (points): 68.482
Average percent parens in population: 0.192
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 6.01325
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 285
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 294
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3911820
--- Timings ---
Current time: 1559314666435 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 53.9%
Fitness Testing:      5.0 seconds, 30.4%
Report:               2.5 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 72
Percent parens: 0.181
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 72
Percent parens: 0.181
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 947 760 763 764 163 163 760 763 763)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (163 947 760 763 764 163 163 760 763 763)
Population mean number of perfect (error zero) cases: 6.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_684} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq})
Best program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 59
Size: 72
Percent parens: 0.181
--- Population Statistics ---
Average total errors in population: 3.991
Median total errors in population: 3
Error averages by case: (0.837 0.053 0.24 0.237 0.236 0.837 0.837 0.24 0.237 0.237)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.654
Average program size in population (points): 65.676
Average percent parens in population: 0.183
Minimum age in population: 5.75
Maximum age in population: 8.875
Average age in population: 7.5680625
Median age in population: 7.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 195
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5388075
--- Timings ---
Current time: 1559314670317 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.8 seconds, 52.9%
Fitness Testing:      6.3 seconds, 30.8%
Report:               3.2 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 5
Successful program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 72


Auto-simplifying with starting size: 72
step: 0
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 500
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 1000
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 1500
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 2000
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 2500
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 3000
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 3500
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 4000
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 4500
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 5000
program: (in4 in1 boolean_invert_second_then_and in4 print_boolean boolean_eq boolean_flush tag_integer_684 integer_rot in3 exec_dup (boolean_flush integer_min) in2 exec_k_when_autoconstructing () (in3) exec_dup (boolean_flush integer_min) print_integer integer_yankdup integer_rot exec_y (integer_stackdepth boolean_yankdup exec_do*while (integer_flush) integer_dup integer_mult exec_eq boolean_flush boolean_empty integer_empty) boolean_or exec_empty integer_flush boolean_dup_items integer_yank exec_yank integer_gt integer_stackdepth in1 exec_dup (boolean_flush boolean_invert_second_then_and) boolean_or integer_lte exec_s_when_autoconstructing () (exec_y () integer_lte) (integer_sub boolean_swap integer_mult integer_add) exec_do*range (integer_mod integer_shove exec_yankdup exec_eq))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
