Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[42 -76 -76 -76] -76] [[-33 -33 -10 -33] -33] [[13 13 13 -53] -53] [[25 25 25 -96] -96] [[-91 -63 -91 -91] -91] [[-61 -74 -61 -61] -74] [[-35 94 -35 -35] -35] [[-43 -43 -43 18] -43] [[-43 -43 -43 -36] -43] [[60 -54 60 60] -54] [(22 22 22 22) 22] [(-75 -75 -75 -75) -75] [(-34 -34 -34 -34) -34] [(-74 -74 -74 -74) -74] [(-69 -69 -69 -69) -69] [(65 27 63 19) 19] [(93 55 97 48) 48] [(8 35 0 73) 0] [(66 85 2 42) 2] [(62 96 98 39) 39] [(76 35 96 46) 35] [(55 89 1 82) 1] [(15 56 18 64) 15] [(33 59 33 48) 33] [(1 94 38 97) 1] [(9 92 96 83) 9] [(19 66 49 92) 19] [(96 27 57 89) 27] [(71 61 93 100) 61] [(94 79 65 16) 16] [(93 54 23 29) 23] [(35 19 56 12) 12] [(88 24 17 45) 17] [(69 0 97 39) 0] [(71 44 10 71) 10] [(-56 45 -94 1) -94] [(-92 9 -45 -29) -92] [(-60 -10 32 -40) -60] [(36 34 -50 -8) -50] [(-89 -73 78 51) -89] [(52 -40 -54 -23) -54] [(8 -9 10 -49) -49] [(10 79 -40 43) -40] [(-89 100 62 -57) -89] [(-61 45 -19 86) -61] [(-82 -75 -56 18) -82] [(70 50 -83 -45) -83] [(-1 -50 20 71) -50] [(-70 -15 -36 -45) -70] [(-13 -8 35 -41) -41] [(52 49 68 2) 2] [(-85 -77 -79 -93) -93] [(52 -21 -27 -26) -27] [(65 73 -54 -97) -97] [(10 -5 -12 -64) -64] [(-22 -4 80 66) -22] [(-50 -57 66 39) -57] [(-78 17 -63 17) -78] [(-37 54 -35 -78) -78] [(-41 -50 -26 -4) -50] [(75 -47 -90 -69) -90] [(-77 -62 53 -48) -77] [(87 -82 28 -1) -82] [(64 -91 89 73) -91] [(79 -70 -40 -84) -84] [(2 68 16 -38) -38] [(54 -41 70 -59) -59] [(7 56 12 -54) -54] [(99 -79 -85 -61) -85] [(-85 -22 -52 71) -85] [(-79 -65 96 -90) -90] [(98 10 -58 -89) -89] [(58 -20 -9 15) -20] [(-40 -88 59 -42) -88] [(41 97 -18 -69) -69] [(13 -51 -55 -47) -55] [(29 -15 -69 1) -69] [(14 -88 26 33) -88] [(-48 -56 -58 69) -58] [(17 12 -26 -2) -26] [(85 75 4 -13) -13] [(60 -61 -20 13) -61] [(29 22 -22 56) -22] [(-47 59 -54 1) -54] [(-9 -44 -60 -46) -60] [(-87 -87 87 66) -87] [(60 -44 58 29) -44] [(40 95 -97 -24) -97] [(98 -4 77 -24) -24] [(7 -49 -100 7) -100] [(-6 53 66 97) -6] [(62 19 -33 74) -33] [(-92 -74 -99 -25) -99] [(-79 34 -7 39) -79] [(76 6 41 12) 6])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[42 -76 -76 -76] -76]
Train Case:   6 | Input/Output: [[-33 -33 -10 -33] -33]
Train Case:   7 | Input/Output: [[13 13 13 -53] -53]
Train Case:   8 | Input/Output: [[25 25 25 -96] -96]
Train Case:   9 | Input/Output: [[-91 -63 -91 -91] -91]
Train Case:  10 | Input/Output: [[-61 -74 -61 -61] -74]
Train Case:  11 | Input/Output: [[-35 94 -35 -35] -35]
Train Case:  12 | Input/Output: [[-43 -43 -43 18] -43]
Train Case:  13 | Input/Output: [[-43 -43 -43 -36] -43]
Train Case:  14 | Input/Output: [[60 -54 60 60] -54]
Train Case:  15 | Input/Output: [(22 22 22 22) 22]
Train Case:  16 | Input/Output: [(-75 -75 -75 -75) -75]
Train Case:  17 | Input/Output: [(-34 -34 -34 -34) -34]
Train Case:  18 | Input/Output: [(-74 -74 -74 -74) -74]
Train Case:  19 | Input/Output: [(-69 -69 -69 -69) -69]
Train Case:  20 | Input/Output: [(65 27 63 19) 19]
Train Case:  21 | Input/Output: [(93 55 97 48) 48]
Train Case:  22 | Input/Output: [(8 35 0 73) 0]
Train Case:  23 | Input/Output: [(66 85 2 42) 2]
Train Case:  24 | Input/Output: [(62 96 98 39) 39]
Train Case:  25 | Input/Output: [(76 35 96 46) 35]
Train Case:  26 | Input/Output: [(55 89 1 82) 1]
Train Case:  27 | Input/Output: [(15 56 18 64) 15]
Train Case:  28 | Input/Output: [(33 59 33 48) 33]
Train Case:  29 | Input/Output: [(1 94 38 97) 1]
Train Case:  30 | Input/Output: [(9 92 96 83) 9]
Train Case:  31 | Input/Output: [(19 66 49 92) 19]
Train Case:  32 | Input/Output: [(96 27 57 89) 27]
Train Case:  33 | Input/Output: [(71 61 93 100) 61]
Train Case:  34 | Input/Output: [(94 79 65 16) 16]
Train Case:  35 | Input/Output: [(93 54 23 29) 23]
Train Case:  36 | Input/Output: [(35 19 56 12) 12]
Train Case:  37 | Input/Output: [(88 24 17 45) 17]
Train Case:  38 | Input/Output: [(69 0 97 39) 0]
Train Case:  39 | Input/Output: [(71 44 10 71) 10]
Train Case:  40 | Input/Output: [(-56 45 -94 1) -94]
Train Case:  41 | Input/Output: [(-92 9 -45 -29) -92]
Train Case:  42 | Input/Output: [(-60 -10 32 -40) -60]
Train Case:  43 | Input/Output: [(36 34 -50 -8) -50]
Train Case:  44 | Input/Output: [(-89 -73 78 51) -89]
Train Case:  45 | Input/Output: [(52 -40 -54 -23) -54]
Train Case:  46 | Input/Output: [(8 -9 10 -49) -49]
Train Case:  47 | Input/Output: [(10 79 -40 43) -40]
Train Case:  48 | Input/Output: [(-89 100 62 -57) -89]
Train Case:  49 | Input/Output: [(-61 45 -19 86) -61]
Train Case:  50 | Input/Output: [(-82 -75 -56 18) -82]
Train Case:  51 | Input/Output: [(70 50 -83 -45) -83]
Train Case:  52 | Input/Output: [(-1 -50 20 71) -50]
Train Case:  53 | Input/Output: [(-70 -15 -36 -45) -70]
Train Case:  54 | Input/Output: [(-13 -8 35 -41) -41]
Train Case:  55 | Input/Output: [(52 49 68 2) 2]
Train Case:  56 | Input/Output: [(-85 -77 -79 -93) -93]
Train Case:  57 | Input/Output: [(52 -21 -27 -26) -27]
Train Case:  58 | Input/Output: [(65 73 -54 -97) -97]
Train Case:  59 | Input/Output: [(10 -5 -12 -64) -64]
Train Case:  60 | Input/Output: [(-22 -4 80 66) -22]
Train Case:  61 | Input/Output: [(-50 -57 66 39) -57]
Train Case:  62 | Input/Output: [(-78 17 -63 17) -78]
Train Case:  63 | Input/Output: [(-37 54 -35 -78) -78]
Train Case:  64 | Input/Output: [(-41 -50 -26 -4) -50]
Train Case:  65 | Input/Output: [(75 -47 -90 -69) -90]
Train Case:  66 | Input/Output: [(-77 -62 53 -48) -77]
Train Case:  67 | Input/Output: [(87 -82 28 -1) -82]
Train Case:  68 | Input/Output: [(64 -91 89 73) -91]
Train Case:  69 | Input/Output: [(79 -70 -40 -84) -84]
Train Case:  70 | Input/Output: [(2 68 16 -38) -38]
Train Case:  71 | Input/Output: [(54 -41 70 -59) -59]
Train Case:  72 | Input/Output: [(7 56 12 -54) -54]
Train Case:  73 | Input/Output: [(99 -79 -85 -61) -85]
Train Case:  74 | Input/Output: [(-85 -22 -52 71) -85]
Train Case:  75 | Input/Output: [(-79 -65 96 -90) -90]
Train Case:  76 | Input/Output: [(98 10 -58 -89) -89]
Train Case:  77 | Input/Output: [(58 -20 -9 15) -20]
Train Case:  78 | Input/Output: [(-40 -88 59 -42) -88]
Train Case:  79 | Input/Output: [(41 97 -18 -69) -69]
Train Case:  80 | Input/Output: [(13 -51 -55 -47) -55]
Train Case:  81 | Input/Output: [(29 -15 -69 1) -69]
Train Case:  82 | Input/Output: [(14 -88 26 33) -88]
Train Case:  83 | Input/Output: [(-48 -56 -58 69) -58]
Train Case:  84 | Input/Output: [(17 12 -26 -2) -26]
Train Case:  85 | Input/Output: [(85 75 4 -13) -13]
Train Case:  86 | Input/Output: [(60 -61 -20 13) -61]
Train Case:  87 | Input/Output: [(29 22 -22 56) -22]
Train Case:  88 | Input/Output: [(-47 59 -54 1) -54]
Train Case:  89 | Input/Output: [(-9 -44 -60 -46) -60]
Train Case:  90 | Input/Output: [(-87 -87 87 66) -87]
Train Case:  91 | Input/Output: [(60 -44 58 29) -44]
Train Case:  92 | Input/Output: [(40 95 -97 -24) -97]
Train Case:  93 | Input/Output: [(98 -4 77 -24) -24]
Train Case:  94 | Input/Output: [(7 -49 -100 7) -100]
Train Case:  95 | Input/Output: [(-6 53 66 97) -6]
Train Case:  96 | Input/Output: [(62 19 -33 74) -33]
Train Case:  97 | Input/Output: [(-92 -74 -99 -25) -99]
Train Case:  98 | Input/Output: [(-79 34 -7 39) -79]
Train Case:  99 | Input/Output: [(76 6 41 12) 6]
Test Case:   0 | Input/Output: [[-39 30 30 30] -39]
Test Case:   1 | Input/Output: [[2 -2 2 2] -2]
Test Case:   2 | Input/Output: [[-69 94 94 94] -69]
Test Case:   3 | Input/Output: [[70 70 -86 70] -86]
Test Case:   4 | Input/Output: [[-23 -23 -23 55] -23]
Test Case:   5 | Input/Output: [[-26 -26 -26 78] -26]
Test Case:   6 | Input/Output: [[99 -87 99 99] -87]
Test Case:   7 | Input/Output: [[-70 -16 -16 -16] -70]
Test Case:   8 | Input/Output: [[-35 -35 -35 -91] -91]
Test Case:   9 | Input/Output: [[11 22 22 22] 11]
Test Case:  10 | Input/Output: [[80 80 32 80] 32]
Test Case:  11 | Input/Output: [[79 79 50 79] 50]
Test Case:  12 | Input/Output: [[41 32 32 32] 32]
Test Case:  13 | Input/Output: [[14 14 -37 14] -37]
Test Case:  14 | Input/Output: [[-50 -98 -98 -98] -98]
Test Case:  15 | Input/Output: [[-90 -90 -88 -90] -90]
Test Case:  16 | Input/Output: [[-28 -28 -28 -75] -75]
Test Case:  17 | Input/Output: [[-39 -62 -39 -39] -62]
Test Case:  18 | Input/Output: [[-19 -36 -36 -36] -36]
Test Case:  19 | Input/Output: [[-37 8 -37 -37] -37]
Test Case:  20 | Input/Output: [[-99 -62 -62 -62] -99]
Test Case:  21 | Input/Output: [[-27 -27 -27 35] -27]
Test Case:  22 | Input/Output: [[-39 -39 -13 -39] -39]
Test Case:  23 | Input/Output: [[-53 -68 -53 -53] -68]
Test Case:  24 | Input/Output: [[97 97 97 82] 82]
Test Case:  25 | Input/Output: [[-18 91 91 91] -18]
Test Case:  26 | Input/Output: [[96 -53 96 96] -53]
Test Case:  27 | Input/Output: [[75 -38 -38 -38] -38]
Test Case:  28 | Input/Output: [[-6 -6 -69 -6] -69]
Test Case:  29 | Input/Output: [[-47 -47 -8 -47] -47]
Test Case:  30 | Input/Output: [[39 -65 39 39] -65]
Test Case:  31 | Input/Output: [[-14 -14 -87 -14] -87]
Test Case:  32 | Input/Output: [[65 -100 65 65] -100]
Test Case:  33 | Input/Output: [[-25 -39 -25 -25] -39]
Test Case:  34 | Input/Output: [[95 52 95 95] 52]
Test Case:  35 | Input/Output: [[6 6 6 22] 6]
Test Case:  36 | Input/Output: [[11 62 62 62] 11]
Test Case:  37 | Input/Output: [[-46 -15 -46 -46] -46]
Test Case:  38 | Input/Output: [[5 -55 5 5] -55]
Test Case:  39 | Input/Output: [[-9 -9 -9 -7] -9]
Test Case:  40 | Input/Output: [[-85 -85 -85 65] -85]
Test Case:  41 | Input/Output: [[-87 -87 49 -87] -87]
Test Case:  42 | Input/Output: [[-34 35 -34 -34] -34]
Test Case:  43 | Input/Output: [[-48 61 -48 -48] -48]
Test Case:  44 | Input/Output: [[47 -98 -98 -98] -98]
Test Case:  45 | Input/Output: [[-34 -34 26 -34] -34]
Test Case:  46 | Input/Output: [[15 87 87 87] 15]
Test Case:  47 | Input/Output: [[-80 27 27 27] -80]
Test Case:  48 | Input/Output: [[-19 -42 -19 -19] -42]
Test Case:  49 | Input/Output: [[52 52 -69 52] -69]
Test Case:  50 | Input/Output: [[19 -48 -48 -48] -48]
Test Case:  51 | Input/Output: [[1 1 1 28] 1]
Test Case:  52 | Input/Output: [[-77 48 -77 -77] -77]
Test Case:  53 | Input/Output: [[-46 -46 -46 60] -46]
Test Case:  54 | Input/Output: [[97 97 64 97] 64]
Test Case:  55 | Input/Output: [[59 97 97 97] 59]
Test Case:  56 | Input/Output: [[6 -61 -61 -61] -61]
Test Case:  57 | Input/Output: [[-44 -44 63 -44] -44]
Test Case:  58 | Input/Output: [[-22 -22 6 -22] -22]
Test Case:  59 | Input/Output: [[-85 -85 -85 -100] -100]
Test Case:  60 | Input/Output: [[-39 -31 -31 -31] -39]
Test Case:  61 | Input/Output: [[-5 89 -5 -5] -5]
Test Case:  62 | Input/Output: [[18 18 18 18] 18]
Test Case:  63 | Input/Output: [[61 61 56 61] 56]
Test Case:  64 | Input/Output: [[-92 -92 -39 -92] -92]
Test Case:  65 | Input/Output: [[-11 -79 -79 -79] -79]
Test Case:  66 | Input/Output: [[94 30 94 94] 30]
Test Case:  67 | Input/Output: [[74 -25 -25 -25] -25]
Test Case:  68 | Input/Output: [[-53 -61 -61 -61] -61]
Test Case:  69 | Input/Output: [[24 50 24 24] 24]
Test Case:  70 | Input/Output: [[63 16 63 63] 16]
Test Case:  71 | Input/Output: [[-52 -20 -20 -20] -52]
Test Case:  72 | Input/Output: [[10 10 10 14] 10]
Test Case:  73 | Input/Output: [[-66 -67 -66 -66] -67]
Test Case:  74 | Input/Output: [[-54 -54 87 -54] -54]
Test Case:  75 | Input/Output: [[41 41 41 28] 28]
Test Case:  76 | Input/Output: [[71 71 71 -28] -28]
Test Case:  77 | Input/Output: [[-29 -76 -29 -29] -76]
Test Case:  78 | Input/Output: [[-90 -90 -73 -90] -90]
Test Case:  79 | Input/Output: [[72 -64 -64 -64] -64]
Test Case:  80 | Input/Output: [[63 63 63 -50] -50]
Test Case:  81 | Input/Output: [[-87 -87 -87 6] -87]
Test Case:  82 | Input/Output: [[50 50 -73 50] -73]
Test Case:  83 | Input/Output: [[74 28 74 74] 28]
Test Case:  84 | Input/Output: [[34 90 34 34] 34]
Test Case:  85 | Input/Output: [[76 -6 -6 -6] -6]
Test Case:  86 | Input/Output: [[37 35 35 35] 35]
Test Case:  87 | Input/Output: [[60 -77 60 60] -77]
Test Case:  88 | Input/Output: [[68 68 68 77] 68]
Test Case:  89 | Input/Output: [[-13 -13 2 -13] -13]
Test Case:  90 | Input/Output: [[89 89 89 -53] -53]
Test Case:  91 | Input/Output: [[-7 -7 91 -7] -7]
Test Case:  92 | Input/Output: [[-76 -76 55 -76] -76]
Test Case:  93 | Input/Output: [[-25 -25 -99 -25] -99]
Test Case:  94 | Input/Output: [[-50 -50 -50 80] -50]
Test Case:  95 | Input/Output: [[17 17 -80 17] -80]
Test Case:  96 | Input/Output: [[38 38 -72 38] -72]
Test Case:  97 | Input/Output: [[22 -79 22 22] -79]
Test Case:  98 | Input/Output: [[96 96 96 56] 56]
Test Case:  99 | Input/Output: [[-16 -16 -16 -42] -42]
Test Case: 100 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 101 | Input/Output: [(91 91 91 91) 91]
Test Case: 102 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 103 | Input/Output: [(99 99 99 99) 99]
Test Case: 104 | Input/Output: [(61 61 61 61) 61]
Test Case: 105 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 106 | Input/Output: [(75 75 75 75) 75]
Test Case: 107 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 108 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 109 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 110 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 111 | Input/Output: [(52 52 52 52) 52]
Test Case: 112 | Input/Output: [(72 72 72 72) 72]
Test Case: 113 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 114 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 115 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 116 | Input/Output: [(14 14 14 14) 14]
Test Case: 117 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 118 | Input/Output: [(76 76 76 76) 76]
Test Case: 119 | Input/Output: [(15 15 15 15) 15]
Test Case: 120 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 121 | Input/Output: [(6 6 6 6) 6]
Test Case: 122 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 123 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 124 | Input/Output: [(55 55 55 55) 55]
Test Case: 125 | Input/Output: [(22 22 22 22) 22]
Test Case: 126 | Input/Output: [(50 50 50 50) 50]
Test Case: 127 | Input/Output: [(97 97 97 97) 97]
Test Case: 128 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 129 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 130 | Input/Output: [(79 79 79 79) 79]
Test Case: 131 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 132 | Input/Output: [(70 70 70 70) 70]
Test Case: 133 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 134 | Input/Output: [(42 42 42 42) 42]
Test Case: 135 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 136 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 137 | Input/Output: [(0 0 0 0) 0]
Test Case: 138 | Input/Output: [(97 97 97 97) 97]
Test Case: 139 | Input/Output: [(44 44 44 44) 44]
Test Case: 140 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 141 | Input/Output: [(9 9 9 9) 9]
Test Case: 142 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 143 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 144 | Input/Output: [(78 78 78 78) 78]
Test Case: 145 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 146 | Input/Output: [(19 19 19 19) 19]
Test Case: 147 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 148 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 149 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 150 | Input/Output: [(58 58 58 58) 58]
Test Case: 151 | Input/Output: [(26 26 26 26) 26]
Test Case: 152 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 153 | Input/Output: [(14 14 14 14) 14]
Test Case: 154 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 155 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 156 | Input/Output: [(77 77 77 77) 77]
Test Case: 157 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 158 | Input/Output: [(80 80 80 80) 80]
Test Case: 159 | Input/Output: [(73 73 73 73) 73]
Test Case: 160 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 161 | Input/Output: [(100 100 100 100) 100]
Test Case: 162 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 163 | Input/Output: [(86 86 86 86) 86]
Test Case: 164 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 165 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 166 | Input/Output: [(2 2 2 2) 2]
Test Case: 167 | Input/Output: [(85 85 85 85) 85]
Test Case: 168 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 169 | Input/Output: [(21 21 21 21) 21]
Test Case: 170 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 171 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 172 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 173 | Input/Output: [(74 74 74 74) 74]
Test Case: 174 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 175 | Input/Output: [(60 60 60 60) 60]
Test Case: 176 | Input/Output: [(62 62 62 62) 62]
Test Case: 177 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 178 | Input/Output: [(89 89 89 89) 89]
Test Case: 179 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 180 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 181 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 182 | Input/Output: [(64 64 64 64) 64]
Test Case: 183 | Input/Output: [(32 32 32 32) 32]
Test Case: 184 | Input/Output: [(40 40 40 40) 40]
Test Case: 185 | Input/Output: [(6 6 6 6) 6]
Test Case: 186 | Input/Output: [(79 79 79 79) 79]
Test Case: 187 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 188 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 189 | Input/Output: [(37 37 37 37) 37]
Test Case: 190 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 191 | Input/Output: [(53 53 53 53) 53]
Test Case: 192 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 193 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 194 | Input/Output: [(14 14 14 14) 14]
Test Case: 195 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 196 | Input/Output: [(55 55 55 55) 55]
Test Case: 197 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 198 | Input/Output: [(95 95 95 95) 95]
Test Case: 199 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 200 | Input/Output: [(11 66 99 17) 11]
Test Case: 201 | Input/Output: [(17 94 25 55) 17]
Test Case: 202 | Input/Output: [(19 6 6 25) 6]
Test Case: 203 | Input/Output: [(99 93 74 63) 63]
Test Case: 204 | Input/Output: [(43 52 80 82) 43]
Test Case: 205 | Input/Output: [(63 8 12 29) 8]
Test Case: 206 | Input/Output: [(51 66 35 60) 35]
Test Case: 207 | Input/Output: [(74 72 25 16) 16]
Test Case: 208 | Input/Output: [(82 57 36 62) 36]
Test Case: 209 | Input/Output: [(8 78 1 32) 1]
Test Case: 210 | Input/Output: [(59 78 62 42) 42]
Test Case: 211 | Input/Output: [(17 19 27 33) 17]
Test Case: 212 | Input/Output: [(13 2 79 2) 2]
Test Case: 213 | Input/Output: [(18 2 28 76) 2]
Test Case: 214 | Input/Output: [(65 15 63 8) 8]
Test Case: 215 | Input/Output: [(27 57 8 94) 8]
Test Case: 216 | Input/Output: [(39 93 9 46) 9]
Test Case: 217 | Input/Output: [(42 0 13 33) 0]
Test Case: 218 | Input/Output: [(5 55 53 73) 5]
Test Case: 219 | Input/Output: [(43 25 70 73) 25]
Test Case: 220 | Input/Output: [(50 56 98 24) 24]
Test Case: 221 | Input/Output: [(26 44 36 3) 3]
Test Case: 222 | Input/Output: [(12 96 38 93) 12]
Test Case: 223 | Input/Output: [(40 11 37 61) 11]
Test Case: 224 | Input/Output: [(3 76 61 10) 3]
Test Case: 225 | Input/Output: [(86 77 13 60) 13]
Test Case: 226 | Input/Output: [(84 62 86 36) 36]
Test Case: 227 | Input/Output: [(11 94 8 97) 8]
Test Case: 228 | Input/Output: [(75 40 45 18) 18]
Test Case: 229 | Input/Output: [(94 64 80 23) 23]
Test Case: 230 | Input/Output: [(43 36 72 70) 36]
Test Case: 231 | Input/Output: [(57 7 5 64) 5]
Test Case: 232 | Input/Output: [(70 92 59 36) 36]
Test Case: 233 | Input/Output: [(59 49 89 51) 49]
Test Case: 234 | Input/Output: [(59 8 9 28) 8]
Test Case: 235 | Input/Output: [(16 89 8 38) 8]
Test Case: 236 | Input/Output: [(92 0 30 43) 0]
Test Case: 237 | Input/Output: [(93 60 41 78) 41]
Test Case: 238 | Input/Output: [(65 22 90 84) 22]
Test Case: 239 | Input/Output: [(35 72 4 75) 4]
Test Case: 240 | Input/Output: [(37 92 37 19) 19]
Test Case: 241 | Input/Output: [(42 85 1 10) 1]
Test Case: 242 | Input/Output: [(24 76 52 18) 18]
Test Case: 243 | Input/Output: [(70 19 17 52) 17]
Test Case: 244 | Input/Output: [(4 0 40 19) 0]
Test Case: 245 | Input/Output: [(35 97 72 80) 35]
Test Case: 246 | Input/Output: [(32 56 77 54) 32]
Test Case: 247 | Input/Output: [(10 22 98 95) 10]
Test Case: 248 | Input/Output: [(33 100 83 32) 32]
Test Case: 249 | Input/Output: [(60 75 91 40) 40]
Test Case: 250 | Input/Output: [(81 68 66 49) 49]
Test Case: 251 | Input/Output: [(74 28 93 28) 28]
Test Case: 252 | Input/Output: [(54 31 47 27) 27]
Test Case: 253 | Input/Output: [(11 63 58 14) 11]
Test Case: 254 | Input/Output: [(84 12 75 46) 12]
Test Case: 255 | Input/Output: [(53 33 91 47) 33]
Test Case: 256 | Input/Output: [(32 61 44 47) 32]
Test Case: 257 | Input/Output: [(33 61 57 60) 33]
Test Case: 258 | Input/Output: [(98 46 60 14) 14]
Test Case: 259 | Input/Output: [(54 12 23 40) 12]
Test Case: 260 | Input/Output: [(64 59 2 82) 2]
Test Case: 261 | Input/Output: [(34 93 66 55) 34]
Test Case: 262 | Input/Output: [(98 82 30 32) 30]
Test Case: 263 | Input/Output: [(17 77 23 84) 17]
Test Case: 264 | Input/Output: [(89 54 63 73) 54]
Test Case: 265 | Input/Output: [(41 26 58 30) 26]
Test Case: 266 | Input/Output: [(40 17 0 17) 0]
Test Case: 267 | Input/Output: [(77 21 87 6) 6]
Test Case: 268 | Input/Output: [(1 74 51 52) 1]
Test Case: 269 | Input/Output: [(90 93 62 77) 62]
Test Case: 270 | Input/Output: [(94 88 38 8) 8]
Test Case: 271 | Input/Output: [(68 81 87 41) 41]
Test Case: 272 | Input/Output: [(45 80 66 22) 22]
Test Case: 273 | Input/Output: [(80 91 88 13) 13]
Test Case: 274 | Input/Output: [(23 80 22 40) 22]
Test Case: 275 | Input/Output: [(4 15 82 45) 4]
Test Case: 276 | Input/Output: [(77 82 92 26) 26]
Test Case: 277 | Input/Output: [(44 32 42 93) 32]
Test Case: 278 | Input/Output: [(16 30 26 42) 16]
Test Case: 279 | Input/Output: [(73 13 21 11) 11]
Test Case: 280 | Input/Output: [(85 26 55 78) 26]
Test Case: 281 | Input/Output: [(64 91 97 53) 53]
Test Case: 282 | Input/Output: [(75 73 75 33) 33]
Test Case: 283 | Input/Output: [(76 62 21 9) 9]
Test Case: 284 | Input/Output: [(43 54 13 89) 13]
Test Case: 285 | Input/Output: [(46 65 14 87) 14]
Test Case: 286 | Input/Output: [(27 41 51 49) 27]
Test Case: 287 | Input/Output: [(43 52 56 82) 43]
Test Case: 288 | Input/Output: [(66 92 15 21) 15]
Test Case: 289 | Input/Output: [(65 77 86 98) 65]
Test Case: 290 | Input/Output: [(30 0 53 84) 0]
Test Case: 291 | Input/Output: [(46 11 11 85) 11]
Test Case: 292 | Input/Output: [(23 28 22 31) 22]
Test Case: 293 | Input/Output: [(82 27 32 95) 27]
Test Case: 294 | Input/Output: [(39 98 71 2) 2]
Test Case: 295 | Input/Output: [(85 38 52 61) 38]
Test Case: 296 | Input/Output: [(85 8 11 93) 8]
Test Case: 297 | Input/Output: [(47 17 82 35) 17]
Test Case: 298 | Input/Output: [(18 28 47 50) 18]
Test Case: 299 | Input/Output: [(50 62 62 95) 50]
Test Case: 300 | Input/Output: [(56 92 26 0) 0]
Test Case: 301 | Input/Output: [(52 87 16 68) 16]
Test Case: 302 | Input/Output: [(93 98 41 19) 19]
Test Case: 303 | Input/Output: [(84 46 56 88) 46]
Test Case: 304 | Input/Output: [(62 46 12 17) 12]
Test Case: 305 | Input/Output: [(94 1 71 73) 1]
Test Case: 306 | Input/Output: [(53 69 0 67) 0]
Test Case: 307 | Input/Output: [(80 26 5 76) 5]
Test Case: 308 | Input/Output: [(49 72 45 74) 45]
Test Case: 309 | Input/Output: [(54 78 32 44) 32]
Test Case: 310 | Input/Output: [(36 71 12 20) 12]
Test Case: 311 | Input/Output: [(79 53 6 17) 6]
Test Case: 312 | Input/Output: [(72 61 30 0) 0]
Test Case: 313 | Input/Output: [(15 12 6 91) 6]
Test Case: 314 | Input/Output: [(79 25 67 86) 25]
Test Case: 315 | Input/Output: [(13 10 13 15) 10]
Test Case: 316 | Input/Output: [(51 4 57 10) 4]
Test Case: 317 | Input/Output: [(69 80 96 93) 69]
Test Case: 318 | Input/Output: [(80 84 24 57) 24]
Test Case: 319 | Input/Output: [(58 70 54 46) 46]
Test Case: 320 | Input/Output: [(52 5 50 53) 5]
Test Case: 321 | Input/Output: [(67 83 66 2) 2]
Test Case: 322 | Input/Output: [(55 59 58 35) 35]
Test Case: 323 | Input/Output: [(61 84 29 40) 29]
Test Case: 324 | Input/Output: [(24 22 5 99) 5]
Test Case: 325 | Input/Output: [(47 39 19 29) 19]
Test Case: 326 | Input/Output: [(18 28 31 46) 18]
Test Case: 327 | Input/Output: [(94 36 31 60) 31]
Test Case: 328 | Input/Output: [(55 69 60 23) 23]
Test Case: 329 | Input/Output: [(21 59 9 56) 9]
Test Case: 330 | Input/Output: [(5 80 71 35) 5]
Test Case: 331 | Input/Output: [(57 84 31 97) 31]
Test Case: 332 | Input/Output: [(82 79 58 75) 58]
Test Case: 333 | Input/Output: [(5 29 27 52) 5]
Test Case: 334 | Input/Output: [(37 5 77 24) 5]
Test Case: 335 | Input/Output: [(44 16 78 69) 16]
Test Case: 336 | Input/Output: [(9 37 68 18) 9]
Test Case: 337 | Input/Output: [(75 29 55 59) 29]
Test Case: 338 | Input/Output: [(23 52 81 50) 23]
Test Case: 339 | Input/Output: [(27 76 43 1) 1]
Test Case: 340 | Input/Output: [(70 1 95 80) 1]
Test Case: 341 | Input/Output: [(77 82 51 18) 18]
Test Case: 342 | Input/Output: [(79 6 9 51) 6]
Test Case: 343 | Input/Output: [(91 57 43 56) 43]
Test Case: 344 | Input/Output: [(57 64 0 9) 0]
Test Case: 345 | Input/Output: [(21 71 75 75) 21]
Test Case: 346 | Input/Output: [(35 69 23 65) 23]
Test Case: 347 | Input/Output: [(58 20 82 65) 20]
Test Case: 348 | Input/Output: [(80 43 35 57) 35]
Test Case: 349 | Input/Output: [(8 39 40 94) 8]
Test Case: 350 | Input/Output: [(65 89 34 78) 34]
Test Case: 351 | Input/Output: [(71 51 13 18) 13]
Test Case: 352 | Input/Output: [(77 13 68 42) 13]
Test Case: 353 | Input/Output: [(10 8 30 76) 8]
Test Case: 354 | Input/Output: [(31 92 37 27) 27]
Test Case: 355 | Input/Output: [(22 38 76 100) 22]
Test Case: 356 | Input/Output: [(21 27 29 43) 21]
Test Case: 357 | Input/Output: [(43 100 47 81) 43]
Test Case: 358 | Input/Output: [(22 0 86 72) 0]
Test Case: 359 | Input/Output: [(53 79 58 71) 53]
Test Case: 360 | Input/Output: [(90 37 13 60) 13]
Test Case: 361 | Input/Output: [(60 65 53 41) 41]
Test Case: 362 | Input/Output: [(73 5 47 1) 1]
Test Case: 363 | Input/Output: [(70 22 59 100) 22]
Test Case: 364 | Input/Output: [(83 51 42 94) 42]
Test Case: 365 | Input/Output: [(33 43 16 3) 3]
Test Case: 366 | Input/Output: [(44 18 15 29) 15]
Test Case: 367 | Input/Output: [(14 53 69 97) 14]
Test Case: 368 | Input/Output: [(51 10 27 20) 10]
Test Case: 369 | Input/Output: [(63 72 100 28) 28]
Test Case: 370 | Input/Output: [(71 59 37 26) 26]
Test Case: 371 | Input/Output: [(77 85 74 41) 41]
Test Case: 372 | Input/Output: [(92 67 39 18) 18]
Test Case: 373 | Input/Output: [(38 82 59 100) 38]
Test Case: 374 | Input/Output: [(98 21 30 33) 21]
Test Case: 375 | Input/Output: [(75 10 59 86) 10]
Test Case: 376 | Input/Output: [(94 24 31 66) 24]
Test Case: 377 | Input/Output: [(84 86 79 91) 79]
Test Case: 378 | Input/Output: [(41 74 98 1) 1]
Test Case: 379 | Input/Output: [(61 32 35 36) 32]
Test Case: 380 | Input/Output: [(27 75 40 96) 27]
Test Case: 381 | Input/Output: [(2 22 68 57) 2]
Test Case: 382 | Input/Output: [(53 80 1 33) 1]
Test Case: 383 | Input/Output: [(7 46 34 60) 7]
Test Case: 384 | Input/Output: [(25 7 2 96) 2]
Test Case: 385 | Input/Output: [(73 9 1 70) 1]
Test Case: 386 | Input/Output: [(22 55 31 32) 22]
Test Case: 387 | Input/Output: [(28 49 79 55) 28]
Test Case: 388 | Input/Output: [(10 21 11 59) 10]
Test Case: 389 | Input/Output: [(83 4 61 55) 4]
Test Case: 390 | Input/Output: [(5 14 99 12) 5]
Test Case: 391 | Input/Output: [(23 67 36 91) 23]
Test Case: 392 | Input/Output: [(52 48 21 57) 21]
Test Case: 393 | Input/Output: [(53 51 3 4) 3]
Test Case: 394 | Input/Output: [(90 69 4 64) 4]
Test Case: 395 | Input/Output: [(92 27 82 2) 2]
Test Case: 396 | Input/Output: [(75 8 15 45) 8]
Test Case: 397 | Input/Output: [(1 40 74 75) 1]
Test Case: 398 | Input/Output: [(22 57 87 70) 22]
Test Case: 399 | Input/Output: [(60 47 32 39) 32]
Test Case: 400 | Input/Output: [(44 90 67 94) 44]
Test Case: 401 | Input/Output: [(-99 15 100 -23) -99]
Test Case: 402 | Input/Output: [(3 -31 98 38) -31]
Test Case: 403 | Input/Output: [(48 31 -28 41) -28]
Test Case: 404 | Input/Output: [(10 72 87 87) 10]
Test Case: 405 | Input/Output: [(85 -77 27 -94) -94]
Test Case: 406 | Input/Output: [(92 -57 -55 83) -57]
Test Case: 407 | Input/Output: [(-4 -16 -80 -96) -96]
Test Case: 408 | Input/Output: [(-57 36 21 88) -57]
Test Case: 409 | Input/Output: [(32 47 -63 27) -63]
Test Case: 410 | Input/Output: [(-49 56 84 33) -49]
Test Case: 411 | Input/Output: [(66 69 -84 86) -84]
Test Case: 412 | Input/Output: [(44 -92 -68 -1) -92]
Test Case: 413 | Input/Output: [(71 -38 85 95) -38]
Test Case: 414 | Input/Output: [(22 -71 -5 -46) -71]
Test Case: 415 | Input/Output: [(-32 3 -60 -48) -60]
Test Case: 416 | Input/Output: [(35 92 -80 100) -80]
Test Case: 417 | Input/Output: [(92 -64 -26 -27) -64]
Test Case: 418 | Input/Output: [(48 -36 50 7) -36]
Test Case: 419 | Input/Output: [(47 -21 96 28) -21]
Test Case: 420 | Input/Output: [(-9 37 -66 12) -66]
Test Case: 421 | Input/Output: [(-43 -18 -22 -74) -74]
Test Case: 422 | Input/Output: [(17 31 -49 -79) -79]
Test Case: 423 | Input/Output: [(-82 62 -83 93) -83]
Test Case: 424 | Input/Output: [(68 -33 52 -60) -60]
Test Case: 425 | Input/Output: [(95 -58 41 17) -58]
Test Case: 426 | Input/Output: [(-93 23 -36 61) -93]
Test Case: 427 | Input/Output: [(-64 -19 81 58) -64]
Test Case: 428 | Input/Output: [(-21 -28 80 -65) -65]
Test Case: 429 | Input/Output: [(37 59 93 -8) -8]
Test Case: 430 | Input/Output: [(-97 -85 -74 16) -97]
Test Case: 431 | Input/Output: [(-12 88 75 15) -12]
Test Case: 432 | Input/Output: [(-90 22 74 87) -90]
Test Case: 433 | Input/Output: [(-97 -89 10 -16) -97]
Test Case: 434 | Input/Output: [(63 -64 3 57) -64]
Test Case: 435 | Input/Output: [(79 -68 95 -80) -80]
Test Case: 436 | Input/Output: [(-63 -78 -83 70) -83]
Test Case: 437 | Input/Output: [(27 30 -4 58) -4]
Test Case: 438 | Input/Output: [(-100 8 96 7) -100]
Test Case: 439 | Input/Output: [(100 -7 93 23) -7]
Test Case: 440 | Input/Output: [(-84 -7 -28 -90) -90]
Test Case: 441 | Input/Output: [(14 -81 -19 27) -81]
Test Case: 442 | Input/Output: [(28 67 56 -5) -5]
Test Case: 443 | Input/Output: [(-22 77 -28 56) -28]
Test Case: 444 | Input/Output: [(-41 81 -33 38) -41]
Test Case: 445 | Input/Output: [(2 -27 6 -38) -38]
Test Case: 446 | Input/Output: [(64 7 25 88) 7]
Test Case: 447 | Input/Output: [(-97 -54 9 41) -97]
Test Case: 448 | Input/Output: [(-88 50 0 -68) -88]
Test Case: 449 | Input/Output: [(9 25 -75 -47) -75]
Test Case: 450 | Input/Output: [(-29 -57 -74 -35) -74]
Test Case: 451 | Input/Output: [(17 -46 -100 53) -100]
Test Case: 452 | Input/Output: [(-44 -14 91 12) -44]
Test Case: 453 | Input/Output: [(-3 -8 -54 -32) -54]
Test Case: 454 | Input/Output: [(-92 12 75 94) -92]
Test Case: 455 | Input/Output: [(-54 72 36 -99) -99]
Test Case: 456 | Input/Output: [(-28 -86 42 65) -86]
Test Case: 457 | Input/Output: [(-86 47 -69 -4) -86]
Test Case: 458 | Input/Output: [(-42 -47 -60 64) -60]
Test Case: 459 | Input/Output: [(-25 -61 -46 -23) -61]
Test Case: 460 | Input/Output: [(-14 4 11 24) -14]
Test Case: 461 | Input/Output: [(37 74 -4 91) -4]
Test Case: 462 | Input/Output: [(-77 5 60 -71) -77]
Test Case: 463 | Input/Output: [(-74 -55 -77 4) -77]
Test Case: 464 | Input/Output: [(31 33 2 53) 2]
Test Case: 465 | Input/Output: [(-74 22 -41 -15) -74]
Test Case: 466 | Input/Output: [(-77 36 -71 23) -77]
Test Case: 467 | Input/Output: [(50 -56 25 47) -56]
Test Case: 468 | Input/Output: [(67 -20 -74 82) -74]
Test Case: 469 | Input/Output: [(87 -75 -54 3) -75]
Test Case: 470 | Input/Output: [(2 -92 89 14) -92]
Test Case: 471 | Input/Output: [(65 12 76 31) 12]
Test Case: 472 | Input/Output: [(45 -14 -39 83) -39]
Test Case: 473 | Input/Output: [(-56 -18 -3 -75) -75]
Test Case: 474 | Input/Output: [(0 -25 -90 63) -90]
Test Case: 475 | Input/Output: [(76 71 -82 3) -82]
Test Case: 476 | Input/Output: [(60 11 -44 -13) -44]
Test Case: 477 | Input/Output: [(87 94 -46 21) -46]
Test Case: 478 | Input/Output: [(46 -88 27 80) -88]
Test Case: 479 | Input/Output: [(-73 54 36 42) -73]
Test Case: 480 | Input/Output: [(55 -61 89 -44) -61]
Test Case: 481 | Input/Output: [(-51 -25 -93 -74) -93]
Test Case: 482 | Input/Output: [(-87 20 24 -89) -89]
Test Case: 483 | Input/Output: [(-49 1 58 25) -49]
Test Case: 484 | Input/Output: [(-91 -82 43 69) -91]
Test Case: 485 | Input/Output: [(-50 -83 10 13) -83]
Test Case: 486 | Input/Output: [(-38 17 98 0) -38]
Test Case: 487 | Input/Output: [(42 33 88 -72) -72]
Test Case: 488 | Input/Output: [(64 13 94 -28) -28]
Test Case: 489 | Input/Output: [(72 66 29 -90) -90]
Test Case: 490 | Input/Output: [(-38 15 82 32) -38]
Test Case: 491 | Input/Output: [(-82 -14 -38 13) -82]
Test Case: 492 | Input/Output: [(90 -11 98 -66) -66]
Test Case: 493 | Input/Output: [(22 -43 3 -59) -59]
Test Case: 494 | Input/Output: [(53 87 93 -56) -56]
Test Case: 495 | Input/Output: [(7 -16 25 -6) -16]
Test Case: 496 | Input/Output: [(-53 -15 -91 16) -91]
Test Case: 497 | Input/Output: [(51 82 -94 34) -94]
Test Case: 498 | Input/Output: [(3 35 -37 -73) -73]
Test Case: 499 | Input/Output: [(-3 -29 -34 -12) -34]
Test Case: 500 | Input/Output: [(-68 38 97 74) -68]
Test Case: 501 | Input/Output: [(-50 -70 -9 -40) -70]
Test Case: 502 | Input/Output: [(80 -10 -33 57) -33]
Test Case: 503 | Input/Output: [(46 81 -51 43) -51]
Test Case: 504 | Input/Output: [(25 25 4 98) 4]
Test Case: 505 | Input/Output: [(91 -15 -45 -29) -45]
Test Case: 506 | Input/Output: [(80 58 -9 -74) -74]
Test Case: 507 | Input/Output: [(39 -5 13 18) -5]
Test Case: 508 | Input/Output: [(33 40 32 -39) -39]
Test Case: 509 | Input/Output: [(41 9 75 59) 9]
Test Case: 510 | Input/Output: [(-15 3 -53 8) -53]
Test Case: 511 | Input/Output: [(38 27 37 55) 27]
Test Case: 512 | Input/Output: [(-87 64 -57 38) -87]
Test Case: 513 | Input/Output: [(-37 86 50 -65) -65]
Test Case: 514 | Input/Output: [(36 64 83 12) 12]
Test Case: 515 | Input/Output: [(58 78 -7 -64) -64]
Test Case: 516 | Input/Output: [(10 -21 40 69) -21]
Test Case: 517 | Input/Output: [(-72 -47 -60 -46) -72]
Test Case: 518 | Input/Output: [(-72 70 -19 95) -72]
Test Case: 519 | Input/Output: [(-3 92 17 -9) -9]
Test Case: 520 | Input/Output: [(-68 -7 -15 -59) -68]
Test Case: 521 | Input/Output: [(-10 -73 11 43) -73]
Test Case: 522 | Input/Output: [(-16 -77 7 -47) -77]
Test Case: 523 | Input/Output: [(4 -76 87 46) -76]
Test Case: 524 | Input/Output: [(62 25 32 83) 25]
Test Case: 525 | Input/Output: [(-32 23 17 28) -32]
Test Case: 526 | Input/Output: [(-70 14 60 -64) -70]
Test Case: 527 | Input/Output: [(96 -43 -41 -20) -43]
Test Case: 528 | Input/Output: [(99 -89 73 -38) -89]
Test Case: 529 | Input/Output: [(4 -67 83 38) -67]
Test Case: 530 | Input/Output: [(44 61 51 8) 8]
Test Case: 531 | Input/Output: [(40 33 66 -69) -69]
Test Case: 532 | Input/Output: [(80 -34 -31 -44) -44]
Test Case: 533 | Input/Output: [(10 -99 79 12) -99]
Test Case: 534 | Input/Output: [(-36 -48 80 -72) -72]
Test Case: 535 | Input/Output: [(-90 -44 58 76) -90]
Test Case: 536 | Input/Output: [(-78 -36 84 -93) -93]
Test Case: 537 | Input/Output: [(77 52 -91 68) -91]
Test Case: 538 | Input/Output: [(-6 85 -55 -28) -55]
Test Case: 539 | Input/Output: [(11 93 -83 -46) -83]
Test Case: 540 | Input/Output: [(-97 51 51 24) -97]
Test Case: 541 | Input/Output: [(-98 -80 85 79) -98]
Test Case: 542 | Input/Output: [(11 -2 -43 -6) -43]
Test Case: 543 | Input/Output: [(-51 36 -19 86) -51]
Test Case: 544 | Input/Output: [(-6 87 25 0) -6]
Test Case: 545 | Input/Output: [(88 21 46 87) 21]
Test Case: 546 | Input/Output: [(31 -83 -73 19) -83]
Test Case: 547 | Input/Output: [(-70 -66 98 -30) -70]
Test Case: 548 | Input/Output: [(-31 -41 -82 7) -82]
Test Case: 549 | Input/Output: [(-95 49 -83 43) -95]
Test Case: 550 | Input/Output: [(-70 63 93 -78) -78]
Test Case: 551 | Input/Output: [(10 -81 -7 96) -81]
Test Case: 552 | Input/Output: [(19 -73 81 -49) -73]
Test Case: 553 | Input/Output: [(-55 -68 -98 -98) -98]
Test Case: 554 | Input/Output: [(-24 14 -60 46) -60]
Test Case: 555 | Input/Output: [(-83 -52 -43 -3) -83]
Test Case: 556 | Input/Output: [(-97 -37 -28 76) -97]
Test Case: 557 | Input/Output: [(-72 1 -57 70) -72]
Test Case: 558 | Input/Output: [(79 31 -37 50) -37]
Test Case: 559 | Input/Output: [(-33 8 -44 59) -44]
Test Case: 560 | Input/Output: [(-10 63 -14 31) -14]
Test Case: 561 | Input/Output: [(-47 29 -34 -79) -79]
Test Case: 562 | Input/Output: [(76 46 42 -62) -62]
Test Case: 563 | Input/Output: [(-80 17 -81 53) -81]
Test Case: 564 | Input/Output: [(-88 -99 -11 66) -99]
Test Case: 565 | Input/Output: [(71 23 31 5) 5]
Test Case: 566 | Input/Output: [(77 -39 -33 -4) -39]
Test Case: 567 | Input/Output: [(48 62 -51 64) -51]
Test Case: 568 | Input/Output: [(-56 31 13 -29) -56]
Test Case: 569 | Input/Output: [(-78 30 75 -42) -78]
Test Case: 570 | Input/Output: [(59 26 8 55) 8]
Test Case: 571 | Input/Output: [(14 69 24 -34) -34]
Test Case: 572 | Input/Output: [(-31 -69 -78 37) -78]
Test Case: 573 | Input/Output: [(38 -31 33 -61) -61]
Test Case: 574 | Input/Output: [(-81 -99 -67 27) -99]
Test Case: 575 | Input/Output: [(-94 -92 -3 59) -94]
Test Case: 576 | Input/Output: [(27 18 -91 -11) -91]
Test Case: 577 | Input/Output: [(86 -41 -93 52) -93]
Test Case: 578 | Input/Output: [(34 41 98 32) 32]
Test Case: 579 | Input/Output: [(19 -100 46 -78) -100]
Test Case: 580 | Input/Output: [(7 78 -76 -17) -76]
Test Case: 581 | Input/Output: [(-23 34 -13 -53) -53]
Test Case: 582 | Input/Output: [(-23 -23 46 54) -23]
Test Case: 583 | Input/Output: [(79 -7 76 -31) -31]
Test Case: 584 | Input/Output: [(90 -89 -98 -88) -98]
Test Case: 585 | Input/Output: [(-59 34 24 -10) -59]
Test Case: 586 | Input/Output: [(7 -58 59 -56) -58]
Test Case: 587 | Input/Output: [(-64 78 -92 -26) -92]
Test Case: 588 | Input/Output: [(32 44 20 -58) -58]
Test Case: 589 | Input/Output: [(-67 -71 -88 91) -88]
Test Case: 590 | Input/Output: [(-67 -75 -87 20) -87]
Test Case: 591 | Input/Output: [(28 -94 -63 -15) -94]
Test Case: 592 | Input/Output: [(-52 68 -74 10) -74]
Test Case: 593 | Input/Output: [(62 -50 -65 67) -65]
Test Case: 594 | Input/Output: [(76 41 -15 -33) -33]
Test Case: 595 | Input/Output: [(10 -71 -89 34) -89]
Test Case: 596 | Input/Output: [(-73 94 54 -24) -73]
Test Case: 597 | Input/Output: [(39 -73 26 -98) -98]
Test Case: 598 | Input/Output: [(19 -69 -76 3) -76]
Test Case: 599 | Input/Output: [(90 2 83 -14) -14]
Test Case: 600 | Input/Output: [(-10 -42 22 -54) -54]
Test Case: 601 | Input/Output: [(-38 -52 68 73) -52]
Test Case: 602 | Input/Output: [(-92 71 60 -97) -97]
Test Case: 603 | Input/Output: [(-15 -71 -43 23) -71]
Test Case: 604 | Input/Output: [(-71 72 47 57) -71]
Test Case: 605 | Input/Output: [(-71 71 3 76) -71]
Test Case: 606 | Input/Output: [(-48 -79 -58 -11) -79]
Test Case: 607 | Input/Output: [(14 -21 2 0) -21]
Test Case: 608 | Input/Output: [(-76 55 5 39) -76]
Test Case: 609 | Input/Output: [(-28 -5 -34 -24) -34]
Test Case: 610 | Input/Output: [(-68 9 -44 80) -68]
Test Case: 611 | Input/Output: [(13 26 -89 24) -89]
Test Case: 612 | Input/Output: [(43 -16 -39 -10) -39]
Test Case: 613 | Input/Output: [(39 -43 -72 20) -72]
Test Case: 614 | Input/Output: [(-93 -27 -72 100) -93]
Test Case: 615 | Input/Output: [(-88 -19 -51 62) -88]
Test Case: 616 | Input/Output: [(26 -19 13 -48) -48]
Test Case: 617 | Input/Output: [(-16 -29 -21 -1) -29]
Test Case: 618 | Input/Output: [(-1 -56 -66 82) -66]
Test Case: 619 | Input/Output: [(73 11 -4 -62) -62]
Test Case: 620 | Input/Output: [(-45 58 81 -93) -93]
Test Case: 621 | Input/Output: [(-44 -3 -2 41) -44]
Test Case: 622 | Input/Output: [(84 1 6 -15) -15]
Test Case: 623 | Input/Output: [(-7 45 79 -75) -75]
Test Case: 624 | Input/Output: [(-30 81 46 -63) -63]
Test Case: 625 | Input/Output: [(-92 97 -33 -90) -92]
Test Case: 626 | Input/Output: [(-53 10 -46 -67) -67]
Test Case: 627 | Input/Output: [(-48 -85 -9 -4) -85]
Test Case: 628 | Input/Output: [(-48 -77 -27 -88) -88]
Test Case: 629 | Input/Output: [(-56 91 30 -49) -56]
Test Case: 630 | Input/Output: [(-12 15 8 74) -12]
Test Case: 631 | Input/Output: [(-56 -48 -10 -78) -78]
Test Case: 632 | Input/Output: [(26 13 35 52) 13]
Test Case: 633 | Input/Output: [(-14 83 81 50) -14]
Test Case: 634 | Input/Output: [(14 -9 13 -71) -71]
Test Case: 635 | Input/Output: [(-37 84 -98 18) -98]
Test Case: 636 | Input/Output: [(50 -75 10 -75) -75]
Test Case: 637 | Input/Output: [(31 -69 -11 -90) -90]
Test Case: 638 | Input/Output: [(59 -95 -47 56) -95]
Test Case: 639 | Input/Output: [(48 -51 86 44) -51]
Test Case: 640 | Input/Output: [(-40 61 3 -75) -75]
Test Case: 641 | Input/Output: [(-94 -48 45 -62) -94]
Test Case: 642 | Input/Output: [(-28 8 -72 45) -72]
Test Case: 643 | Input/Output: [(-90 -94 -72 33) -94]
Test Case: 644 | Input/Output: [(-31 26 77 -25) -31]
Test Case: 645 | Input/Output: [(95 83 -16 -6) -16]
Test Case: 646 | Input/Output: [(-5 11 -80 65) -80]
Test Case: 647 | Input/Output: [(51 -71 -64 62) -71]
Test Case: 648 | Input/Output: [(75 0 -39 -63) -63]
Test Case: 649 | Input/Output: [(-43 -53 95 56) -53]
Test Case: 650 | Input/Output: [(-33 -56 75 -83) -83]
Test Case: 651 | Input/Output: [(2 34 -1 38) -1]
Test Case: 652 | Input/Output: [(90 76 -11 91) -11]
Test Case: 653 | Input/Output: [(-10 58 -52 -76) -76]
Test Case: 654 | Input/Output: [(71 -21 -89 -55) -89]
Test Case: 655 | Input/Output: [(-54 94 82 30) -54]
Test Case: 656 | Input/Output: [(-17 60 25 17) -17]
Test Case: 657 | Input/Output: [(-29 -13 -22 2) -29]
Test Case: 658 | Input/Output: [(-89 92 -26 67) -89]
Test Case: 659 | Input/Output: [(86 -1 18 -51) -51]
Test Case: 660 | Input/Output: [(84 -38 16 -41) -41]
Test Case: 661 | Input/Output: [(71 99 97 -16) -16]
Test Case: 662 | Input/Output: [(22 -19 -81 -35) -81]
Test Case: 663 | Input/Output: [(-74 26 82 56) -74]
Test Case: 664 | Input/Output: [(38 41 76 99) 38]
Test Case: 665 | Input/Output: [(-6 -10 -17 -33) -33]
Test Case: 666 | Input/Output: [(84 20 6 -7) -7]
Test Case: 667 | Input/Output: [(-100 -62 74 -60) -100]
Test Case: 668 | Input/Output: [(91 -13 6 94) -13]
Test Case: 669 | Input/Output: [(40 -59 -15 -5) -59]
Test Case: 670 | Input/Output: [(54 -89 13 -53) -89]
Test Case: 671 | Input/Output: [(17 6 -54 -13) -54]
Test Case: 672 | Input/Output: [(70 -75 -57 -91) -91]
Test Case: 673 | Input/Output: [(65 -15 11 25) -15]
Test Case: 674 | Input/Output: [(-47 -64 94 -88) -88]
Test Case: 675 | Input/Output: [(-18 -50 31 7) -50]
Test Case: 676 | Input/Output: [(33 -23 26 8) -23]
Test Case: 677 | Input/Output: [(-81 -14 70 50) -81]
Test Case: 678 | Input/Output: [(82 87 -78 13) -78]
Test Case: 679 | Input/Output: [(84 24 39 -17) -17]
Test Case: 680 | Input/Output: [(-72 99 -59 67) -72]
Test Case: 681 | Input/Output: [(-16 99 -20 -50) -50]
Test Case: 682 | Input/Output: [(-69 22 27 49) -69]
Test Case: 683 | Input/Output: [(45 -91 -62 20) -91]
Test Case: 684 | Input/Output: [(1 98 21 96) 1]
Test Case: 685 | Input/Output: [(80 81 -67 -68) -68]
Test Case: 686 | Input/Output: [(16 3 -45 1) -45]
Test Case: 687 | Input/Output: [(4 51 -52 -7) -52]
Test Case: 688 | Input/Output: [(82 -1 -55 -37) -55]
Test Case: 689 | Input/Output: [(81 44 -96 61) -96]
Test Case: 690 | Input/Output: [(95 42 -41 -8) -41]
Test Case: 691 | Input/Output: [(63 33 15 -36) -36]
Test Case: 692 | Input/Output: [(-93 58 -84 24) -93]
Test Case: 693 | Input/Output: [(-84 -87 -50 -90) -90]
Test Case: 694 | Input/Output: [(-86 100 60 70) -86]
Test Case: 695 | Input/Output: [(13 91 69 -24) -24]
Test Case: 696 | Input/Output: [(-6 -65 58 52) -65]
Test Case: 697 | Input/Output: [(52 23 59 67) 23]
Test Case: 698 | Input/Output: [(4 55 -83 17) -83]
Test Case: 699 | Input/Output: [(-86 -74 -31 17) -86]
Test Case: 700 | Input/Output: [(-67 15 37 -23) -67]
Test Case: 701 | Input/Output: [(-86 64 -68 -74) -86]
Test Case: 702 | Input/Output: [(89 50 15 -63) -63]
Test Case: 703 | Input/Output: [(-40 -70 -72 61) -72]
Test Case: 704 | Input/Output: [(83 97 -4 -21) -21]
Test Case: 705 | Input/Output: [(98 76 -53 -88) -88]
Test Case: 706 | Input/Output: [(40 -4 25 -15) -15]
Test Case: 707 | Input/Output: [(95 -20 -49 31) -49]
Test Case: 708 | Input/Output: [(12 -38 -39 86) -39]
Test Case: 709 | Input/Output: [(-34 -44 -52 -38) -52]
Test Case: 710 | Input/Output: [(-44 -21 13 -46) -46]
Test Case: 711 | Input/Output: [(-20 -38 -99 -62) -99]
Test Case: 712 | Input/Output: [(-8 -58 -19 -49) -58]
Test Case: 713 | Input/Output: [(73 -26 53 -7) -26]
Test Case: 714 | Input/Output: [(-57 -34 56 2) -57]
Test Case: 715 | Input/Output: [(-83 38 78 -92) -92]
Test Case: 716 | Input/Output: [(-16 7 -16 29) -16]
Test Case: 717 | Input/Output: [(40 -12 43 -8) -12]
Test Case: 718 | Input/Output: [(40 80 82 -25) -25]
Test Case: 719 | Input/Output: [(33 44 32 -52) -52]
Test Case: 720 | Input/Output: [(-7 18 -31 90) -31]
Test Case: 721 | Input/Output: [(-25 -35 -93 93) -93]
Test Case: 722 | Input/Output: [(-70 -94 -57 -25) -94]
Test Case: 723 | Input/Output: [(80 80 -35 -22) -35]
Test Case: 724 | Input/Output: [(55 7 -24 25) -24]
Test Case: 725 | Input/Output: [(-13 -22 1 39) -22]
Test Case: 726 | Input/Output: [(-78 4 -65 -99) -99]
Test Case: 727 | Input/Output: [(-72 46 -97 58) -97]
Test Case: 728 | Input/Output: [(96 -43 50 -32) -43]
Test Case: 729 | Input/Output: [(-22 74 89 -88) -88]
Test Case: 730 | Input/Output: [(63 -32 -74 94) -74]
Test Case: 731 | Input/Output: [(68 1 94 -89) -89]
Test Case: 732 | Input/Output: [(64 0 -9 91) -9]
Test Case: 733 | Input/Output: [(97 74 93 -43) -43]
Test Case: 734 | Input/Output: [(-15 14 79 -47) -47]
Test Case: 735 | Input/Output: [(17 41 12 -55) -55]
Test Case: 736 | Input/Output: [(53 -99 -73 22) -99]
Test Case: 737 | Input/Output: [(9 15 -68 -50) -68]
Test Case: 738 | Input/Output: [(79 97 -80 -50) -80]
Test Case: 739 | Input/Output: [(-26 99 97 22) -26]
Test Case: 740 | Input/Output: [(23 46 -32 -78) -78]
Test Case: 741 | Input/Output: [(-34 -79 28 -70) -79]
Test Case: 742 | Input/Output: [(-73 -35 24 -36) -73]
Test Case: 743 | Input/Output: [(21 98 49 53) 21]
Test Case: 744 | Input/Output: [(-3 96 -45 -87) -87]
Test Case: 745 | Input/Output: [(55 33 -92 95) -92]
Test Case: 746 | Input/Output: [(-77 -67 -75 -38) -77]
Test Case: 747 | Input/Output: [(-51 -66 -90 -52) -90]
Test Case: 748 | Input/Output: [(43 49 -51 -17) -51]
Test Case: 749 | Input/Output: [(-4 2 -85 -39) -85]
Test Case: 750 | Input/Output: [(-74 -3 3 91) -74]
Test Case: 751 | Input/Output: [(-97 78 83 73) -97]
Test Case: 752 | Input/Output: [(-20 35 -51 -83) -83]
Test Case: 753 | Input/Output: [(98 58 -22 -34) -34]
Test Case: 754 | Input/Output: [(10 94 20 -20) -20]
Test Case: 755 | Input/Output: [(76 -90 -78 42) -90]
Test Case: 756 | Input/Output: [(100 -73 -69 60) -73]
Test Case: 757 | Input/Output: [(-88 35 38 52) -88]
Test Case: 758 | Input/Output: [(-86 56 -55 -34) -86]
Test Case: 759 | Input/Output: [(8 24 6 -88) -88]
Test Case: 760 | Input/Output: [(24 48 44 -53) -53]
Test Case: 761 | Input/Output: [(-93 12 -32 83) -93]
Test Case: 762 | Input/Output: [(50 37 -83 -98) -98]
Test Case: 763 | Input/Output: [(57 34 -51 -25) -51]
Test Case: 764 | Input/Output: [(-93 -94 15 8) -94]
Test Case: 765 | Input/Output: [(-30 -15 -74 -58) -74]
Test Case: 766 | Input/Output: [(-50 30 -51 -4) -51]
Test Case: 767 | Input/Output: [(73 -91 -25 49) -91]
Test Case: 768 | Input/Output: [(96 -24 81 -27) -27]
Test Case: 769 | Input/Output: [(-16 3 42 -44) -44]
Test Case: 770 | Input/Output: [(-44 22 12 27) -44]
Test Case: 771 | Input/Output: [(31 44 -90 -96) -96]
Test Case: 772 | Input/Output: [(90 19 19 40) 19]
Test Case: 773 | Input/Output: [(34 -80 8 -45) -80]
Test Case: 774 | Input/Output: [(22 -39 81 -15) -39]
Test Case: 775 | Input/Output: [(-1 87 -93 89) -93]
Test Case: 776 | Input/Output: [(72 -71 18 73) -71]
Test Case: 777 | Input/Output: [(-53 -53 82 -1) -53]
Test Case: 778 | Input/Output: [(-10 69 87 41) -10]
Test Case: 779 | Input/Output: [(-19 -54 92 -21) -54]
Test Case: 780 | Input/Output: [(89 68 40 -55) -55]
Test Case: 781 | Input/Output: [(-20 -3 -71 38) -71]
Test Case: 782 | Input/Output: [(67 -96 43 2) -96]
Test Case: 783 | Input/Output: [(-78 35 24 72) -78]
Test Case: 784 | Input/Output: [(10 -96 76 -16) -96]
Test Case: 785 | Input/Output: [(6 73 -75 -70) -75]
Test Case: 786 | Input/Output: [(85 39 10 -58) -58]
Test Case: 787 | Input/Output: [(47 -29 84 27) -29]
Test Case: 788 | Input/Output: [(-71 -97 -49 -67) -97]
Test Case: 789 | Input/Output: [(6 79 84 -52) -52]
Test Case: 790 | Input/Output: [(82 68 10 100) 10]
Test Case: 791 | Input/Output: [(-80 40 -22 -90) -90]
Test Case: 792 | Input/Output: [(-7 -23 52 3) -23]
Test Case: 793 | Input/Output: [(-96 38 25 -13) -96]
Test Case: 794 | Input/Output: [(-89 -33 -26 -22) -89]
Test Case: 795 | Input/Output: [(39 5 68 19) 5]
Test Case: 796 | Input/Output: [(-69 52 -87 -99) -99]
Test Case: 797 | Input/Output: [(-19 -57 -71 64) -71]
Test Case: 798 | Input/Output: [(-97 96 29 -71) -97]
Test Case: 799 | Input/Output: [(45 -100 -26 -57) -100]
Test Case: 800 | Input/Output: [(99 -18 -30 -25) -30]
Test Case: 801 | Input/Output: [(91 -64 -23 -27) -64]
Test Case: 802 | Input/Output: [(49 -7 -38 60) -38]
Test Case: 803 | Input/Output: [(-56 -80 12 1) -80]
Test Case: 804 | Input/Output: [(61 -47 86 57) -47]
Test Case: 805 | Input/Output: [(5 -82 28 -69) -82]
Test Case: 806 | Input/Output: [(-35 -13 -31 70) -35]
Test Case: 807 | Input/Output: [(9 54 48 -10) -10]
Test Case: 808 | Input/Output: [(-20 -5 -39 98) -39]
Test Case: 809 | Input/Output: [(-18 27 4 68) -18]
Test Case: 810 | Input/Output: [(-4 -28 -17 91) -28]
Test Case: 811 | Input/Output: [(62 -5 -18 68) -18]
Test Case: 812 | Input/Output: [(-79 91 59 57) -79]
Test Case: 813 | Input/Output: [(86 49 88 16) 16]
Test Case: 814 | Input/Output: [(51 38 -27 46) -27]
Test Case: 815 | Input/Output: [(-62 6 70 -88) -88]
Test Case: 816 | Input/Output: [(-55 24 11 44) -55]
Test Case: 817 | Input/Output: [(77 72 37 39) 37]
Test Case: 818 | Input/Output: [(55 1 80 59) 1]
Test Case: 819 | Input/Output: [(63 28 -5 0) -5]
Test Case: 820 | Input/Output: [(65 12 -53 -30) -53]
Test Case: 821 | Input/Output: [(-18 -18 8 -77) -77]
Test Case: 822 | Input/Output: [(49 -55 76 -27) -55]
Test Case: 823 | Input/Output: [(-70 50 6 -76) -76]
Test Case: 824 | Input/Output: [(78 7 99 -88) -88]
Test Case: 825 | Input/Output: [(63 52 -16 -53) -53]
Test Case: 826 | Input/Output: [(-93 -86 -50 -48) -93]
Test Case: 827 | Input/Output: [(-68 -42 -84 -44) -84]
Test Case: 828 | Input/Output: [(86 6 -6 90) -6]
Test Case: 829 | Input/Output: [(-32 64 -72 -65) -72]
Test Case: 830 | Input/Output: [(64 22 -65 11) -65]
Test Case: 831 | Input/Output: [(-11 27 60 -5) -11]
Test Case: 832 | Input/Output: [(39 44 -32 -9) -32]
Test Case: 833 | Input/Output: [(-29 -53 -48 -51) -53]
Test Case: 834 | Input/Output: [(-97 82 -10 60) -97]
Test Case: 835 | Input/Output: [(25 3 90 96) 3]
Test Case: 836 | Input/Output: [(14 77 -53 18) -53]
Test Case: 837 | Input/Output: [(60 98 21 80) 21]
Test Case: 838 | Input/Output: [(1 -84 -59 58) -84]
Test Case: 839 | Input/Output: [(33 87 -19 -10) -19]
Test Case: 840 | Input/Output: [(-73 68 -45 56) -73]
Test Case: 841 | Input/Output: [(15 -88 -75 -54) -88]
Test Case: 842 | Input/Output: [(-99 29 60 -5) -99]
Test Case: 843 | Input/Output: [(87 60 -95 -62) -95]
Test Case: 844 | Input/Output: [(-73 -6 -97 -43) -97]
Test Case: 845 | Input/Output: [(68 -61 90 36) -61]
Test Case: 846 | Input/Output: [(44 -97 -47 64) -97]
Test Case: 847 | Input/Output: [(-3 23 -35 -67) -67]
Test Case: 848 | Input/Output: [(14 -1 -10 -22) -22]
Test Case: 849 | Input/Output: [(66 14 -47 -77) -77]
Test Case: 850 | Input/Output: [(-85 -96 15 -85) -96]
Test Case: 851 | Input/Output: [(-79 -69 15 -71) -79]
Test Case: 852 | Input/Output: [(8 -12 68 -94) -94]
Test Case: 853 | Input/Output: [(57 -47 -10 -67) -67]
Test Case: 854 | Input/Output: [(-28 19 -7 -15) -28]
Test Case: 855 | Input/Output: [(50 -61 -4 -70) -70]
Test Case: 856 | Input/Output: [(82 -34 28 37) -34]
Test Case: 857 | Input/Output: [(1 -16 32 -48) -48]
Test Case: 858 | Input/Output: [(34 33 89 33) 33]
Test Case: 859 | Input/Output: [(18 -65 83 -11) -65]
Test Case: 860 | Input/Output: [(-60 -29 3 -45) -60]
Test Case: 861 | Input/Output: [(-87 25 -35 -62) -87]
Test Case: 862 | Input/Output: [(-93 7 -49 -98) -98]
Test Case: 863 | Input/Output: [(-28 26 4 62) -28]
Test Case: 864 | Input/Output: [(-99 1 43 19) -99]
Test Case: 865 | Input/Output: [(70 -67 56 100) -67]
Test Case: 866 | Input/Output: [(-64 -77 -62 -34) -77]
Test Case: 867 | Input/Output: [(-24 51 0 61) -24]
Test Case: 868 | Input/Output: [(25 -1 95 -42) -42]
Test Case: 869 | Input/Output: [(-15 -33 -64 84) -64]
Test Case: 870 | Input/Output: [(22 -57 -15 -75) -75]
Test Case: 871 | Input/Output: [(-57 52 92 99) -57]
Test Case: 872 | Input/Output: [(-11 -49 61 -41) -49]
Test Case: 873 | Input/Output: [(25 -18 50 82) -18]
Test Case: 874 | Input/Output: [(-96 -46 76 54) -96]
Test Case: 875 | Input/Output: [(82 82 -7 64) -7]
Test Case: 876 | Input/Output: [(-4 -32 -34 58) -34]
Test Case: 877 | Input/Output: [(-38 17 77 24) -38]
Test Case: 878 | Input/Output: [(33 -20 38 -72) -72]
Test Case: 879 | Input/Output: [(-44 20 26 3) -44]
Test Case: 880 | Input/Output: [(25 95 -68 -57) -68]
Test Case: 881 | Input/Output: [(40 84 4 17) 4]
Test Case: 882 | Input/Output: [(-98 -82 -28 -52) -98]
Test Case: 883 | Input/Output: [(-33 -63 -71 77) -71]
Test Case: 884 | Input/Output: [(-71 20 -94 18) -94]
Test Case: 885 | Input/Output: [(-36 -67 99 50) -67]
Test Case: 886 | Input/Output: [(-49 -76 80 -35) -76]
Test Case: 887 | Input/Output: [(62 95 -20 43) -20]
Test Case: 888 | Input/Output: [(22 -2 -4 -3) -4]
Test Case: 889 | Input/Output: [(-24 -32 -46 -47) -47]
Test Case: 890 | Input/Output: [(-26 25 35 -57) -57]
Test Case: 891 | Input/Output: [(-65 64 -7 -54) -65]
Test Case: 892 | Input/Output: [(-40 55 68 -87) -87]
Test Case: 893 | Input/Output: [(-15 -46 -19 19) -46]
Test Case: 894 | Input/Output: [(-18 -44 9 -61) -61]
Test Case: 895 | Input/Output: [(65 64 71 -40) -40]
Test Case: 896 | Input/Output: [(-80 59 -77 -25) -80]
Test Case: 897 | Input/Output: [(20 9 -69 67) -69]
Test Case: 898 | Input/Output: [(44 69 -15 -72) -72]
Test Case: 899 | Input/Output: [(84 -18 52 -30) -30]
Test Case: 900 | Input/Output: [(13 81 85 88) 13]
Test Case: 901 | Input/Output: [(8 83 -86 -52) -86]
Test Case: 902 | Input/Output: [(26 56 51 47) 26]
Test Case: 903 | Input/Output: [(-44 7 99 -81) -81]
Test Case: 904 | Input/Output: [(-43 52 78 43) -43]
Test Case: 905 | Input/Output: [(53 51 27 19) 19]
Test Case: 906 | Input/Output: [(10 -66 81 -65) -66]
Test Case: 907 | Input/Output: [(-23 62 35 -34) -34]
Test Case: 908 | Input/Output: [(37 42 96 78) 37]
Test Case: 909 | Input/Output: [(-95 -49 -91 95) -95]
Test Case: 910 | Input/Output: [(51 6 4 -32) -32]
Test Case: 911 | Input/Output: [(19 50 72 -22) -22]
Test Case: 912 | Input/Output: [(21 -28 -47 24) -47]
Test Case: 913 | Input/Output: [(-76 93 97 25) -76]
Test Case: 914 | Input/Output: [(64 78 -23 75) -23]
Test Case: 915 | Input/Output: [(18 -61 -12 44) -61]
Test Case: 916 | Input/Output: [(36 -94 62 54) -94]
Test Case: 917 | Input/Output: [(59 -16 -17 89) -17]
Test Case: 918 | Input/Output: [(96 38 -46 82) -46]
Test Case: 919 | Input/Output: [(-46 -16 -70 -72) -72]
Test Case: 920 | Input/Output: [(71 -52 9 -40) -52]
Test Case: 921 | Input/Output: [(-66 81 25 -98) -98]
Test Case: 922 | Input/Output: [(-40 -51 45 -96) -96]
Test Case: 923 | Input/Output: [(-19 89 50 -61) -61]
Test Case: 924 | Input/Output: [(-44 -65 22 32) -65]
Test Case: 925 | Input/Output: [(-71 -99 -61 -99) -99]
Test Case: 926 | Input/Output: [(-40 -66 -47 20) -66]
Test Case: 927 | Input/Output: [(57 98 59 5) 5]
Test Case: 928 | Input/Output: [(90 25 -7 86) -7]
Test Case: 929 | Input/Output: [(64 -72 -91 -66) -91]
Test Case: 930 | Input/Output: [(-38 -65 -66 84) -66]
Test Case: 931 | Input/Output: [(74 -30 -72 64) -72]
Test Case: 932 | Input/Output: [(-25 13 99 -82) -82]
Test Case: 933 | Input/Output: [(-75 -52 84 -55) -75]
Test Case: 934 | Input/Output: [(-91 50 -76 92) -91]
Test Case: 935 | Input/Output: [(26 -29 -70 -21) -70]
Test Case: 936 | Input/Output: [(27 -59 -23 65) -59]
Test Case: 937 | Input/Output: [(85 -48 -90 -93) -93]
Test Case: 938 | Input/Output: [(60 6 -97 -27) -97]
Test Case: 939 | Input/Output: [(-99 13 -78 -68) -99]
Test Case: 940 | Input/Output: [(-45 41 30 78) -45]
Test Case: 941 | Input/Output: [(-50 58 59 -58) -58]
Test Case: 942 | Input/Output: [(73 -7 49 96) -7]
Test Case: 943 | Input/Output: [(-91 33 11 -10) -91]
Test Case: 944 | Input/Output: [(5 -43 6 -59) -59]
Test Case: 945 | Input/Output: [(7 52 93 -46) -46]
Test Case: 946 | Input/Output: [(-2 7 63 -90) -90]
Test Case: 947 | Input/Output: [(-41 92 -69 -7) -69]
Test Case: 948 | Input/Output: [(5 -42 -70 -34) -70]
Test Case: 949 | Input/Output: [(74 -80 -13 58) -80]
Test Case: 950 | Input/Output: [(-72 43 -58 -99) -99]
Test Case: 951 | Input/Output: [(-58 -11 84 -62) -62]
Test Case: 952 | Input/Output: [(60 -11 -48 -99) -99]
Test Case: 953 | Input/Output: [(-90 95 57 98) -90]
Test Case: 954 | Input/Output: [(-39 -64 -5 -68) -68]
Test Case: 955 | Input/Output: [(21 44 47 65) 21]
Test Case: 956 | Input/Output: [(83 -97 88 23) -97]
Test Case: 957 | Input/Output: [(20 -28 -71 15) -71]
Test Case: 958 | Input/Output: [(62 74 -70 -34) -70]
Test Case: 959 | Input/Output: [(85 35 -91 16) -91]
Test Case: 960 | Input/Output: [(-56 35 91 -8) -56]
Test Case: 961 | Input/Output: [(-57 44 60 74) -57]
Test Case: 962 | Input/Output: [(-59 -86 72 -14) -86]
Test Case: 963 | Input/Output: [(2 -44 96 98) -44]
Test Case: 964 | Input/Output: [(37 -66 8 90) -66]
Test Case: 965 | Input/Output: [(-78 71 0 -86) -86]
Test Case: 966 | Input/Output: [(78 -44 -45 41) -45]
Test Case: 967 | Input/Output: [(8 -81 -48 74) -81]
Test Case: 968 | Input/Output: [(-77 30 -75 -34) -77]
Test Case: 969 | Input/Output: [(-42 -50 -38 -3) -50]
Test Case: 970 | Input/Output: [(-58 17 -62 -33) -62]
Test Case: 971 | Input/Output: [(49 -79 -23 89) -79]
Test Case: 972 | Input/Output: [(-3 -17 87 83) -17]
Test Case: 973 | Input/Output: [(64 -13 -90 33) -90]
Test Case: 974 | Input/Output: [(-47 -84 -72 70) -84]
Test Case: 975 | Input/Output: [(82 96 -99 -4) -99]
Test Case: 976 | Input/Output: [(3 -26 -59 91) -59]
Test Case: 977 | Input/Output: [(-70 -36 63 -15) -70]
Test Case: 978 | Input/Output: [(49 9 -79 -69) -79]
Test Case: 979 | Input/Output: [(-33 -26 -34 22) -34]
Test Case: 980 | Input/Output: [(-89 0 46 19) -89]
Test Case: 981 | Input/Output: [(-85 43 48 -54) -85]
Test Case: 982 | Input/Output: [(-55 -91 81 -33) -91]
Test Case: 983 | Input/Output: [(61 74 50 -16) -16]
Test Case: 984 | Input/Output: [(-98 81 62 29) -98]
Test Case: 985 | Input/Output: [(-26 -39 6 -43) -43]
Test Case: 986 | Input/Output: [(-70 97 -17 71) -70]
Test Case: 987 | Input/Output: [(27 58 -12 -3) -12]
Test Case: 988 | Input/Output: [(-54 53 38 -63) -63]
Test Case: 989 | Input/Output: [(49 -18 -35 -90) -90]
Test Case: 990 | Input/Output: [(49 56 -71 -18) -71]
Test Case: 991 | Input/Output: [(39 -24 42 89) -24]
Test Case: 992 | Input/Output: [(-71 -34 11 36) -71]
Test Case: 993 | Input/Output: [(-36 -47 88 -57) -57]
Test Case: 994 | Input/Output: [(-56 -28 -2 47) -56]
Test Case: 995 | Input/Output: [(40 -90 -1 -98) -98]
Test Case: 996 | Input/Output: [(-4 88 3 -7) -7]
Test Case: 997 | Input/Output: [(75 73 39 -62) -62]
Test Case: 998 | Input/Output: [(-17 45 -99 -79) -99]
Test Case: 999 | Input/Output: [(-80 -99 -33 36) -99]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 77 88 -9 -90 106 -102 122 -99 80 110 86 -127 -117 9 -81 97
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[42 -76 -76 -76] -76] [[-33 -33 -10 -33] -33] [[13 13 13 -53] -53] [[25 25 25 -96] -96] [[-91 -63 -91 -91] -91] [[-61 -74 -61 -61] -74] [[-35 94 -35 -35] -35] [[-43 -43 -43 18] -43] [[-43 -43 -43 -36] -43] [[60 -54 60 60] -54] [(22 22 22 22) 22] [(-75 -75 -75 -75) -75] [(-34 -34 -34 -34) -34] [(-74 -74 -74 -74) -74] [(-69 -69 -69 -69) -69] [(65 27 63 19) 19] [(93 55 97 48) 48] [(8 35 0 73) 0] [(66 85 2 42) 2] [(62 96 98 39) 39] [(76 35 96 46) 35] [(55 89 1 82) 1] [(15 56 18 64) 15] [(33 59 33 48) 33] [(1 94 38 97) 1] [(9 92 96 83) 9] [(19 66 49 92) 19] [(96 27 57 89) 27] [(71 61 93 100) 61] [(94 79 65 16) 16] [(93 54 23 29) 23] [(35 19 56 12) 12] [(88 24 17 45) 17] [(69 0 97 39) 0] [(71 44 10 71) 10] [(-56 45 -94 1) -94] [(-92 9 -45 -29) -92] [(-60 -10 32 -40) -60] [(36 34 -50 -8) -50] [(-89 -73 78 51) -89] [(52 -40 -54 -23) -54] [(8 -9 10 -49) -49] [(10 79 -40 43) -40] [(-89 100 62 -57) -89] [(-61 45 -19 86) -61] [(-82 -75 -56 18) -82] [(70 50 -83 -45) -83] [(-1 -50 20 71) -50] [(-70 -15 -36 -45) -70] [(-13 -8 35 -41) -41] [(52 49 68 2) 2] [(-85 -77 -79 -93) -93] [(52 -21 -27 -26) -27] [(65 73 -54 -97) -97] [(10 -5 -12 -64) -64] [(-22 -4 80 66) -22] [(-50 -57 66 39) -57] [(-78 17 -63 17) -78] [(-37 54 -35 -78) -78] [(-41 -50 -26 -4) -50] [(75 -47 -90 -69) -90] [(-77 -62 53 -48) -77] [(87 -82 28 -1) -82] [(64 -91 89 73) -91] [(79 -70 -40 -84) -84] [(2 68 16 -38) -38] [(54 -41 70 -59) -59] [(7 56 12 -54) -54] [(99 -79 -85 -61) -85] [(-85 -22 -52 71) -85] [(-79 -65 96 -90) -90] [(98 10 -58 -89) -89] [(58 -20 -9 15) -20] [(-40 -88 59 -42) -88] [(41 97 -18 -69) -69] [(13 -51 -55 -47) -55] [(29 -15 -69 1) -69] [(14 -88 26 33) -88] [(-48 -56 -58 69) -58] [(17 12 -26 -2) -26] [(85 75 4 -13) -13] [(60 -61 -20 13) -61] [(29 22 -22 56) -22] [(-47 59 -54 1) -54] [(-9 -44 -60 -46) -60] [(-87 -87 87 66) -87] [(60 -44 58 29) -44] [(40 95 -97 -24) -97] [(98 -4 77 -24) -24] [(7 -49 -100 7) -100] [(-6 53 66 97) -6] [(62 19 -33 74) -33] [(-92 -74 -99 -25) -99] [(-79 34 -7 39) -79] [(76 6 41 12) 6])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: 18                 
Correct output: -43                 | Program output: -36                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 46                 
Correct output: 1                   | Program output: 82                 
Correct output: 15                  | Program output: 64                 
Correct output: 33                  | Program output: 48                 
Correct output: 1                   | Program output: 97                 
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 92                 
Correct output: 27                  | Program output: 89                 
Correct output: 61                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 45                 
Correct output: 0                   | Program output: 39                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: 1                  
Correct output: -92                 | Program output: -29                
Correct output: -60                 | Program output: -40                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: 51                 
Correct output: -54                 | Program output: -23                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 43                 
Correct output: -89                 | Program output: -57                
Correct output: -61                 | Program output: 86                 
Correct output: -82                 | Program output: 18                 
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: 71                 
Correct output: -70                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 66                 
Correct output: -57                 | Program output: 39                 
Correct output: -78                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -4                 
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -48                
Correct output: -82                 | Program output: -1                 
Correct output: -91                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -61                
Correct output: -85                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: 15                 
Correct output: -88                 | Program output: -42                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -47                
Correct output: -69                 | Program output: 1                  
Correct output: -88                 | Program output: 33                 
Correct output: -58                 | Program output: 69                 
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: 13                 
Correct output: -22                 | Program output: 56                 
Correct output: -54                 | Program output: 1                  
Correct output: -60                 | Program output: -46                
Correct output: -87                 | Program output: 66                 
Correct output: -44                 | Program output: 29                 
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: 97                 
Correct output: -33                 | Program output: 74                 
Correct output: -99                 | Program output: -25                
Correct output: -79                 | Program output: 39                 
Correct output: 6                   | Program output: 12                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_s_when_autoconstructing (in4 integer_shove integer_add) (integer_mod integer_min exec_yankdup integer_pop in2 boolean_frominteger exec_s () (integer_add in2 integer_lte boolean_frominteger boolean_dup exec_noop) (in1 integer_gt) integer_min in3 print_integer exec_k (exec_k (in2) (boolean_shove boolean_xor exec_do*times (boolean_yankdup integer_yankdup integer_dup_items boolean_and boolean_rot integer_empty exec_y (exec_s_when_autoconstructing () (exec_do*count (integer_lt integer_dup_items boolean_flush exec_do*count (print_exec (exec_do*range (exec_y (boolean_xor integer_flush exec_do*while () exec_eq) boolean_and boolean_not))))) ())))) ()) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_s_when_autoconstructing (in4 integer_shove integer_add) (integer_mod integer_min exec_yankdup integer_pop in2 boolean_frominteger exec_s () (integer_add in2 integer_lte boolean_frominteger boolean_dup exec_noop) (in1 integer_gt) integer_min in3 print_integer exec_k (exec_k (in2) (boolean_shove boolean_xor exec_do*times (boolean_yankdup integer_yankdup integer_dup_items boolean_and boolean_rot integer_empty exec_y (exec_s_when_autoconstructing () (exec_do*count (integer_lt integer_dup_items boolean_flush exec_do*count (print_exec (exec_do*range (exec_y (boolean_xor integer_flush exec_do*while () exec_eq) boolean_and boolean_not))))) ())))) ()) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 6 6 7 3 6 3 7 5 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 6 6 7 3 6 3 7 5 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_dup (exec_noop in4 integer_add) exec_while (exec_k (exec_shove (integer_gte integer_fromboolean in1) integer_mult) (integer_swap boolean_xor exec_yankdup) boolean_yankdup exec_eq boolean_dup_items) in1 integer_gt integer_eq in4 print_integer integer_yankdup integer_lt integer_pop integer_swap exec_s (boolean_dup exec_dup (integer_dec boolean_invert_first_then_and integer_fromboolean exec_dup_times (exec_s_when_autoconstructing (exec_yankdup exec_pop () boolean_yankdup) (exec_do*times (print_boolean) boolean_and) (exec_when (exec_dup_times (boolean_dup) boolean_dup) integer_shove boolean_flush boolean_eq integer_rot exec_dup (exec_rot (boolean_invert_first_then_and) () ()))))) () ())
Errors: [0 0 0 0 1 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 73
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 9.948
Median total errors in population: 10
Error averages by case: (0.994 0.994 0.994 0.993 0.997 0.994 0.997 0.993 0.995 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.529
Average program size in population (points): 70.748
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 489279
--- Timings ---
Current time: 1559314343584 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.8%
Reproduction:         1.0 seconds, 36.2%
Fitness Testing:      1.6 seconds, 59.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: 42                 
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 65                 
Correct output: 48                  | Program output: 93                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 76                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 96                 
Correct output: 61                  | Program output: 71                 
Correct output: 16                  | Program output: 94                 
Correct output: 23                  | Program output: 93                 
Correct output: 12                  | Program output: 35                 
Correct output: 17                  | Program output: 88                 
Correct output: 0                   | Program output: 69                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -560
              
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: 52                 
Correct output: -49                 | Program output: 8                  
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 70                 
Correct output: -50                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 520
               
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: 52                 
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -41                
Correct output: -90                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 87                 
Correct output: -91                 | Program output: 64                 
Correct output: -84                 | Program output: 79                 
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: 54                 
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 98                 
Correct output: -20                 | Program output: 58                 
Correct output: -88                 | Program output: -40                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: 13                 
Correct output: -69                 | Program output: 290
               
Correct output: -88                 | Program output: 14                 
Correct output: -58                 | Program output: -48                
Correct output: -26                 | Program output: 17                 
Correct output: -13                 | Program output: 85                 
Correct output: -61                 | Program output: 60                 
Correct output: -22                 | Program output: 29                 
Correct output: -54                 | Program output: -470
              
Correct output: -60                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 60                 
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: 98                 
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 62                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_573} {:close 0, :instruction exec_when} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction -74} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_dup integer_lte exec_dup (exec_k_when_autoconstructing (exec_when (boolean_xor integer_div in1 tag_integer_573 exec_when (exec_while () exec_s_when_autoconstructing (boolean_frominteger -74) (exec_dup (boolean_shove integer_lte boolean_shove) integer_yank exec_dup_times (integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items integer_mult) -94) (exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (integer_fromboolean exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) integer_div) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte boolean_shove exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if (exec_if (integer_swap exec_if (integer_stackdepth integer_flush exec_y_when_autoconstructing (boolean_stackdepth print_integer exec_do*times (integer_gt integer_lt print_newline) boolean_not boolean_rot)) (exec_do*while ())) ()) ()) ())) ()))))) () ()) ())))) ()))
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 145
Percent parens: 0.331
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_573} {:close 0, :instruction exec_when} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction -74} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_dup integer_lte exec_dup (exec_k_when_autoconstructing (exec_when (boolean_xor integer_div in1 tag_integer_573 exec_when (exec_while () exec_s_when_autoconstructing (boolean_frominteger -74) (exec_dup (boolean_shove integer_lte boolean_shove) integer_yank exec_dup_times (integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items integer_mult) -94) (exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (integer_fromboolean exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) integer_div) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte boolean_shove exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if (exec_if (integer_swap exec_if (integer_stackdepth integer_flush exec_y_when_autoconstructing (boolean_stackdepth print_integer exec_do*times (integer_gt integer_lt print_newline) boolean_not boolean_rot)) (exec_do*while ())) ()) ()) ())) ()))))) () ()) ())))) ()))
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 145
Percent parens: 0.331
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 117 774 162 276 382 161 2 383 389)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (275 117 774 162 276 382 161 2 383 389)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_573} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction -74} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_do*while})
Best program: (exec_s_when_autoconstructing (in4 integer_shove exec_k_when_autoconstructing (exec_when (boolean_xor integer_div in1 tag_integer_573 exec_when (exec_yankdup) exec_s_when_autoconstructing (boolean_frominteger -74) (exec_dup (boolean_shove integer_lte boolean_shove) integer_yank exec_dup_times (integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items integer_mult) -94) (exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (integer_fromboolean exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) integer_div) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty exec_empty boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte boolean_shove exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if (exec_if (integer_swap exec_if (integer_stackdepth integer_flush exec_y_when_autoconstructing (boolean_stackdepth print_integer exec_do*times (integer_gt integer_lt print_newline) boolean_not boolean_rot)) (exec_do*while ())) ()) ()) ())) ()))))) () ()) ()))) ()) () ())
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 97
Size: 146
Percent parens: 0.336
--- Population Statistics ---
Average total errors in population: 7.079
Median total errors in population: 7
Error averages by case: (0.725 0.883 0.226 0.838 0.724 0.618 0.839 0.998 0.617 0.611)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.949
Average program size in population (points): 71.048
Average percent parens in population: 0.277
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.504
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 971957
--- Timings ---
Current time: 1559314346525 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.6 seconds, 47.1%
Fitness Testing:      2.1 seconds, 38.7%
Report:               0.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: 94                 
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 27                 
Correct output: 48                  | Program output: 55                 
Correct output: 0                   | Program output: 35                 
Correct output: 2                   | Program output: 85                 
Correct output: 39                  | Program output: 96                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 89                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 59                 
Correct output: 1                   | Program output: 94                 
Correct output: 9                   | Program output: 92                 
Correct output: 19                  | Program output: 66                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 79                 
Correct output: 23                  | Program output: 54                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 44                 
Correct output: -94                 | Program output: 45                 
Correct output: -92                 | Program output: 9                  
Correct output: -60                 | Program output: -10                
Correct output: -50                 | Program output: 34                 
Correct output: -89                 | Program output: -73                
Correct output: -54                 | Program output: -40                
Correct output: -49                 | Program output: -9                 
Correct output: -40                 | Program output: 79                 
Correct output: -89                 | Program output: 100                
Correct output: -61                 | Program output: 45                 
Correct output: -82                 | Program output: -75                
Correct output: -83                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -15                
Correct output: -41                 | Program output: -8                 
Correct output: 2                   | Program output: 49                 
Correct output: -93                 | Program output: -77                
Correct output: -27                 | Program output: -21                
Correct output: -97                 | Program output: 73                 
Correct output: -64                 | Program output: -5                 
Correct output: -22                 | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 17                 
Correct output: -78                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -47                
Correct output: -77                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -70                
Correct output: -38                 | Program output: 68                 
Correct output: -59                 | Program output: -41                
Correct output: -54                 | Program output: 56                 
Correct output: -85                 | Program output: -79                
Correct output: -85                 | Program output: -22                
Correct output: -90                 | Program output: -65                
Correct output: -89                 | Program output: 10                 
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: 97                 
Correct output: -55                 | Program output: -51                
Correct output: -69                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: 12                 
Correct output: -13                 | Program output: 75                 
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: 22                 
Correct output: -54                 | Program output: 59                 
Correct output: -60                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 95                 
Correct output: -24                 | Program output: -4                 
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: 53                 
Correct output: -33                 | Program output: 19                 
Correct output: -99                 | Program output: -74                
Correct output: -79                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_s (exec_y_when_autoconstructing () integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth integer_max boolean_flush boolean_dup_items in3) (boolean_flush) () boolean_invert_second_then_and integer_div integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items integer_mult) -94) (exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (boolean_not boolean_dup boolean_pop integer_max exec_when (integer_swap boolean_flush integer_dup_items exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) integer_div) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte boolean_shove exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if (exec_if (integer_swap exec_if (integer_stackdepth integer_flush exec_y_when_autoconstructing (boolean_stackdepth print_integer exec_do*times (integer_gt integer_lt print_newline) boolean_not boolean_rot)) (exec_do*while ())) ()) ()) ())) ())))))) () ()) ()) ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 146
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_s (exec_y_when_autoconstructing () integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth integer_max boolean_flush boolean_dup_items in3) (boolean_flush) () boolean_invert_second_then_and integer_div integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items integer_mult) -94) (exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (boolean_not boolean_dup boolean_pop integer_max exec_when (integer_swap boolean_flush integer_dup_items exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) integer_div) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte boolean_shove exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if (exec_if (integer_swap exec_if (integer_stackdepth integer_flush exec_y_when_autoconstructing (boolean_stackdepth print_integer exec_do*times (integer_gt integer_lt print_newline) boolean_not boolean_rot)) (exec_do*while ())) ()) ()) ())) ())))))) () ()) ()) ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 146
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 310 79 79 631 188 79 192 387 825)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (192 310 79 79 631 188 79 192 387 825)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if})
Best program: (exec_s (exec_y_when_autoconstructing () integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth integer_max boolean_flush boolean_dup_items in3) (boolean_flush) () boolean_invert_second_then_and integer_div integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items integer_mult) -94) (exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (boolean_not boolean_dup boolean_pop integer_max exec_when (integer_swap boolean_flush integer_dup_items exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) integer_div) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte boolean_shove exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if () ()) ())) ())))))) () ()) ()) ())
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 85
Size: 124
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 7.038
Median total errors in population: 6
Error averages by case: (0.808 0.69 0.921 0.921 0.369 0.812 0.921 0.808 0.613 0.175)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.152
Average program size in population (points): 69.89
Average percent parens in population: 0.279
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.032
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1647199
--- Timings ---
Current time: 1559314350199 milliseconds
Total Time:           9.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.8 seconds, 52.6%
Fitness Testing:      2.9 seconds, 31.2%
Report:               1.4 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: 42                 
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 65                 
Correct output: 48                  | Program output: 93                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 76                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 96                 
Correct output: 61                  | Program output: 71                 
Correct output: 16                  | Program output: 94                 
Correct output: 23                  | Program output: 93                 
Correct output: 12                  | Program output: 35                 
Correct output: 17                  | Program output: 88                 
Correct output: 0                   | Program output: 69                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: 52                 
Correct output: -49                 | Program output: 8                  
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 70                 
Correct output: -50                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 52                 
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: 52                 
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -41                
Correct output: -90                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 87                 
Correct output: -91                 | Program output: 64                 
Correct output: -84                 | Program output: 79                 
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: 54                 
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 98                 
Correct output: -20                 | Program output: 58                 
Correct output: -88                 | Program output: -40                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: 13                 
Correct output: -69                 | Program output: 29                 
Correct output: -88                 | Program output: 14                 
Correct output: -58                 | Program output: -48                
Correct output: -26                 | Program output: 17                 
Correct output: -13                 | Program output: 85                 
Correct output: -61                 | Program output: 60                 
Correct output: -22                 | Program output: 29                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 60                 
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: 98                 
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 62                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (integer_yank integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (integer_mod) boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (integer_yank integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (integer_mod) boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 136 136 327 285 758 757 286 1000 136)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (0 136 136 327 285 758 757 286 0 136)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_573} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction -74} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 2, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_do*while})
Best program: (integer_dec integer_lte exec_dup (exec_k_when_autoconstructing (exec_when (boolean_xor integer_div in1 tag_integer_573 exec_when (exec_yankdup) exec_s_when_autoconstructing (boolean_frominteger -74) (exec_dup (boolean_shove integer_lte boolean_shove) integer_yank exec_dup_times (integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items) integer_mult) () -94) exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (integer_fromboolean exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) integer_div) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times) integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte boolean_shove exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if (exec_if (integer_swap exec_if (integer_stackdepth integer_flush exec_y_when_autoconstructing (boolean_stackdepth print_integer exec_do*times (integer_gt integer_lt print_newline boolean_not boolean_rot)) exec_do*while ()) ()) ()) ()) ())) ())))) () ()) ()) ()))
Errors: [1 0 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 97
Size: 144
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 7.179
Median total errors in population: 7
Error averages by case: (1.0 0.864 0.864 0.673 0.715 0.242 0.243 0.714 1.0 0.864)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 68.314
Average program size in population (points): 97.846
Average percent parens in population: 0.288
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.625
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2307710
--- Timings ---
Current time: 1559314354450 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.3 seconds, 55.9%
Fitness Testing:      3.5 seconds, 27.1%
Report:               2.1 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: 42                 
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 65                 
Correct output: 48                  | Program output: 93                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 76                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 96                 
Correct output: 61                  | Program output: 71                 
Correct output: 16                  | Program output: 94                 
Correct output: 23                  | Program output: 93                 
Correct output: 12                  | Program output: 35                 
Correct output: 17                  | Program output: 88                 
Correct output: 0                   | Program output: 69                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: 52                 
Correct output: -49                 | Program output: 8                  
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 70                 
Correct output: -50                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 52                 
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: 52                 
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -41                
Correct output: -90                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 87                 
Correct output: -91                 | Program output: 64                 
Correct output: -84                 | Program output: 79                 
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: 54                 
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 98                 
Correct output: -20                 | Program output: 58                 
Correct output: -88                 | Program output: -40                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: 13                 
Correct output: -69                 | Program output: 29                 
Correct output: -88                 | Program output: 14                 
Correct output: -58                 | Program output: -48                
Correct output: -26                 | Program output: 17                 
Correct output: -13                 | Program output: 85                 
Correct output: -61                 | Program output: 60                 
Correct output: -22                 | Program output: 29                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 60                 
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: 98                 
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 62                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (integer_yank integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (integer_mod) boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (integer_yank integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (integer_mod) boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 80 317 745 826 1 82 425 425 508)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (1 80 317 745 826 1 82 425 425 508)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_573} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_boolean_879} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 1, :instruction -94} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_shove} {:close 2, :instruction boolean_pop} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_436} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_do*while})
Best program: (boolean_dup integer_lte exec_dup (exec_k_when_autoconstructing (exec_when (boolean_xor integer_div in1 tag_integer_573 exec_when (exec_yankdup) exec_s_when_autoconstructing (boolean_frominteger boolean_pop) (exec_dup (boolean_shove integer_lte boolean_shove) integer_yank exec_dup_times (integer_pop boolean_dup integer_empty boolean_xor integer_stackdepth tag_boolean_879) exec_dup_times (integer_dup_items integer_mult) -94) (exec_s_when_autoconstructing (integer_dup_items integer_dec) (exec_rot (integer_fromboolean exec_rot (exec_eq) (exec_swap (in1 exec_do*range (integer_lt integer_shove) boolean_pop) () exec_empty) () integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq exec_when (integer_dup_times integer_fromboolean exec_do*count (integer_yank boolean_stackdepth integer_gte in1 exec_shove (integer_yank integer_dup_times integer_rot) exec_y_when_autoconstructing (in2 exec_swap (tagged_436 print_integer exec_k_when_autoconstructing (integer_dec) (integer_dup exec_swap (exec_if (exec_if (integer_swap exec_if (integer_stackdepth integer_flush exec_y_when_autoconstructing (boolean_stackdepth print_integer exec_do*times (integer_gt integer_lt print_newline) boolean_not boolean_rot)) (exec_do*while ())) ()) ()) ())) ()))))) () ()) ()))) ()))
Errors: [1 1 1 0 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 97
Size: 144
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.59
Median total errors in population: 6
Error averages by case: (0.999 0.92 0.683 0.255 0.174 0.999 0.918 0.575 0.575 0.492)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.055
Average program size in population (points): 63.154
Average percent parens in population: 0.264
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.06025
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3059595
--- Timings ---
Current time: 1559314358957 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.1 seconds, 57.2%
Fitness Testing:      4.2 seconds, 24.0%
Report:               3.2 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -10                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 98                 
Correct output: 35                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 96                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 57                 
Correct output: 61                  | Program output: 93                 
Correct output: 16                  | Program output: 65                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 56                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: 32                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: 62                 
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: 20                 
Correct output: -70                 | Program output: -36                
Correct output: -41                 | Program output: 35                 
Correct output: 2                   | Program output: 68                 
Correct output: -93                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -54                
Correct output: -64                 | Program output: -12                
Correct output: -22                 | Program output: 80                 
Correct output: -57                 | Program output: 66                 
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -35                
Correct output: -50                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 53                 
Correct output: -82                 | Program output: 28                 
Correct output: -91                 | Program output: 89                 
Correct output: -84                 | Program output: -40                
Correct output: -38                 | Program output: 16                 
Correct output: -59                 | Program output: 70                 
Correct output: -54                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: 96                 
Correct output: -89                 | Program output: -58                
Correct output: -20                 | Program output: -9                 
Correct output: -88                 | Program output: 59                 
Correct output: -69                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: 4                  
Correct output: -61                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 87                 
Correct output: -44                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 66                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [0 1 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [0 1 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 122 229 122 185 229 266 122 229 122)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (229 122 229 122 185 229 266 122 229 122)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Best program: (exec_yankdup exec_y_when_autoconstructing () integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Errors: [0 1 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 8.145
Median total errors in population: 9
Error averages by case: (0.771 0.878 0.771 0.878 0.815 0.771 0.734 0.878 0.771 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.27
Average program size in population (points): 66.257
Average percent parens in population: 0.293
Minimum age in population: 5.5
Maximum age in population: 9.125
Average age in population: 7.538125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3952237
--- Timings ---
Current time: 1559314362784 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.2 seconds, 56.5%
Fitness Testing:      5.1 seconds, 23.4%
Report:               4.2 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: 18                 
Correct output: -43                 | Program output: -36                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 46                 
Correct output: 1                   | Program output: 82                 
Correct output: 15                  | Program output: 64                 
Correct output: 33                  | Program output: 48                 
Correct output: 1                   | Program output: 97                 
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 92                 
Correct output: 27                  | Program output: 89                 
Correct output: 61                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 45                 
Correct output: 0                   | Program output: 39                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: 1                  
Correct output: -92                 | Program output: -29                
Correct output: -60                 | Program output: -40                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: 51                 
Correct output: -54                 | Program output: -23                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 43                 
Correct output: -89                 | Program output: -57                
Correct output: -61                 | Program output: 86                 
Correct output: -82                 | Program output: 18                 
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: 71                 
Correct output: -70                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 66                 
Correct output: -57                 | Program output: 39                 
Correct output: -78                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -4                 
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -48                
Correct output: -82                 | Program output: -1                 
Correct output: -91                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -61                
Correct output: -85                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: 15                 
Correct output: -88                 | Program output: -42                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -47                
Correct output: -69                 | Program output: 1                  
Correct output: -88                 | Program output: 33                 
Correct output: -58                 | Program output: 69                 
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: 13                 
Correct output: -22                 | Program output: 56                 
Correct output: -54                 | Program output: 1                  
Correct output: -60                 | Program output: -46                
Correct output: -87                 | Program output: 66                 
Correct output: -44                 | Program output: 29                 
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: 97                 
Correct output: -33                 | Program output: 74                 
Correct output: -99                 | Program output: -25                
Correct output: -79                 | Program output: 39                 
Correct output: 6                   | Program output: 12                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq})
Lexicase best program: (in4 exec_dup_items boolean_invert_first_then_and boolean_not integer_lte in4 exec_dup () integer_dup print_integer integer_fromboolean in3 exec_empty exec_flush exec_do*count (exec_if (exec_do*times () integer_flush) (exec_dup_times (integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush exec_s_when_autoconstructing () (exec_rot (integer_yankdup integer_swap boolean_dup_items) (boolean_not integer_yankdup exec_shove (integer_max exec_dup_times (exec_pop (exec_dup (exec_dup (integer_yank boolean_empty integer_sub exec_empty)) integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq))))) ()) ())))))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction -39} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_eq})
Zero cases best program: (in4 exec_dup_items boolean_invert_first_then_and boolean_not integer_lte in4 exec_dup () integer_dup print_integer integer_fromboolean in3 exec_empty exec_flush exec_do*count (exec_if (exec_do*times () integer_flush) (exec_dup_times (integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush exec_s_when_autoconstructing () (exec_rot (integer_yankdup integer_swap boolean_dup_items) (boolean_not integer_yankdup exec_shove (integer_max exec_dup_times (exec_pop (exec_dup (exec_dup (integer_yank boolean_empty integer_sub exec_empty)) integer_add exec_do*while () integer_min exec_s_when_autoconstructing (exec_empty exec_empty) (-39 boolean_or boolean_dup boolean_empty boolean_rot boolean_invert_second_then_and boolean_xor boolean_eq boolean_dup) (boolean_eq))))) ()) ())))))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 319 321 59 388 321 58 387 389 846)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (387 319 321 59 388 321 58 387 389 846)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup})
Best program: (in4 boolean_flush exec_while (boolean_invert_first_then_and boolean_yankdup print_integer exec_empty) boolean_dup_times print_integer exec_yank exec_do*times () in3 boolean_pop integer_yankdup integer_shove exec_k () (boolean_yankdup integer_mod exec_eq exec_k_when_autoconstructing (integer_lt) (boolean_pop exec_stackdepth integer_add boolean_swap in1 integer_min integer_eq integer_yank)) exec_do*while (boolean_yank boolean_invert_first_then_and integer_dup))
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 6.525
Median total errors in population: 6
Error averages by case: (0.613 0.681 0.679 0.941 0.612 0.679 0.942 0.613 0.611 0.154)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.236
Average program size in population (points): 53.44
Average percent parens in population: 0.304
Minimum age in population: 6.5
Maximum age in population: 10.71875
Average age in population: 9.0223125
Median age in population: 9.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4671026
--- Timings ---
Current time: 1559314366459 milliseconds
Total Time:          25.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.0 seconds, 57.7%
Fitness Testing:      5.7 seconds, 22.2%
Report:               5.1 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -10                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 98                 
Correct output: 35                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 96                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 57                 
Correct output: 61                  | Program output: 93                 
Correct output: 16                  | Program output: 65                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 56                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: 32                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: 62                 
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: 20                 
Correct output: -70                 | Program output: -36                
Correct output: -41                 | Program output: 35                 
Correct output: 2                   | Program output: 68                 
Correct output: -93                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -54                
Correct output: -64                 | Program output: -12                
Correct output: -22                 | Program output: 80                 
Correct output: -57                 | Program output: 66                 
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -35                
Correct output: -50                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 53                 
Correct output: -82                 | Program output: 28                 
Correct output: -91                 | Program output: 89                 
Correct output: -84                 | Program output: -40                
Correct output: -38                 | Program output: 16                 
Correct output: -59                 | Program output: 70                 
Correct output: -54                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: 96                 
Correct output: -89                 | Program output: -58                
Correct output: -20                 | Program output: -9                 
Correct output: -88                 | Program output: 59                 
Correct output: -69                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: 4                  
Correct output: -61                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 87                 
Correct output: -44                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 66                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [0 1 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [0 1 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 145 429 1 853 275 276 275 148 578)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (275 145 429 1 853 275 276 275 148 578)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Errors: [0 1 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.745
Median total errors in population: 7
Error averages by case: (0.725 0.855 0.571 0.999 0.147 0.725 0.724 0.725 0.852 0.422)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.434
Average program size in population (points): 62.273
Average percent parens in population: 0.302
Minimum age in population: 7.75
Maximum age in population: 12.15625
Average age in population: 10.46865625
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5281886
--- Timings ---
Current time: 1559314370234 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.3 seconds, 59.4%
Fitness Testing:      6.3 seconds, 21.8%
Report:               5.3 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -10                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 98                 
Correct output: 35                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 96                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 57                 
Correct output: 61                  | Program output: 93                 
Correct output: 16                  | Program output: 65                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 56                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: 32                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: 62                 
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: 20                 
Correct output: -70                 | Program output: -36                
Correct output: -41                 | Program output: 35                 
Correct output: 2                   | Program output: 68                 
Correct output: -93                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -54                
Correct output: -64                 | Program output: -12                
Correct output: -22                 | Program output: 80                 
Correct output: -57                 | Program output: 66                 
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -35                
Correct output: -50                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 53                 
Correct output: -82                 | Program output: 28                 
Correct output: -91                 | Program output: 89                 
Correct output: -84                 | Program output: -40                
Correct output: -38                 | Program output: 16                 
Correct output: -59                 | Program output: 70                 
Correct output: -54                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: 96                 
Correct output: -89                 | Program output: -58                
Correct output: -20                 | Program output: -9                 
Correct output: -88                 | Program output: 59                 
Correct output: -69                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: 4                  
Correct output: -61                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 87                 
Correct output: -44                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 66                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 845 150 334 849 150 122 361 361 632)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (361 845 150 334 849 150 122 361 361 632)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_swap} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_swap)) integer_mod) (boolean_pop print_integer) exec_do*while (exec_when (exec_y (boolean_dup_items integer_swap))))
Errors: [0 0 1 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 5.835
Median total errors in population: 5
Error averages by case: (0.639 0.155 0.85 0.666 0.151 0.85 0.878 0.639 0.639 0.368)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.536
Average program size in population (points): 62.967
Average percent parens in population: 0.311
Minimum age in population: 9.25
Maximum age in population: 13.75
Average age in population: 12.0569921875
Median age in population: 12.16796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6146164
--- Timings ---
Current time: 1559314374224 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.6 seconds, 59.2%
Fitness Testing:      7.1 seconds, 21.6%
Report:               6.2 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -10                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 98                 
Correct output: 35                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 96                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 57                 
Correct output: 61                  | Program output: 93                 
Correct output: 16                  | Program output: 65                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 56                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: 32                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: 62                 
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: 20                 
Correct output: -70                 | Program output: -36                
Correct output: -41                 | Program output: 35                 
Correct output: 2                   | Program output: 68                 
Correct output: -93                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -54                
Correct output: -64                 | Program output: -12                
Correct output: -22                 | Program output: 80                 
Correct output: -57                 | Program output: 66                 
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -35                
Correct output: -50                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 53                 
Correct output: -82                 | Program output: 28                 
Correct output: -91                 | Program output: 89                 
Correct output: -84                 | Program output: -40                
Correct output: -38                 | Program output: 16                 
Correct output: -59                 | Program output: 70                 
Correct output: -54                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: 96                 
Correct output: -89                 | Program output: -58                
Correct output: -20                 | Program output: -9                 
Correct output: -88                 | Program output: 59                 
Correct output: -69                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: 4                  
Correct output: -61                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 87                 
Correct output: -44                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 66                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (exec_s (exec_y_when_autoconstructing () integer_add exec_dup_items exec_when (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) boolean_dup_items in3) (boolean_flush) () integer_mod boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (exec_s (exec_y_when_autoconstructing () integer_add exec_dup_items exec_when (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) boolean_dup_items in3) (boolean_flush) () integer_mod boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (369 324 1000 369 335 335 369 369 168 368)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (369 324 0 369 335 335 369 369 168 368)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.994
Median total errors in population: 7
Error averages by case: (0.631 0.676 1.0 0.631 0.665 0.665 0.631 0.631 0.832 0.632)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 33.681
Average program size in population (points): 48.898
Average percent parens in population: 0.313
Minimum age in population: 10.75
Maximum age in population: 15.2734375
Average age in population: 13.631984375
Median age in population: 13.7109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7057073
--- Timings ---
Current time: 1559314378244 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 59.0%
Fitness Testing:      8.0 seconds, 21.5%
Report:               7.1 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: 42                 
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 65                 
Correct output: 48                  | Program output: 93                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 76                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 96                 
Correct output: 61                  | Program output: 71                 
Correct output: 16                  | Program output: 94                 
Correct output: 23                  | Program output: 93                 
Correct output: 12                  | Program output: 35                 
Correct output: 17                  | Program output: 88                 
Correct output: 0                   | Program output: 69                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: 52                 
Correct output: -49                 | Program output: 8                  
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 70                 
Correct output: -50                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 52                 
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: 52                 
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -41                
Correct output: -90                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 87                 
Correct output: -91                 | Program output: 64                 
Correct output: -84                 | Program output: 79                 
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: 54                 
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 98                 
Correct output: -20                 | Program output: 58                 
Correct output: -88                 | Program output: -40                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: 13                 
Correct output: -69                 | Program output: 29                 
Correct output: -88                 | Program output: 14                 
Correct output: -58                 | Program output: -48                
Correct output: -26                 | Program output: 17                 
Correct output: -13                 | Program output: 85                 
Correct output: -61                 | Program output: 60                 
Correct output: -22                 | Program output: 29                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 60                 
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: 98                 
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 62                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot})
Lexicase best program: (in1 integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (boolean_pop print_integer exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_gt exec_when (exec_flush exec_s_when_autoconstructing () (exec_rot () () ()) ()))))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot})
Zero cases best program: (in1 integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (boolean_pop print_integer exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_gt exec_when (exec_flush exec_s_when_autoconstructing () (exec_rot () () ()) ()))))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (586 1000 265 105 266 1 858 101 494 1)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (586 0 265 105 266 1 858 101 494 1)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot})
Best program: (in1 integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush exec_s_when_autoconstructing () (exec_rot () () ()) ())))
Errors: [0 1 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.323
Median total errors in population: 7
Error averages by case: (0.414 1.0 0.735 0.895 0.734 0.999 0.142 0.899 0.506 0.999)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.986
Average program size in population (points): 45.277
Average percent parens in population: 0.318
Minimum age in population: 12.5
Maximum age in population: 16.908203125
Average age in population: 15.128255859375
Median age in population: 15.203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7981306
--- Timings ---
Current time: 1559314382293 milliseconds
Total Time:          41.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.2 seconds, 58.9%
Fitness Testing:      8.8 seconds, 21.5%
Report:               7.9 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: 42                 
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 65                 
Correct output: 48                  | Program output: 93                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 76                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 96                 
Correct output: 61                  | Program output: 71                 
Correct output: 16                  | Program output: 94                 
Correct output: 23                  | Program output: 93                 
Correct output: 12                  | Program output: 35                 
Correct output: 17                  | Program output: 88                 
Correct output: 0                   | Program output: 69                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 36                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: 52                 
Correct output: -49                 | Program output: 8                  
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 70                 
Correct output: -50                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 52                 
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: 52                 
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -41                
Correct output: -90                 | Program output: 75                 
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: 87                 
Correct output: -91                 | Program output: 64                 
Correct output: -84                 | Program output: 79                 
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: 54                 
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 98                 
Correct output: -20                 | Program output: 58                 
Correct output: -88                 | Program output: -40                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: 13                 
Correct output: -69                 | Program output: 29                 
Correct output: -88                 | Program output: 14                 
Correct output: -58                 | Program output: -48                
Correct output: -26                 | Program output: 17                 
Correct output: -13                 | Program output: 85                 
Correct output: -61                 | Program output: 60                 
Correct output: -22                 | Program output: 29                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 60                 
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: 98                 
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 62                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot})
Lexicase best program: (in1 integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove () exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush exec_s_when_autoconstructing () (exec_rot () () ()) ()))
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot})
Zero cases best program: (in1 integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove () exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush exec_s_when_autoconstructing () (exec_rot () () ()) ()))
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 276 234 276 180 458 692 179 692 210)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (234 276 234 276 180 458 692 179 692 210)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Best program: (in1 integer_dup_times integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max exec_swap (in1 boolean_pop print_integer) (exec_shove (exec_when (exec_y (integer_pop exec_when (exec_y (boolean_dup_items integer_swap)))))))
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.569
Median total errors in population: 6
Error averages by case: (0.766 0.724 0.766 0.724 0.82 0.542 0.308 0.821 0.308 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.609
Average program size in population (points): 42.519
Average percent parens in population: 0.302
Minimum age in population: 14.0546875
Maximum age in population: 18.4912109375
Average age in population: 16.692453125
Median age in population: 16.70751953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8741714
--- Timings ---
Current time: 1559314385645 milliseconds
Total Time:          44.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.2 seconds, 58.7%
Fitness Testing:      9.5 seconds, 21.3%
Report:               8.8 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -10                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 98                 
Correct output: 35                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 96                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 57                 
Correct output: 61                  | Program output: 93                 
Correct output: 16                  | Program output: 65                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 56                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: 32                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: 62                 
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: 20                 
Correct output: -70                 | Program output: -36                
Correct output: -41                 | Program output: 35                 
Correct output: 2                   | Program output: 68                 
Correct output: -93                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -54                
Correct output: -64                 | Program output: -12                
Correct output: -22                 | Program output: 80                 
Correct output: -57                 | Program output: 66                 
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -35                
Correct output: -50                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 53                 
Correct output: -82                 | Program output: 28                 
Correct output: -91                 | Program output: 89                 
Correct output: -84                 | Program output: -40                
Correct output: -38                 | Program output: 16                 
Correct output: -59                 | Program output: 70                 
Correct output: -54                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: 96                 
Correct output: -89                 | Program output: -58                
Correct output: -20                 | Program output: -9                 
Correct output: -88                 | Program output: 59                 
Correct output: -69                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: 4                  
Correct output: -61                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 87                 
Correct output: -44                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 66                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 1 297 219 302 307 309 814 219 218)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (527 1 297 219 302 307 309 814 219 218)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 3, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Best program: (exec_s () (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush) (boolean_dup_items in3) (boolean_flush))) integer_mod boolean_pop print_integer exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.787
Median total errors in population: 6
Error averages by case: (0.473 0.999 0.703 0.781 0.698 0.693 0.691 0.186 0.781 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.821
Average program size in population (points): 46.697
Average percent parens in population: 0.297
Minimum age in population: 15.79296875
Maximum age in population: 20.05517578125
Average age in population: 18.2316611328125
Median age in population: 18.28515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9574090
--- Timings ---
Current time: 1559314389770 milliseconds
Total Time:          48.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.7 seconds, 59.1%
Fitness Testing:     10.3 seconds, 21.2%
Report:               9.4 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -10                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 98                 
Correct output: 35                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 96                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 57                 
Correct output: 61                  | Program output: 93                 
Correct output: 16                  | Program output: 65                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 56                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 97                 
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: 32                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: 78                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: 62                 
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -56                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: 20                 
Correct output: -70                 | Program output: -36                
Correct output: -41                 | Program output: 35                 
Correct output: 2                   | Program output: 68                 
Correct output: -93                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -54                
Correct output: -64                 | Program output: -12                
Correct output: -22                 | Program output: 80                 
Correct output: -57                 | Program output: 66                 
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -35                
Correct output: -50                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: 53                 
Correct output: -82                 | Program output: 28                 
Correct output: -91                 | Program output: 89                 
Correct output: -84                 | Program output: -40                
Correct output: -38                 | Program output: 16                 
Correct output: -59                 | Program output: 70                 
Correct output: -54                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: 96                 
Correct output: -89                 | Program output: -58                
Correct output: -20                 | Program output: -9                 
Correct output: -88                 | Program output: 59                 
Correct output: -69                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 26                 
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: 4                  
Correct output: -61                 | Program output: -20                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 87                 
Correct output: -44                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: 77                 
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 66                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Lexicase best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank integer_eq) (boolean_dup_items in3) (integer_add)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_swap})
Zero cases best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank integer_eq) (boolean_dup_items in3) (integer_add)) integer_mod) (boolean_pop print_integer) exec_shove (exec_when (exec_y (boolean_dup_items integer_swap))))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (478 139 906 135 280 478 438 437 281 280)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (478 139 906 135 280 478 438 437 281 280)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_swap})
Best program: (exec_s (exec_y_when_autoconstructing ()) (integer_add exec_dup_items exec_when (exec_rot (boolean_shove exec_empty integer_stackdepth boolean_yank) (boolean_flush) () boolean_dup_items in3) boolean_flush) () integer_mod boolean_pop print_integer exec_shove (integer_swap))
Errors: [0 1 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 29
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 6.148
Median total errors in population: 6
Error averages by case: (0.522 0.861 0.094 0.865 0.72 0.522 0.562 0.563 0.719 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.839
Average program size in population (points): 37.769
Average percent parens in population: 0.290
Minimum age in population: 16.79296875
Maximum age in population: 21.200439453125
Average age in population: 19.83009326171875
Median age in population: 19.85400390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10483995
--- Timings ---
Current time: 1559314393018 milliseconds
Total Time:          52.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.9 seconds, 58.9%
Fitness Testing:     11.1 seconds, 21.2%
Report:              10.3 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 27                 
Correct output: 48                  | Program output: 55                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 79                 
Correct output: 23                  | Program output: 54                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 44                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 34                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -40                
Correct output: -49                 | Program output: -9                 
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 49                 
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: -21                
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -70                
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: -41                
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 10                 
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: -51                
Correct output: -69                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: 12                 
Correct output: -13                 | Program output: 75                 
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: 22                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: -4                 
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 19                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 285 318 601 300 626 536 274 273 274)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (298 285 318 601 300 626 536 274 273 274)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.215
Median total errors in population: 6
Error averages by case: (0.702 0.715 0.682 0.399 0.7 0.374 0.464 0.726 0.727 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.869
Average program size in population (points): 38.828
Average percent parens in population: 0.258
Minimum age in population: 17.79296875
Maximum age in population: 22.879150390625
Average age in population: 21.51768603515625
Median age in population: 21.607666015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11491481
--- Timings ---
Current time: 1559314396764 milliseconds
Total Time:          55.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 59.2%
Fitness Testing:     12.0 seconds, 21.6%
Report:              10.5 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 27                 
Correct output: 48                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 96                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 92                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 65                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -9                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: 62                 
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -36                
Correct output: -41                 | Program output: -8                 
Correct output: 2                   | Program output: 49                 
Correct output: -93                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -54                
Correct output: -64                 | Program output: -12                
Correct output: -22                 | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -70                
Correct output: -38                 | Program output: 16                 
Correct output: -59                 | Program output: -41                
Correct output: -54                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: -65                
Correct output: -89                 | Program output: -58                
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: 4                  
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_y_when_autoconstructing () integer_add integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_y_when_autoconstructing () integer_add integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (709 818 344 344 115 894 868 350 893 629)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (709 818 344 344 115 894 868 350 893 629)
Population mean number of perfect (error zero) cases: 5.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_y_when_autoconstructing () integer_add integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 integer_stackdepth exec_yankdup print_boolean boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup exec_while ()) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush))))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.036
Median total errors in population: 4
Error averages by case: (0.291 0.182 0.656 0.656 0.885 0.106 0.132 0.65 0.107 0.371)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.847
Average program size in population (points): 41.861
Average percent parens in population: 0.192
Minimum age in population: 21.90966796875
Maximum age in population: 24.607666015625
Average age in population: 23.30402044677734
Median age in population: 23.46551513671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 12677698
--- Timings ---
Current time: 1559314400745 milliseconds
Total Time:          59.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.0 seconds, 58.7%
Fitness Testing:     13.1 seconds, 21.9%
Report:              11.4 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: 18                 
Correct output: -43                 | Program output: -36                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 46                 
Correct output: 1                   | Program output: 82                 
Correct output: 15                  | Program output: 64                 
Correct output: 33                  | Program output: 48                 
Correct output: 1                   | Program output: 97                 
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 92                 
Correct output: 27                  | Program output: 89                 
Correct output: 61                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 45                 
Correct output: 0                   | Program output: 39                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: 1                  
Correct output: -92                 | Program output: -29                
Correct output: -60                 | Program output: -40                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: 51                 
Correct output: -54                 | Program output: -23                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 43                 
Correct output: -89                 | Program output: -57                
Correct output: -61                 | Program output: 86                 
Correct output: -82                 | Program output: 18                 
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: 71                 
Correct output: -70                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 66                 
Correct output: -57                 | Program output: 39                 
Correct output: -78                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -4                 
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -48                
Correct output: -82                 | Program output: -1                 
Correct output: -91                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -61                
Correct output: -85                 | Program output: 71                 
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: 15                 
Correct output: -88                 | Program output: -42                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -47                
Correct output: -69                 | Program output: 1                  
Correct output: -88                 | Program output: 33                 
Correct output: -58                 | Program output: 69                 
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: 13                 
Correct output: -22                 | Program output: 56                 
Correct output: -54                 | Program output: 1                  
Correct output: -60                 | Program output: -46                
Correct output: -87                 | Program output: 66                 
Correct output: -44                 | Program output: 29                 
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: 97                 
Correct output: -33                 | Program output: 74                 
Correct output: -99                 | Program output: -25                
Correct output: -79                 | Program output: 39                 
Correct output: 6                   | Program output: 12                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_yank boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in2) (integer_min integer_max exec_swap (in1) (exec_pop (print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_yank boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in2) (integer_min integer_max exec_swap (in1) (exec_pop (print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (685 149 158 671 925 22 155 925 20 925)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (685 149 158 671 925 22 155 925 20 925)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (integer_yank boolean_shove exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop integer_fromboolean exec_shove (exec_when (exec_s_when_autoconstructing (integer_pop boolean_yankdup boolean_dup_items) () (integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush))))))
Errors: [1 0 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.365
Median total errors in population: 5
Error averages by case: (0.315 0.851 0.842 0.329 0.075 0.978 0.845 0.075 0.98 0.075)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.162
Average program size in population (points): 43.066
Average percent parens in population: 0.183
Minimum age in population: 23.1751708984375
Maximum age in population: 26.44564819335938
Average age in population: 24.65048751831055
Median age in population: 24.64443969726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 13897944
--- Timings ---
Current time: 1559314404155 milliseconds
Total Time:          63.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.0 seconds, 58.2%
Fitness Testing:     14.1 seconds, 22.2%
Report:              12.3 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 514
Test mean error for best: 0.51400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 46                 
Correct output: 1                   | Program output: 82                 
Correct output: 15                  | Program output: 64                 
Correct output: 33                  | Program output: 48                 
Correct output: 1                   | Program output: 94                 
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 92                 
Correct output: 27                  | Program output: 89                 
Correct output: 61                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 45                 
Correct output: 0                   | Program output: 39                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -23                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -1                 
Correct output: -91                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: 56                 
Correct output: -85                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: 15                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -47                
Correct output: -69                 | Program output: 1                  
Correct output: -88                 | Program output: 33                 
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: 13                 
Correct output: -22                 | Program output: 56                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 29                 
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 74                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 12                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (864 97 138 138 250 550 551 534 289 136)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (864 97 138 138 250 550 551 534 289 136)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Errors: [0 1 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.453
Median total errors in population: 6
Error averages by case: (0.136 0.903 0.862 0.862 0.75 0.45 0.449 0.466 0.711 0.864)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.946
Average program size in population (points): 42.049
Average percent parens in population: 0.190
Minimum age in population: 24.3233642578125
Maximum age in population: 27.92877197265625
Average age in population: 26.39238189697266
Median age in population: 26.44979095458984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 14608529
--- Timings ---
Current time: 1559314407376 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 58.7%
Fitness Testing:     14.7 seconds, 22.1%
Report:              12.6 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 514
Test mean error for best: 0.51400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 46                 
Correct output: 1                   | Program output: 82                 
Correct output: 15                  | Program output: 64                 
Correct output: 33                  | Program output: 48                 
Correct output: 1                   | Program output: 94                 
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 92                 
Correct output: 27                  | Program output: 89                 
Correct output: 61                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 45                 
Correct output: 0                   | Program output: 39                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -23                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -1                 
Correct output: -91                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: 56                 
Correct output: -85                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: 15                 
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -47                
Correct output: -69                 | Program output: 1                  
Correct output: -88                 | Program output: 33                 
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: 13                 
Correct output: -22                 | Program output: 56                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 29                 
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 74                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 12                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Lexicase best errors: [1 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Zero cases best errors: [1 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 335 445 276 277 445 429 339 278 444)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (234 335 445 276 277 445 429 339 278 444)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Errors: [1 0 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.498
Median total errors in population: 7
Error averages by case: (0.766 0.665 0.555 0.724 0.723 0.555 0.571 0.661 0.722 0.556)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.307
Average program size in population (points): 43.992
Average percent parens in population: 0.197
Minimum age in population: 25.3233642578125
Maximum age in population: 29.57253265380859
Average age in population: 27.70668152618408
Median age in population: 27.79673385620117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 15498025
--- Timings ---
Current time: 1559314410750 milliseconds
Total Time:          69.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.1 seconds, 58.8%
Fitness Testing:     15.5 seconds, 22.2%
Report:              13.2 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 488
Test mean error for best: 0.48800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 60                 
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 46                 
Correct output: 1                   | Program output: 82                 
Correct output: 15                  | Program output: 64                 
Correct output: 33                  | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 92                 
Correct output: 27                  | Program output: 89                 
Correct output: 61                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 45                 
Correct output: 0                   | Program output: 39                 
Correct output: 10                  | Program output: 71                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -23                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 43                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -41                
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -1                 
Correct output: -91                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: 15                 
Correct output: -88                 | Program output: -42                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -47                
Correct output: -69                 | Program output: 1                  
Correct output: -88                 | Program output: 33                 
Correct output: -58                 | Program output: -48                
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: 13                 
Correct output: -22                 | Program output: 56                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 29                 
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: 7                  
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 74                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 12                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and integer_dup exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and integer_dup exec_eq exec_do*while () exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 189 911 263 434 273 911 522 878 165)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (385 189 911 263 434 273 911 522 878 165)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean integer_dup boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Errors: [0 1 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.069
Median total errors in population: 5
Error averages by case: (0.615 0.811 0.089 0.737 0.566 0.727 0.089 0.478 0.122 0.835)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.478
Average program size in population (points): 43.192
Average percent parens in population: 0.202
Minimum age in population: 26.4998779296875
Maximum age in population: 31.07056427001953
Average age in population: 29.14899452209473
Median age in population: 29.23055458068848
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 16525609
--- Timings ---
Current time: 1559314414211 milliseconds
Total Time:          73.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.1 seconds, 58.7%
Fitness Testing:     16.4 seconds, 22.4%
Report:              13.7 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 27                 
Correct output: 48                  | Program output: 55                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 79                 
Correct output: 23                  | Program output: 54                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 44                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 34                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -40                
Correct output: -49                 | Program output: -9                 
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 49                 
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: -21                
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -70                
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: -41                
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 10                 
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: -51                
Correct output: -69                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: 12                 
Correct output: -13                 | Program output: 75                 
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: 22                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: -4                 
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 19                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop))))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop))))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 515 330 906 191 882 502 513 175 513)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (191 515 330 906 191 882 502 513 175 513)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_noop exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 5.282
Median total errors in population: 4
Error averages by case: (0.809 0.485 0.67 0.094 0.809 0.118 0.498 0.487 0.825 0.487)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.18
Average program size in population (points): 41.186
Average percent parens in population: 0.194
Minimum age in population: 28.14202880859375
Maximum age in population: 32.51424407958984
Average age in population: 30.74387381744385
Median age in population: 30.78773021697998
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 17574000
--- Timings ---
Current time: 1559314418052 milliseconds
Total Time:          76.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.1 seconds, 58.7%
Fitness Testing:     17.3 seconds, 22.5%
Report:              14.3 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 13                 
Correct output: -96                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 27                 
Correct output: 48                  | Program output: 55                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 66                 
Correct output: 39                  | Program output: 62                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 79                 
Correct output: 23                  | Program output: 54                 
Correct output: 12                  | Program output: 19                 
Correct output: 17                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 44                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: 34                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -40                
Correct output: -49                 | Program output: -9                 
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 50                 
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -13                
Correct output: 2                   | Program output: 49                 
Correct output: -93                 | Program output: -85                
Correct output: -27                 | Program output: -21                
Correct output: -97                 | Program output: 65                 
Correct output: -64                 | Program output: -5                 
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -37                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -70                
Correct output: -38                 | Program output: 2                  
Correct output: -59                 | Program output: -41                
Correct output: -54                 | Program output: 7                  
Correct output: -85                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -79                
Correct output: -89                 | Program output: 10                 
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: 41                 
Correct output: -55                 | Program output: -51                
Correct output: -69                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: 12                 
Correct output: -13                 | Program output: 75                 
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: 22                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 40                 
Correct output: -24                 | Program output: -4                 
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 19                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean integer_dup boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y ())))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean integer_dup boolean_invert_second_then_and boolean_invert_second_then_and exec_eq exec_do*while () exec_yank integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y ())))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 503 531 895 208 208 5 896 643 336)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (5 503 531 895 208 208 5 896 643 336)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -32} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and -32 exec_noop exec_yank integer_max in2 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 5.77
Median total errors in population: 6
Error averages by case: (0.995 0.497 0.469 0.105 0.792 0.792 0.995 0.104 0.357 0.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.029
Average program size in population (points): 41.218
Average percent parens in population: 0.199
Minimum age in population: 30.45024871826172
Maximum age in population: 33.9342155456543
Average age in population: 32.05905296039581
Median age in population: 32.08955001831055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 246
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 18419254
--- Timings ---
Current time: 1559314421699 milliseconds
Total Time:          80.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.2 seconds, 58.6%
Fitness Testing:     18.1 seconds, 22.5%
Report:              15.2 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 227
Test mean error for best: 0.22700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 44                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -40                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -51                
Correct output: -69                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: 22                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 19                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 518 549 337 547 337 528 230 534 313)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (323 518 549 337 547 337 528 230 534 313)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.784
Median total errors in population: 5
Error averages by case: (0.677 0.482 0.451 0.663 0.453 0.663 0.472 0.77 0.466 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.533
Average program size in population (points): 41.793
Average percent parens in population: 0.196
Minimum age in population: 31.68062591552734
Maximum age in population: 35.37103652954102
Average age in population: 33.41655008983612
Median age in population: 33.41253519058228
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 19543167
--- Timings ---
Current time: 1559314425011 milliseconds
Total Time:          84.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.2 seconds, 58.3%
Fitness Testing:     19.1 seconds, 22.6%
Report:              16.0 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 227
Test mean error for best: 0.22700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 8                  
Correct output: 2                   | Program output: 42                 
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 19                  | Program output: 19                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 44                 
Correct output: -94                 | Program output: -56                
Correct output: -92                 | Program output: -92                
Correct output: -60                 | Program output: -60                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -89                
Correct output: -54                 | Program output: -40                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -45                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -26                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -51                
Correct output: -69                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -26                 | Program output: -2                 
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: 22                 
Correct output: -54                 | Program output: -47                
Correct output: -60                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -33                 | Program output: 19                 
Correct output: -99                 | Program output: -92                
Correct output: -79                 | Program output: -79                
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (849 922 861 919 621 938 601 925 903 260)
Population mean number of elite cases: 7.80
Count of perfect (error zero) individuals by case: (849 922 861 919 621 938 601 925 903 260)
Population mean number of perfect (error zero) cases: 7.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_dup (exec_noop in1 integer_stackdepth exec_yankdup) print_boolean boolean_dup_times boolean_invert_second_then_and boolean_invert_second_then_and exec_eq boolean_dup_times boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (exec_flush)))))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 2.201
Median total errors in population: 1
Error averages by case: (0.151 0.078 0.139 0.081 0.379 0.062 0.399 0.075 0.097 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.543
Average program size in population (points): 48.565
Average percent parens in population: 0.184
Minimum age in population: 33.06171321868896
Maximum age in population: 36.21118927001953
Average age in population: 34.97651029062271
Median age in population: 34.84600043296814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 350
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 366
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 20198366
--- Timings ---
Current time: 1559314427943 milliseconds
Total Time:          87.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.2 seconds, 58.7%
Fitness Testing:     19.7 seconds, 22.5%
Report:              16.3 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -57                
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_flush))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 48
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_flush))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 934 399 870 873 399 874 399 837 832)
Population mean number of elite cases: 6.82
Count of perfect (error zero) individuals by case: (398 934 399 870 873 399 874 399 837 832)
Population mean number of perfect (error zero) cases: 6.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 2, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove})
Best program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3.185
Median total errors in population: 4
Error averages by case: (0.602 0.066 0.601 0.13 0.127 0.601 0.126 0.601 0.163 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.42
Average program size in population (points): 52.033
Average percent parens in population: 0.185
Minimum age in population: 34.99806761741638
Maximum age in population: 37.78397762775421
Average age in population: 36.46527406847477
Median age in population: 36.59922564029694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 20789120
--- Timings ---
Current time: 1559314431463 milliseconds
Total Time:          90.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 59.0%
Fitness Testing:     20.2 seconds, 22.4%
Report:              16.6 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 24
Successful program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 50


Auto-simplifying with starting size: 50
step: 0
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 500
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1000
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1500
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2000
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2500
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3000
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3500
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4000
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4500
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 5000
program: (integer_yank boolean_shove exec_empty exec_empty integer_stackdepth boolean_yank boolean_flush boolean_dup_items in3 boolean_flush integer_mod boolean_invert_second_then_and exec_eq in2 exec_yank integer_max in2 integer_min integer_max in4 integer_min integer_max exec_swap (in1) (boolean_pop print_integer) exec_shove (exec_when (exec_shove (exec_when (exec_y (integer_pop boolean_yankdup boolean_dup_items)) integer_mult boolean_and in4 print_integer integer_dup_times exec_when (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 200
Test mean error for best: 0.20000
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -35                 | Program output: -35                
Correct output: -43                 | Program output: -43                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: 19                  | Program output: 19                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 35                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 18                 
Correct output: 33                  | Program output: 33                 
Correct output: 1                   | Program output: 38                 
Correct output: 9                   | Program output: 83                 
Correct output: 19                  | Program output: 49                 
Correct output: 27                  | Program output: 27                 
Correct output: 61                  | Program output: 61                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -45                
Correct output: -60                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -57                
Correct output: -61                 | Program output: -19                
Correct output: -82                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -45                
Correct output: -41                 | Program output: -41                
Correct output: 2                   | Program output: 2                  
Correct output: -93                 | Program output: -93                
Correct output: -27                 | Program output: -27                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -63                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -77                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -38                 | Program output: -38                
Correct output: -59                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -20                 | Program output: -20                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -26                 | Program output: -26                
Correct output: -13                 | Program output: -13                
Correct output: -61                 | Program output: -61                
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -6                  | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -7                 
Correct output: 6                   | Program output: 6                  
;;******************************
