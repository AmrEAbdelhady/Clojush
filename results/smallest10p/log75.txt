Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-39 -39 -39 -11] -39] [[14 14 72 14] 14] [[18 18 -78 18] -78] [[51 51 51 -90] -90] [[-69 -69 -69 -95] -95] [[-2 19 19 19] -2] [[-85 -85 81 -85] -85] [[7 7 -49 7] -49] [[19 -82 19 19] -82] [[95 -84 95 95] -84] [(38 38 38 38) 38] [(84 84 84 84) 84] [(-64 -64 -64 -64) -64] [(-33 -33 -33 -33) -33] [(29 29 29 29) 29] [(89 17 39 89) 17] [(12 95 87 34) 12] [(32 43 58 20) 20] [(79 40 79 16) 16] [(54 37 91 17) 17] [(48 5 19 56) 5] [(62 5 100 35) 5] [(79 40 89 93) 40] [(0 77 45 79) 0] [(32 45 81 2) 2] [(73 58 74 85) 58] [(70 62 86 89) 62] [(27 84 60 62) 27] [(83 38 29 65) 29] [(6 58 39 68) 6] [(68 1 69 23) 1] [(65 5 66 52) 5] [(12 82 51 53) 12] [(49 59 82 70) 49] [(67 15 51 46) 15] [(39 83 -100 60) -100] [(-77 -25 50 72) -77] [(93 69 -79 -36) -79] [(70 -31 -98 -76) -98] [(68 12 3 -45) -45] [(-5 -70 85 92) -70] [(60 -37 -76 44) -76] [(-97 -30 -84 36) -97] [(28 -63 -58 22) -63] [(-11 -36 -91 91) -91] [(87 -29 31 -42) -42] [(95 -40 49 33) -40] [(7 23 59 15) 7] [(36 96 -79 -53) -79] [(-44 -66 91 -54) -66] [(53 26 97 -26) -26] [(-76 -9 23 89) -76] [(28 22 -39 -39) -39] [(-63 3 78 23) -63] [(-41 -95 -74 -42) -95] [(-65 -1 -26 -17) -65] [(100 -12 18 -9) -12] [(-71 21 6 70) -71] [(-9 -72 25 -11) -72] [(-10 13 84 -40) -40] [(57 85 -49 41) -49] [(51 72 -45 70) -45] [(-5 -73 -59 71) -73] [(-19 -45 -70 62) -70] [(-44 -5 75 -56) -56] [(19 73 -59 -9) -59] [(-67 -100 -94 -84) -100] [(75 -89 100 50) -89] [(96 -72 -2 18) -72] [(-67 99 -33 -27) -67] [(13 30 17 -94) -94] [(48 80 26 -68) -68] [(-4 -100 -75 -99) -100] [(-39 49 9 21) -39] [(-48 -12 -3 -80) -80] [(-63 94 60 43) -63] [(-26 -20 80 24) -26] [(-48 56 -6 -54) -54] [(-50 -9 48 43) -50] [(27 70 -43 75) -43] [(-8 -89 53 50) -89] [(-49 -15 62 52) -49] [(-100 12 18 94) -100] [(9 -78 49 -99) -99] [(18 31 -55 75) -55] [(14 40 75 40) 14] [(-49 -49 32 -42) -49] [(74 -7 -93 99) -93] [(-89 -89 28 -23) -89] [(27 -46 -89 -1) -89] [(7 -24 -2 -4) -24] [(-16 -52 55 51) -52] [(-17 4 -9 -59) -59] [(-45 51 72 55) -45] [(-90 76 -15 80) -90])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-39 -39 -39 -11] -39]
Train Case:   6 | Input/Output: [[14 14 72 14] 14]
Train Case:   7 | Input/Output: [[18 18 -78 18] -78]
Train Case:   8 | Input/Output: [[51 51 51 -90] -90]
Train Case:   9 | Input/Output: [[-69 -69 -69 -95] -95]
Train Case:  10 | Input/Output: [[-2 19 19 19] -2]
Train Case:  11 | Input/Output: [[-85 -85 81 -85] -85]
Train Case:  12 | Input/Output: [[7 7 -49 7] -49]
Train Case:  13 | Input/Output: [[19 -82 19 19] -82]
Train Case:  14 | Input/Output: [[95 -84 95 95] -84]
Train Case:  15 | Input/Output: [(38 38 38 38) 38]
Train Case:  16 | Input/Output: [(84 84 84 84) 84]
Train Case:  17 | Input/Output: [(-64 -64 -64 -64) -64]
Train Case:  18 | Input/Output: [(-33 -33 -33 -33) -33]
Train Case:  19 | Input/Output: [(29 29 29 29) 29]
Train Case:  20 | Input/Output: [(89 17 39 89) 17]
Train Case:  21 | Input/Output: [(12 95 87 34) 12]
Train Case:  22 | Input/Output: [(32 43 58 20) 20]
Train Case:  23 | Input/Output: [(79 40 79 16) 16]
Train Case:  24 | Input/Output: [(54 37 91 17) 17]
Train Case:  25 | Input/Output: [(48 5 19 56) 5]
Train Case:  26 | Input/Output: [(62 5 100 35) 5]
Train Case:  27 | Input/Output: [(79 40 89 93) 40]
Train Case:  28 | Input/Output: [(0 77 45 79) 0]
Train Case:  29 | Input/Output: [(32 45 81 2) 2]
Train Case:  30 | Input/Output: [(73 58 74 85) 58]
Train Case:  31 | Input/Output: [(70 62 86 89) 62]
Train Case:  32 | Input/Output: [(27 84 60 62) 27]
Train Case:  33 | Input/Output: [(83 38 29 65) 29]
Train Case:  34 | Input/Output: [(6 58 39 68) 6]
Train Case:  35 | Input/Output: [(68 1 69 23) 1]
Train Case:  36 | Input/Output: [(65 5 66 52) 5]
Train Case:  37 | Input/Output: [(12 82 51 53) 12]
Train Case:  38 | Input/Output: [(49 59 82 70) 49]
Train Case:  39 | Input/Output: [(67 15 51 46) 15]
Train Case:  40 | Input/Output: [(39 83 -100 60) -100]
Train Case:  41 | Input/Output: [(-77 -25 50 72) -77]
Train Case:  42 | Input/Output: [(93 69 -79 -36) -79]
Train Case:  43 | Input/Output: [(70 -31 -98 -76) -98]
Train Case:  44 | Input/Output: [(68 12 3 -45) -45]
Train Case:  45 | Input/Output: [(-5 -70 85 92) -70]
Train Case:  46 | Input/Output: [(60 -37 -76 44) -76]
Train Case:  47 | Input/Output: [(-97 -30 -84 36) -97]
Train Case:  48 | Input/Output: [(28 -63 -58 22) -63]
Train Case:  49 | Input/Output: [(-11 -36 -91 91) -91]
Train Case:  50 | Input/Output: [(87 -29 31 -42) -42]
Train Case:  51 | Input/Output: [(95 -40 49 33) -40]
Train Case:  52 | Input/Output: [(7 23 59 15) 7]
Train Case:  53 | Input/Output: [(36 96 -79 -53) -79]
Train Case:  54 | Input/Output: [(-44 -66 91 -54) -66]
Train Case:  55 | Input/Output: [(53 26 97 -26) -26]
Train Case:  56 | Input/Output: [(-76 -9 23 89) -76]
Train Case:  57 | Input/Output: [(28 22 -39 -39) -39]
Train Case:  58 | Input/Output: [(-63 3 78 23) -63]
Train Case:  59 | Input/Output: [(-41 -95 -74 -42) -95]
Train Case:  60 | Input/Output: [(-65 -1 -26 -17) -65]
Train Case:  61 | Input/Output: [(100 -12 18 -9) -12]
Train Case:  62 | Input/Output: [(-71 21 6 70) -71]
Train Case:  63 | Input/Output: [(-9 -72 25 -11) -72]
Train Case:  64 | Input/Output: [(-10 13 84 -40) -40]
Train Case:  65 | Input/Output: [(57 85 -49 41) -49]
Train Case:  66 | Input/Output: [(51 72 -45 70) -45]
Train Case:  67 | Input/Output: [(-5 -73 -59 71) -73]
Train Case:  68 | Input/Output: [(-19 -45 -70 62) -70]
Train Case:  69 | Input/Output: [(-44 -5 75 -56) -56]
Train Case:  70 | Input/Output: [(19 73 -59 -9) -59]
Train Case:  71 | Input/Output: [(-67 -100 -94 -84) -100]
Train Case:  72 | Input/Output: [(75 -89 100 50) -89]
Train Case:  73 | Input/Output: [(96 -72 -2 18) -72]
Train Case:  74 | Input/Output: [(-67 99 -33 -27) -67]
Train Case:  75 | Input/Output: [(13 30 17 -94) -94]
Train Case:  76 | Input/Output: [(48 80 26 -68) -68]
Train Case:  77 | Input/Output: [(-4 -100 -75 -99) -100]
Train Case:  78 | Input/Output: [(-39 49 9 21) -39]
Train Case:  79 | Input/Output: [(-48 -12 -3 -80) -80]
Train Case:  80 | Input/Output: [(-63 94 60 43) -63]
Train Case:  81 | Input/Output: [(-26 -20 80 24) -26]
Train Case:  82 | Input/Output: [(-48 56 -6 -54) -54]
Train Case:  83 | Input/Output: [(-50 -9 48 43) -50]
Train Case:  84 | Input/Output: [(27 70 -43 75) -43]
Train Case:  85 | Input/Output: [(-8 -89 53 50) -89]
Train Case:  86 | Input/Output: [(-49 -15 62 52) -49]
Train Case:  87 | Input/Output: [(-100 12 18 94) -100]
Train Case:  88 | Input/Output: [(9 -78 49 -99) -99]
Train Case:  89 | Input/Output: [(18 31 -55 75) -55]
Train Case:  90 | Input/Output: [(14 40 75 40) 14]
Train Case:  91 | Input/Output: [(-49 -49 32 -42) -49]
Train Case:  92 | Input/Output: [(74 -7 -93 99) -93]
Train Case:  93 | Input/Output: [(-89 -89 28 -23) -89]
Train Case:  94 | Input/Output: [(27 -46 -89 -1) -89]
Train Case:  95 | Input/Output: [(7 -24 -2 -4) -24]
Train Case:  96 | Input/Output: [(-16 -52 55 51) -52]
Train Case:  97 | Input/Output: [(-17 4 -9 -59) -59]
Train Case:  98 | Input/Output: [(-45 51 72 55) -45]
Train Case:  99 | Input/Output: [(-90 76 -15 80) -90]
Test Case:   0 | Input/Output: [[-42 -42 -42 33] -42]
Test Case:   1 | Input/Output: [[-57 -57 -31 -57] -57]
Test Case:   2 | Input/Output: [[-66 -66 -66 21] -66]
Test Case:   3 | Input/Output: [[60 -93 -93 -93] -93]
Test Case:   4 | Input/Output: [[77 77 77 -32] -32]
Test Case:   5 | Input/Output: [[30 30 88 30] 30]
Test Case:   6 | Input/Output: [[84 41 41 41] 41]
Test Case:   7 | Input/Output: [[-97 40 40 40] -97]
Test Case:   8 | Input/Output: [[-58 -58 -58 96] -58]
Test Case:   9 | Input/Output: [[18 18 26 18] 18]
Test Case:  10 | Input/Output: [[-35 -22 -22 -22] -35]
Test Case:  11 | Input/Output: [[-20 84 -20 -20] -20]
Test Case:  12 | Input/Output: [[-46 -8 -46 -46] -46]
Test Case:  13 | Input/Output: [[64 64 64 -74] -74]
Test Case:  14 | Input/Output: [[-90 -90 5 -90] -90]
Test Case:  15 | Input/Output: [[100 100 100 8] 8]
Test Case:  16 | Input/Output: [[-1 -1 -66 -1] -66]
Test Case:  17 | Input/Output: [[83 83 -6 83] -6]
Test Case:  18 | Input/Output: [[-2 -2 -2 -18] -18]
Test Case:  19 | Input/Output: [[-39 -71 -39 -39] -71]
Test Case:  20 | Input/Output: [[17 17 17 8] 8]
Test Case:  21 | Input/Output: [[-78 -78 -78 59] -78]
Test Case:  22 | Input/Output: [[36 36 32 36] 32]
Test Case:  23 | Input/Output: [[-9 -9 -9 40] -9]
Test Case:  24 | Input/Output: [[82 19 19 19] 19]
Test Case:  25 | Input/Output: [[-92 -92 81 -92] -92]
Test Case:  26 | Input/Output: [[-61 18 -61 -61] -61]
Test Case:  27 | Input/Output: [[77 53 53 53] 53]
Test Case:  28 | Input/Output: [[57 57 57 21] 21]
Test Case:  29 | Input/Output: [[44 44 -45 44] -45]
Test Case:  30 | Input/Output: [[-12 71 -12 -12] -12]
Test Case:  31 | Input/Output: [[-87 -87 -87 38] -87]
Test Case:  32 | Input/Output: [[-75 74 74 74] -75]
Test Case:  33 | Input/Output: [[-69 66 -69 -69] -69]
Test Case:  34 | Input/Output: [[-23 -23 -23 26] -23]
Test Case:  35 | Input/Output: [[-75 12 -75 -75] -75]
Test Case:  36 | Input/Output: [[42 42 42 -31] -31]
Test Case:  37 | Input/Output: [[54 -84 54 54] -84]
Test Case:  38 | Input/Output: [[-18 -18 -18 82] -18]
Test Case:  39 | Input/Output: [[71 -66 71 71] -66]
Test Case:  40 | Input/Output: [[-62 -62 -62 48] -62]
Test Case:  41 | Input/Output: [[-47 -55 -55 -55] -55]
Test Case:  42 | Input/Output: [[-79 -79 35 -79] -79]
Test Case:  43 | Input/Output: [[-80 -24 -24 -24] -80]
Test Case:  44 | Input/Output: [[100 100 100 89] 89]
Test Case:  45 | Input/Output: [[-71 78 78 78] -71]
Test Case:  46 | Input/Output: [[24 24 24 94] 24]
Test Case:  47 | Input/Output: [[-99 -99 91 -99] -99]
Test Case:  48 | Input/Output: [[32 32 32 -66] -66]
Test Case:  49 | Input/Output: [[-1 -1 -35 -1] -35]
Test Case:  50 | Input/Output: [[100 30 100 100] 30]
Test Case:  51 | Input/Output: [[46 46 46 16] 16]
Test Case:  52 | Input/Output: [[-93 -28 -28 -28] -93]
Test Case:  53 | Input/Output: [[77 42 42 42] 42]
Test Case:  54 | Input/Output: [[-96 31 -96 -96] -96]
Test Case:  55 | Input/Output: [[32 -57 32 32] -57]
Test Case:  56 | Input/Output: [[41 50 50 50] 41]
Test Case:  57 | Input/Output: [[50 50 50 -95] -95]
Test Case:  58 | Input/Output: [[-87 -87 22 -87] -87]
Test Case:  59 | Input/Output: [[-25 -25 48 -25] -25]
Test Case:  60 | Input/Output: [[99 -63 99 99] -63]
Test Case:  61 | Input/Output: [[6 6 -48 6] -48]
Test Case:  62 | Input/Output: [[10 2 10 10] 2]
Test Case:  63 | Input/Output: [[82 82 -91 82] -91]
Test Case:  64 | Input/Output: [[-52 18 -52 -52] -52]
Test Case:  65 | Input/Output: [[96 18 96 96] 18]
Test Case:  66 | Input/Output: [[68 68 68 0] 0]
Test Case:  67 | Input/Output: [[77 77 77 31] 31]
Test Case:  68 | Input/Output: [[0 0 1 0] 0]
Test Case:  69 | Input/Output: [[47 47 -38 47] -38]
Test Case:  70 | Input/Output: [[-22 -100 -100 -100] -100]
Test Case:  71 | Input/Output: [[-41 -41 -41 -39] -41]
Test Case:  72 | Input/Output: [[-82 -47 -82 -82] -82]
Test Case:  73 | Input/Output: [[-93 55 55 55] -93]
Test Case:  74 | Input/Output: [[-8 4 -8 -8] -8]
Test Case:  75 | Input/Output: [[-75 62 62 62] -75]
Test Case:  76 | Input/Output: [[-54 -54 -72 -54] -72]
Test Case:  77 | Input/Output: [[39 39 39 39] 39]
Test Case:  78 | Input/Output: [[31 31 31 -66] -66]
Test Case:  79 | Input/Output: [[19 -90 -90 -90] -90]
Test Case:  80 | Input/Output: [[31 31 21 31] 21]
Test Case:  81 | Input/Output: [[51 59 59 59] 51]
Test Case:  82 | Input/Output: [[0 0 0 79] 0]
Test Case:  83 | Input/Output: [[75 42 75 75] 42]
Test Case:  84 | Input/Output: [[78 78 66 78] 66]
Test Case:  85 | Input/Output: [[52 52 52 -65] -65]
Test Case:  86 | Input/Output: [[89 5 5 5] 5]
Test Case:  87 | Input/Output: [[60 36 36 36] 36]
Test Case:  88 | Input/Output: [[21 21 31 21] 21]
Test Case:  89 | Input/Output: [[-42 -27 -42 -42] -42]
Test Case:  90 | Input/Output: [[-29 -29 -29 -32] -32]
Test Case:  91 | Input/Output: [[-2 5 -2 -2] -2]
Test Case:  92 | Input/Output: [[86 86 86 -54] -54]
Test Case:  93 | Input/Output: [[-97 -97 -9 -97] -97]
Test Case:  94 | Input/Output: [[45 -11 -11 -11] -11]
Test Case:  95 | Input/Output: [[33 -21 33 33] -21]
Test Case:  96 | Input/Output: [[25 25 25 -44] -44]
Test Case:  97 | Input/Output: [[-77 -3 -3 -3] -77]
Test Case:  98 | Input/Output: [[-81 -81 -81 -56] -81]
Test Case:  99 | Input/Output: [[-67 -67 -67 -74] -74]
Test Case: 100 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 101 | Input/Output: [(5 5 5 5) 5]
Test Case: 102 | Input/Output: [(93 93 93 93) 93]
Test Case: 103 | Input/Output: [(97 97 97 97) 97]
Test Case: 104 | Input/Output: [(39 39 39 39) 39]
Test Case: 105 | Input/Output: [(0 0 0 0) 0]
Test Case: 106 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 107 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 108 | Input/Output: [(68 68 68 68) 68]
Test Case: 109 | Input/Output: [(100 100 100 100) 100]
Test Case: 110 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 111 | Input/Output: [(46 46 46 46) 46]
Test Case: 112 | Input/Output: [(14 14 14 14) 14]
Test Case: 113 | Input/Output: [(66 66 66 66) 66]
Test Case: 114 | Input/Output: [(35 35 35 35) 35]
Test Case: 115 | Input/Output: [(100 100 100 100) 100]
Test Case: 116 | Input/Output: [(57 57 57 57) 57]
Test Case: 117 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 118 | Input/Output: [(43 43 43 43) 43]
Test Case: 119 | Input/Output: [(57 57 57 57) 57]
Test Case: 120 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 121 | Input/Output: [(61 61 61 61) 61]
Test Case: 122 | Input/Output: [(92 92 92 92) 92]
Test Case: 123 | Input/Output: [(98 98 98 98) 98]
Test Case: 124 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 125 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 126 | Input/Output: [(32 32 32 32) 32]
Test Case: 127 | Input/Output: [(91 91 91 91) 91]
Test Case: 128 | Input/Output: [(92 92 92 92) 92]
Test Case: 129 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 130 | Input/Output: [(51 51 51 51) 51]
Test Case: 131 | Input/Output: [(42 42 42 42) 42]
Test Case: 132 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 133 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 134 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 135 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 136 | Input/Output: [(99 99 99 99) 99]
Test Case: 137 | Input/Output: [(3 3 3 3) 3]
Test Case: 138 | Input/Output: [(7 7 7 7) 7]
Test Case: 139 | Input/Output: [(58 58 58 58) 58]
Test Case: 140 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 141 | Input/Output: [(15 15 15 15) 15]
Test Case: 142 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 143 | Input/Output: [(58 58 58 58) 58]
Test Case: 144 | Input/Output: [(28 28 28 28) 28]
Test Case: 145 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 146 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 147 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 148 | Input/Output: [(25 25 25 25) 25]
Test Case: 149 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 150 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 151 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 152 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 153 | Input/Output: [(83 83 83 83) 83]
Test Case: 154 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 155 | Input/Output: [(37 37 37 37) 37]
Test Case: 156 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 157 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 158 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 159 | Input/Output: [(73 73 73 73) 73]
Test Case: 160 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 161 | Input/Output: [(88 88 88 88) 88]
Test Case: 162 | Input/Output: [(94 94 94 94) 94]
Test Case: 163 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 164 | Input/Output: [(18 18 18 18) 18]
Test Case: 165 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 166 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 167 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 168 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 169 | Input/Output: [(65 65 65 65) 65]
Test Case: 170 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 171 | Input/Output: [(46 46 46 46) 46]
Test Case: 172 | Input/Output: [(58 58 58 58) 58]
Test Case: 173 | Input/Output: [(63 63 63 63) 63]
Test Case: 174 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 175 | Input/Output: [(49 49 49 49) 49]
Test Case: 176 | Input/Output: [(8 8 8 8) 8]
Test Case: 177 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 178 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 179 | Input/Output: [(69 69 69 69) 69]
Test Case: 180 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 181 | Input/Output: [(63 63 63 63) 63]
Test Case: 182 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 183 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 184 | Input/Output: [(68 68 68 68) 68]
Test Case: 185 | Input/Output: [(87 87 87 87) 87]
Test Case: 186 | Input/Output: [(96 96 96 96) 96]
Test Case: 187 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 188 | Input/Output: [(78 78 78 78) 78]
Test Case: 189 | Input/Output: [(27 27 27 27) 27]
Test Case: 190 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 191 | Input/Output: [(28 28 28 28) 28]
Test Case: 192 | Input/Output: [(47 47 47 47) 47]
Test Case: 193 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 194 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 195 | Input/Output: [(55 55 55 55) 55]
Test Case: 196 | Input/Output: [(83 83 83 83) 83]
Test Case: 197 | Input/Output: [(14 14 14 14) 14]
Test Case: 198 | Input/Output: [(32 32 32 32) 32]
Test Case: 199 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 200 | Input/Output: [(20 27 27 23) 20]
Test Case: 201 | Input/Output: [(91 8 2 40) 2]
Test Case: 202 | Input/Output: [(80 25 36 38) 25]
Test Case: 203 | Input/Output: [(19 54 92 91) 19]
Test Case: 204 | Input/Output: [(26 15 17 94) 15]
Test Case: 205 | Input/Output: [(5 18 71 58) 5]
Test Case: 206 | Input/Output: [(63 52 21 55) 21]
Test Case: 207 | Input/Output: [(31 96 79 14) 14]
Test Case: 208 | Input/Output: [(44 72 69 43) 43]
Test Case: 209 | Input/Output: [(25 19 17 51) 17]
Test Case: 210 | Input/Output: [(83 15 51 18) 15]
Test Case: 211 | Input/Output: [(49 26 90 22) 22]
Test Case: 212 | Input/Output: [(14 15 6 98) 6]
Test Case: 213 | Input/Output: [(36 55 2 27) 2]
Test Case: 214 | Input/Output: [(31 35 77 45) 31]
Test Case: 215 | Input/Output: [(26 15 47 97) 15]
Test Case: 216 | Input/Output: [(89 11 15 40) 11]
Test Case: 217 | Input/Output: [(64 7 66 51) 7]
Test Case: 218 | Input/Output: [(93 60 65 38) 38]
Test Case: 219 | Input/Output: [(43 12 76 1) 1]
Test Case: 220 | Input/Output: [(88 42 22 40) 22]
Test Case: 221 | Input/Output: [(60 26 81 65) 26]
Test Case: 222 | Input/Output: [(28 63 23 42) 23]
Test Case: 223 | Input/Output: [(19 29 96 27) 19]
Test Case: 224 | Input/Output: [(16 48 31 29) 16]
Test Case: 225 | Input/Output: [(34 89 4 85) 4]
Test Case: 226 | Input/Output: [(86 45 1 65) 1]
Test Case: 227 | Input/Output: [(82 42 37 59) 37]
Test Case: 228 | Input/Output: [(92 78 19 30) 19]
Test Case: 229 | Input/Output: [(79 47 20 8) 8]
Test Case: 230 | Input/Output: [(53 73 23 61) 23]
Test Case: 231 | Input/Output: [(64 75 99 65) 64]
Test Case: 232 | Input/Output: [(96 34 2 94) 2]
Test Case: 233 | Input/Output: [(38 85 3 52) 3]
Test Case: 234 | Input/Output: [(59 77 77 83) 59]
Test Case: 235 | Input/Output: [(35 23 22 30) 22]
Test Case: 236 | Input/Output: [(21 7 12 99) 7]
Test Case: 237 | Input/Output: [(94 42 21 86) 21]
Test Case: 238 | Input/Output: [(38 33 47 41) 33]
Test Case: 239 | Input/Output: [(38 84 23 47) 23]
Test Case: 240 | Input/Output: [(65 78 92 71) 65]
Test Case: 241 | Input/Output: [(72 97 57 72) 57]
Test Case: 242 | Input/Output: [(0 74 83 58) 0]
Test Case: 243 | Input/Output: [(100 57 52 29) 29]
Test Case: 244 | Input/Output: [(39 36 35 78) 35]
Test Case: 245 | Input/Output: [(100 43 39 4) 4]
Test Case: 246 | Input/Output: [(73 25 46 52) 25]
Test Case: 247 | Input/Output: [(3 16 97 58) 3]
Test Case: 248 | Input/Output: [(100 0 54 12) 0]
Test Case: 249 | Input/Output: [(90 100 31 47) 31]
Test Case: 250 | Input/Output: [(82 99 11 84) 11]
Test Case: 251 | Input/Output: [(75 79 95 71) 71]
Test Case: 252 | Input/Output: [(47 70 14 84) 14]
Test Case: 253 | Input/Output: [(79 12 63 12) 12]
Test Case: 254 | Input/Output: [(34 3 89 98) 3]
Test Case: 255 | Input/Output: [(76 37 60 76) 37]
Test Case: 256 | Input/Output: [(48 53 90 26) 26]
Test Case: 257 | Input/Output: [(53 60 57 31) 31]
Test Case: 258 | Input/Output: [(61 57 21 75) 21]
Test Case: 259 | Input/Output: [(34 62 79 39) 34]
Test Case: 260 | Input/Output: [(91 46 16 42) 16]
Test Case: 261 | Input/Output: [(63 2 44 85) 2]
Test Case: 262 | Input/Output: [(59 92 2 66) 2]
Test Case: 263 | Input/Output: [(26 41 24 80) 24]
Test Case: 264 | Input/Output: [(53 72 63 44) 44]
Test Case: 265 | Input/Output: [(57 23 2 54) 2]
Test Case: 266 | Input/Output: [(3 8 12 44) 3]
Test Case: 267 | Input/Output: [(14 90 35 4) 4]
Test Case: 268 | Input/Output: [(73 85 7 64) 7]
Test Case: 269 | Input/Output: [(1 100 71 11) 1]
Test Case: 270 | Input/Output: [(13 11 9 7) 7]
Test Case: 271 | Input/Output: [(34 96 78 79) 34]
Test Case: 272 | Input/Output: [(5 56 72 68) 5]
Test Case: 273 | Input/Output: [(0 41 96 44) 0]
Test Case: 274 | Input/Output: [(52 2 36 81) 2]
Test Case: 275 | Input/Output: [(96 75 100 6) 6]
Test Case: 276 | Input/Output: [(41 39 30 48) 30]
Test Case: 277 | Input/Output: [(3 52 38 3) 3]
Test Case: 278 | Input/Output: [(93 18 50 82) 18]
Test Case: 279 | Input/Output: [(35 79 24 33) 24]
Test Case: 280 | Input/Output: [(4 32 77 84) 4]
Test Case: 281 | Input/Output: [(15 99 41 58) 15]
Test Case: 282 | Input/Output: [(73 68 26 65) 26]
Test Case: 283 | Input/Output: [(55 36 28 19) 19]
Test Case: 284 | Input/Output: [(16 15 36 89) 15]
Test Case: 285 | Input/Output: [(84 67 20 38) 20]
Test Case: 286 | Input/Output: [(88 49 36 29) 29]
Test Case: 287 | Input/Output: [(10 41 60 71) 10]
Test Case: 288 | Input/Output: [(92 95 2 99) 2]
Test Case: 289 | Input/Output: [(14 2 100 57) 2]
Test Case: 290 | Input/Output: [(2 85 57 49) 2]
Test Case: 291 | Input/Output: [(26 51 88 85) 26]
Test Case: 292 | Input/Output: [(81 22 55 39) 22]
Test Case: 293 | Input/Output: [(49 37 69 84) 37]
Test Case: 294 | Input/Output: [(11 77 38 53) 11]
Test Case: 295 | Input/Output: [(32 14 21 18) 14]
Test Case: 296 | Input/Output: [(33 81 79 16) 16]
Test Case: 297 | Input/Output: [(15 37 92 28) 15]
Test Case: 298 | Input/Output: [(98 16 21 1) 1]
Test Case: 299 | Input/Output: [(20 0 84 96) 0]
Test Case: 300 | Input/Output: [(23 96 26 1) 1]
Test Case: 301 | Input/Output: [(3 98 98 10) 3]
Test Case: 302 | Input/Output: [(23 21 80 70) 21]
Test Case: 303 | Input/Output: [(45 52 19 61) 19]
Test Case: 304 | Input/Output: [(95 11 86 27) 11]
Test Case: 305 | Input/Output: [(25 24 88 69) 24]
Test Case: 306 | Input/Output: [(90 56 94 49) 49]
Test Case: 307 | Input/Output: [(28 99 100 97) 28]
Test Case: 308 | Input/Output: [(81 44 57 43) 43]
Test Case: 309 | Input/Output: [(86 78 25 81) 25]
Test Case: 310 | Input/Output: [(13 80 96 33) 13]
Test Case: 311 | Input/Output: [(26 11 28 12) 11]
Test Case: 312 | Input/Output: [(89 65 92 88) 65]
Test Case: 313 | Input/Output: [(96 84 75 64) 64]
Test Case: 314 | Input/Output: [(91 37 18 78) 18]
Test Case: 315 | Input/Output: [(97 19 90 75) 19]
Test Case: 316 | Input/Output: [(37 23 73 23) 23]
Test Case: 317 | Input/Output: [(51 98 18 68) 18]
Test Case: 318 | Input/Output: [(35 17 34 66) 17]
Test Case: 319 | Input/Output: [(17 46 80 59) 17]
Test Case: 320 | Input/Output: [(49 60 9 91) 9]
Test Case: 321 | Input/Output: [(32 89 42 84) 32]
Test Case: 322 | Input/Output: [(5 72 89 72) 5]
Test Case: 323 | Input/Output: [(14 19 98 90) 14]
Test Case: 324 | Input/Output: [(78 82 58 6) 6]
Test Case: 325 | Input/Output: [(27 1 29 58) 1]
Test Case: 326 | Input/Output: [(94 78 49 20) 20]
Test Case: 327 | Input/Output: [(18 99 89 76) 18]
Test Case: 328 | Input/Output: [(58 85 83 55) 55]
Test Case: 329 | Input/Output: [(61 11 40 4) 4]
Test Case: 330 | Input/Output: [(77 15 80 36) 15]
Test Case: 331 | Input/Output: [(86 30 97 41) 30]
Test Case: 332 | Input/Output: [(90 69 78 36) 36]
Test Case: 333 | Input/Output: [(40 25 43 1) 1]
Test Case: 334 | Input/Output: [(81 92 91 42) 42]
Test Case: 335 | Input/Output: [(91 72 82 0) 0]
Test Case: 336 | Input/Output: [(14 15 18 71) 14]
Test Case: 337 | Input/Output: [(88 29 42 64) 29]
Test Case: 338 | Input/Output: [(43 18 100 7) 7]
Test Case: 339 | Input/Output: [(21 44 11 23) 11]
Test Case: 340 | Input/Output: [(15 76 12 29) 12]
Test Case: 341 | Input/Output: [(22 17 66 15) 15]
Test Case: 342 | Input/Output: [(72 40 63 90) 40]
Test Case: 343 | Input/Output: [(92 22 85 73) 22]
Test Case: 344 | Input/Output: [(7 71 78 31) 7]
Test Case: 345 | Input/Output: [(36 2 82 53) 2]
Test Case: 346 | Input/Output: [(12 74 37 98) 12]
Test Case: 347 | Input/Output: [(9 93 27 82) 9]
Test Case: 348 | Input/Output: [(31 26 39 52) 26]
Test Case: 349 | Input/Output: [(63 19 79 15) 15]
Test Case: 350 | Input/Output: [(68 67 23 81) 23]
Test Case: 351 | Input/Output: [(14 82 47 7) 7]
Test Case: 352 | Input/Output: [(47 39 87 97) 39]
Test Case: 353 | Input/Output: [(14 29 51 47) 14]
Test Case: 354 | Input/Output: [(13 13 26 5) 5]
Test Case: 355 | Input/Output: [(42 7 49 64) 7]
Test Case: 356 | Input/Output: [(28 48 19 32) 19]
Test Case: 357 | Input/Output: [(19 19 21 69) 19]
Test Case: 358 | Input/Output: [(14 4 58 20) 4]
Test Case: 359 | Input/Output: [(47 41 12 7) 7]
Test Case: 360 | Input/Output: [(43 92 27 19) 19]
Test Case: 361 | Input/Output: [(80 0 44 47) 0]
Test Case: 362 | Input/Output: [(57 3 85 12) 3]
Test Case: 363 | Input/Output: [(71 76 0 41) 0]
Test Case: 364 | Input/Output: [(93 30 64 29) 29]
Test Case: 365 | Input/Output: [(2 24 93 24) 2]
Test Case: 366 | Input/Output: [(41 79 99 52) 41]
Test Case: 367 | Input/Output: [(86 59 42 16) 16]
Test Case: 368 | Input/Output: [(1 99 7 84) 1]
Test Case: 369 | Input/Output: [(40 75 98 51) 40]
Test Case: 370 | Input/Output: [(58 60 40 72) 40]
Test Case: 371 | Input/Output: [(73 46 18 93) 18]
Test Case: 372 | Input/Output: [(13 10 83 27) 10]
Test Case: 373 | Input/Output: [(72 80 33 98) 33]
Test Case: 374 | Input/Output: [(52 28 99 14) 14]
Test Case: 375 | Input/Output: [(11 23 2 94) 2]
Test Case: 376 | Input/Output: [(48 37 26 59) 26]
Test Case: 377 | Input/Output: [(78 62 75 38) 38]
Test Case: 378 | Input/Output: [(8 66 14 38) 8]
Test Case: 379 | Input/Output: [(61 40 59 92) 40]
Test Case: 380 | Input/Output: [(78 83 38 100) 38]
Test Case: 381 | Input/Output: [(16 31 77 100) 16]
Test Case: 382 | Input/Output: [(6 17 32 8) 6]
Test Case: 383 | Input/Output: [(11 30 28 8) 8]
Test Case: 384 | Input/Output: [(39 94 5 15) 5]
Test Case: 385 | Input/Output: [(39 70 45 48) 39]
Test Case: 386 | Input/Output: [(49 22 38 18) 18]
Test Case: 387 | Input/Output: [(56 33 87 69) 33]
Test Case: 388 | Input/Output: [(61 8 78 60) 8]
Test Case: 389 | Input/Output: [(53 89 81 94) 53]
Test Case: 390 | Input/Output: [(61 81 56 88) 56]
Test Case: 391 | Input/Output: [(76 94 17 52) 17]
Test Case: 392 | Input/Output: [(81 12 40 48) 12]
Test Case: 393 | Input/Output: [(68 76 5 79) 5]
Test Case: 394 | Input/Output: [(36 74 75 13) 13]
Test Case: 395 | Input/Output: [(67 79 54 5) 5]
Test Case: 396 | Input/Output: [(70 5 67 87) 5]
Test Case: 397 | Input/Output: [(26 20 91 96) 20]
Test Case: 398 | Input/Output: [(39 49 10 9) 9]
Test Case: 399 | Input/Output: [(22 71 40 61) 22]
Test Case: 400 | Input/Output: [(36 70 52 -40) -40]
Test Case: 401 | Input/Output: [(77 0 -54 76) -54]
Test Case: 402 | Input/Output: [(59 93 -79 -65) -79]
Test Case: 403 | Input/Output: [(72 23 -35 -61) -61]
Test Case: 404 | Input/Output: [(62 54 28 -88) -88]
Test Case: 405 | Input/Output: [(2 47 28 18) 2]
Test Case: 406 | Input/Output: [(-31 14 78 -2) -31]
Test Case: 407 | Input/Output: [(-17 30 -54 -83) -83]
Test Case: 408 | Input/Output: [(55 76 36 100) 36]
Test Case: 409 | Input/Output: [(86 44 -67 42) -67]
Test Case: 410 | Input/Output: [(99 -46 86 92) -46]
Test Case: 411 | Input/Output: [(-27 -7 34 18) -27]
Test Case: 412 | Input/Output: [(75 -33 -35 15) -35]
Test Case: 413 | Input/Output: [(33 -67 -94 64) -94]
Test Case: 414 | Input/Output: [(99 -61 3 -89) -89]
Test Case: 415 | Input/Output: [(24 32 -75 -37) -75]
Test Case: 416 | Input/Output: [(-97 76 37 17) -97]
Test Case: 417 | Input/Output: [(52 -25 70 -69) -69]
Test Case: 418 | Input/Output: [(-69 -18 71 75) -69]
Test Case: 419 | Input/Output: [(-1 -23 80 -78) -78]
Test Case: 420 | Input/Output: [(64 -39 -15 -70) -70]
Test Case: 421 | Input/Output: [(-61 -31 -63 -18) -63]
Test Case: 422 | Input/Output: [(93 -1 -57 74) -57]
Test Case: 423 | Input/Output: [(-87 8 -16 -44) -87]
Test Case: 424 | Input/Output: [(-24 -26 35 43) -26]
Test Case: 425 | Input/Output: [(54 -89 14 -12) -89]
Test Case: 426 | Input/Output: [(69 -51 42 87) -51]
Test Case: 427 | Input/Output: [(-8 -21 -57 -20) -57]
Test Case: 428 | Input/Output: [(-96 -32 -3 5) -96]
Test Case: 429 | Input/Output: [(-100 -89 59 -7) -100]
Test Case: 430 | Input/Output: [(95 -69 32 95) -69]
Test Case: 431 | Input/Output: [(60 26 32 -87) -87]
Test Case: 432 | Input/Output: [(54 29 -85 80) -85]
Test Case: 433 | Input/Output: [(2 18 40 30) 2]
Test Case: 434 | Input/Output: [(-50 20 -91 -33) -91]
Test Case: 435 | Input/Output: [(-13 -100 -83 -52) -100]
Test Case: 436 | Input/Output: [(62 -34 -2 -40) -40]
Test Case: 437 | Input/Output: [(-99 29 98 99) -99]
Test Case: 438 | Input/Output: [(41 89 99 -33) -33]
Test Case: 439 | Input/Output: [(-12 -33 -26 83) -33]
Test Case: 440 | Input/Output: [(56 7 -40 50) -40]
Test Case: 441 | Input/Output: [(-44 -55 88 -56) -56]
Test Case: 442 | Input/Output: [(-22 -83 38 -51) -83]
Test Case: 443 | Input/Output: [(9 -93 -83 -9) -93]
Test Case: 444 | Input/Output: [(-20 45 49 -92) -92]
Test Case: 445 | Input/Output: [(93 11 -75 -66) -75]
Test Case: 446 | Input/Output: [(-74 -59 17 -86) -86]
Test Case: 447 | Input/Output: [(27 -65 85 61) -65]
Test Case: 448 | Input/Output: [(-37 64 19 -29) -37]
Test Case: 449 | Input/Output: [(79 -9 -22 72) -22]
Test Case: 450 | Input/Output: [(-68 51 86 35) -68]
Test Case: 451 | Input/Output: [(-97 45 -1 -7) -97]
Test Case: 452 | Input/Output: [(19 -74 -79 32) -79]
Test Case: 453 | Input/Output: [(52 3 37 -6) -6]
Test Case: 454 | Input/Output: [(-67 -93 91 34) -93]
Test Case: 455 | Input/Output: [(-64 -27 53 89) -64]
Test Case: 456 | Input/Output: [(-16 -60 -59 -55) -60]
Test Case: 457 | Input/Output: [(26 -89 17 -54) -89]
Test Case: 458 | Input/Output: [(-38 -1 -40 -46) -46]
Test Case: 459 | Input/Output: [(35 -88 -69 35) -88]
Test Case: 460 | Input/Output: [(-1 57 42 72) -1]
Test Case: 461 | Input/Output: [(-19 71 -65 -72) -72]
Test Case: 462 | Input/Output: [(-63 81 77 -96) -96]
Test Case: 463 | Input/Output: [(-100 63 92 1) -100]
Test Case: 464 | Input/Output: [(-4 -76 53 -9) -76]
Test Case: 465 | Input/Output: [(48 93 -56 83) -56]
Test Case: 466 | Input/Output: [(-91 -47 -13 -71) -91]
Test Case: 467 | Input/Output: [(96 -13 40 83) -13]
Test Case: 468 | Input/Output: [(-29 -93 -90 -62) -93]
Test Case: 469 | Input/Output: [(41 22 56 -23) -23]
Test Case: 470 | Input/Output: [(-96 -32 -19 -52) -96]
Test Case: 471 | Input/Output: [(40 74 21 -53) -53]
Test Case: 472 | Input/Output: [(84 96 -17 83) -17]
Test Case: 473 | Input/Output: [(-35 -79 -9 73) -79]
Test Case: 474 | Input/Output: [(59 65 -36 99) -36]
Test Case: 475 | Input/Output: [(95 76 -49 -93) -93]
Test Case: 476 | Input/Output: [(-64 88 4 66) -64]
Test Case: 477 | Input/Output: [(-23 -6 -88 -50) -88]
Test Case: 478 | Input/Output: [(96 -90 93 42) -90]
Test Case: 479 | Input/Output: [(63 99 3 -30) -30]
Test Case: 480 | Input/Output: [(-41 73 22 23) -41]
Test Case: 481 | Input/Output: [(59 -99 -15 -50) -99]
Test Case: 482 | Input/Output: [(-15 52 -56 76) -56]
Test Case: 483 | Input/Output: [(-27 -13 -73 -14) -73]
Test Case: 484 | Input/Output: [(100 7 -93 -56) -93]
Test Case: 485 | Input/Output: [(67 23 -45 35) -45]
Test Case: 486 | Input/Output: [(0 93 56 -62) -62]
Test Case: 487 | Input/Output: [(5 28 -18 -69) -69]
Test Case: 488 | Input/Output: [(-13 -50 88 71) -50]
Test Case: 489 | Input/Output: [(80 -96 92 61) -96]
Test Case: 490 | Input/Output: [(69 50 -97 -37) -97]
Test Case: 491 | Input/Output: [(14 -22 39 14) -22]
Test Case: 492 | Input/Output: [(89 -28 12 -71) -71]
Test Case: 493 | Input/Output: [(76 -62 -84 -32) -84]
Test Case: 494 | Input/Output: [(95 -99 -100 -71) -100]
Test Case: 495 | Input/Output: [(-3 -56 -56 -10) -56]
Test Case: 496 | Input/Output: [(-30 -34 34 47) -34]
Test Case: 497 | Input/Output: [(-76 14 -16 61) -76]
Test Case: 498 | Input/Output: [(-98 -46 -52 9) -98]
Test Case: 499 | Input/Output: [(15 55 55 -28) -28]
Test Case: 500 | Input/Output: [(11 62 13 -13) -13]
Test Case: 501 | Input/Output: [(65 74 9 50) 9]
Test Case: 502 | Input/Output: [(-81 -91 1 -85) -91]
Test Case: 503 | Input/Output: [(83 25 -14 19) -14]
Test Case: 504 | Input/Output: [(45 -53 -43 -97) -97]
Test Case: 505 | Input/Output: [(-45 60 54 -21) -45]
Test Case: 506 | Input/Output: [(-26 55 -87 2) -87]
Test Case: 507 | Input/Output: [(-16 62 94 -39) -39]
Test Case: 508 | Input/Output: [(32 -81 26 74) -81]
Test Case: 509 | Input/Output: [(5 16 69 -2) -2]
Test Case: 510 | Input/Output: [(-19 -2 -94 -93) -94]
Test Case: 511 | Input/Output: [(-57 -40 54 64) -57]
Test Case: 512 | Input/Output: [(-5 -45 33 -85) -85]
Test Case: 513 | Input/Output: [(-72 -70 -23 -37) -72]
Test Case: 514 | Input/Output: [(18 35 -62 74) -62]
Test Case: 515 | Input/Output: [(-37 82 -57 3) -57]
Test Case: 516 | Input/Output: [(-60 69 61 -11) -60]
Test Case: 517 | Input/Output: [(11 -14 60 -5) -14]
Test Case: 518 | Input/Output: [(68 34 -86 63) -86]
Test Case: 519 | Input/Output: [(-4 54 96 78) -4]
Test Case: 520 | Input/Output: [(14 -89 -22 50) -89]
Test Case: 521 | Input/Output: [(-92 66 49 95) -92]
Test Case: 522 | Input/Output: [(76 -6 69 73) -6]
Test Case: 523 | Input/Output: [(-71 -36 -82 23) -82]
Test Case: 524 | Input/Output: [(85 -96 -85 93) -96]
Test Case: 525 | Input/Output: [(6 65 -47 -77) -77]
Test Case: 526 | Input/Output: [(37 11 -93 -12) -93]
Test Case: 527 | Input/Output: [(62 3 -39 -41) -41]
Test Case: 528 | Input/Output: [(26 -41 -48 1) -48]
Test Case: 529 | Input/Output: [(-23 7 -95 85) -95]
Test Case: 530 | Input/Output: [(84 84 -9 -44) -44]
Test Case: 531 | Input/Output: [(5 -59 -41 -41) -59]
Test Case: 532 | Input/Output: [(-43 36 -39 -7) -43]
Test Case: 533 | Input/Output: [(78 -56 40 10) -56]
Test Case: 534 | Input/Output: [(11 63 36 -52) -52]
Test Case: 535 | Input/Output: [(-10 8 99 71) -10]
Test Case: 536 | Input/Output: [(12 67 21 -88) -88]
Test Case: 537 | Input/Output: [(-95 -46 -34 3) -95]
Test Case: 538 | Input/Output: [(82 -86 -13 -48) -86]
Test Case: 539 | Input/Output: [(72 80 47 -83) -83]
Test Case: 540 | Input/Output: [(-85 -26 -24 97) -85]
Test Case: 541 | Input/Output: [(-24 -27 85 -91) -91]
Test Case: 542 | Input/Output: [(-57 4 59 93) -57]
Test Case: 543 | Input/Output: [(-11 -69 -28 -12) -69]
Test Case: 544 | Input/Output: [(73 63 94 97) 63]
Test Case: 545 | Input/Output: [(-80 82 23 8) -80]
Test Case: 546 | Input/Output: [(-59 6 -94 -77) -94]
Test Case: 547 | Input/Output: [(-63 50 95 35) -63]
Test Case: 548 | Input/Output: [(11 80 -26 -98) -98]
Test Case: 549 | Input/Output: [(-78 -14 37 -57) -78]
Test Case: 550 | Input/Output: [(-89 58 98 -48) -89]
Test Case: 551 | Input/Output: [(93 81 8 -89) -89]
Test Case: 552 | Input/Output: [(63 -41 4 -31) -41]
Test Case: 553 | Input/Output: [(12 43 -81 27) -81]
Test Case: 554 | Input/Output: [(88 -69 -76 -70) -76]
Test Case: 555 | Input/Output: [(-44 -88 -19 44) -88]
Test Case: 556 | Input/Output: [(10 -88 -60 -73) -88]
Test Case: 557 | Input/Output: [(14 -50 -1 41) -50]
Test Case: 558 | Input/Output: [(34 28 -33 11) -33]
Test Case: 559 | Input/Output: [(4 22 23 3) 3]
Test Case: 560 | Input/Output: [(36 -33 -8 37) -33]
Test Case: 561 | Input/Output: [(65 -51 -34 10) -51]
Test Case: 562 | Input/Output: [(43 -31 19 -13) -31]
Test Case: 563 | Input/Output: [(34 98 63 1) 1]
Test Case: 564 | Input/Output: [(-23 22 -62 89) -62]
Test Case: 565 | Input/Output: [(47 -77 -58 -52) -77]
Test Case: 566 | Input/Output: [(77 25 66 -31) -31]
Test Case: 567 | Input/Output: [(-41 72 83 42) -41]
Test Case: 568 | Input/Output: [(30 66 -35 69) -35]
Test Case: 569 | Input/Output: [(44 -39 -42 -53) -53]
Test Case: 570 | Input/Output: [(39 11 52 87) 11]
Test Case: 571 | Input/Output: [(43 31 4 7) 4]
Test Case: 572 | Input/Output: [(-99 -68 -41 92) -99]
Test Case: 573 | Input/Output: [(-54 -13 -98 27) -98]
Test Case: 574 | Input/Output: [(31 -51 -32 -55) -55]
Test Case: 575 | Input/Output: [(50 40 45 -57) -57]
Test Case: 576 | Input/Output: [(-39 32 96 -88) -88]
Test Case: 577 | Input/Output: [(-92 15 -97 66) -97]
Test Case: 578 | Input/Output: [(58 -39 -42 -59) -59]
Test Case: 579 | Input/Output: [(-47 -6 -9 -96) -96]
Test Case: 580 | Input/Output: [(65 -80 8 30) -80]
Test Case: 581 | Input/Output: [(-28 -67 93 -56) -67]
Test Case: 582 | Input/Output: [(4 5 -47 -62) -62]
Test Case: 583 | Input/Output: [(82 73 -48 58) -48]
Test Case: 584 | Input/Output: [(-40 -11 40 34) -40]
Test Case: 585 | Input/Output: [(-50 51 58 -98) -98]
Test Case: 586 | Input/Output: [(-91 79 -9 -24) -91]
Test Case: 587 | Input/Output: [(50 -68 -38 22) -68]
Test Case: 588 | Input/Output: [(87 -59 -41 97) -59]
Test Case: 589 | Input/Output: [(-89 77 60 77) -89]
Test Case: 590 | Input/Output: [(-9 0 35 -82) -82]
Test Case: 591 | Input/Output: [(60 53 -2 -48) -48]
Test Case: 592 | Input/Output: [(92 61 -26 84) -26]
Test Case: 593 | Input/Output: [(-89 2 76 -79) -89]
Test Case: 594 | Input/Output: [(-4 19 69 -17) -17]
Test Case: 595 | Input/Output: [(-80 2 -51 -38) -80]
Test Case: 596 | Input/Output: [(69 73 -19 9) -19]
Test Case: 597 | Input/Output: [(-84 45 -58 90) -84]
Test Case: 598 | Input/Output: [(87 -83 -93 97) -93]
Test Case: 599 | Input/Output: [(49 -9 -70 88) -70]
Test Case: 600 | Input/Output: [(73 -85 -44 9) -85]
Test Case: 601 | Input/Output: [(-42 40 -97 -28) -97]
Test Case: 602 | Input/Output: [(-87 -97 100 46) -97]
Test Case: 603 | Input/Output: [(45 -85 -62 33) -85]
Test Case: 604 | Input/Output: [(-19 13 37 9) -19]
Test Case: 605 | Input/Output: [(42 40 86 -82) -82]
Test Case: 606 | Input/Output: [(-43 78 74 74) -43]
Test Case: 607 | Input/Output: [(14 -33 -75 60) -75]
Test Case: 608 | Input/Output: [(-16 -43 40 -33) -43]
Test Case: 609 | Input/Output: [(50 69 58 36) 36]
Test Case: 610 | Input/Output: [(-9 68 -85 100) -85]
Test Case: 611 | Input/Output: [(-91 -95 4 -56) -95]
Test Case: 612 | Input/Output: [(37 -53 16 21) -53]
Test Case: 613 | Input/Output: [(-73 99 -27 -43) -73]
Test Case: 614 | Input/Output: [(-22 60 -81 -26) -81]
Test Case: 615 | Input/Output: [(-4 -65 67 -95) -95]
Test Case: 616 | Input/Output: [(-18 40 52 63) -18]
Test Case: 617 | Input/Output: [(13 62 -5 -54) -54]
Test Case: 618 | Input/Output: [(-47 65 98 86) -47]
Test Case: 619 | Input/Output: [(7 -16 15 -35) -35]
Test Case: 620 | Input/Output: [(94 -82 3 -75) -82]
Test Case: 621 | Input/Output: [(-91 -4 -44 82) -91]
Test Case: 622 | Input/Output: [(6 -22 -25 -18) -25]
Test Case: 623 | Input/Output: [(-69 -83 -77 65) -83]
Test Case: 624 | Input/Output: [(35 5 77 -8) -8]
Test Case: 625 | Input/Output: [(83 18 61 -58) -58]
Test Case: 626 | Input/Output: [(-63 73 59 37) -63]
Test Case: 627 | Input/Output: [(-7 45 -55 44) -55]
Test Case: 628 | Input/Output: [(72 17 14 -93) -93]
Test Case: 629 | Input/Output: [(27 -68 -28 5) -68]
Test Case: 630 | Input/Output: [(4 98 -60 -80) -80]
Test Case: 631 | Input/Output: [(26 -20 -28 -15) -28]
Test Case: 632 | Input/Output: [(9 -21 -49 76) -49]
Test Case: 633 | Input/Output: [(-71 11 -72 -93) -93]
Test Case: 634 | Input/Output: [(-2 99 -72 -26) -72]
Test Case: 635 | Input/Output: [(-41 83 3 60) -41]
Test Case: 636 | Input/Output: [(8 40 60 -39) -39]
Test Case: 637 | Input/Output: [(34 86 -63 -78) -78]
Test Case: 638 | Input/Output: [(-86 90 -99 -74) -99]
Test Case: 639 | Input/Output: [(-25 3 -24 -18) -25]
Test Case: 640 | Input/Output: [(-95 -84 -59 96) -95]
Test Case: 641 | Input/Output: [(54 76 43 -60) -60]
Test Case: 642 | Input/Output: [(-42 86 18 -98) -98]
Test Case: 643 | Input/Output: [(-86 -17 58 34) -86]
Test Case: 644 | Input/Output: [(28 -24 18 -32) -32]
Test Case: 645 | Input/Output: [(60 37 4 -90) -90]
Test Case: 646 | Input/Output: [(94 26 -71 69) -71]
Test Case: 647 | Input/Output: [(-59 60 7 -56) -59]
Test Case: 648 | Input/Output: [(14 49 -99 -38) -99]
Test Case: 649 | Input/Output: [(-69 -28 -43 72) -69]
Test Case: 650 | Input/Output: [(73 -47 37 50) -47]
Test Case: 651 | Input/Output: [(-23 86 -36 -3) -36]
Test Case: 652 | Input/Output: [(97 -8 31 -49) -49]
Test Case: 653 | Input/Output: [(-12 14 -5 -18) -18]
Test Case: 654 | Input/Output: [(-50 91 93 -33) -50]
Test Case: 655 | Input/Output: [(68 -72 -13 44) -72]
Test Case: 656 | Input/Output: [(-95 -52 -30 80) -95]
Test Case: 657 | Input/Output: [(10 -7 -20 4) -20]
Test Case: 658 | Input/Output: [(6 47 16 -55) -55]
Test Case: 659 | Input/Output: [(49 28 -54 -50) -54]
Test Case: 660 | Input/Output: [(-43 15 37 75) -43]
Test Case: 661 | Input/Output: [(-75 17 -2 -59) -75]
Test Case: 662 | Input/Output: [(-51 14 -44 -17) -51]
Test Case: 663 | Input/Output: [(63 68 -69 82) -69]
Test Case: 664 | Input/Output: [(78 -92 -29 -14) -92]
Test Case: 665 | Input/Output: [(52 60 77 80) 52]
Test Case: 666 | Input/Output: [(81 97 -20 14) -20]
Test Case: 667 | Input/Output: [(-2 45 15 36) -2]
Test Case: 668 | Input/Output: [(-45 20 -78 -6) -78]
Test Case: 669 | Input/Output: [(60 -2 6 -97) -97]
Test Case: 670 | Input/Output: [(24 -21 39 -63) -63]
Test Case: 671 | Input/Output: [(9 68 -39 52) -39]
Test Case: 672 | Input/Output: [(-100 97 27 40) -100]
Test Case: 673 | Input/Output: [(-30 64 39 -2) -30]
Test Case: 674 | Input/Output: [(-17 100 -26 29) -26]
Test Case: 675 | Input/Output: [(79 79 23 96) 23]
Test Case: 676 | Input/Output: [(44 27 99 -72) -72]
Test Case: 677 | Input/Output: [(80 73 -53 27) -53]
Test Case: 678 | Input/Output: [(-62 51 63 27) -62]
Test Case: 679 | Input/Output: [(16 76 -36 -12) -36]
Test Case: 680 | Input/Output: [(79 94 -96 66) -96]
Test Case: 681 | Input/Output: [(-67 68 -100 23) -100]
Test Case: 682 | Input/Output: [(69 -93 -81 69) -93]
Test Case: 683 | Input/Output: [(96 -8 50 36) -8]
Test Case: 684 | Input/Output: [(-91 51 76 -60) -91]
Test Case: 685 | Input/Output: [(-95 46 12 91) -95]
Test Case: 686 | Input/Output: [(-29 -47 -85 -77) -85]
Test Case: 687 | Input/Output: [(1 -45 83 6) -45]
Test Case: 688 | Input/Output: [(-68 83 -43 45) -68]
Test Case: 689 | Input/Output: [(56 -56 -86 -20) -86]
Test Case: 690 | Input/Output: [(48 -63 10 31) -63]
Test Case: 691 | Input/Output: [(-87 84 -9 68) -87]
Test Case: 692 | Input/Output: [(79 -83 -20 -19) -83]
Test Case: 693 | Input/Output: [(59 89 72 16) 16]
Test Case: 694 | Input/Output: [(37 13 -70 33) -70]
Test Case: 695 | Input/Output: [(65 50 -91 24) -91]
Test Case: 696 | Input/Output: [(-42 27 -87 -88) -88]
Test Case: 697 | Input/Output: [(14 98 32 57) 14]
Test Case: 698 | Input/Output: [(92 18 -53 87) -53]
Test Case: 699 | Input/Output: [(-68 -9 -78 -81) -81]
Test Case: 700 | Input/Output: [(4 80 -14 -74) -74]
Test Case: 701 | Input/Output: [(5 39 15 91) 5]
Test Case: 702 | Input/Output: [(56 -72 17 41) -72]
Test Case: 703 | Input/Output: [(84 95 -40 -10) -40]
Test Case: 704 | Input/Output: [(9 33 -3 -53) -53]
Test Case: 705 | Input/Output: [(47 -45 -48 55) -48]
Test Case: 706 | Input/Output: [(-63 -14 54 36) -63]
Test Case: 707 | Input/Output: [(69 -94 9 92) -94]
Test Case: 708 | Input/Output: [(-91 92 -99 -13) -99]
Test Case: 709 | Input/Output: [(35 54 -19 -30) -30]
Test Case: 710 | Input/Output: [(-56 -35 -39 59) -56]
Test Case: 711 | Input/Output: [(-74 -13 -50 11) -74]
Test Case: 712 | Input/Output: [(32 9 97 -45) -45]
Test Case: 713 | Input/Output: [(84 23 -56 -32) -56]
Test Case: 714 | Input/Output: [(-21 49 12 -73) -73]
Test Case: 715 | Input/Output: [(-78 -62 -100 -75) -100]
Test Case: 716 | Input/Output: [(14 89 -35 16) -35]
Test Case: 717 | Input/Output: [(-13 -9 52 23) -13]
Test Case: 718 | Input/Output: [(36 -19 -73 -96) -96]
Test Case: 719 | Input/Output: [(-55 4 -4 -95) -95]
Test Case: 720 | Input/Output: [(51 18 -37 15) -37]
Test Case: 721 | Input/Output: [(90 -94 -67 -10) -94]
Test Case: 722 | Input/Output: [(-87 -59 97 -74) -87]
Test Case: 723 | Input/Output: [(32 -47 -1 97) -47]
Test Case: 724 | Input/Output: [(-68 74 57 91) -68]
Test Case: 725 | Input/Output: [(75 -71 87 62) -71]
Test Case: 726 | Input/Output: [(67 29 -69 -69) -69]
Test Case: 727 | Input/Output: [(38 -69 20 81) -69]
Test Case: 728 | Input/Output: [(-91 -66 84 -15) -91]
Test Case: 729 | Input/Output: [(-24 12 24 -54) -54]
Test Case: 730 | Input/Output: [(-82 7 -26 61) -82]
Test Case: 731 | Input/Output: [(78 36 7 54) 7]
Test Case: 732 | Input/Output: [(-95 -97 95 -83) -97]
Test Case: 733 | Input/Output: [(14 -95 4 -59) -95]
Test Case: 734 | Input/Output: [(-10 -64 -25 -37) -64]
Test Case: 735 | Input/Output: [(48 71 -64 -47) -64]
Test Case: 736 | Input/Output: [(-73 -54 -79 -72) -79]
Test Case: 737 | Input/Output: [(-48 -25 31 -24) -48]
Test Case: 738 | Input/Output: [(-36 -40 7 13) -40]
Test Case: 739 | Input/Output: [(71 68 -52 87) -52]
Test Case: 740 | Input/Output: [(45 -63 -50 -84) -84]
Test Case: 741 | Input/Output: [(-50 -44 12 -69) -69]
Test Case: 742 | Input/Output: [(-79 -30 -29 65) -79]
Test Case: 743 | Input/Output: [(44 -89 100 -78) -89]
Test Case: 744 | Input/Output: [(-28 11 16 16) -28]
Test Case: 745 | Input/Output: [(24 -4 5 -43) -43]
Test Case: 746 | Input/Output: [(83 47 28 72) 28]
Test Case: 747 | Input/Output: [(47 -33 -48 49) -48]
Test Case: 748 | Input/Output: [(74 -60 90 32) -60]
Test Case: 749 | Input/Output: [(-95 22 -19 79) -95]
Test Case: 750 | Input/Output: [(-51 92 50 92) -51]
Test Case: 751 | Input/Output: [(-69 82 25 0) -69]
Test Case: 752 | Input/Output: [(13 -55 58 -59) -59]
Test Case: 753 | Input/Output: [(42 -31 -33 -51) -51]
Test Case: 754 | Input/Output: [(-70 26 -57 -68) -70]
Test Case: 755 | Input/Output: [(37 -42 19 -73) -73]
Test Case: 756 | Input/Output: [(-7 -35 -43 48) -43]
Test Case: 757 | Input/Output: [(-19 -81 46 -75) -81]
Test Case: 758 | Input/Output: [(5 67 62 94) 5]
Test Case: 759 | Input/Output: [(-50 9 8 -77) -77]
Test Case: 760 | Input/Output: [(-48 -59 -43 -50) -59]
Test Case: 761 | Input/Output: [(-60 20 78 -54) -60]
Test Case: 762 | Input/Output: [(17 -11 48 -25) -25]
Test Case: 763 | Input/Output: [(70 -19 19 -97) -97]
Test Case: 764 | Input/Output: [(18 91 -61 48) -61]
Test Case: 765 | Input/Output: [(-30 17 -63 30) -63]
Test Case: 766 | Input/Output: [(28 82 49 -49) -49]
Test Case: 767 | Input/Output: [(79 -84 1 78) -84]
Test Case: 768 | Input/Output: [(-62 63 -37 -14) -62]
Test Case: 769 | Input/Output: [(30 59 96 -61) -61]
Test Case: 770 | Input/Output: [(22 56 39 -57) -57]
Test Case: 771 | Input/Output: [(-49 -96 -66 93) -96]
Test Case: 772 | Input/Output: [(71 87 68 69) 68]
Test Case: 773 | Input/Output: [(-99 -97 -2 -72) -99]
Test Case: 774 | Input/Output: [(-16 -38 -33 -89) -89]
Test Case: 775 | Input/Output: [(62 23 -74 81) -74]
Test Case: 776 | Input/Output: [(100 -64 -68 -41) -68]
Test Case: 777 | Input/Output: [(60 -84 39 58) -84]
Test Case: 778 | Input/Output: [(-12 -82 -85 -75) -85]
Test Case: 779 | Input/Output: [(-26 -60 75 50) -60]
Test Case: 780 | Input/Output: [(-64 97 56 40) -64]
Test Case: 781 | Input/Output: [(95 -100 -84 96) -100]
Test Case: 782 | Input/Output: [(-60 -1 -22 -32) -60]
Test Case: 783 | Input/Output: [(-3 -75 22 -48) -75]
Test Case: 784 | Input/Output: [(-69 -62 -15 -5) -69]
Test Case: 785 | Input/Output: [(11 -80 30 64) -80]
Test Case: 786 | Input/Output: [(-76 13 -43 -53) -76]
Test Case: 787 | Input/Output: [(-36 -64 93 -6) -64]
Test Case: 788 | Input/Output: [(84 45 21 -8) -8]
Test Case: 789 | Input/Output: [(11 -69 13 90) -69]
Test Case: 790 | Input/Output: [(7 39 46 28) 7]
Test Case: 791 | Input/Output: [(-86 -33 -13 -10) -86]
Test Case: 792 | Input/Output: [(-3 85 -61 -60) -61]
Test Case: 793 | Input/Output: [(-77 73 63 23) -77]
Test Case: 794 | Input/Output: [(42 1 -38 55) -38]
Test Case: 795 | Input/Output: [(-59 -16 15 40) -59]
Test Case: 796 | Input/Output: [(-72 89 -59 94) -72]
Test Case: 797 | Input/Output: [(16 -78 94 -43) -78]
Test Case: 798 | Input/Output: [(-43 -7 11 59) -43]
Test Case: 799 | Input/Output: [(60 39 -29 -64) -64]
Test Case: 800 | Input/Output: [(-8 31 91 -70) -70]
Test Case: 801 | Input/Output: [(87 -18 73 2) -18]
Test Case: 802 | Input/Output: [(-38 -44 -61 14) -61]
Test Case: 803 | Input/Output: [(77 54 3 60) 3]
Test Case: 804 | Input/Output: [(-8 10 -15 49) -15]
Test Case: 805 | Input/Output: [(-35 -65 -94 -21) -94]
Test Case: 806 | Input/Output: [(-95 -36 -80 58) -95]
Test Case: 807 | Input/Output: [(-26 -59 -55 -48) -59]
Test Case: 808 | Input/Output: [(-14 -24 -90 95) -90]
Test Case: 809 | Input/Output: [(-98 -32 60 12) -98]
Test Case: 810 | Input/Output: [(96 -48 -33 -48) -48]
Test Case: 811 | Input/Output: [(-45 60 -11 84) -45]
Test Case: 812 | Input/Output: [(77 -78 -75 27) -78]
Test Case: 813 | Input/Output: [(32 8 -67 -91) -91]
Test Case: 814 | Input/Output: [(-57 -64 -4 -81) -81]
Test Case: 815 | Input/Output: [(-43 -84 45 68) -84]
Test Case: 816 | Input/Output: [(3 59 85 37) 3]
Test Case: 817 | Input/Output: [(86 94 84 37) 37]
Test Case: 818 | Input/Output: [(-38 77 -69 93) -69]
Test Case: 819 | Input/Output: [(-84 -21 46 42) -84]
Test Case: 820 | Input/Output: [(35 -59 -63 75) -63]
Test Case: 821 | Input/Output: [(58 -10 49 -52) -52]
Test Case: 822 | Input/Output: [(-43 72 -5 -5) -43]
Test Case: 823 | Input/Output: [(69 -83 -18 -10) -83]
Test Case: 824 | Input/Output: [(22 27 -40 58) -40]
Test Case: 825 | Input/Output: [(-13 5 -61 55) -61]
Test Case: 826 | Input/Output: [(80 33 -21 -24) -24]
Test Case: 827 | Input/Output: [(-49 98 59 -94) -94]
Test Case: 828 | Input/Output: [(-98 62 -32 -44) -98]
Test Case: 829 | Input/Output: [(-44 -58 -51 63) -58]
Test Case: 830 | Input/Output: [(-76 87 -65 -53) -76]
Test Case: 831 | Input/Output: [(29 57 99 96) 29]
Test Case: 832 | Input/Output: [(-76 -1 89 -60) -76]
Test Case: 833 | Input/Output: [(6 32 85 99) 6]
Test Case: 834 | Input/Output: [(-13 19 79 38) -13]
Test Case: 835 | Input/Output: [(100 -52 81 -68) -68]
Test Case: 836 | Input/Output: [(-96 -39 -56 -58) -96]
Test Case: 837 | Input/Output: [(-33 -68 72 63) -68]
Test Case: 838 | Input/Output: [(-19 23 -25 -100) -100]
Test Case: 839 | Input/Output: [(-30 -75 -75 -64) -75]
Test Case: 840 | Input/Output: [(54 40 -62 86) -62]
Test Case: 841 | Input/Output: [(-93 -35 -75 89) -93]
Test Case: 842 | Input/Output: [(-59 -54 -48 97) -59]
Test Case: 843 | Input/Output: [(-87 -82 -46 99) -87]
Test Case: 844 | Input/Output: [(-77 72 -69 18) -77]
Test Case: 845 | Input/Output: [(47 54 -78 41) -78]
Test Case: 846 | Input/Output: [(-53 4 34 -79) -79]
Test Case: 847 | Input/Output: [(-14 -83 44 -57) -83]
Test Case: 848 | Input/Output: [(-87 100 52 -75) -87]
Test Case: 849 | Input/Output: [(87 -86 -16 -51) -86]
Test Case: 850 | Input/Output: [(65 -100 -1 -67) -100]
Test Case: 851 | Input/Output: [(-87 7 91 88) -87]
Test Case: 852 | Input/Output: [(-1 -98 69 7) -98]
Test Case: 853 | Input/Output: [(-10 -58 94 -97) -97]
Test Case: 854 | Input/Output: [(-42 26 93 -36) -42]
Test Case: 855 | Input/Output: [(-49 1 -73 -11) -73]
Test Case: 856 | Input/Output: [(2 -44 46 3) -44]
Test Case: 857 | Input/Output: [(48 22 -38 -30) -38]
Test Case: 858 | Input/Output: [(24 62 -61 7) -61]
Test Case: 859 | Input/Output: [(-81 -14 34 9) -81]
Test Case: 860 | Input/Output: [(-63 -68 -72 -75) -75]
Test Case: 861 | Input/Output: [(-32 77 -54 -55) -55]
Test Case: 862 | Input/Output: [(33 7 22 32) 7]
Test Case: 863 | Input/Output: [(-15 -55 -15 -49) -55]
Test Case: 864 | Input/Output: [(-36 -9 -38 94) -38]
Test Case: 865 | Input/Output: [(10 17 14 34) 10]
Test Case: 866 | Input/Output: [(-3 92 67 65) -3]
Test Case: 867 | Input/Output: [(37 54 98 -20) -20]
Test Case: 868 | Input/Output: [(99 -4 -83 -63) -83]
Test Case: 869 | Input/Output: [(-94 64 15 -83) -94]
Test Case: 870 | Input/Output: [(-46 -86 -64 -55) -86]
Test Case: 871 | Input/Output: [(87 -82 -54 60) -82]
Test Case: 872 | Input/Output: [(-53 62 -12 80) -53]
Test Case: 873 | Input/Output: [(-80 -24 -94 -17) -94]
Test Case: 874 | Input/Output: [(-81 -72 5 -16) -81]
Test Case: 875 | Input/Output: [(-11 -33 50 -77) -77]
Test Case: 876 | Input/Output: [(-98 62 77 -95) -98]
Test Case: 877 | Input/Output: [(-68 -39 -94 29) -94]
Test Case: 878 | Input/Output: [(100 21 -10 2) -10]
Test Case: 879 | Input/Output: [(-23 37 -83 -62) -83]
Test Case: 880 | Input/Output: [(-51 84 68 50) -51]
Test Case: 881 | Input/Output: [(-86 95 -62 -32) -86]
Test Case: 882 | Input/Output: [(22 93 -33 66) -33]
Test Case: 883 | Input/Output: [(53 -52 -82 -29) -82]
Test Case: 884 | Input/Output: [(77 -82 -67 -77) -82]
Test Case: 885 | Input/Output: [(-83 18 1 55) -83]
Test Case: 886 | Input/Output: [(-69 -48 65 -52) -69]
Test Case: 887 | Input/Output: [(-42 -58 7 81) -58]
Test Case: 888 | Input/Output: [(96 -44 -46 12) -46]
Test Case: 889 | Input/Output: [(-2 -13 8 -97) -97]
Test Case: 890 | Input/Output: [(-85 96 73 -93) -93]
Test Case: 891 | Input/Output: [(-89 -11 -33 -69) -89]
Test Case: 892 | Input/Output: [(87 13 -93 96) -93]
Test Case: 893 | Input/Output: [(12 39 52 37) 12]
Test Case: 894 | Input/Output: [(-51 -78 -5 -67) -78]
Test Case: 895 | Input/Output: [(-58 -29 32 91) -58]
Test Case: 896 | Input/Output: [(-62 -50 91 -17) -62]
Test Case: 897 | Input/Output: [(97 9 44 71) 9]
Test Case: 898 | Input/Output: [(37 43 49 26) 26]
Test Case: 899 | Input/Output: [(52 -83 -48 5) -83]
Test Case: 900 | Input/Output: [(80 -100 -87 92) -100]
Test Case: 901 | Input/Output: [(-39 14 69 -61) -61]
Test Case: 902 | Input/Output: [(-19 -29 68 -81) -81]
Test Case: 903 | Input/Output: [(-71 -60 35 82) -71]
Test Case: 904 | Input/Output: [(-98 -30 -26 -43) -98]
Test Case: 905 | Input/Output: [(49 33 -96 77) -96]
Test Case: 906 | Input/Output: [(-52 -57 -79 47) -79]
Test Case: 907 | Input/Output: [(75 -88 32 -62) -88]
Test Case: 908 | Input/Output: [(-82 -23 2 28) -82]
Test Case: 909 | Input/Output: [(39 -60 62 84) -60]
Test Case: 910 | Input/Output: [(66 95 -95 -32) -95]
Test Case: 911 | Input/Output: [(-99 17 -55 77) -99]
Test Case: 912 | Input/Output: [(-76 71 58 -89) -89]
Test Case: 913 | Input/Output: [(32 4 100 74) 4]
Test Case: 914 | Input/Output: [(9 52 13 73) 9]
Test Case: 915 | Input/Output: [(68 82 73 -20) -20]
Test Case: 916 | Input/Output: [(-17 -86 -41 87) -86]
Test Case: 917 | Input/Output: [(-43 -55 41 41) -55]
Test Case: 918 | Input/Output: [(13 11 -37 -2) -37]
Test Case: 919 | Input/Output: [(-9 84 -11 -33) -33]
Test Case: 920 | Input/Output: [(-99 79 -52 31) -99]
Test Case: 921 | Input/Output: [(54 90 -35 37) -35]
Test Case: 922 | Input/Output: [(77 89 -76 93) -76]
Test Case: 923 | Input/Output: [(34 63 -68 21) -68]
Test Case: 924 | Input/Output: [(11 -31 8 52) -31]
Test Case: 925 | Input/Output: [(-51 -73 43 86) -73]
Test Case: 926 | Input/Output: [(26 85 -80 -8) -80]
Test Case: 927 | Input/Output: [(-31 -17 -39 90) -39]
Test Case: 928 | Input/Output: [(95 -54 87 -38) -54]
Test Case: 929 | Input/Output: [(8 -45 100 36) -45]
Test Case: 930 | Input/Output: [(-19 65 -80 -18) -80]
Test Case: 931 | Input/Output: [(-32 55 -9 -63) -63]
Test Case: 932 | Input/Output: [(100 -14 63 44) -14]
Test Case: 933 | Input/Output: [(-52 43 -28 -65) -65]
Test Case: 934 | Input/Output: [(34 -64 -74 15) -74]
Test Case: 935 | Input/Output: [(84 70 -88 95) -88]
Test Case: 936 | Input/Output: [(-35 83 -27 89) -35]
Test Case: 937 | Input/Output: [(-57 79 -13 -97) -97]
Test Case: 938 | Input/Output: [(-69 -76 -58 -98) -98]
Test Case: 939 | Input/Output: [(64 17 -97 10) -97]
Test Case: 940 | Input/Output: [(-57 -61 -1 -47) -61]
Test Case: 941 | Input/Output: [(-27 78 72 -2) -27]
Test Case: 942 | Input/Output: [(63 -20 6 -18) -20]
Test Case: 943 | Input/Output: [(-72 6 99 -36) -72]
Test Case: 944 | Input/Output: [(2 -7 -4 49) -7]
Test Case: 945 | Input/Output: [(-25 38 -92 24) -92]
Test Case: 946 | Input/Output: [(-29 -36 -27 -84) -84]
Test Case: 947 | Input/Output: [(93 48 29 -68) -68]
Test Case: 948 | Input/Output: [(77 1 -65 8) -65]
Test Case: 949 | Input/Output: [(79 39 41 95) 39]
Test Case: 950 | Input/Output: [(-51 72 87 17) -51]
Test Case: 951 | Input/Output: [(-4 48 41 -70) -70]
Test Case: 952 | Input/Output: [(-33 -99 87 -92) -99]
Test Case: 953 | Input/Output: [(-19 12 -58 -77) -77]
Test Case: 954 | Input/Output: [(25 -9 29 79) -9]
Test Case: 955 | Input/Output: [(-70 -48 -57 36) -70]
Test Case: 956 | Input/Output: [(35 100 100 0) 0]
Test Case: 957 | Input/Output: [(79 5 -52 -53) -53]
Test Case: 958 | Input/Output: [(11 28 47 -25) -25]
Test Case: 959 | Input/Output: [(83 -42 4 85) -42]
Test Case: 960 | Input/Output: [(15 -79 1 -44) -79]
Test Case: 961 | Input/Output: [(69 -82 35 -83) -83]
Test Case: 962 | Input/Output: [(38 -32 10 70) -32]
Test Case: 963 | Input/Output: [(33 -31 -68 -71) -71]
Test Case: 964 | Input/Output: [(-41 -41 -20 53) -41]
Test Case: 965 | Input/Output: [(60 30 -6 10) -6]
Test Case: 966 | Input/Output: [(-30 -2 58 -33) -33]
Test Case: 967 | Input/Output: [(-28 34 -85 -22) -85]
Test Case: 968 | Input/Output: [(11 -20 -10 24) -20]
Test Case: 969 | Input/Output: [(82 19 7 29) 7]
Test Case: 970 | Input/Output: [(99 69 93 71) 69]
Test Case: 971 | Input/Output: [(63 49 -95 -73) -95]
Test Case: 972 | Input/Output: [(-62 -27 -3 -43) -62]
Test Case: 973 | Input/Output: [(-24 4 10 -73) -73]
Test Case: 974 | Input/Output: [(40 52 -100 16) -100]
Test Case: 975 | Input/Output: [(-70 -4 -76 37) -76]
Test Case: 976 | Input/Output: [(-53 -78 34 94) -78]
Test Case: 977 | Input/Output: [(-50 -60 -74 52) -74]
Test Case: 978 | Input/Output: [(59 13 10 0) 0]
Test Case: 979 | Input/Output: [(68 8 8 -65) -65]
Test Case: 980 | Input/Output: [(-14 34 -89 -99) -99]
Test Case: 981 | Input/Output: [(-40 63 54 -88) -88]
Test Case: 982 | Input/Output: [(-62 64 7 93) -62]
Test Case: 983 | Input/Output: [(7 3 27 64) 3]
Test Case: 984 | Input/Output: [(97 86 -45 33) -45]
Test Case: 985 | Input/Output: [(-65 -71 -46 -34) -71]
Test Case: 986 | Input/Output: [(-57 -48 60 -54) -57]
Test Case: 987 | Input/Output: [(84 51 -78 17) -78]
Test Case: 988 | Input/Output: [(-87 73 -62 -84) -87]
Test Case: 989 | Input/Output: [(58 7 -10 76) -10]
Test Case: 990 | Input/Output: [(-90 81 73 -29) -90]
Test Case: 991 | Input/Output: [(85 83 92 14) 14]
Test Case: 992 | Input/Output: [(65 54 -73 -76) -76]
Test Case: 993 | Input/Output: [(77 -99 99 22) -99]
Test Case: 994 | Input/Output: [(1 -93 39 -67) -93]
Test Case: 995 | Input/Output: [(-51 -47 -76 -24) -76]
Test Case: 996 | Input/Output: [(92 -24 1 75) -24]
Test Case: 997 | Input/Output: [(28 -92 20 -32) -92]
Test Case: 998 | Input/Output: [(87 92 -80 80) -80]
Test Case: 999 | Input/Output: [(-24 33 -25 85) -25]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -116 -29 127 -23 -82 -25 26 53 63 -48 124 100 82 95 104 -91
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-39 -39 -39 -11] -39] [[14 14 72 14] 14] [[18 18 -78 18] -78] [[51 51 51 -90] -90] [[-69 -69 -69 -95] -95] [[-2 19 19 19] -2] [[-85 -85 81 -85] -85] [[7 7 -49 7] -49] [[19 -82 19 19] -82] [[95 -84 95 95] -84] [(38 38 38 38) 38] [(84 84 84 84) 84] [(-64 -64 -64 -64) -64] [(-33 -33 -33 -33) -33] [(29 29 29 29) 29] [(89 17 39 89) 17] [(12 95 87 34) 12] [(32 43 58 20) 20] [(79 40 79 16) 16] [(54 37 91 17) 17] [(48 5 19 56) 5] [(62 5 100 35) 5] [(79 40 89 93) 40] [(0 77 45 79) 0] [(32 45 81 2) 2] [(73 58 74 85) 58] [(70 62 86 89) 62] [(27 84 60 62) 27] [(83 38 29 65) 29] [(6 58 39 68) 6] [(68 1 69 23) 1] [(65 5 66 52) 5] [(12 82 51 53) 12] [(49 59 82 70) 49] [(67 15 51 46) 15] [(39 83 -100 60) -100] [(-77 -25 50 72) -77] [(93 69 -79 -36) -79] [(70 -31 -98 -76) -98] [(68 12 3 -45) -45] [(-5 -70 85 92) -70] [(60 -37 -76 44) -76] [(-97 -30 -84 36) -97] [(28 -63 -58 22) -63] [(-11 -36 -91 91) -91] [(87 -29 31 -42) -42] [(95 -40 49 33) -40] [(7 23 59 15) 7] [(36 96 -79 -53) -79] [(-44 -66 91 -54) -66] [(53 26 97 -26) -26] [(-76 -9 23 89) -76] [(28 22 -39 -39) -39] [(-63 3 78 23) -63] [(-41 -95 -74 -42) -95] [(-65 -1 -26 -17) -65] [(100 -12 18 -9) -12] [(-71 21 6 70) -71] [(-9 -72 25 -11) -72] [(-10 13 84 -40) -40] [(57 85 -49 41) -49] [(51 72 -45 70) -45] [(-5 -73 -59 71) -73] [(-19 -45 -70 62) -70] [(-44 -5 75 -56) -56] [(19 73 -59 -9) -59] [(-67 -100 -94 -84) -100] [(75 -89 100 50) -89] [(96 -72 -2 18) -72] [(-67 99 -33 -27) -67] [(13 30 17 -94) -94] [(48 80 26 -68) -68] [(-4 -100 -75 -99) -100] [(-39 49 9 21) -39] [(-48 -12 -3 -80) -80] [(-63 94 60 43) -63] [(-26 -20 80 24) -26] [(-48 56 -6 -54) -54] [(-50 -9 48 43) -50] [(27 70 -43 75) -43] [(-8 -89 53 50) -89] [(-49 -15 62 52) -49] [(-100 12 18 94) -100] [(9 -78 49 -99) -99] [(18 31 -55 75) -55] [(14 40 75 40) 14] [(-49 -49 32 -42) -49] [(74 -7 -93 99) -93] [(-89 -89 28 -23) -89] [(27 -46 -89 -1) -89] [(7 -24 -2 -4) -24] [(-16 -52 55 51) -52] [(-17 4 -9 -59) -59] [(-45 51 72 55) -45] [(-90 76 -15 80) -90])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -11                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 56                 
Correct output: 5                   | Program output: 35                 
Correct output: 40                  | Program output: 93                 
Correct output: 0                   | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 85                 
Correct output: 62                  | Program output: 89                 
Correct output: 27                  | Program output: 62                 
Correct output: 29                  | Program output: 65                 
Correct output: 6                   | Program output: 68                 
Correct output: 1                   | Program output: 23                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 53                 
Correct output: 49                  | Program output: 70                 
Correct output: 15                  | Program output: 46                 
Correct output: -100                | Program output: 60                 
Correct output: -77                 | Program output: 72                 
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 92                 
Correct output: -76                 | Program output: 44                 
Correct output: -97                 | Program output: 36                 
Correct output: -63                 | Program output: 22                 
Correct output: -91                 | Program output: 91                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: 33                 
Correct output: 7                   | Program output: 15                 
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: 89                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 23                 
Correct output: -95                 | Program output: -42                
Correct output: -65                 | Program output: -17                
Correct output: -12                 | Program output: -9                 
Correct output: -71                 | Program output: 70                 
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 70                 
Correct output: -73                 | Program output: 71                 
Correct output: -70                 | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -89                 | Program output: 50                 
Correct output: -72                 | Program output: 18                 
Correct output: -67                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: 21                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: 43                 
Correct output: -26                 | Program output: 24                 
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: 43                 
Correct output: -43                 | Program output: 75                 
Correct output: -89                 | Program output: 50                 
Correct output: -49                 | Program output: 52                 
Correct output: -100                | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 75                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -42                
Correct output: -93                 | Program output: 99                 
Correct output: -89                 | Program output: -23                
Correct output: -89                 | Program output: -1                 
Correct output: -24                 | Program output: -4                 
Correct output: -52                 | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: 55                 
Correct output: -90                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_empty boolean_yank exec_when () exec_y_when_autoconstructing (exec_swap () () integer_dec) boolean_dup_items boolean_dup_items integer_fromboolean boolean_not boolean_xor integer_inc boolean_or exec_if (boolean_and integer_gte) (boolean_yank integer_lt) exec_if (boolean_invert_second_then_and) (integer_gte integer_min integer_add exec_y_when_autoconstructing (integer_yank in4 exec_pop (boolean_flush)) exec_eq boolean_swap exec_dup_times (print_integer boolean_eq integer_add) exec_flush integer_stackdepth) exec_rot (boolean_flush exec_yankdup exec_do*range (boolean_and exec_do*count (print_boolean boolean_pop exec_dup () in3 boolean_yankdup in4 integer_sub))) () ())
Lexicase best errors: [1 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_empty boolean_yank exec_when () exec_y_when_autoconstructing (exec_swap () () integer_dec) boolean_dup_items boolean_dup_items integer_fromboolean boolean_not boolean_xor integer_inc boolean_or exec_if (boolean_and integer_gte) (boolean_yank integer_lt) exec_if (boolean_invert_second_then_and) (integer_gte integer_min integer_add exec_y_when_autoconstructing (integer_yank in4 exec_pop (boolean_flush)) exec_eq boolean_swap exec_dup_times (print_integer boolean_eq integer_add) exec_flush integer_stackdepth) exec_rot (boolean_flush exec_yankdup exec_do*range (boolean_and exec_do*count (print_boolean boolean_pop exec_dup () in3 boolean_yankdup in4 integer_sub))) () ())
Zero cases best errors: [1 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 4 5 5 1000 4 1000 1000 5 3)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (5 4 5 5 0 4 0 0 5 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_107} {:close 0, :instruction exec_while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean})
Best program: (boolean_pop integer_swap integer_yankdup boolean_dup_times integer_yank integer_lte exec_k () (boolean_yankdup boolean_dup_items exec_dup_times (boolean_dup_times exec_shove (integer_max exec_flush) boolean_eq)) print_boolean integer_swap boolean_frominteger boolean_invert_second_then_and exec_empty exec_yank exec_do*range (exec_dup (integer_fromboolean) integer_stackdepth integer_stackdepth integer_swap exec_while (integer_min boolean_yank tag_boolean_107) exec_while (integer_stackdepth) boolean_eq boolean_dup) boolean_dup_times integer_rot boolean_invert_first_then_and boolean_dup_items exec_swap () (integer_stackdepth boolean_pop boolean_dup_times print_boolean) integer_max boolean_dup exec_shove (exec_shove (integer_sub integer_sub exec_while (integer_dup_times boolean_swap boolean_invert_first_then_and boolean_dup integer_shove integer_shove integer_dec boolean_flush) boolean_invert_second_then_and boolean_dup) exec_do*times (in4) integer_mod integer_shove print_integer boolean_rot integer_stackdepth) integer_fromboolean)
Errors: [1 0 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 69
Size: 84
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 9.969
Median total errors in population: 10
Error averages by case: (0.995 0.996 0.995 0.995 1.0 0.996 1.0 1.0 0.995 0.997)
Error minima by case: (0 0 0 0 1 0 1 1 0 0)
Average genome size in population (length): 50.524
Average program size in population (points): 69.776
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 482601
--- Timings ---
Current time: 1559314645192 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 29.3%
Fitness Testing:      1.7 seconds, 66.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 68                 
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: 70                 
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 28                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: 87                 
Correct output: -40                 | Program output: 95                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -44                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -9                 
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -44                
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: 75                 
Correct output: -72                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: 9                  
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: 27                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction -41} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_exec})
Lexicase best program: (-41 boolean_swap boolean_stackdepth exec_k_when_autoconstructing (integer_eq exec_do*range (in3 boolean_frominteger exec_dup_items exec_s () (exec_dup_items exec_stackdepth integer_yankdup in1 exec_empty integer_fromboolean integer_div exec_yank print_integer) (boolean_flush) integer_dup_times boolean_swap integer_div exec_while (in1 exec_empty exec_k (boolean_eq print_exec ()) ()))) ())
Lexicase best errors: [1 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction -41} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_exec})
Zero cases best program: (-41 boolean_swap boolean_stackdepth exec_k_when_autoconstructing (integer_eq exec_do*range (in3 boolean_frominteger exec_dup_items exec_s () (exec_dup_items exec_stackdepth integer_yankdup in1 exec_empty integer_fromboolean integer_div exec_yank print_integer) (boolean_flush) integer_dup_times boolean_swap integer_div exec_while (in1 exec_empty exec_k (boolean_eq print_exec ()) ()))) ())
Zero cases best errors: [1 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 405 2 405 1000 403 1000 404 403 405)
Population mean number of elite cases: 5.43
Count of perfect (error zero) individuals by case: (0 405 2 405 0 403 0 404 403 405)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction tag_boolean_750} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 2, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Best program: (in1 integer_add exec_k_when_autoconstructing (exec_dup () tag_boolean_750 boolean_dup_times integer_lte print_integer) () exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_do*range (in4 in1 boolean_swap) boolean_or exec_when (exec_yankdup boolean_frominteger) boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and boolean_and exec_empty integer_mult exec_rot () (exec_shove (boolean_frominteger exec_rot () (integer_max print_newline) (integer_mod exec_while (boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_noop integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush) integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items)) exec_yank integer_lte exec_s (integer_gt exec_pop (exec_s (exec_y (exec_s () () (integer_lte) integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_noop integer_mult tagged_827 exec_yankdup) () ())) () ()) ())
Errors: [1 0 1 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 96
Size: 130
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.573
Median total errors in population: 7
Error averages by case: (1.0 0.595 0.998 0.595 1.0 0.597 1.0 0.596 0.597 0.595)
Error minima by case: (1 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 52.382
Average program size in population (points): 72.487
Average percent parens in population: 0.284
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.498
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.003
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 905309
--- Timings ---
Current time: 1559314648013 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 44.5%
Fitness Testing:      2.3 seconds, 43.6%
Report:               0.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 68                 
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: 70                 
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 28                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: 87                 
Correct output: -40                 | Program output: 95                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -44                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -9                 
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -44                
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: 75                 
Correct output: -72                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: 9                  
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: 27                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_yank boolean_frominteger boolean_or integer_lte in1 print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (exec_yankdup)) ()) ())
Lexicase best errors: [1 1 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 20
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_yank boolean_frominteger boolean_or integer_lte in1 print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (exec_yankdup)) ()) ())
Zero cases best errors: [1 1 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 20
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 378 715 1000 380 339 1000 1000)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (0 0 0 378 715 0 380 339 0 0)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction tag_boolean_750} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 2, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Best program: (in1 integer_add exec_k_when_autoconstructing (exec_dup () tag_boolean_750 boolean_dup_times integer_lte print_integer) () exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_do*range (in4 in1 boolean_swap) boolean_or exec_when (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and) boolean_and exec_empty integer_mult exec_rot () (exec_shove (boolean_frominteger exec_rot () (integer_max print_newline) (integer_mod exec_while (boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_noop integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items)) exec_yank) integer_lte exec_s (integer_gt exec_pop (exec_s (exec_y (exec_s () () (integer_lte integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_noop integer_mult tagged_827 exec_yankdup)) () ())) () ()) ())
Errors: [1 1 1 0 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 96
Size: 130
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 8.188
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 0.622 0.285 1.0 0.62 0.661 1.0 1.0)
Error minima by case: (1 1 1 0 0 1 0 0 1 1)
Average genome size in population (length): 53.132
Average program size in population (points): 72.423
Average percent parens in population: 0.274
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0565
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1325519
--- Timings ---
Current time: 1559314651047 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 51.6%
Fitness Testing:      2.9 seconds, 34.1%
Report:               1.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 68                 
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: 70                 
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 28                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: 87                 
Correct output: -40                 | Program output: 95                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -44                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -9                 
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -44                
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: 75                 
Correct output: -72                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: 9                  
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: 27                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger boolean_or integer_lte in1 print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ())
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger boolean_or integer_lte in1 print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ())
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 621 1000 622 621 257 1000 625 619)
Population mean number of elite cases: 7.36
Count of perfect (error zero) individuals by case: (0 0 621 0 622 621 257 0 625 619)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub})
Best program: (in1 integer_div integer_mult print_integer exec_y () in3 exec_swap (exec_s_when_autoconstructing (boolean_invert_first_then_and exec_k_when_autoconstructing (integer_eq exec_do*range (in3 boolean_frominteger exec_dup_items exec_s () (exec_dup_items) (exec_stackdepth integer_min integer_add exec_y_when_autoconstructing (integer_yank in4 exec_pop (boolean_flush)) exec_eq boolean_swap exec_dup_times (print_integer boolean_eq integer_add) exec_flush integer_stackdepth) exec_rot () (boolean_flush exec_yankdup exec_do*range (boolean_and exec_do*count (print_boolean boolean_pop exec_dup () in3 boolean_yankdup in4 integer_sub))) ())) ()) () ()) ())
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 68
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.635
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.379 1.0 0.378 0.379 0.743 1.0 0.375 0.381)
Error minima by case: (1 1 0 1 0 0 0 1 0 0)
Average genome size in population (length): 46.92
Average program size in population (points): 65.36
Average percent parens in population: 0.292
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.489
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1767112
--- Timings ---
Current time: 1559314654107 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 55.4%
Fitness Testing:      3.4 seconds, 29.4%
Report:               1.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 68                 
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: 70                 
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 28                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: 87                 
Correct output: -40                 | Program output: 95                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -44                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -9                 
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -44                
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: 75                 
Correct output: -72                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: 9                  
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: 27                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction -41} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_yank -41 boolean_swap integer_flush exec_k_when_autoconstructing (integer_eq exec_do*range (in3 boolean_frominteger exec_dup_items exec_s () (exec_dup_items boolean_eq integer_dec exec_empty exec_k (exec_do*range (integer_pop in1 in4 integer_shove exec_swap (integer_dup boolean_swap exec_when () print_integer boolean_flush) (boolean_not boolean_invert_second_then_and))) ()) ())) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction -41} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_yank -41 boolean_swap integer_flush exec_k_when_autoconstructing (integer_eq exec_do*range (in3 boolean_frominteger exec_dup_items exec_s () (exec_dup_items boolean_eq integer_dec exec_empty exec_k (exec_do*range (integer_pop in1 in4 integer_shove exec_swap (integer_dup boolean_swap exec_when () print_integer boolean_flush) (boolean_not boolean_invert_second_then_and))) ()) ())) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (749 880 1 1000 749 132 132 1 746 4)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (749 880 1 0 749 132 132 1 746 4)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger boolean_or integer_lte in1 print_integer integer_gt exec_yankdup exec_eq exec_s () (exec_if (exec_pop (integer_sub)) ()) ())
Errors: [0 0 1 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 20
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 6.606
Median total errors in population: 6
Error averages by case: (0.251 0.12 0.999 1.0 0.251 0.868 0.868 0.999 0.254 0.996)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 42.785
Average program size in population (points): 59.654
Average percent parens in population: 0.295
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.993375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2202236
--- Timings ---
Current time: 1559314656642 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 57.2%
Fitness Testing:      3.9 seconds, 27.1%
Report:               2.1 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 19                 
Correct output: 5                   | Program output: 100                
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 66                 
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -84                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: 31                 
Correct output: -40                 | Program output: 49                 
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 78                 
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -26                
Correct output: -12                 | Program output: 18                 
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: 25                 
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: 100                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -75                
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -3                 
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: 80                 
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: 53                 
Correct output: -49                 | Program output: 62                 
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: 55                 
Correct output: -59                 | Program output: -9                 
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 2, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Lexicase best program: (in3 boolean_swap integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and) boolean_and) exec_empty integer_mult exec_rot () (exec_shove (integer_pop boolean_xor) integer_max print_newline) (integer_mod exec_while (boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_stackdepth integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items)) exec_yank integer_lte exec_s (integer_gt exec_pop (exec_s (exec_y (exec_s () () (integer_dec integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_when (integer_mult tagged_827 exec_yankdup))) () ())) () ())
Lexicase best errors: [1 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 123
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 2, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Zero cases best program: (in3 boolean_swap integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and) boolean_and) exec_empty integer_mult exec_rot () (exec_shove (integer_pop boolean_xor) integer_max print_newline) (integer_mod exec_while (boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_stackdepth integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items)) exec_yank integer_lte exec_s (integer_gt exec_pop (exec_s (exec_y (exec_s () () (integer_dec integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_when (integer_mult tagged_827 exec_yankdup))) () ())) () ())
Zero cases best errors: [1 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 123
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 1000 1000 141 141 755 1000 1000 354 141)
Population mean number of elite cases: 5.88
Count of perfect (error zero) individuals by case: (352 0 0 141 141 755 0 0 354 141)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 2, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and) boolean_and) exec_empty integer_mult exec_rot () (exec_shove (integer_pop boolean_xor) integer_max print_newline) (integer_mod exec_while (boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_noop integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items)) exec_yank integer_lte exec_s (integer_gt exec_pop (exec_s (exec_y (exec_s () () (integer_dec integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_when (integer_mult tagged_827 exec_yankdup))) () ())) () ())
Errors: [1 1 1 0 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 92
Size: 123
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 8.116
Median total errors in population: 9
Error averages by case: (0.648 1.0 1.0 0.859 0.859 0.245 1.0 1.0 0.646 0.859)
Error minima by case: (0 1 1 0 0 0 1 1 0 0)
Average genome size in population (length): 52.848
Average program size in population (points): 72.279
Average percent parens in population: 0.281
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.4136875
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2680664
--- Timings ---
Current time: 1559314659454 milliseconds
Total Time:          16.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.0 seconds, 59.3%
Fitness Testing:      4.4 seconds, 26.3%
Report:               2.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 19                 
Correct output: 5                   | Program output: 100                
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 66                 
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -84                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: 31                 
Correct output: -40                 | Program output: 49                 
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 78                 
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -26                
Correct output: -12                 | Program output: 18                 
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: 25                 
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: 100                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -75                
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -3                 
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: 80                 
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: 53                 
Correct output: -49                 | Program output: 62                 
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: 55                 
Correct output: -59                 | Program output: -9                 
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 2, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Lexicase best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1) (boolean_swap) () boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte) integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and boolean_and exec_empty integer_mult exec_rot () (exec_shove (integer_pop boolean_xor integer_max print_newline) integer_mod exec_while (boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_noop integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush) integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items) (exec_yank) integer_lte exec_s (integer_gt exec_pop (exec_s (exec_y () exec_s () () (integer_dec integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_when (integer_mult tagged_827 exec_yankdup)) () ())) () ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y} {:close 2, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Zero cases best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1) (boolean_swap) () boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte) integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and boolean_and exec_empty integer_mult exec_rot () (exec_shove (integer_pop boolean_xor integer_max print_newline) integer_mod exec_while (boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_noop integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush) integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items) (exec_yank) integer_lte exec_s (integer_gt exec_pop (exec_s (exec_y () exec_s () () (integer_dec integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_when (integer_mult tagged_827 exec_yankdup)) () ())) () ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (579 947 1000 952 1000 1000 574 579 1 1000)
Population mean number of elite cases: 7.63
Count of perfect (error zero) individuals by case: (579 947 0 952 0 0 574 579 1 0)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_boolean_437} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range})
Best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth boolean_invert_first_then_and boolean_swap integer_mod integer_dup_times boolean_swap exec_y (integer_dup_times tag_boolean_437 exec_stackdepth exec_s_when_autoconstructing (exec_shove (boolean_dup_times boolean_dup_items exec_do*times (exec_if () (integer_swap integer_rot boolean_yankdup exec_shove () print_boolean integer_inc exec_yank) integer_rot print_boolean) integer_inc integer_dec exec_swap (boolean_xor integer_dup integer_min boolean_eq exec_do*range ()) ())) () ()))
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.368
Median total errors in population: 5
Error averages by case: (0.421 0.053 1.0 0.048 1.0 1.0 0.426 0.421 0.999 1.0)
Error minima by case: (0 0 1 0 1 1 0 0 0 1)
Average genome size in population (length): 62.325
Average program size in population (points): 83.949
Average percent parens in population: 0.270
Minimum age in population: 6.0
Maximum age in population: 10.6875
Average age in population: 8.72196875
Median age in population: 8.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3289451
--- Timings ---
Current time: 1559314662914 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 60.3%
Fitness Testing:      5.1 seconds, 25.2%
Report:               2.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -11                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 56                 
Correct output: 5                   | Program output: 35                 
Correct output: 40                  | Program output: 93                 
Correct output: 0                   | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 85                 
Correct output: 62                  | Program output: 89                 
Correct output: 27                  | Program output: 62                 
Correct output: 29                  | Program output: 65                 
Correct output: 6                   | Program output: 68                 
Correct output: 1                   | Program output: 23                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 53                 
Correct output: 49                  | Program output: 70                 
Correct output: 15                  | Program output: 46                 
Correct output: -100                | Program output: 60                 
Correct output: -77                 | Program output: 72                 
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 92                 
Correct output: -76                 | Program output: 44                 
Correct output: -97                 | Program output: 36                 
Correct output: -63                 | Program output: 22                 
Correct output: -91                 | Program output: 91                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: 33                 
Correct output: 7                   | Program output: 15                 
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: 89                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 23                 
Correct output: -95                 | Program output: -42                
Correct output: -65                 | Program output: -17                
Correct output: -12                 | Program output: -9                 
Correct output: -71                 | Program output: 70                 
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 70                 
Correct output: -73                 | Program output: 71                 
Correct output: -70                 | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -89                 | Program output: 50                 
Correct output: -72                 | Program output: 18                 
Correct output: -67                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: 21                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: 43                 
Correct output: -26                 | Program output: 24                 
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: 43                 
Correct output: -43                 | Program output: 75                 
Correct output: -89                 | Program output: 50                 
Correct output: -49                 | Program output: 52                 
Correct output: -100                | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 75                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -42                
Correct output: -93                 | Program output: 99                 
Correct output: -89                 | Program output: -23                
Correct output: -89                 | Program output: -1                 
Correct output: -24                 | Program output: -4                 
Correct output: -52                 | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: 55                 
Correct output: -90                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 963 1000 1000 264 264 692 267 696)
Population mean number of elite cases: 7.15
Count of perfect (error zero) individuals by case: (0 0 963 0 0 264 264 692 267 696)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 6.854
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.037 1.0 1.0 0.736 0.736 0.308 0.733 0.304)
Error minima by case: (1 1 0 1 1 0 0 0 0 0)
Average genome size in population (length): 57.415
Average program size in population (points): 77.358
Average percent parens in population: 0.283
Minimum age in population: 8.1875
Maximum age in population: 12.09375
Average age in population: 10.205359375
Median age in population: 10.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 230
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 236
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3827412
--- Timings ---
Current time: 1559314665608 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.1 seconds, 60.5%
Fitness Testing:      5.7 seconds, 24.6%
Report:               3.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 19                 
Correct output: 5                   | Program output: 100                
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 66                 
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -84                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: 31                 
Correct output: -40                 | Program output: 49                 
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 78                 
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -26                
Correct output: -12                 | Program output: 18                 
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: 25                 
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: 100                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -75                
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -3                 
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: 80                 
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: 53                 
Correct output: -49                 | Program output: 62                 
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: 55                 
Correct output: -59                 | Program output: -9                 
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_919} {:close 0, :instruction tag_exec_148} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub})
Lexicase best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (integer_gte integer_min integer_add exec_y_when_autoconstructing (integer_yank in4 exec_pop (boolean_flush)) exec_eq boolean_swap exec_dup_times (print_integer boolean_eq integer_add) exec_flush integer_stackdepth) exec_rot (boolean_flush exec_yankdup integer_min exec_s_when_autoconstructing (boolean_invert_first_then_and exec_stackdepth exec_do*times (exec_do*count (boolean_yankdup exec_do*while () boolean_dup_items in1 integer_yankdup exec_k (integer_flush exec_shove (tagged_919 tag_exec_148 (boolean_pop integer_gt exec_shove (integer_sub)))) ()))) () ()) () ())
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_919} {:close 0, :instruction tag_exec_148} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub})
Zero cases best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (integer_gte integer_min integer_add exec_y_when_autoconstructing (integer_yank in4 exec_pop (boolean_flush)) exec_eq boolean_swap exec_dup_times (print_integer boolean_eq integer_add) exec_flush integer_stackdepth) exec_rot (boolean_flush exec_yankdup integer_min exec_s_when_autoconstructing (boolean_invert_first_then_and exec_stackdepth exec_do*times (exec_do*count (boolean_yankdup exec_do*while () boolean_dup_items in1 integer_yankdup exec_k (integer_flush exec_shove (tagged_919 tag_exec_148 (boolean_pop integer_gt exec_shove (integer_sub)))) ()))) () ()) () ())
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 957 554 402 402 402 1000 1000 402 1000)
Population mean number of elite cases: 6.52
Count of perfect (error zero) individuals by case: (402 957 554 402 402 402 0 0 402 0)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 2, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_827} {:close 0, :instruction exec_yankdup})
Best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush integer_dec exec_s (in4 in1 boolean_swap) (boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop integer_dup_items integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and) (boolean_and exec_empty integer_mult) exec_rot () (exec_shove (integer_pop boolean_xor) exec_y (print_newline integer_mod exec_while (integer_max exec_rot (boolean_yank) (in4) (integer_lte exec_flush integer_dup_items integer_gte exec_eq boolean_dup_items boolean_flush integer_rot boolean_pop print_exec () integer_stackdepth) exec_eq integer_dup_items)) exec_yank) (integer_lte integer_gt exec_pop (exec_s (exec_y (exec_s () () (integer_sub integer_stackdepth exec_dup_items) integer_sub integer_dup exec_eq exec_when (integer_mult tagged_827 exec_yankdup))) () ())))
Errors: [0 0 1 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 84
Size: 112
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.479
Median total errors in population: 8
Error averages by case: (0.598 0.043 0.446 0.598 0.598 0.598 1.0 1.0 0.598 1.0)
Error minima by case: (0 0 0 0 0 0 1 1 0 1)
Average genome size in population (length): 35.464
Average program size in population (points): 49.239
Average percent parens in population: 0.322
Minimum age in population: 9.25
Maximum age in population: 13.3984375
Average age in population: 11.6981328125
Median age in population: 11.77734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 413
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 431
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4197175
--- Timings ---
Current time: 1559314668144 milliseconds
Total Time:          25.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 61.4%
Fitness Testing:      6.1 seconds, 24.0%
Report:               3.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -11                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 56                 
Correct output: 5                   | Program output: 35                 
Correct output: 40                  | Program output: 93                 
Correct output: 0                   | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 85                 
Correct output: 62                  | Program output: 89                 
Correct output: 27                  | Program output: 62                 
Correct output: 29                  | Program output: 65                 
Correct output: 6                   | Program output: 68                 
Correct output: 1                   | Program output: 23                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 53                 
Correct output: 49                  | Program output: 70                 
Correct output: 15                  | Program output: 46                 
Correct output: -100                | Program output: 60                 
Correct output: -77                 | Program output: 72                 
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 92                 
Correct output: -76                 | Program output: 44                 
Correct output: -97                 | Program output: 36                 
Correct output: -63                 | Program output: 22                 
Correct output: -91                 | Program output: 91                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: 33                 
Correct output: 7                   | Program output: 15                 
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: 89                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 23                 
Correct output: -95                 | Program output: -42                
Correct output: -65                 | Program output: -17                
Correct output: -12                 | Program output: -9                 
Correct output: -71                 | Program output: 70                 
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 70                 
Correct output: -73                 | Program output: 71                 
Correct output: -70                 | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -89                 | Program output: 50                 
Correct output: -72                 | Program output: 18                 
Correct output: -67                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: 21                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: 43                 
Correct output: -26                 | Program output: 24                 
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: 43                 
Correct output: -43                 | Program output: 75                 
Correct output: -89                 | Program output: 50                 
Correct output: -49                 | Program output: 52                 
Correct output: -100                | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 75                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -42                
Correct output: -93                 | Program output: 99                 
Correct output: -89                 | Program output: -23                
Correct output: -89                 | Program output: -1                 
Correct output: -24                 | Program output: -4                 
Correct output: -52                 | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: 55                 
Correct output: -90                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (818 140 958 1000 1000 138 136 1000 1000 1000)
Population mean number of elite cases: 7.19
Count of perfect (error zero) individuals by case: (818 140 958 0 0 138 136 0 0 0)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and})
Best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (boolean_or exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and))
Errors: [1 0 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 42
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.81
Median total errors in population: 8
Error averages by case: (0.182 0.86 0.042 1.0 1.0 0.862 0.864 1.0 1.0 1.0)
Error minima by case: (0 0 0 1 1 0 0 1 1 1)
Average genome size in population (length): 52.067
Average program size in population (points): 69.621
Average percent parens in population: 0.267
Minimum age in population: 10.5
Maximum age in population: 15.33984375
Average age in population: 13.131546875
Median age in population: 13.18359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4797464
--- Timings ---
Current time: 1559314670911 milliseconds
Total Time:          28.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 61.5%
Fitness Testing:      6.8 seconds, 23.9%
Report:               4.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 19                 
Correct output: 5                   | Program output: 100                
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 66                 
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -84                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: 31                 
Correct output: -40                 | Program output: 49                 
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 78                 
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -26                
Correct output: -12                 | Program output: 18                 
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: 25                 
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: 100                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -75                
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -3                 
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: 80                 
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: 53                 
Correct output: -49                 | Program output: 62                 
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: 55                 
Correct output: -59                 | Program output: -9                 
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_107} {:close 0, :instruction exec_while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove})
Lexicase best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y (integer_stackdepth) exec_stackdepth exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (boolean_or exec_shove (exec_yankdup integer_min boolean_yank tag_boolean_107) exec_while (integer_stackdepth) boolean_eq boolean_dup boolean_dup_times integer_rot boolean_invert_first_then_and boolean_dup_items exec_swap () (integer_stackdepth boolean_pop boolean_dup_times print_boolean) integer_max) integer_yank exec_shove (exec_shove ()))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_boolean_107} {:close 0, :instruction exec_while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove})
Zero cases best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y (integer_stackdepth) exec_stackdepth exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (boolean_or exec_shove (exec_yankdup integer_min boolean_yank tag_boolean_107) exec_while (integer_stackdepth) boolean_eq boolean_dup boolean_dup_times integer_rot boolean_invert_first_then_and boolean_dup_items exec_swap () (integer_stackdepth boolean_pop boolean_dup_times print_boolean) integer_max) integer_yank exec_shove (exec_shove ()))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 1 1 260 1 259 257 260 1 1000)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (257 1 1 260 1 259 257 260 1 0)
Population mean number of perfect (error zero) cases: 1.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s})
Best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () exec_eq integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) () (boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte integer_pop in4 integer_add) integer_sub boolean_yank boolean_invert_second_then_and) boolean_and) exec_empty integer_mult exec_rot () () (exec_shove (integer_pop boolean_xor) integer_max print_newline) integer_mod integer_flush boolean_yankdup boolean_yankdup in3 integer_fromboolean integer_dup_times exec_noop integer_max exec_rot (boolean_yank) (in4 integer_lte exec_flush print_exec () integer_stackdepth) (exec_eq integer_dup_items) exec_yank integer_lte exec_s () () ())
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 70
Size: 91
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 8.703
Median total errors in population: 10
Error averages by case: (0.743 0.999 0.999 0.74 0.999 0.741 0.743 0.74 0.999 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 24.572
Average program size in population (points): 35.049
Average percent parens in population: 0.336
Minimum age in population: 12.078125
Maximum age in population: 16.4921875
Average age in population: 14.584912109375
Median age in population: 14.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 383
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 414
Syntactic diversity (% unique Push programs):	 0.405
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5097202
--- Timings ---
Current time: 1559314673271 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.1 seconds, 62.2%
Fitness Testing:      7.2 seconds, 23.3%
Report:               4.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Lexicase best errors: [0 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Zero cases best errors: [0 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 439 1 1 1 1 519 439 1 1)
Population mean number of elite cases: 1.40
Count of perfect (error zero) individuals by case: (1 439 1 1 1 1 519 439 1 1)
Population mean number of perfect (error zero) cases: 1.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [0 1 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 8.596
Median total errors in population: 9
Error averages by case: (0.999 0.561 0.999 0.999 0.999 0.999 0.481 0.561 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.865
Average program size in population (points): 42.56
Average percent parens in population: 0.308
Minimum age in population: 13.1875
Maximum age in population: 18.0205078125
Average age in population: 16.5707822265625
Median age in population: 16.634765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 369
Genome diversity (% unique genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 373
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5525200
--- Timings ---
Current time: 1559314675491 milliseconds
Total Time:          33.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.7 seconds, 62.3%
Fitness Testing:      7.7 seconds, 23.0%
Report:               4.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 68                 
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: 70                 
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 28                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: 87                 
Correct output: -40                 | Program output: 95                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -44                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -9                 
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -44                
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: 75                 
Correct output: -72                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: 9                  
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: 27                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (exec_pop (integer_sub)) ()) () ()))
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (exec_pop (integer_sub)) ()) () ()))
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 870 283 212 99 371 284 211 211 211)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (374 870 283 212 99 371 284 211 211 211)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 6.874
Median total errors in population: 7
Error averages by case: (0.626 0.13 0.717 0.788 0.901 0.629 0.716 0.789 0.789 0.789)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.661
Average program size in population (points): 24.017
Average percent parens in population: 0.364
Minimum age in population: 15.25
Maximum age in population: 19.82763671875
Average age in population: 18.800833984375
Median age in population: 18.634765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.26
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 328
Syntactic diversity (% unique Push programs):	 0.246
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5703528
--- Timings ---
Current time: 1559314677549 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.4 seconds, 63.4%
Fitness Testing:      7.9 seconds, 22.3%
Report:               4.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 19                 
Correct output: 5                   | Program output: 100                
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 66                 
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -84                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: 31                 
Correct output: -40                 | Program output: 49                 
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 78                 
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -26                
Correct output: -12                 | Program output: 18                 
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: 25                 
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: 100                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -75                
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -3                 
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: 80                 
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: 53                 
Correct output: -49                 | Program output: 62                 
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: 55                 
Correct output: -59                 | Program output: -9                 
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_pop (integer_sub))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_pop (integer_sub))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 228 314 86 219 220 229 86 433 86)
Population mean number of elite cases: 1.99
Count of perfect (error zero) individuals by case: (86 228 314 86 219 220 229 86 433 86)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte})
Best program: (exec_yank boolean_frominteger in3 boolean_dup_times integer_lte print_integer exec_do*count () integer_swap exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_swap boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 exec_when (boolean_swap)) (boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte))) ())
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 47
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 8.013
Median total errors in population: 8
Error averages by case: (0.914 0.772 0.686 0.914 0.781 0.78 0.771 0.914 0.567 0.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.318
Average program size in population (points): 23.482
Average percent parens in population: 0.360
Minimum age in population: 16.25
Maximum age in population: 21.672119140625
Average age in population: 20.1971435546875
Median age in population: 20.255615234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 262
Genome diversity (% unique genomes):	 0.307
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.289
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5873956
--- Timings ---
Current time: 1559314680354 milliseconds
Total Time:          37.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 64.9%
Fitness Testing:      8.1 seconds, 21.4%
Report:               5.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (boolean_dup_items)) ()) ()))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (boolean_dup_items)) ()) ()))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 112 110 190 436 219 189 959 216 189)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (190 112 110 190 436 219 189 959 216 189)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 7.19
Median total errors in population: 7
Error averages by case: (0.81 0.888 0.89 0.81 0.564 0.781 0.811 0.041 0.784 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.056
Average program size in population (points): 32.233
Average percent parens in population: 0.313
Minimum age in population: 17.25
Maximum age in population: 23.5325927734375
Average age in population: 21.5370732421875
Median age in population: 21.57568359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6227760
--- Timings ---
Current time: 1559314683229 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 65.6%
Fitness Testing:      8.5 seconds, 20.7%
Report:               5.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -11                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 56                 
Correct output: 5                   | Program output: 35                 
Correct output: 40                  | Program output: 93                 
Correct output: 0                   | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 85                 
Correct output: 62                  | Program output: 89                 
Correct output: 27                  | Program output: 62                 
Correct output: 29                  | Program output: 65                 
Correct output: 6                   | Program output: 68                 
Correct output: 1                   | Program output: 23                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 53                 
Correct output: 49                  | Program output: 70                 
Correct output: 15                  | Program output: 46                 
Correct output: -100                | Program output: 60                 
Correct output: -77                 | Program output: 72                 
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 92                 
Correct output: -76                 | Program output: 44                 
Correct output: -97                 | Program output: 36                 
Correct output: -63                 | Program output: 22                 
Correct output: -91                 | Program output: 91                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: 33                 
Correct output: 7                   | Program output: 15                 
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: 89                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 23                 
Correct output: -95                 | Program output: -42                
Correct output: -65                 | Program output: -17                
Correct output: -12                 | Program output: -9                 
Correct output: -71                 | Program output: 70                 
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 70                 
Correct output: -73                 | Program output: 71                 
Correct output: -70                 | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -89                 | Program output: 50                 
Correct output: -72                 | Program output: 18                 
Correct output: -67                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: 21                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: 43                 
Correct output: -26                 | Program output: 24                 
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: 43                 
Correct output: -43                 | Program output: 75                 
Correct output: -89                 | Program output: 50                 
Correct output: -49                 | Program output: 52                 
Correct output: -100                | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 75                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -42                
Correct output: -93                 | Program output: 99                 
Correct output: -89                 | Program output: -23                
Correct output: -89                 | Program output: -1                 
Correct output: -24                 | Program output: -4                 
Correct output: -52                 | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: 55                 
Correct output: -90                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Lexicase best errors: [0 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Zero cases best errors: [0 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 656 216 95 216 218 438 216 216 438)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (216 656 216 95 216 218 438 216 216 438)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank integer_dup in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [0 1 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 7.075
Median total errors in population: 7
Error averages by case: (0.784 0.344 0.784 0.905 0.784 0.782 0.562 0.784 0.784 0.562)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.072
Average program size in population (points): 22.947
Average percent parens in population: 0.353
Minimum age in population: 18.25
Maximum age in population: 24.98797607421875
Average age in population: 23.12249230957031
Median age in population: 23.16049194335938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 215
Genome diversity (% unique genomes):	 0.375
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 249
Syntactic diversity (% unique Push programs):	 0.342
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6403271
--- Timings ---
Current time: 1559314685893 milliseconds
Total Time:          43.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 66.9%
Fitness Testing:      8.7 seconds, 20.0%
Report:               5.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 68                 
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: 70                 
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 28                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: 87                 
Correct output: -40                 | Program output: 95                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -44                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -9                 
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -44                
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: 75                 
Correct output: -72                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: 9                  
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: 27                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (exec_pop (integer_sub)) ()) () ()))
Lexicase best errors: [1 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (exec_pop (integer_sub)) ()) () ()))
Zero cases best errors: [1 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 138 262 80 473 553 138 138 138 265)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (262 138 262 80 473 553 138 138 138 265)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_stackdepth boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [1 0 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 7.553
Median total errors in population: 8
Error averages by case: (0.738 0.862 0.738 0.92 0.527 0.447 0.862 0.862 0.862 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.618
Average program size in population (points): 22.328
Average percent parens in population: 0.351
Minimum age in population: 20.498046875
Maximum age in population: 26.47525024414062
Average age in population: 24.6718723449707
Median age in population: 24.74758911132812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.416
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.381
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6573780
--- Timings ---
Current time: 1559314688391 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.3 seconds, 67.9%
Fitness Testing:      8.9 seconds, 19.3%
Report:               5.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 68                 
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: 70                 
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 60                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 28                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: 87                 
Correct output: -40                 | Program output: 95                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -44                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -41                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -9                 
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -44                
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -67                
Correct output: -89                 | Program output: 75                 
Correct output: -72                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -4                 
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: 9                  
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: 27                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction in2})
Lexicase best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_while (boolean_swap exec_s () (exec_if (exec_pop (in2)) ()) ())))
Lexicase best errors: [1 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction in2})
Zero cases best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_while (boolean_swap exec_s () (exec_if (exec_pop (in2)) ()) ())))
Zero cases best errors: [1 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 952 556 252 810 253 411 146 146 410)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (252 952 556 252 810 253 411 146 146 410)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [1 0 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 5.812
Median total errors in population: 5
Error averages by case: (0.748 0.048 0.444 0.748 0.19 0.747 0.589 0.854 0.854 0.59)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.378
Average program size in population (points): 23.065
Average percent parens in population: 0.339
Minimum age in population: 22.634765625
Maximum age in population: 28.08943176269531
Average age in population: 26.15579736328125
Median age in population: 26.23379516601562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.412
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6773204
--- Timings ---
Current time: 1559314690764 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 68.7%
Fitness Testing:      9.2 seconds, 18.9%
Report:               5.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (integer_max exec_pop () boolean_dup_items) ()))
Lexicase best errors: [0 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 19
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (integer_max exec_pop () boolean_dup_items) ()))
Zero cases best errors: [0 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 19
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 365 294 365 953 112 181 771 660 366)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (366 365 294 365 953 112 181 771 660 366)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Errors: [0 0 1 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 5.567
Median total errors in population: 6
Error averages by case: (0.634 0.635 0.706 0.635 0.047 0.888 0.819 0.229 0.34 0.634)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.564
Average program size in population (points): 23.183
Average percent parens in population: 0.335
Minimum age in population: 24.443359375
Maximum age in population: 29.51425933837891
Average age in population: 27.64342607879639
Median age in population: 27.67789840698242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6989627
--- Timings ---
Current time: 1559314693406 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.6 seconds, 69.5%
Fitness Testing:      9.4 seconds, 18.4%
Report:               6.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -11                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 56                 
Correct output: 5                   | Program output: 35                 
Correct output: 40                  | Program output: 93                 
Correct output: 0                   | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 85                 
Correct output: 62                  | Program output: 89                 
Correct output: 27                  | Program output: 62                 
Correct output: 29                  | Program output: 65                 
Correct output: 6                   | Program output: 68                 
Correct output: 1                   | Program output: 23                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 53                 
Correct output: 49                  | Program output: 70                 
Correct output: 15                  | Program output: 46                 
Correct output: -100                | Program output: 60                 
Correct output: -77                 | Program output: 72                 
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 92                 
Correct output: -76                 | Program output: 44                 
Correct output: -97                 | Program output: 36                 
Correct output: -63                 | Program output: 22                 
Correct output: -91                 | Program output: 91                 
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: 33                 
Correct output: 7                   | Program output: 15                 
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: 89                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 23                 
Correct output: -95                 | Program output: -42                
Correct output: -65                 | Program output: -17                
Correct output: -12                 | Program output: -9                 
Correct output: -71                 | Program output: 70                 
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 70                 
Correct output: -73                 | Program output: 71                 
Correct output: -70                 | Program output: 62                 
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -89                 | Program output: 50                 
Correct output: -72                 | Program output: 18                 
Correct output: -67                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: 21                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: 43                 
Correct output: -26                 | Program output: 24                 
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: 43                 
Correct output: -43                 | Program output: 75                 
Correct output: -89                 | Program output: 50                 
Correct output: -49                 | Program output: 52                 
Correct output: -100                | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 75                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -42                
Correct output: -93                 | Program output: 99                 
Correct output: -89                 | Program output: -23                
Correct output: -89                 | Program output: -1                 
Correct output: -24                 | Program output: -4                 
Correct output: -52                 | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: 55                 
Correct output: -90                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer exec_dup (exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (boolean_invert_second_then_and)) ()) ())))
Lexicase best errors: [0 1 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 21
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_frominteger in1 integer_lte exec_y_when_autoconstructing (print_integer exec_dup (exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (boolean_invert_second_then_and)) ()) ())))
Zero cases best errors: [0 1 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 21
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 579 132 132 109 141 133 579 109 138)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (138 579 132 132 109 141 133 579 109 138)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Best program: (exec_yank boolean_frominteger in4 integer_lte exec_y_when_autoconstructing (print_integer integer_gt) exec_yankdup print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ())
Errors: [1 1 0 0 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.81
Median total errors in population: 8
Error averages by case: (0.862 0.421 0.868 0.868 0.891 0.859 0.867 0.421 0.891 0.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.189
Average program size in population (points): 21.624
Average percent parens in population: 0.343
Minimum age in population: 25.7626953125
Maximum age in population: 30.96313095092773
Average age in population: 29.18095800018311
Median age in population: 29.26535224914551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7167297
--- Timings ---
Current time: 1559314695892 milliseconds
Total Time:          53.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.7 seconds, 70.3%
Fitness Testing:      9.7 seconds, 18.0%
Report:               6.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (integer_max exec_pop (boolean_dup_items)) ()))
Lexicase best errors: [1 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (integer_max exec_pop (boolean_dup_items)) ()))
Zero cases best errors: [1 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 955 192 469 291 194 194 194 274 192)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (274 955 192 469 291 194 194 194 274 192)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt})
Best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt))
Errors: [1 0 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 7
Size: 9
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.771
Median total errors in population: 7
Error averages by case: (0.726 0.045 0.808 0.531 0.709 0.806 0.806 0.806 0.726 0.808)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.628
Average program size in population (points): 23.055
Average percent parens in population: 0.326
Minimum age in population: 27.605224609375
Maximum age in population: 32.60104751586914
Average age in population: 30.62135760116577
Median age in population: 30.67863845825195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7390122
--- Timings ---
Current time: 1559314698608 milliseconds
Total Time:          56.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.0 seconds, 71.0%
Fitness Testing:      9.9 seconds, 17.6%
Report:               6.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 19                 
Correct output: 5                   | Program output: 100                
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 66                 
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 50                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: 85                 
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -84                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: 31                 
Correct output: -40                 | Program output: 49                 
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: 91                 
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: 23                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 78                 
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -26                
Correct output: -12                 | Program output: 18                 
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: 25                 
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: 75                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: 100                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -75                
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -3                 
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: 80                 
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: 53                 
Correct output: -49                 | Program output: 62                 
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: 32                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: 55                 
Correct output: -59                 | Program output: -9                 
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count (integer_swap) exec_if () (integer_stackdepth) integer_dup_items exec_shove () exec_pop (integer_mult integer_eq boolean_swap boolean_not) boolean_flush print_boolean integer_dec in1 in4 in1 boolean_swap boolean_empty exec_shove (exec_yankdup boolean_frominteger))
Lexicase best errors: [1 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count (integer_swap) exec_if () (integer_stackdepth) integer_dup_items exec_shove () exec_pop (integer_mult integer_eq boolean_swap boolean_not) boolean_flush print_boolean integer_dec in1 in4 in1 boolean_swap boolean_empty exec_shove (exec_yankdup boolean_frominteger))
Zero cases best errors: [1 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (393 222 393 323 957 237 222 100 222 394)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (393 222 393 323 957 237 222 100 222 394)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub})
Best program: (in3 boolean_dup_times integer_lte print_integer exec_do*count (integer_swap) exec_y () integer_stackdepth integer_dup_items exec_shove () exec_pop (integer_dup integer_eq boolean_rot boolean_dup) boolean_flush print_boolean integer_dec exec_s (in4 in1 boolean_swap) (boolean_or exec_shove (exec_yankdup boolean_frominteger boolean_pop exec_y (integer_flush boolean_xor exec_yank exec_flush print_integer integer_gte boolean_frominteger) in4 integer_add) integer_sub) ())
Errors: [1 0 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.537
Median total errors in population: 6
Error averages by case: (0.607 0.778 0.607 0.677 0.043 0.763 0.778 0.9 0.778 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.625
Average program size in population (points): 22.941
Average percent parens in population: 0.321
Minimum age in population: 28.605224609375
Maximum age in population: 34.13292503356934
Average age in population: 32.10454590511322
Median age in population: 32.17843770980835
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7628521
--- Timings ---
Current time: 1559314701640 milliseconds
Total Time:          59.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.3 seconds, 71.7%
Fitness Testing:     10.2 seconds, 17.3%
Report:               6.4 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Lexicase best errors: [1 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.421
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_yank boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer boolean_swap exec_s () (exec_if (exec_pop (integer_sub)) ()) ()))
Zero cases best errors: [1 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.421
--- Lexicase Population Statistics ---
Count of elite individuals by case: (118 434 407 434 287 287 287 118 434 120)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (118 434 407 434 287 287 287 118 434 120)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop})
Best program: (exec_yank boolean_frominteger boolean_swap boolean_frominteger integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (exec_pop ()) ()) ()))
Errors: [1 1 0 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 22
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 7.074
Median total errors in population: 7
Error averages by case: (0.882 0.566 0.593 0.566 0.713 0.713 0.713 0.882 0.566 0.88)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.601
Average program size in population (points): 23.824
Average percent parens in population: 0.308
Minimum age in population: 30.55288696289062
Maximum age in population: 35.61386823654175
Average age in population: 33.57767890977859
Median age in population: 33.64539194107056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7952267
--- Timings ---
Current time: 1559314704234 milliseconds
Total Time:          62.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.4 seconds, 71.7%
Fitness Testing:     10.6 seconds, 17.1%
Report:               6.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (677 351 352 202 955 123 123 958 123 123)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (677 351 352 202 955 123 123 958 123 123)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 18
Size: 29
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 6.013
Median total errors in population: 6
Error averages by case: (0.323 0.649 0.648 0.798 0.045 0.877 0.877 0.042 0.877 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.25
Average program size in population (points): 22.367
Average percent parens in population: 0.318
Minimum age in population: 31.55288696289062
Maximum age in population: 37.19070959091187
Average age in population: 35.06447965431213
Median age in population: 35.13154935836792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8209718
--- Timings ---
Current time: 1559314706799 milliseconds
Total Time:          64.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.5 seconds, 72.1%
Fitness Testing:     10.9 seconds, 16.9%
Report:               7.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (523 1 35 35 523 948 35 2 160 1)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (523 1 35 35 523 948 35 2 160 1)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap print_integer) exec_if (integer_fromboolean integer_sub) ())
Errors: [0 1 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.737
Median total errors in population: 7
Error averages by case: (0.477 0.999 0.965 0.965 0.477 0.052 0.965 0.998 0.84 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.931
Average program size in population (points): 25.124
Average percent parens in population: 0.358
Minimum age in population: 33.37406015396118
Maximum age in population: 38.47937095165253
Average age in population: 36.72112861859798
Median age in population: 36.67220175266266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 419
Genome diversity (% unique genomes):	 0.323
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 419
Syntactic diversity (% unique Push programs):	 0.305
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8401889
--- Timings ---
Current time: 1559314709695 milliseconds
Total Time:          67.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.0 seconds, 72.7%
Fitness Testing:     11.1 seconds, 16.5%
Report:               7.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 48                 
Correct output: 5                   | Program output: 62                 
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 65                 
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Lexicase best errors: [0 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Zero cases best errors: [0 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 599 89 3 367 1 478 89 3 598)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (20 599 89 3 367 1 478 89 3 598)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () () (exec_if (integer_fromboolean integer_sub) ())))
Errors: [0 0 1 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 29
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 7.753
Median total errors in population: 7
Error averages by case: (0.98 0.401 0.911 0.997 0.633 0.999 0.522 0.911 0.997 0.402)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.478
Average program size in population (points): 24.855
Average percent parens in population: 0.376
Minimum age in population: 35.6348876953125
Maximum age in population: 39.69663256406784
Average age in population: 38.28877473402023
Median age in population: 38.35990643501282
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.287
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.276
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8584800
--- Timings ---
Current time: 1559314712061 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.9 seconds, 73.0%
Fitness Testing:     11.3 seconds, 16.3%
Report:               7.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank exec_yankdup) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 19
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank exec_yankdup) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 19
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (933 135 268 943 267 717 590 130 267 431)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (933 135 268 943 267 717 590 130 267 431)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank exec_yankdup) (exec_y_when_autoconstructing (exec_yank in1) integer_yank in2) exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 18
Size: 29
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 5.319
Median total errors in population: 5
Error averages by case: (0.067 0.865 0.732 0.057 0.733 0.283 0.41 0.87 0.733 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.707
Average program size in population (points): 26.674
Average percent parens in population: 0.369
Minimum age in population: 36.74382525682449
Maximum age in population: 41.06663250923157
Average age in population: 39.60402559939027
Median age in population: 39.7745127081871
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.293
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.284
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8804552
--- Timings ---
Current time: 1559314714512 milliseconds
Total Time:          72.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 73.2%
Fitness Testing:     11.6 seconds, 16.1%
Report:               7.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) in1 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) in1 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 633 146 503 913 632 688 295 633 146)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (146 633 146 503 913 632 688 295 633 146)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) in1 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 5.265
Median total errors in population: 4
Error averages by case: (0.854 0.367 0.854 0.497 0.087 0.368 0.312 0.705 0.367 0.854)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.573
Average program size in population (points): 28.208
Average percent parens in population: 0.375
Minimum age in population: 39.35990643501282
Maximum age in population: 42.85990643501282
Average age in population: 41.31404499781132
Median age in population: 41.35433135926723
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.295
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.289
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9068694
--- Timings ---
Current time: 1559314716884 milliseconds
Total Time:          74.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 73.4%
Fitness Testing:     11.9 seconds, 16.0%
Report:               7.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: 31                 
Correct output: -40                 | Program output: 49                 
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: 18                 
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: 100                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -17                
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 1 804 865 574 101 146 951 803 3)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (265 1 804 865 574 101 146 951 803 3)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) in1 integer_yank in2 integer_dup_items print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Errors: [1 1 0 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 5.487
Median total errors in population: 5
Error averages by case: (0.735 0.999 0.196 0.135 0.426 0.899 0.854 0.049 0.197 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.963
Average program size in population (points): 30.872
Average percent parens in population: 0.353
Minimum age in population: 40.85990643501282
Maximum age in population: 44.20061287283897
Average age in population: 42.96569146326184
Median age in population: 43.02568500861526
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 476
Genome diversity (% unique genomes):	 0.274
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 484
Syntactic diversity (% unique Push programs):	 0.263
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 9323371
--- Timings ---
Current time: 1559314719325 milliseconds
Total Time:          77.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 73.5%
Fitness Testing:     12.2 seconds, 15.9%
Report:               8.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Lexicase best errors: [1 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Zero cases best errors: [1 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 964 770 315 1000 206 454 1000 588 309)
Population mean number of elite cases: 5.77
Count of perfect (error zero) individuals by case: (166 964 770 315 0 206 454 0 588 309)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt integer_dup_items print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Errors: [1 0 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.228
Median total errors in population: 6
Error averages by case: (0.834 0.036 0.23 0.685 1.0 0.794 0.546 1.0 0.412 0.691)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 20.305
Average program size in population (points): 30.916
Average percent parens in population: 0.343
Minimum age in population: 42.7745127081871
Maximum age in population: 45.58017733320594
Average age in population: 44.52132727893069
Median age in population: 44.54131931066513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.31
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.296
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9553879
--- Timings ---
Current time: 1559314721685 milliseconds
Total Time:          79.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.5 seconds, 73.7%
Fitness Testing:     12.5 seconds, 15.8%
Report:               8.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 19                 
Correct output: 5                   | Program output: 100                
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 69                 
Correct output: 5                   | Program output: 66                 
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -98                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -97                 | Program output: -84                
Correct output: -63                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 78                 
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -75                
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -2                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -9                 
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) exec_noop integer_yank integer_swap exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.355
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) exec_noop integer_yank integer_swap exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.355
--- Lexicase Population Statistics ---
Count of elite individuals by case: (381 677 1000 105 955 276 903 704 518 233)
Population mean number of elite cases: 5.75
Count of perfect (error zero) individuals by case: (381 677 0 105 955 276 903 704 518 233)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) exec_noop integer_yank integer_swap exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 31
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 5.248
Median total errors in population: 5
Error averages by case: (0.619 0.323 1.0 0.895 0.045 0.724 0.097 0.296 0.482 0.767)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 20.662
Average program size in population (points): 31.302
Average percent parens in population: 0.340
Minimum age in population: 44.15791600942612
Maximum age in population: 47.56074832193553
Average age in population: 45.97054849648848
Median age in population: 46.04131931066513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 246
Genome diversity (% unique genomes):	 0.339
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 251
Syntactic diversity (% unique Push programs):	 0.323
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 9781320
--- Timings ---
Current time: 1559314724049 milliseconds
Total Time:          81.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.3 seconds, 73.8%
Fitness Testing:     12.8 seconds, 15.7%
Report:               8.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_stackdepth exec_if (integer_fromboolean integer_sub) ()))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_stackdepth exec_if (integer_fromboolean integer_sub) ()))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 562 183 1 359 170 1 401 942 1)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (255 562 183 1 359 170 1 401 942 1)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2) (in1) in1 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ()))
Errors: [0 0 1 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.125
Median total errors in population: 7
Error averages by case: (0.745 0.438 0.817 0.999 0.641 0.83 0.999 0.599 0.058 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.874
Average program size in population (points): 32.889
Average percent parens in population: 0.337
Minimum age in population: 45.54131931066513
Maximum age in population: 49.19546848535538
Average age in population: 47.46441518447176
Median age in population: 47.54131931066513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.371
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.006
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10027394
--- Timings ---
Current time: 1559314726435 milliseconds
Total Time:          84.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.2 seconds, 73.9%
Fitness Testing:     13.1 seconds, 15.6%
Report:               8.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 95                 
Correct output: 20                  | Program output: 43                 
Correct output: 16                  | Program output: 40                 
Correct output: 17                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 77                 
Correct output: 2                   | Program output: 45                 
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 84                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 82                 
Correct output: 49                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 83                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 69                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 23                 
Correct output: -79                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 26                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 22                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 21                 
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 13                 
Correct output: -49                 | Program output: 85                 
Correct output: -45                 | Program output: 72                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 73                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: 99                 
Correct output: -94                 | Program output: 30                 
Correct output: -68                 | Program output: 80                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 49                 
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 94                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: 56                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 70                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 12                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 31                 
Correct output: 14                  | Program output: 40                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 51                 
Correct output: -90                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) () (integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 exec_y_when_autoconstructing () print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Lexicase best errors: [0 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) () (integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 exec_y_when_autoconstructing () print_integer integer_gt exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Zero cases best errors: [0 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (946 934 830 418 300 306 305 178 372 306)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (946 934 830 418 300 306 305 178 372 306)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) () (integer_yank in2) exec_yankdup integer_yank in2 exec_y_when_autoconstructing (exec_yank in3) integer_yank in2 in2 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 5.105
Median total errors in population: 5
Error averages by case: (0.054 0.066 0.17 0.582 0.7 0.694 0.695 0.822 0.628 0.694)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.914
Average program size in population (points): 31.611
Average percent parens in population: 0.340
Minimum age in population: 46.54131931066513
Maximum age in population: 50.67117656348273
Average age in population: 48.97707613903703
Median age in population: 49.02456169738434
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 239
Genome diversity (% unique genomes):	 0.333
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 245
Syntactic diversity (% unique Push programs):	 0.317
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10252576
--- Timings ---
Current time: 1559314728782 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.0 seconds, 74.1%
Fitness Testing:     13.4 seconds, 15.5%
Report:               8.9 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 39                 
Correct output: 12                  | Program output: 87                 
Correct output: 20                  | Program output: 58                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 91                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 89                 
Correct output: 0                   | Program output: 45                 
Correct output: 2                   | Program output: 81                 
Correct output: 58                  | Program output: 74                 
Correct output: 62                  | Program output: 86                 
Correct output: 27                  | Program output: 60                 
Correct output: 29                  | Program output: 29                 
Correct output: 6                   | Program output: 39                 
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 51                 
Correct output: 49                  | Program output: 82                 
Correct output: 15                  | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 3                  
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 97                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: 6                  
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -33                
Correct output: -94                 | Program output: 17                 
Correct output: -68                 | Program output: 26                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 9                  
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: 60                 
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -6                 
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: 18                 
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: 14                  | Program output: 75                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: 72                 
Correct output: -90                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in3) integer_yank in2 in1 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in3) integer_yank in2 in1 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 645 933 444 645 3 1 445 188 286)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (294 645 933 444 645 3 1 445 188 286)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2) (exec_y_when_autoconstructing (exec_yank in3) integer_yank in3) integer_yank in2 in1 integer_yank in2 exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup boolean_swap exec_s (exec_if (integer_fromboolean integer_sub) ()) () ()))
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.116
Median total errors in population: 7
Error averages by case: (0.706 0.355 0.067 0.556 0.355 0.997 0.999 0.555 0.812 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.207
Average program size in population (points): 31.888
Average percent parens in population: 0.337
Minimum age in population: 48.79028833704069
Maximum age in population: 52.03257160261273
Average age in population: 50.68569637125707
Median age in population: 50.86861550144386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.364
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.329
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10474145
--- Timings ---
Current time: 1559314731188 milliseconds
Total Time:          88.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 74.1%
Fitness Testing:     13.7 seconds, 15.4%
Report:               9.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: 51                 
Correct output: -95                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 32                 
Correct output: 16                  | Program output: 79                 
Correct output: 17                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 32                 
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 83                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 67                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -25                
Correct output: -79                 | Program output: 93                 
Correct output: -98                 | Program output: -31                
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -30                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -29                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: 36                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 53                 
Correct output: -76                 | Program output: -9                 
Correct output: -39                 | Program output: 28                 
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -1                 
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -10                
Correct output: -49                 | Program output: 57                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -5                 
Correct output: -59                 | Program output: 19                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: 48                 
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -12                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -20                
Correct output: -54                 | Program output: -48                
Correct output: -50                 | Program output: -9                 
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -78                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) () (integer_yank in2 exec_do*count (exec_yank in1) exec_eq in2 exec_yank in3) integer_yank in2 boolean_stackdepth integer_yank integer_swap exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup) boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) () (integer_yank in2 exec_do*count (exec_yank in1) exec_eq in2 exec_yank in3) integer_yank in2 boolean_stackdepth integer_yank integer_swap exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup) boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 6 673 294 341 114 295 936 231 738)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (114 6 673 294 341 114 295 936 231 738)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) () (integer_yank in2 exec_do*count (exec_yank in1) exec_eq in2 exec_yank in3 integer_yank in2) boolean_stackdepth integer_yank integer_swap exec_y_when_autoconstructing (print_integer integer_gt exec_yankdup) boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Errors: [0 1 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 36
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.258
Median total errors in population: 7
Error averages by case: (0.886 0.994 0.327 0.706 0.659 0.886 0.705 0.064 0.769 0.262)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.232
Average program size in population (points): 32.699
Average percent parens in population: 0.321
Minimum age in population: 50.28785302117467
Maximum age in population: 53.72957351710647
Average age in population: 52.31847250858939
Median age in population: 52.34185931924731
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.324
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.3
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 10743592
--- Timings ---
Current time: 1559314733921 milliseconds
Total Time:          91.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 74.2%
Fitness Testing:     14.0 seconds, 15.3%
Report:               9.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output:                    
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: 19                 
Correct output: -84                 | Program output: 95                 
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 89                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 79                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 73                 
Correct output: 62                  | Program output: 70                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 65                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 46                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: 68                 
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: 44                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: 22                 
Correct output: -91                 | Program output: -11                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: 3                  
Correct output: -95                 | Program output: -42                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -9                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -5                 
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -84                
Correct output: -89                 | Program output: 50                 
Correct output: -72                 | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -1                 
Correct output: -24                 | Program output: 7                  
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) () (integer_yank in2 exec_y_when_autoconstructing (exec_yank in1) exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_yank boolean_or integer_min print_integer integer_eq exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) () (integer_yank in2 exec_y_when_autoconstructing (exec_yank in1) exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_yank boolean_or integer_min print_integer integer_eq exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (553 812 951 484 558 313 480 493 41 653)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (553 812 951 484 558 313 480 493 41 653)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) () (integer_yank in2 exec_y_when_autoconstructing (exec_yank in1) exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq exec_noop in2 in1 integer_yank boolean_or integer_min print_integer integer_eq exec_yankdup boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 4.662
Median total errors in population: 5
Error averages by case: (0.447 0.188 0.049 0.516 0.442 0.687 0.52 0.507 0.959 0.347)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.693
Average program size in population (points): 35.453
Average percent parens in population: 0.305
Minimum age in population: 51.32046848535538
Maximum age in population: 55.39509141817689
Average age in population: 53.81812853434874
Median age in population: 53.75303890230134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.353
Total error diversity:				 0.01
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 11131291
--- Timings ---
Current time: 1559314736475 milliseconds
Total Time:          94.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.6 seconds, 74.0%
Fitness Testing:     14.4 seconds, 15.3%
Report:               9.9 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output:                    
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) () (integer_yank exec_dup_times (exec_y_when_autoconstructing (exec_yank in1) exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2) in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) () (integer_yank exec_dup_times (exec_y_when_autoconstructing (exec_yank in1) exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2) in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 802 148 148 804 18 753 149 133 804)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (112 802 148 148 804 18 753 149 133 804)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) () (integer_yank exec_dup_times (exec_y_when_autoconstructing (exec_yank in1) exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2) in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.129
Median total errors in population: 6
Error averages by case: (0.888 0.198 0.852 0.852 0.196 0.982 0.247 0.851 0.867 0.196)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.254
Average program size in population (points): 38.241
Average percent parens in population: 0.288
Minimum age in population: 53.5266930453945
Maximum age in population: 57.07243639079388
Average age in population: 55.52735396221114
Median age in population: 55.64507056036382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 458
Genome diversity (% unique genomes):	 0.355
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 501
Syntactic diversity (% unique Push programs):	 0.322
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 11430220
--- Timings ---
Current time: 1559314738935 milliseconds
Total Time:          96.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.5 seconds, 74.0%
Fitness Testing:     14.8 seconds, 15.3%
Report:              10.2 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 15                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 7                  
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -100               
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output:                    
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2 exec_do*count (exec_yank in1 exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2) (in2) in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2 exec_do*count (exec_yank in1 exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2) (in2) in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 945 595 945 561 511 657 903 567 579)
Population mean number of elite cases: 6.46
Count of perfect (error zero) individuals by case: (193 945 595 945 561 511 657 903 567 579)
Population mean number of perfect (error zero) cases: 6.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) () (integer_yank exec_dup_times (exec_y_when_autoconstructing (exec_yank in1) exec_eq integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2) in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 3.544
Median total errors in population: 3
Error averages by case: (0.807 0.055 0.405 0.055 0.439 0.489 0.343 0.097 0.433 0.421)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.568
Average program size in population (points): 36.967
Average percent parens in population: 0.310
Minimum age in population: 55.06060931924731
Maximum age in population: 58.36576733383117
Average age in population: 57.4225385507559
Median age in population: 57.24297825386748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 394
Genome diversity (% unique genomes):	 0.343
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 409
Syntactic diversity (% unique Push programs):	 0.325
Total error diversity:				 0.01
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 11765715
--- Timings ---
Current time: 1559314741418 milliseconds
Total Time:          99.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.3 seconds, 74.0%
Fitness Testing:     15.2 seconds, 15.4%
Report:              10.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 275
Test mean error for best: 0.27500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 16                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 15                 
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Lexicase best program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank in1 exec_shove (integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 44
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Zero cases best program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank in1 exec_shove (integer_yank in2) exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 44
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 667 655 886 873 812 888 568 657 233)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (925 667 655 886 873 812 888 568 657 233)
Population mean number of perfect (error zero) cases: 7.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub})
Best program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 2.836
Median total errors in population: 2
Error averages by case: (0.075 0.333 0.345 0.114 0.127 0.188 0.112 0.432 0.343 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.454
Average program size in population (points): 39.668
Average percent parens in population: 0.283
Minimum age in population: 57.3249011823209
Maximum age in population: 60.36576733383117
Average age in population: 59.26772411873592
Median age in population: 59.36576733383117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.398
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.367
Total error diversity:				 0.011
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 12088305
--- Timings ---
Current time: 1559314743970 milliseconds
Total Time:         101.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.2 seconds, 74.0%
Fitness Testing:     15.6 seconds, 15.4%
Report:              10.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 38
Successful program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 43


Auto-simplifying with starting size: 43
step: 0
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 500
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1000
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1500
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2000
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2500
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3000
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3500
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4000
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4500
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 5000
program: (exec_s (exec_yankdup) (integer_yank in2 integer_mod exec_yank) (in3) integer_yank in2 in1 integer_yank integer_inc exec_eq integer_yank in2 exec_y_when_autoconstructing (exec_yank in4) exec_eq in2 in2 in1 integer_min boolean_or integer_min print_integer integer_eq in4 boolean_swap exec_s () (exec_if (integer_fromboolean integer_sub) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 275
Test mean error for best: 0.27500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -39                 | Program output: -39                
Correct output: 14                  | Program output: 14                 
Correct output: -78                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
Correct output: -2                  | Program output: -2                 
Correct output: -85                 | Program output: -85                
Correct output: -49                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: 84                  | Program output: 84                 
Correct output: -64                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 40                  | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 58                  | Program output: 58                 
Correct output: 62                  | Program output: 62                 
Correct output: 27                  | Program output: 27                 
Correct output: 29                  | Program output: 38                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: 15                  | Program output: 16                 
Correct output: -100                | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -79                 | Program output: -36                
Correct output: -98                 | Program output: -76                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -5                 
Correct output: -76                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -91                 | Program output: -91                
Correct output: -42                 | Program output: -42                
Correct output: -40                 | Program output: -40                
Correct output: 7                   | Program output: 15                 
Correct output: -79                 | Program output: -53                
Correct output: -66                 | Program output: -54                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -39                 | Program output: -39                
Correct output: -63                 | Program output: -63                
Correct output: -95                 | Program output: -74                
Correct output: -65                 | Program output: -65                
Correct output: -12                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -49                 | Program output: 41                 
Correct output: -45                 | Program output: 51                 
Correct output: -73                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -9                 
Correct output: -100                | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -43                 | Program output: 27                 
Correct output: -89                 | Program output: -8                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: 18                 
Correct output: 14                  | Program output: 14                 
Correct output: -49                 | Program output: -49                
Correct output: -93                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -52                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -45                 | Program output: -45                
Correct output: -90                 | Program output: -90                
;;******************************
