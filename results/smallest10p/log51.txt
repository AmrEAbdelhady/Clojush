Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[36 37 36 36] 36] [[84 84 -97 84] -97] [[-68 92 -68 -68] -68] [[8 -10 8 8] -10] [[-19 -19 -19 -76] -76] [[5 -75 -75 -75] -75] [[42 -83 42 42] -83] [[-74 4 4 4] -74] [[44 -23 44 44] -23] [[63 -59 63 63] -59] [(-59 -59 -59 -59) -59] [(23 23 23 23) 23] [(-54 -54 -54 -54) -54] [(-32 -32 -32 -32) -32] [(-53 -53 -53 -53) -53] [(85 46 55 81) 46] [(55 40 61 21) 21] [(83 51 94 57) 51] [(16 100 21 64) 16] [(85 75 18 23) 18] [(98 5 31 58) 5] [(37 68 21 98) 21] [(20 0 70 68) 0] [(59 77 35 55) 35] [(44 64 78 13) 13] [(58 3 57 36) 3] [(96 92 93 41) 41] [(29 74 18 8) 8] [(15 89 90 41) 15] [(0 30 77 2) 0] [(75 65 62 68) 62] [(61 64 85 19) 19] [(2 12 51 73) 2] [(35 44 93 28) 28] [(31 47 20 68) 20] [(-22 -43 -21 -44) -44] [(-67 91 -86 82) -86] [(31 -53 -77 8) -77] [(50 -69 -57 -70) -70] [(96 47 56 71) 47] [(24 -91 92 -27) -91] [(21 -53 12 -43) -53] [(-78 -70 33 56) -78] [(53 -93 57 -27) -93] [(49 54 -77 -78) -78] [(-76 -76 30 18) -76] [(-63 -45 -90 91) -90] [(-21 -92 -70 99) -92] [(-19 33 92 -31) -31] [(17 -5 -39 46) -39] [(-82 85 -96 -2) -96] [(62 14 94 -73) -73] [(74 9 -90 36) -90] [(69 13 13 -43) -43] [(30 -13 -27 -100) -100] [(-15 -9 -98 -31) -98] [(-46 -22 12 7) -46] [(8 52 -71 -95) -95] [(97 75 -7 -16) -16] [(0 -72 31 65) -72] [(46 -2 -21 -26) -26] [(94 -35 9 48) -35] [(22 10 -31 54) -31] [(44 -97 34 45) -97] [(41 39 75 -5) -5] [(85 -18 -53 -40) -53] [(34 78 20 -72) -72] [(-4 17 -90 45) -90] [(-31 21 -96 -92) -96] [(-36 99 86 89) -36] [(-63 -14 77 39) -63] [(32 75 30 84) 30] [(-12 -78 -32 -81) -81] [(-38 68 20 23) -38] [(37 -2 15 96) -2] [(32 -2 48 26) -2] [(6 79 -23 81) -23] [(-94 -35 24 -6) -94] [(-35 31 -4 -91) -91] [(-76 78 7 66) -76] [(65 -83 -31 10) -83] [(-15 97 64 69) -15] [(34 -11 -50 99) -50] [(-38 -86 -25 24) -86] [(47 52 -53 38) -53] [(17 22 -60 54) -60] [(-7 100 12 -39) -39] [(17 -98 -14 80) -98] [(64 -47 -63 -47) -63] [(82 13 -2 -21) -21] [(-8 96 12 -98) -98] [(-78 -85 13 40) -85] [(27 -45 -14 -26) -45] [(43 -35 27 -26) -35] [(-74 83 -92 73) -92])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[36 37 36 36] 36]
Train Case:   6 | Input/Output: [[84 84 -97 84] -97]
Train Case:   7 | Input/Output: [[-68 92 -68 -68] -68]
Train Case:   8 | Input/Output: [[8 -10 8 8] -10]
Train Case:   9 | Input/Output: [[-19 -19 -19 -76] -76]
Train Case:  10 | Input/Output: [[5 -75 -75 -75] -75]
Train Case:  11 | Input/Output: [[42 -83 42 42] -83]
Train Case:  12 | Input/Output: [[-74 4 4 4] -74]
Train Case:  13 | Input/Output: [[44 -23 44 44] -23]
Train Case:  14 | Input/Output: [[63 -59 63 63] -59]
Train Case:  15 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  16 | Input/Output: [(23 23 23 23) 23]
Train Case:  17 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  18 | Input/Output: [(-32 -32 -32 -32) -32]
Train Case:  19 | Input/Output: [(-53 -53 -53 -53) -53]
Train Case:  20 | Input/Output: [(85 46 55 81) 46]
Train Case:  21 | Input/Output: [(55 40 61 21) 21]
Train Case:  22 | Input/Output: [(83 51 94 57) 51]
Train Case:  23 | Input/Output: [(16 100 21 64) 16]
Train Case:  24 | Input/Output: [(85 75 18 23) 18]
Train Case:  25 | Input/Output: [(98 5 31 58) 5]
Train Case:  26 | Input/Output: [(37 68 21 98) 21]
Train Case:  27 | Input/Output: [(20 0 70 68) 0]
Train Case:  28 | Input/Output: [(59 77 35 55) 35]
Train Case:  29 | Input/Output: [(44 64 78 13) 13]
Train Case:  30 | Input/Output: [(58 3 57 36) 3]
Train Case:  31 | Input/Output: [(96 92 93 41) 41]
Train Case:  32 | Input/Output: [(29 74 18 8) 8]
Train Case:  33 | Input/Output: [(15 89 90 41) 15]
Train Case:  34 | Input/Output: [(0 30 77 2) 0]
Train Case:  35 | Input/Output: [(75 65 62 68) 62]
Train Case:  36 | Input/Output: [(61 64 85 19) 19]
Train Case:  37 | Input/Output: [(2 12 51 73) 2]
Train Case:  38 | Input/Output: [(35 44 93 28) 28]
Train Case:  39 | Input/Output: [(31 47 20 68) 20]
Train Case:  40 | Input/Output: [(-22 -43 -21 -44) -44]
Train Case:  41 | Input/Output: [(-67 91 -86 82) -86]
Train Case:  42 | Input/Output: [(31 -53 -77 8) -77]
Train Case:  43 | Input/Output: [(50 -69 -57 -70) -70]
Train Case:  44 | Input/Output: [(96 47 56 71) 47]
Train Case:  45 | Input/Output: [(24 -91 92 -27) -91]
Train Case:  46 | Input/Output: [(21 -53 12 -43) -53]
Train Case:  47 | Input/Output: [(-78 -70 33 56) -78]
Train Case:  48 | Input/Output: [(53 -93 57 -27) -93]
Train Case:  49 | Input/Output: [(49 54 -77 -78) -78]
Train Case:  50 | Input/Output: [(-76 -76 30 18) -76]
Train Case:  51 | Input/Output: [(-63 -45 -90 91) -90]
Train Case:  52 | Input/Output: [(-21 -92 -70 99) -92]
Train Case:  53 | Input/Output: [(-19 33 92 -31) -31]
Train Case:  54 | Input/Output: [(17 -5 -39 46) -39]
Train Case:  55 | Input/Output: [(-82 85 -96 -2) -96]
Train Case:  56 | Input/Output: [(62 14 94 -73) -73]
Train Case:  57 | Input/Output: [(74 9 -90 36) -90]
Train Case:  58 | Input/Output: [(69 13 13 -43) -43]
Train Case:  59 | Input/Output: [(30 -13 -27 -100) -100]
Train Case:  60 | Input/Output: [(-15 -9 -98 -31) -98]
Train Case:  61 | Input/Output: [(-46 -22 12 7) -46]
Train Case:  62 | Input/Output: [(8 52 -71 -95) -95]
Train Case:  63 | Input/Output: [(97 75 -7 -16) -16]
Train Case:  64 | Input/Output: [(0 -72 31 65) -72]
Train Case:  65 | Input/Output: [(46 -2 -21 -26) -26]
Train Case:  66 | Input/Output: [(94 -35 9 48) -35]
Train Case:  67 | Input/Output: [(22 10 -31 54) -31]
Train Case:  68 | Input/Output: [(44 -97 34 45) -97]
Train Case:  69 | Input/Output: [(41 39 75 -5) -5]
Train Case:  70 | Input/Output: [(85 -18 -53 -40) -53]
Train Case:  71 | Input/Output: [(34 78 20 -72) -72]
Train Case:  72 | Input/Output: [(-4 17 -90 45) -90]
Train Case:  73 | Input/Output: [(-31 21 -96 -92) -96]
Train Case:  74 | Input/Output: [(-36 99 86 89) -36]
Train Case:  75 | Input/Output: [(-63 -14 77 39) -63]
Train Case:  76 | Input/Output: [(32 75 30 84) 30]
Train Case:  77 | Input/Output: [(-12 -78 -32 -81) -81]
Train Case:  78 | Input/Output: [(-38 68 20 23) -38]
Train Case:  79 | Input/Output: [(37 -2 15 96) -2]
Train Case:  80 | Input/Output: [(32 -2 48 26) -2]
Train Case:  81 | Input/Output: [(6 79 -23 81) -23]
Train Case:  82 | Input/Output: [(-94 -35 24 -6) -94]
Train Case:  83 | Input/Output: [(-35 31 -4 -91) -91]
Train Case:  84 | Input/Output: [(-76 78 7 66) -76]
Train Case:  85 | Input/Output: [(65 -83 -31 10) -83]
Train Case:  86 | Input/Output: [(-15 97 64 69) -15]
Train Case:  87 | Input/Output: [(34 -11 -50 99) -50]
Train Case:  88 | Input/Output: [(-38 -86 -25 24) -86]
Train Case:  89 | Input/Output: [(47 52 -53 38) -53]
Train Case:  90 | Input/Output: [(17 22 -60 54) -60]
Train Case:  91 | Input/Output: [(-7 100 12 -39) -39]
Train Case:  92 | Input/Output: [(17 -98 -14 80) -98]
Train Case:  93 | Input/Output: [(64 -47 -63 -47) -63]
Train Case:  94 | Input/Output: [(82 13 -2 -21) -21]
Train Case:  95 | Input/Output: [(-8 96 12 -98) -98]
Train Case:  96 | Input/Output: [(-78 -85 13 40) -85]
Train Case:  97 | Input/Output: [(27 -45 -14 -26) -45]
Train Case:  98 | Input/Output: [(43 -35 27 -26) -35]
Train Case:  99 | Input/Output: [(-74 83 -92 73) -92]
Test Case:   0 | Input/Output: [[-29 73 73 73] -29]
Test Case:   1 | Input/Output: [[42 62 42 42] 42]
Test Case:   2 | Input/Output: [[-42 67 67 67] -42]
Test Case:   3 | Input/Output: [[7 7 7 73] 7]
Test Case:   4 | Input/Output: [[45 45 45 31] 31]
Test Case:   5 | Input/Output: [[58 58 80 58] 58]
Test Case:   6 | Input/Output: [[-36 -36 -72 -36] -72]
Test Case:   7 | Input/Output: [[-55 -55 -55 -55] -55]
Test Case:   8 | Input/Output: [[-70 -70 -61 -70] -70]
Test Case:   9 | Input/Output: [[-60 -60 -60 -52] -60]
Test Case:  10 | Input/Output: [[-57 -57 -57 58] -57]
Test Case:  11 | Input/Output: [[-64 -64 35 -64] -64]
Test Case:  12 | Input/Output: [[-17 -17 -17 -66] -66]
Test Case:  13 | Input/Output: [[-80 -80 67 -80] -80]
Test Case:  14 | Input/Output: [[48 48 48 -48] -48]
Test Case:  15 | Input/Output: [[-86 -86 70 -86] -86]
Test Case:  16 | Input/Output: [[37 37 88 37] 37]
Test Case:  17 | Input/Output: [[75 75 49 75] 49]
Test Case:  18 | Input/Output: [[87 87 87 -15] -15]
Test Case:  19 | Input/Output: [[81 81 -86 81] -86]
Test Case:  20 | Input/Output: [[69 69 69 6] 6]
Test Case:  21 | Input/Output: [[70 72 72 72] 70]
Test Case:  22 | Input/Output: [[22 22 22 -46] -46]
Test Case:  23 | Input/Output: [[2 2 2 81] 2]
Test Case:  24 | Input/Output: [[-9 17 17 17] -9]
Test Case:  25 | Input/Output: [[-52 39 39 39] -52]
Test Case:  26 | Input/Output: [[39 97 39 39] 39]
Test Case:  27 | Input/Output: [[67 67 -42 67] -42]
Test Case:  28 | Input/Output: [[-99 82 -99 -99] -99]
Test Case:  29 | Input/Output: [[-85 94 -85 -85] -85]
Test Case:  30 | Input/Output: [[-78 -78 -78 -12] -78]
Test Case:  31 | Input/Output: [[-7 79 -7 -7] -7]
Test Case:  32 | Input/Output: [[95 30 30 30] 30]
Test Case:  33 | Input/Output: [[-9 61 61 61] -9]
Test Case:  34 | Input/Output: [[-16 -99 -99 -99] -99]
Test Case:  35 | Input/Output: [[67 83 83 83] 67]
Test Case:  36 | Input/Output: [[27 27 -52 27] -52]
Test Case:  37 | Input/Output: [[29 73 73 73] 29]
Test Case:  38 | Input/Output: [[-66 -66 -66 36] -66]
Test Case:  39 | Input/Output: [[58 58 -57 58] -57]
Test Case:  40 | Input/Output: [[-85 -85 -85 -38] -85]
Test Case:  41 | Input/Output: [[-47 -78 -47 -47] -78]
Test Case:  42 | Input/Output: [[-63 -63 -99 -63] -99]
Test Case:  43 | Input/Output: [[51 51 -43 51] -43]
Test Case:  44 | Input/Output: [[77 77 -12 77] -12]
Test Case:  45 | Input/Output: [[-53 -98 -53 -53] -98]
Test Case:  46 | Input/Output: [[-46 -46 -46 -67] -67]
Test Case:  47 | Input/Output: [[-54 -54 12 -54] -54]
Test Case:  48 | Input/Output: [[48 -40 -40 -40] -40]
Test Case:  49 | Input/Output: [[91 83 83 83] 83]
Test Case:  50 | Input/Output: [[23 10 23 23] 10]
Test Case:  51 | Input/Output: [[37 98 37 37] 37]
Test Case:  52 | Input/Output: [[-34 -34 -34 -28] -34]
Test Case:  53 | Input/Output: [[-21 -21 -62 -21] -62]
Test Case:  54 | Input/Output: [[53 95 95 95] 53]
Test Case:  55 | Input/Output: [[-49 -49 -49 23] -49]
Test Case:  56 | Input/Output: [[-6 -6 -55 -6] -55]
Test Case:  57 | Input/Output: [[21 -59 21 21] -59]
Test Case:  58 | Input/Output: [[86 96 86 86] 86]
Test Case:  59 | Input/Output: [[6 6 65 6] 6]
Test Case:  60 | Input/Output: [[14 60 14 14] 14]
Test Case:  61 | Input/Output: [[-89 -89 42 -89] -89]
Test Case:  62 | Input/Output: [[46 -73 46 46] -73]
Test Case:  63 | Input/Output: [[22 62 62 62] 22]
Test Case:  64 | Input/Output: [[-66 -45 -66 -66] -66]
Test Case:  65 | Input/Output: [[76 76 76 -47] -47]
Test Case:  66 | Input/Output: [[13 13 13 74] 13]
Test Case:  67 | Input/Output: [[35 -2 35 35] -2]
Test Case:  68 | Input/Output: [[47 -88 -88 -88] -88]
Test Case:  69 | Input/Output: [[40 40 40 -34] -34]
Test Case:  70 | Input/Output: [[18 50 18 18] 18]
Test Case:  71 | Input/Output: [[44 44 44 -45] -45]
Test Case:  72 | Input/Output: [[-53 -53 -53 61] -53]
Test Case:  73 | Input/Output: [[87 64 64 64] 64]
Test Case:  74 | Input/Output: [[37 -45 37 37] -45]
Test Case:  75 | Input/Output: [[20 -6 20 20] -6]
Test Case:  76 | Input/Output: [[-40 -40 -93 -40] -93]
Test Case:  77 | Input/Output: [[7 7 72 7] 7]
Test Case:  78 | Input/Output: [[81 9 9 9] 9]
Test Case:  79 | Input/Output: [[17 -50 -50 -50] -50]
Test Case:  80 | Input/Output: [[67 80 67 67] 67]
Test Case:  81 | Input/Output: [[74 74 -46 74] -46]
Test Case:  82 | Input/Output: [[48 -65 48 48] -65]
Test Case:  83 | Input/Output: [[-25 -25 -43 -25] -43]
Test Case:  84 | Input/Output: [[88 -79 -79 -79] -79]
Test Case:  85 | Input/Output: [[-61 -19 -19 -19] -61]
Test Case:  86 | Input/Output: [[-73 -73 -66 -73] -73]
Test Case:  87 | Input/Output: [[-49 2 2 2] -49]
Test Case:  88 | Input/Output: [[-66 -96 -66 -66] -96]
Test Case:  89 | Input/Output: [[-11 -11 86 -11] -11]
Test Case:  90 | Input/Output: [[90 99 90 90] 90]
Test Case:  91 | Input/Output: [[-94 -18 -94 -94] -94]
Test Case:  92 | Input/Output: [[-47 -47 39 -47] -47]
Test Case:  93 | Input/Output: [[77 -18 -18 -18] -18]
Test Case:  94 | Input/Output: [[96 96 96 -27] -27]
Test Case:  95 | Input/Output: [[-51 54 54 54] -51]
Test Case:  96 | Input/Output: [[-5 -8 -8 -8] -8]
Test Case:  97 | Input/Output: [[13 46 13 13] 13]
Test Case:  98 | Input/Output: [[3 40 40 40] 3]
Test Case:  99 | Input/Output: [[60 60 -20 60] -20]
Test Case: 100 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 101 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 102 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 103 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 104 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 105 | Input/Output: [(94 94 94 94) 94]
Test Case: 106 | Input/Output: [(99 99 99 99) 99]
Test Case: 107 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 108 | Input/Output: [(33 33 33 33) 33]
Test Case: 109 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 110 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 111 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 112 | Input/Output: [(49 49 49 49) 49]
Test Case: 113 | Input/Output: [(4 4 4 4) 4]
Test Case: 114 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 115 | Input/Output: [(31 31 31 31) 31]
Test Case: 116 | Input/Output: [(41 41 41 41) 41]
Test Case: 117 | Input/Output: [(92 92 92 92) 92]
Test Case: 118 | Input/Output: [(21 21 21 21) 21]
Test Case: 119 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 120 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 121 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 122 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 123 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 124 | Input/Output: [(79 79 79 79) 79]
Test Case: 125 | Input/Output: [(79 79 79 79) 79]
Test Case: 126 | Input/Output: [(57 57 57 57) 57]
Test Case: 127 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 128 | Input/Output: [(11 11 11 11) 11]
Test Case: 129 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 130 | Input/Output: [(38 38 38 38) 38]
Test Case: 131 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 132 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 133 | Input/Output: [(29 29 29 29) 29]
Test Case: 134 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 135 | Input/Output: [(39 39 39 39) 39]
Test Case: 136 | Input/Output: [(48 48 48 48) 48]
Test Case: 137 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 138 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 139 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 140 | Input/Output: [(34 34 34 34) 34]
Test Case: 141 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 142 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 143 | Input/Output: [(62 62 62 62) 62]
Test Case: 144 | Input/Output: [(54 54 54 54) 54]
Test Case: 145 | Input/Output: [(46 46 46 46) 46]
Test Case: 146 | Input/Output: [(88 88 88 88) 88]
Test Case: 147 | Input/Output: [(20 20 20 20) 20]
Test Case: 148 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 149 | Input/Output: [(78 78 78 78) 78]
Test Case: 150 | Input/Output: [(8 8 8 8) 8]
Test Case: 151 | Input/Output: [(33 33 33 33) 33]
Test Case: 152 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 153 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 154 | Input/Output: [(32 32 32 32) 32]
Test Case: 155 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 156 | Input/Output: [(38 38 38 38) 38]
Test Case: 157 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 158 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 159 | Input/Output: [(18 18 18 18) 18]
Test Case: 160 | Input/Output: [(56 56 56 56) 56]
Test Case: 161 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 162 | Input/Output: [(30 30 30 30) 30]
Test Case: 163 | Input/Output: [(91 91 91 91) 91]
Test Case: 164 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 165 | Input/Output: [(0 0 0 0) 0]
Test Case: 166 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 167 | Input/Output: [(7 7 7 7) 7]
Test Case: 168 | Input/Output: [(68 68 68 68) 68]
Test Case: 169 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 170 | Input/Output: [(8 8 8 8) 8]
Test Case: 171 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 172 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 173 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 174 | Input/Output: [(30 30 30 30) 30]
Test Case: 175 | Input/Output: [(100 100 100 100) 100]
Test Case: 176 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 177 | Input/Output: [(23 23 23 23) 23]
Test Case: 178 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 179 | Input/Output: [(94 94 94 94) 94]
Test Case: 180 | Input/Output: [(86 86 86 86) 86]
Test Case: 181 | Input/Output: [(58 58 58 58) 58]
Test Case: 182 | Input/Output: [(47 47 47 47) 47]
Test Case: 183 | Input/Output: [(61 61 61 61) 61]
Test Case: 184 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 185 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 186 | Input/Output: [(33 33 33 33) 33]
Test Case: 187 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 188 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 189 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 190 | Input/Output: [(5 5 5 5) 5]
Test Case: 191 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 192 | Input/Output: [(24 24 24 24) 24]
Test Case: 193 | Input/Output: [(62 62 62 62) 62]
Test Case: 194 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 195 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 196 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 197 | Input/Output: [(79 79 79 79) 79]
Test Case: 198 | Input/Output: [(57 57 57 57) 57]
Test Case: 199 | Input/Output: [(79 79 79 79) 79]
Test Case: 200 | Input/Output: [(33 54 65 93) 33]
Test Case: 201 | Input/Output: [(10 59 21 84) 10]
Test Case: 202 | Input/Output: [(30 46 24 71) 24]
Test Case: 203 | Input/Output: [(85 99 38 39) 38]
Test Case: 204 | Input/Output: [(49 41 79 39) 39]
Test Case: 205 | Input/Output: [(68 45 24 83) 24]
Test Case: 206 | Input/Output: [(35 69 46 34) 34]
Test Case: 207 | Input/Output: [(92 52 51 98) 51]
Test Case: 208 | Input/Output: [(41 24 31 79) 24]
Test Case: 209 | Input/Output: [(75 53 47 94) 47]
Test Case: 210 | Input/Output: [(25 99 87 14) 14]
Test Case: 211 | Input/Output: [(68 2 49 62) 2]
Test Case: 212 | Input/Output: [(65 53 60 11) 11]
Test Case: 213 | Input/Output: [(86 89 43 56) 43]
Test Case: 214 | Input/Output: [(21 42 19 79) 19]
Test Case: 215 | Input/Output: [(26 45 46 67) 26]
Test Case: 216 | Input/Output: [(30 95 100 62) 30]
Test Case: 217 | Input/Output: [(40 79 75 13) 13]
Test Case: 218 | Input/Output: [(27 51 8 13) 8]
Test Case: 219 | Input/Output: [(66 86 20 45) 20]
Test Case: 220 | Input/Output: [(88 43 6 15) 6]
Test Case: 221 | Input/Output: [(81 5 69 69) 5]
Test Case: 222 | Input/Output: [(48 49 30 73) 30]
Test Case: 223 | Input/Output: [(13 35 61 43) 13]
Test Case: 224 | Input/Output: [(51 98 28 40) 28]
Test Case: 225 | Input/Output: [(95 28 13 25) 13]
Test Case: 226 | Input/Output: [(79 25 0 78) 0]
Test Case: 227 | Input/Output: [(33 54 32 71) 32]
Test Case: 228 | Input/Output: [(80 4 64 10) 4]
Test Case: 229 | Input/Output: [(28 96 76 16) 16]
Test Case: 230 | Input/Output: [(98 5 52 39) 5]
Test Case: 231 | Input/Output: [(57 35 1 54) 1]
Test Case: 232 | Input/Output: [(75 100 99 26) 26]
Test Case: 233 | Input/Output: [(79 83 37 87) 37]
Test Case: 234 | Input/Output: [(33 100 50 7) 7]
Test Case: 235 | Input/Output: [(82 94 89 64) 64]
Test Case: 236 | Input/Output: [(48 68 36 53) 36]
Test Case: 237 | Input/Output: [(52 84 2 24) 2]
Test Case: 238 | Input/Output: [(91 59 9 34) 9]
Test Case: 239 | Input/Output: [(33 42 62 38) 33]
Test Case: 240 | Input/Output: [(33 39 92 41) 33]
Test Case: 241 | Input/Output: [(66 98 37 24) 24]
Test Case: 242 | Input/Output: [(36 55 29 19) 19]
Test Case: 243 | Input/Output: [(72 90 7 56) 7]
Test Case: 244 | Input/Output: [(75 31 20 99) 20]
Test Case: 245 | Input/Output: [(62 80 98 46) 46]
Test Case: 246 | Input/Output: [(50 77 1 3) 1]
Test Case: 247 | Input/Output: [(7 78 1 80) 1]
Test Case: 248 | Input/Output: [(83 9 23 74) 9]
Test Case: 249 | Input/Output: [(41 84 16 24) 16]
Test Case: 250 | Input/Output: [(14 83 3 56) 3]
Test Case: 251 | Input/Output: [(63 17 94 93) 17]
Test Case: 252 | Input/Output: [(14 32 19 46) 14]
Test Case: 253 | Input/Output: [(19 100 41 62) 19]
Test Case: 254 | Input/Output: [(30 18 19 48) 18]
Test Case: 255 | Input/Output: [(40 82 75 45) 40]
Test Case: 256 | Input/Output: [(50 5 58 9) 5]
Test Case: 257 | Input/Output: [(44 57 67 18) 18]
Test Case: 258 | Input/Output: [(39 100 29 13) 13]
Test Case: 259 | Input/Output: [(16 15 87 25) 15]
Test Case: 260 | Input/Output: [(22 45 78 34) 22]
Test Case: 261 | Input/Output: [(35 74 39 95) 35]
Test Case: 262 | Input/Output: [(77 25 28 18) 18]
Test Case: 263 | Input/Output: [(12 30 29 53) 12]
Test Case: 264 | Input/Output: [(17 62 48 58) 17]
Test Case: 265 | Input/Output: [(59 46 67 43) 43]
Test Case: 266 | Input/Output: [(48 22 18 1) 1]
Test Case: 267 | Input/Output: [(30 43 19 99) 19]
Test Case: 268 | Input/Output: [(93 62 61 41) 41]
Test Case: 269 | Input/Output: [(2 27 42 72) 2]
Test Case: 270 | Input/Output: [(43 70 50 71) 43]
Test Case: 271 | Input/Output: [(33 23 61 94) 23]
Test Case: 272 | Input/Output: [(78 97 33 69) 33]
Test Case: 273 | Input/Output: [(27 16 25 71) 16]
Test Case: 274 | Input/Output: [(70 90 56 85) 56]
Test Case: 275 | Input/Output: [(94 79 9 96) 9]
Test Case: 276 | Input/Output: [(71 99 7 18) 7]
Test Case: 277 | Input/Output: [(43 98 29 40) 29]
Test Case: 278 | Input/Output: [(26 26 88 38) 26]
Test Case: 279 | Input/Output: [(77 73 67 0) 0]
Test Case: 280 | Input/Output: [(81 39 51 46) 39]
Test Case: 281 | Input/Output: [(52 10 79 28) 10]
Test Case: 282 | Input/Output: [(87 26 11 42) 11]
Test Case: 283 | Input/Output: [(46 25 71 26) 25]
Test Case: 284 | Input/Output: [(77 11 34 78) 11]
Test Case: 285 | Input/Output: [(60 5 80 47) 5]
Test Case: 286 | Input/Output: [(65 53 42 9) 9]
Test Case: 287 | Input/Output: [(53 53 10 13) 10]
Test Case: 288 | Input/Output: [(95 69 61 5) 5]
Test Case: 289 | Input/Output: [(62 66 15 56) 15]
Test Case: 290 | Input/Output: [(67 41 77 80) 41]
Test Case: 291 | Input/Output: [(18 64 69 56) 18]
Test Case: 292 | Input/Output: [(76 31 33 26) 26]
Test Case: 293 | Input/Output: [(12 58 73 14) 12]
Test Case: 294 | Input/Output: [(56 89 73 41) 41]
Test Case: 295 | Input/Output: [(99 35 5 44) 5]
Test Case: 296 | Input/Output: [(38 86 35 72) 35]
Test Case: 297 | Input/Output: [(87 40 13 74) 13]
Test Case: 298 | Input/Output: [(33 58 42 16) 16]
Test Case: 299 | Input/Output: [(4 57 13 71) 4]
Test Case: 300 | Input/Output: [(96 4 83 18) 4]
Test Case: 301 | Input/Output: [(31 46 78 26) 26]
Test Case: 302 | Input/Output: [(61 17 40 12) 12]
Test Case: 303 | Input/Output: [(35 46 100 52) 35]
Test Case: 304 | Input/Output: [(63 65 89 39) 39]
Test Case: 305 | Input/Output: [(53 26 57 39) 26]
Test Case: 306 | Input/Output: [(25 22 11 96) 11]
Test Case: 307 | Input/Output: [(59 39 6 39) 6]
Test Case: 308 | Input/Output: [(85 17 15 38) 15]
Test Case: 309 | Input/Output: [(5 98 74 71) 5]
Test Case: 310 | Input/Output: [(19 7 16 56) 7]
Test Case: 311 | Input/Output: [(8 52 7 53) 7]
Test Case: 312 | Input/Output: [(38 92 45 44) 38]
Test Case: 313 | Input/Output: [(27 42 85 48) 27]
Test Case: 314 | Input/Output: [(97 29 48 12) 12]
Test Case: 315 | Input/Output: [(83 93 36 77) 36]
Test Case: 316 | Input/Output: [(76 65 38 8) 8]
Test Case: 317 | Input/Output: [(22 99 96 100) 22]
Test Case: 318 | Input/Output: [(83 69 17 47) 17]
Test Case: 319 | Input/Output: [(96 33 75 58) 33]
Test Case: 320 | Input/Output: [(42 41 25 56) 25]
Test Case: 321 | Input/Output: [(0 57 30 53) 0]
Test Case: 322 | Input/Output: [(60 53 73 16) 16]
Test Case: 323 | Input/Output: [(33 42 1 82) 1]
Test Case: 324 | Input/Output: [(93 22 68 10) 10]
Test Case: 325 | Input/Output: [(53 38 60 68) 38]
Test Case: 326 | Input/Output: [(96 67 82 17) 17]
Test Case: 327 | Input/Output: [(27 57 35 70) 27]
Test Case: 328 | Input/Output: [(38 8 63 36) 8]
Test Case: 329 | Input/Output: [(39 87 76 60) 39]
Test Case: 330 | Input/Output: [(71 21 43 63) 21]
Test Case: 331 | Input/Output: [(1 72 19 33) 1]
Test Case: 332 | Input/Output: [(34 63 68 99) 34]
Test Case: 333 | Input/Output: [(20 76 36 2) 2]
Test Case: 334 | Input/Output: [(41 64 10 60) 10]
Test Case: 335 | Input/Output: [(20 33 61 29) 20]
Test Case: 336 | Input/Output: [(81 11 23 93) 11]
Test Case: 337 | Input/Output: [(18 3 35 83) 3]
Test Case: 338 | Input/Output: [(58 54 97 83) 54]
Test Case: 339 | Input/Output: [(93 13 36 32) 13]
Test Case: 340 | Input/Output: [(54 69 96 43) 43]
Test Case: 341 | Input/Output: [(61 70 5 22) 5]
Test Case: 342 | Input/Output: [(33 60 72 69) 33]
Test Case: 343 | Input/Output: [(43 30 33 2) 2]
Test Case: 344 | Input/Output: [(45 39 14 34) 14]
Test Case: 345 | Input/Output: [(67 61 58 99) 58]
Test Case: 346 | Input/Output: [(97 98 98 61) 61]
Test Case: 347 | Input/Output: [(40 47 54 46) 40]
Test Case: 348 | Input/Output: [(33 78 82 98) 33]
Test Case: 349 | Input/Output: [(72 42 95 20) 20]
Test Case: 350 | Input/Output: [(89 76 93 5) 5]
Test Case: 351 | Input/Output: [(24 9 17 13) 9]
Test Case: 352 | Input/Output: [(17 80 40 33) 17]
Test Case: 353 | Input/Output: [(62 22 68 59) 22]
Test Case: 354 | Input/Output: [(28 23 27 58) 23]
Test Case: 355 | Input/Output: [(13 19 61 65) 13]
Test Case: 356 | Input/Output: [(24 89 65 34) 24]
Test Case: 357 | Input/Output: [(30 0 54 40) 0]
Test Case: 358 | Input/Output: [(52 30 37 64) 30]
Test Case: 359 | Input/Output: [(23 17 8 12) 8]
Test Case: 360 | Input/Output: [(40 82 84 27) 27]
Test Case: 361 | Input/Output: [(44 95 3 3) 3]
Test Case: 362 | Input/Output: [(39 69 82 15) 15]
Test Case: 363 | Input/Output: [(28 39 9 72) 9]
Test Case: 364 | Input/Output: [(54 29 97 75) 29]
Test Case: 365 | Input/Output: [(56 39 42 30) 30]
Test Case: 366 | Input/Output: [(93 31 8 50) 8]
Test Case: 367 | Input/Output: [(67 29 33 93) 29]
Test Case: 368 | Input/Output: [(4 70 73 66) 4]
Test Case: 369 | Input/Output: [(29 60 4 77) 4]
Test Case: 370 | Input/Output: [(21 27 99 57) 21]
Test Case: 371 | Input/Output: [(93 38 9 42) 9]
Test Case: 372 | Input/Output: [(22 73 1 27) 1]
Test Case: 373 | Input/Output: [(32 48 83 4) 4]
Test Case: 374 | Input/Output: [(44 43 41 21) 21]
Test Case: 375 | Input/Output: [(46 28 43 48) 28]
Test Case: 376 | Input/Output: [(29 14 58 1) 1]
Test Case: 377 | Input/Output: [(20 84 48 9) 9]
Test Case: 378 | Input/Output: [(10 4 48 33) 4]
Test Case: 379 | Input/Output: [(91 44 31 27) 27]
Test Case: 380 | Input/Output: [(0 58 32 9) 0]
Test Case: 381 | Input/Output: [(56 90 81 31) 31]
Test Case: 382 | Input/Output: [(10 40 23 18) 10]
Test Case: 383 | Input/Output: [(57 3 19 25) 3]
Test Case: 384 | Input/Output: [(78 99 54 85) 54]
Test Case: 385 | Input/Output: [(89 62 94 95) 62]
Test Case: 386 | Input/Output: [(53 34 32 28) 28]
Test Case: 387 | Input/Output: [(80 55 31 26) 26]
Test Case: 388 | Input/Output: [(85 26 20 53) 20]
Test Case: 389 | Input/Output: [(25 28 87 40) 25]
Test Case: 390 | Input/Output: [(47 67 73 67) 47]
Test Case: 391 | Input/Output: [(6 94 10 52) 6]
Test Case: 392 | Input/Output: [(90 23 77 98) 23]
Test Case: 393 | Input/Output: [(36 51 42 68) 36]
Test Case: 394 | Input/Output: [(51 61 88 52) 51]
Test Case: 395 | Input/Output: [(89 24 63 24) 24]
Test Case: 396 | Input/Output: [(68 95 3 70) 3]
Test Case: 397 | Input/Output: [(95 61 29 9) 9]
Test Case: 398 | Input/Output: [(54 32 30 42) 30]
Test Case: 399 | Input/Output: [(82 38 47 61) 38]
Test Case: 400 | Input/Output: [(-7 49 -38 48) -38]
Test Case: 401 | Input/Output: [(61 -96 -86 93) -96]
Test Case: 402 | Input/Output: [(-84 76 90 25) -84]
Test Case: 403 | Input/Output: [(23 6 -54 2) -54]
Test Case: 404 | Input/Output: [(-35 35 -53 20) -53]
Test Case: 405 | Input/Output: [(-9 -16 -78 15) -78]
Test Case: 406 | Input/Output: [(-31 -96 78 -67) -96]
Test Case: 407 | Input/Output: [(-6 49 -54 96) -54]
Test Case: 408 | Input/Output: [(-55 -57 -8 -65) -65]
Test Case: 409 | Input/Output: [(-49 54 1 65) -49]
Test Case: 410 | Input/Output: [(78 84 81 -19) -19]
Test Case: 411 | Input/Output: [(2 -39 45 18) -39]
Test Case: 412 | Input/Output: [(17 9 -77 87) -77]
Test Case: 413 | Input/Output: [(6 -76 -60 -62) -76]
Test Case: 414 | Input/Output: [(-88 -96 43 49) -96]
Test Case: 415 | Input/Output: [(46 -98 65 -37) -98]
Test Case: 416 | Input/Output: [(-82 4 77 45) -82]
Test Case: 417 | Input/Output: [(0 59 0 98) 0]
Test Case: 418 | Input/Output: [(62 -8 -6 -91) -91]
Test Case: 419 | Input/Output: [(-6 -54 -50 32) -54]
Test Case: 420 | Input/Output: [(54 38 91 -60) -60]
Test Case: 421 | Input/Output: [(85 -91 56 56) -91]
Test Case: 422 | Input/Output: [(75 -48 -78 -20) -78]
Test Case: 423 | Input/Output: [(-46 18 2 -77) -77]
Test Case: 424 | Input/Output: [(91 -63 65 82) -63]
Test Case: 425 | Input/Output: [(-34 -82 96 -86) -86]
Test Case: 426 | Input/Output: [(-24 -2 -41 15) -41]
Test Case: 427 | Input/Output: [(-3 -97 -40 6) -97]
Test Case: 428 | Input/Output: [(21 2 -30 17) -30]
Test Case: 429 | Input/Output: [(-7 86 -70 55) -70]
Test Case: 430 | Input/Output: [(-33 79 1 -7) -33]
Test Case: 431 | Input/Output: [(54 -72 -12 61) -72]
Test Case: 432 | Input/Output: [(93 89 66 83) 66]
Test Case: 433 | Input/Output: [(-67 -49 98 44) -67]
Test Case: 434 | Input/Output: [(22 -60 85 -82) -82]
Test Case: 435 | Input/Output: [(56 39 27 -48) -48]
Test Case: 436 | Input/Output: [(-87 48 61 10) -87]
Test Case: 437 | Input/Output: [(53 -56 62 -69) -69]
Test Case: 438 | Input/Output: [(21 55 -63 42) -63]
Test Case: 439 | Input/Output: [(-97 60 65 -3) -97]
Test Case: 440 | Input/Output: [(-54 88 95 44) -54]
Test Case: 441 | Input/Output: [(16 14 -13 -42) -42]
Test Case: 442 | Input/Output: [(84 -38 51 27) -38]
Test Case: 443 | Input/Output: [(68 -20 -59 -83) -83]
Test Case: 444 | Input/Output: [(-59 54 88 81) -59]
Test Case: 445 | Input/Output: [(41 -63 12 -36) -63]
Test Case: 446 | Input/Output: [(-55 -40 -89 -100) -100]
Test Case: 447 | Input/Output: [(-29 78 -66 91) -66]
Test Case: 448 | Input/Output: [(-62 59 65 84) -62]
Test Case: 449 | Input/Output: [(75 -55 -40 60) -55]
Test Case: 450 | Input/Output: [(50 -24 64 65) -24]
Test Case: 451 | Input/Output: [(-21 63 66 10) -21]
Test Case: 452 | Input/Output: [(-95 57 45 91) -95]
Test Case: 453 | Input/Output: [(89 -52 80 -86) -86]
Test Case: 454 | Input/Output: [(93 79 78 -76) -76]
Test Case: 455 | Input/Output: [(-85 77 39 76) -85]
Test Case: 456 | Input/Output: [(11 78 -73 59) -73]
Test Case: 457 | Input/Output: [(20 49 72 65) 20]
Test Case: 458 | Input/Output: [(-74 -22 -94 18) -94]
Test Case: 459 | Input/Output: [(36 23 53 -95) -95]
Test Case: 460 | Input/Output: [(-76 67 -41 -62) -76]
Test Case: 461 | Input/Output: [(26 89 -25 -20) -25]
Test Case: 462 | Input/Output: [(41 -20 92 78) -20]
Test Case: 463 | Input/Output: [(14 -94 -52 45) -94]
Test Case: 464 | Input/Output: [(-52 71 -67 -60) -67]
Test Case: 465 | Input/Output: [(33 42 88 23) 23]
Test Case: 466 | Input/Output: [(-22 67 -85 48) -85]
Test Case: 467 | Input/Output: [(14 66 83 42) 14]
Test Case: 468 | Input/Output: [(-5 96 -13 48) -13]
Test Case: 469 | Input/Output: [(41 -85 76 -93) -93]
Test Case: 470 | Input/Output: [(-30 -23 -56 -60) -60]
Test Case: 471 | Input/Output: [(55 -41 -88 -34) -88]
Test Case: 472 | Input/Output: [(-68 -73 83 60) -73]
Test Case: 473 | Input/Output: [(-88 -30 5 -70) -88]
Test Case: 474 | Input/Output: [(14 70 75 77) 14]
Test Case: 475 | Input/Output: [(-17 81 -39 53) -39]
Test Case: 476 | Input/Output: [(-12 8 65 -99) -99]
Test Case: 477 | Input/Output: [(2 51 93 44) 2]
Test Case: 478 | Input/Output: [(-98 48 -15 -58) -98]
Test Case: 479 | Input/Output: [(79 -29 -45 18) -45]
Test Case: 480 | Input/Output: [(91 -26 -9 17) -26]
Test Case: 481 | Input/Output: [(-3 79 80 -56) -56]
Test Case: 482 | Input/Output: [(32 42 98 77) 32]
Test Case: 483 | Input/Output: [(14 63 100 -97) -97]
Test Case: 484 | Input/Output: [(-58 70 -92 56) -92]
Test Case: 485 | Input/Output: [(-57 -72 51 -98) -98]
Test Case: 486 | Input/Output: [(16 -55 45 81) -55]
Test Case: 487 | Input/Output: [(-41 -13 -30 -64) -64]
Test Case: 488 | Input/Output: [(-48 18 24 -27) -48]
Test Case: 489 | Input/Output: [(10 15 48 -10) -10]
Test Case: 490 | Input/Output: [(8 -90 98 18) -90]
Test Case: 491 | Input/Output: [(-63 -87 33 -93) -93]
Test Case: 492 | Input/Output: [(-12 -64 -69 23) -69]
Test Case: 493 | Input/Output: [(-18 -77 66 -73) -77]
Test Case: 494 | Input/Output: [(-48 26 -100 -96) -100]
Test Case: 495 | Input/Output: [(46 -47 -64 -80) -80]
Test Case: 496 | Input/Output: [(74 -64 12 85) -64]
Test Case: 497 | Input/Output: [(33 3 -79 -89) -89]
Test Case: 498 | Input/Output: [(-33 20 -42 -9) -42]
Test Case: 499 | Input/Output: [(68 -51 86 4) -51]
Test Case: 500 | Input/Output: [(-46 42 17 -43) -46]
Test Case: 501 | Input/Output: [(20 -82 20 -36) -82]
Test Case: 502 | Input/Output: [(4 -100 94 -31) -100]
Test Case: 503 | Input/Output: [(19 79 -72 -17) -72]
Test Case: 504 | Input/Output: [(-98 -9 -47 -35) -98]
Test Case: 505 | Input/Output: [(13 6 -81 -95) -95]
Test Case: 506 | Input/Output: [(-95 56 40 -26) -95]
Test Case: 507 | Input/Output: [(-79 72 -21 -84) -84]
Test Case: 508 | Input/Output: [(-53 5 43 85) -53]
Test Case: 509 | Input/Output: [(10 10 -85 9) -85]
Test Case: 510 | Input/Output: [(16 -20 81 13) -20]
Test Case: 511 | Input/Output: [(-67 -81 -59 90) -81]
Test Case: 512 | Input/Output: [(27 -53 -36 -60) -60]
Test Case: 513 | Input/Output: [(22 85 69 11) 11]
Test Case: 514 | Input/Output: [(37 15 -48 79) -48]
Test Case: 515 | Input/Output: [(4 -37 -72 -20) -72]
Test Case: 516 | Input/Output: [(42 -72 25 39) -72]
Test Case: 517 | Input/Output: [(-13 49 64 97) -13]
Test Case: 518 | Input/Output: [(-65 85 -73 -26) -73]
Test Case: 519 | Input/Output: [(11 -46 -40 32) -46]
Test Case: 520 | Input/Output: [(-36 87 -18 -31) -36]
Test Case: 521 | Input/Output: [(-65 43 87 -41) -65]
Test Case: 522 | Input/Output: [(82 50 69 93) 50]
Test Case: 523 | Input/Output: [(-30 97 78 -63) -63]
Test Case: 524 | Input/Output: [(-5 -10 -8 -30) -30]
Test Case: 525 | Input/Output: [(-63 51 26 71) -63]
Test Case: 526 | Input/Output: [(-90 26 33 59) -90]
Test Case: 527 | Input/Output: [(37 34 18 23) 18]
Test Case: 528 | Input/Output: [(-25 -33 2 -4) -33]
Test Case: 529 | Input/Output: [(-13 41 56 -51) -51]
Test Case: 530 | Input/Output: [(79 6 29 46) 6]
Test Case: 531 | Input/Output: [(45 -27 -93 99) -93]
Test Case: 532 | Input/Output: [(-92 -70 -3 94) -92]
Test Case: 533 | Input/Output: [(-81 83 56 93) -81]
Test Case: 534 | Input/Output: [(81 46 -12 -51) -51]
Test Case: 535 | Input/Output: [(-18 -84 16 -13) -84]
Test Case: 536 | Input/Output: [(30 -82 93 57) -82]
Test Case: 537 | Input/Output: [(35 -76 -50 -69) -76]
Test Case: 538 | Input/Output: [(19 -28 -24 -64) -64]
Test Case: 539 | Input/Output: [(12 -17 -45 -100) -100]
Test Case: 540 | Input/Output: [(-41 84 -97 81) -97]
Test Case: 541 | Input/Output: [(20 -51 24 -78) -78]
Test Case: 542 | Input/Output: [(92 23 52 5) 5]
Test Case: 543 | Input/Output: [(-36 -59 7 18) -59]
Test Case: 544 | Input/Output: [(-56 20 66 -55) -56]
Test Case: 545 | Input/Output: [(-81 -9 -64 -40) -81]
Test Case: 546 | Input/Output: [(-22 -90 46 -79) -90]
Test Case: 547 | Input/Output: [(15 -41 24 -94) -94]
Test Case: 548 | Input/Output: [(38 -57 -95 -37) -95]
Test Case: 549 | Input/Output: [(-19 -32 7 70) -32]
Test Case: 550 | Input/Output: [(-20 -43 46 18) -43]
Test Case: 551 | Input/Output: [(45 -97 -70 -29) -97]
Test Case: 552 | Input/Output: [(-71 -33 -3 -27) -71]
Test Case: 553 | Input/Output: [(-99 35 8 43) -99]
Test Case: 554 | Input/Output: [(-50 0 -50 83) -50]
Test Case: 555 | Input/Output: [(-80 -66 -69 -65) -80]
Test Case: 556 | Input/Output: [(-3 46 10 -43) -43]
Test Case: 557 | Input/Output: [(-63 -10 -10 -11) -63]
Test Case: 558 | Input/Output: [(40 -28 -31 71) -31]
Test Case: 559 | Input/Output: [(33 42 -58 95) -58]
Test Case: 560 | Input/Output: [(18 -27 -60 68) -60]
Test Case: 561 | Input/Output: [(-53 92 86 -52) -53]
Test Case: 562 | Input/Output: [(-47 27 14 -22) -47]
Test Case: 563 | Input/Output: [(2 -41 -17 -3) -41]
Test Case: 564 | Input/Output: [(-19 -26 28 -67) -67]
Test Case: 565 | Input/Output: [(15 -27 93 -86) -86]
Test Case: 566 | Input/Output: [(54 1 31 -49) -49]
Test Case: 567 | Input/Output: [(59 76 -45 -83) -83]
Test Case: 568 | Input/Output: [(-95 44 -83 -97) -97]
Test Case: 569 | Input/Output: [(33 -17 -76 -7) -76]
Test Case: 570 | Input/Output: [(46 12 66 10) 10]
Test Case: 571 | Input/Output: [(-50 -29 -65 -41) -65]
Test Case: 572 | Input/Output: [(74 -58 -87 -4) -87]
Test Case: 573 | Input/Output: [(-16 81 18 -10) -16]
Test Case: 574 | Input/Output: [(82 52 -2 -94) -94]
Test Case: 575 | Input/Output: [(-72 -86 38 100) -86]
Test Case: 576 | Input/Output: [(-23 93 11 40) -23]
Test Case: 577 | Input/Output: [(-4 57 -1 -49) -49]
Test Case: 578 | Input/Output: [(-43 -48 -21 -64) -64]
Test Case: 579 | Input/Output: [(-28 37 -56 -64) -64]
Test Case: 580 | Input/Output: [(-50 53 94 -46) -50]
Test Case: 581 | Input/Output: [(-93 56 11 -60) -93]
Test Case: 582 | Input/Output: [(-89 -39 -79 -8) -89]
Test Case: 583 | Input/Output: [(-13 25 -81 -5) -81]
Test Case: 584 | Input/Output: [(-68 55 -51 45) -68]
Test Case: 585 | Input/Output: [(-87 31 47 -87) -87]
Test Case: 586 | Input/Output: [(30 -13 87 -85) -85]
Test Case: 587 | Input/Output: [(32 -73 38 100) -73]
Test Case: 588 | Input/Output: [(99 6 33 -61) -61]
Test Case: 589 | Input/Output: [(6 46 -84 -72) -84]
Test Case: 590 | Input/Output: [(75 -28 -99 -72) -99]
Test Case: 591 | Input/Output: [(52 -12 16 -87) -87]
Test Case: 592 | Input/Output: [(-54 37 -37 -1) -54]
Test Case: 593 | Input/Output: [(21 -47 -48 55) -48]
Test Case: 594 | Input/Output: [(68 67 -47 59) -47]
Test Case: 595 | Input/Output: [(-8 3 37 38) -8]
Test Case: 596 | Input/Output: [(86 4 44 -100) -100]
Test Case: 597 | Input/Output: [(-93 -100 15 -44) -100]
Test Case: 598 | Input/Output: [(39 -2 89 52) -2]
Test Case: 599 | Input/Output: [(4 35 29 -29) -29]
Test Case: 600 | Input/Output: [(8 -56 70 -85) -85]
Test Case: 601 | Input/Output: [(24 4 97 91) 4]
Test Case: 602 | Input/Output: [(40 11 66 -48) -48]
Test Case: 603 | Input/Output: [(88 -3 -81 -55) -81]
Test Case: 604 | Input/Output: [(-94 -94 -65 58) -94]
Test Case: 605 | Input/Output: [(-88 -51 -88 -25) -88]
Test Case: 606 | Input/Output: [(45 73 6 -99) -99]
Test Case: 607 | Input/Output: [(-33 -2 -85 28) -85]
Test Case: 608 | Input/Output: [(-45 -87 -63 -50) -87]
Test Case: 609 | Input/Output: [(-97 -12 84 22) -97]
Test Case: 610 | Input/Output: [(-28 92 -28 -10) -28]
Test Case: 611 | Input/Output: [(78 12 -53 -6) -53]
Test Case: 612 | Input/Output: [(-92 1 2 -48) -92]
Test Case: 613 | Input/Output: [(-88 -50 -10 -39) -88]
Test Case: 614 | Input/Output: [(52 -22 -96 32) -96]
Test Case: 615 | Input/Output: [(18 48 -75 -7) -75]
Test Case: 616 | Input/Output: [(-45 49 -45 -57) -57]
Test Case: 617 | Input/Output: [(39 97 85 -81) -81]
Test Case: 618 | Input/Output: [(90 68 67 96) 67]
Test Case: 619 | Input/Output: [(-71 43 21 22) -71]
Test Case: 620 | Input/Output: [(100 62 50 -22) -22]
Test Case: 621 | Input/Output: [(94 -97 78 41) -97]
Test Case: 622 | Input/Output: [(-3 92 -49 -94) -94]
Test Case: 623 | Input/Output: [(32 -76 -46 13) -76]
Test Case: 624 | Input/Output: [(51 -21 18 -46) -46]
Test Case: 625 | Input/Output: [(60 -92 12 100) -92]
Test Case: 626 | Input/Output: [(-52 -51 -95 -1) -95]
Test Case: 627 | Input/Output: [(-33 -91 100 -88) -91]
Test Case: 628 | Input/Output: [(1 -22 -100 -47) -100]
Test Case: 629 | Input/Output: [(-71 -80 91 37) -80]
Test Case: 630 | Input/Output: [(-42 37 -90 72) -90]
Test Case: 631 | Input/Output: [(6 84 15 99) 6]
Test Case: 632 | Input/Output: [(65 -41 -35 14) -41]
Test Case: 633 | Input/Output: [(39 71 -43 99) -43]
Test Case: 634 | Input/Output: [(100 -89 -7 -63) -89]
Test Case: 635 | Input/Output: [(90 81 -66 -41) -66]
Test Case: 636 | Input/Output: [(95 1 -96 -39) -96]
Test Case: 637 | Input/Output: [(-16 -81 -48 -3) -81]
Test Case: 638 | Input/Output: [(52 -64 -47 -58) -64]
Test Case: 639 | Input/Output: [(-26 53 74 -27) -27]
Test Case: 640 | Input/Output: [(20 2 -3 -1) -3]
Test Case: 641 | Input/Output: [(23 95 88 -68) -68]
Test Case: 642 | Input/Output: [(20 95 -74 22) -74]
Test Case: 643 | Input/Output: [(-39 24 97 25) -39]
Test Case: 644 | Input/Output: [(43 -54 49 76) -54]
Test Case: 645 | Input/Output: [(64 -98 -97 -62) -98]
Test Case: 646 | Input/Output: [(26 -78 22 44) -78]
Test Case: 647 | Input/Output: [(-74 -57 -77 15) -77]
Test Case: 648 | Input/Output: [(-76 35 1 7) -76]
Test Case: 649 | Input/Output: [(75 88 32 73) 32]
Test Case: 650 | Input/Output: [(-47 32 0 -2) -47]
Test Case: 651 | Input/Output: [(50 -59 0 -92) -92]
Test Case: 652 | Input/Output: [(-5 3 -33 67) -33]
Test Case: 653 | Input/Output: [(56 -14 7 21) -14]
Test Case: 654 | Input/Output: [(5 -3 65 -92) -92]
Test Case: 655 | Input/Output: [(86 -39 53 29) -39]
Test Case: 656 | Input/Output: [(47 -73 -81 80) -81]
Test Case: 657 | Input/Output: [(-35 26 29 72) -35]
Test Case: 658 | Input/Output: [(83 73 6 98) 6]
Test Case: 659 | Input/Output: [(-57 -8 99 -99) -99]
Test Case: 660 | Input/Output: [(-61 74 55 -79) -79]
Test Case: 661 | Input/Output: [(-85 24 47 97) -85]
Test Case: 662 | Input/Output: [(-96 83 34 -95) -96]
Test Case: 663 | Input/Output: [(59 -83 -62 54) -83]
Test Case: 664 | Input/Output: [(-56 26 -78 73) -78]
Test Case: 665 | Input/Output: [(-95 49 79 -45) -95]
Test Case: 666 | Input/Output: [(93 -99 71 63) -99]
Test Case: 667 | Input/Output: [(-21 -64 -13 -13) -64]
Test Case: 668 | Input/Output: [(-9 -40 -83 -22) -83]
Test Case: 669 | Input/Output: [(-18 21 -81 77) -81]
Test Case: 670 | Input/Output: [(66 -78 82 -51) -78]
Test Case: 671 | Input/Output: [(-91 77 -24 9) -91]
Test Case: 672 | Input/Output: [(1 -55 -62 -10) -62]
Test Case: 673 | Input/Output: [(-46 -86 45 -74) -86]
Test Case: 674 | Input/Output: [(10 60 -90 -73) -90]
Test Case: 675 | Input/Output: [(-100 -68 -61 -73) -100]
Test Case: 676 | Input/Output: [(-85 -94 18 81) -94]
Test Case: 677 | Input/Output: [(-43 82 6 64) -43]
Test Case: 678 | Input/Output: [(76 3 -25 -82) -82]
Test Case: 679 | Input/Output: [(-86 31 30 -46) -86]
Test Case: 680 | Input/Output: [(84 -77 36 11) -77]
Test Case: 681 | Input/Output: [(-87 88 -27 48) -87]
Test Case: 682 | Input/Output: [(-9 -75 13 16) -75]
Test Case: 683 | Input/Output: [(57 50 88 -31) -31]
Test Case: 684 | Input/Output: [(-22 24 -75 -78) -78]
Test Case: 685 | Input/Output: [(27 42 31 -69) -69]
Test Case: 686 | Input/Output: [(-55 21 -78 41) -78]
Test Case: 687 | Input/Output: [(-20 95 52 67) -20]
Test Case: 688 | Input/Output: [(-6 81 -5 -92) -92]
Test Case: 689 | Input/Output: [(-76 96 58 84) -76]
Test Case: 690 | Input/Output: [(77 89 8 -92) -92]
Test Case: 691 | Input/Output: [(-100 -36 40 -63) -100]
Test Case: 692 | Input/Output: [(-3 28 35 -56) -56]
Test Case: 693 | Input/Output: [(-57 66 98 3) -57]
Test Case: 694 | Input/Output: [(-11 87 -66 -12) -66]
Test Case: 695 | Input/Output: [(-16 -10 -40 91) -40]
Test Case: 696 | Input/Output: [(-51 -88 -8 -51) -88]
Test Case: 697 | Input/Output: [(94 14 89 -60) -60]
Test Case: 698 | Input/Output: [(74 27 2 -12) -12]
Test Case: 699 | Input/Output: [(-4 84 64 11) -4]
Test Case: 700 | Input/Output: [(-16 -46 -65 91) -65]
Test Case: 701 | Input/Output: [(-93 -95 -66 64) -95]
Test Case: 702 | Input/Output: [(88 -12 -52 -46) -52]
Test Case: 703 | Input/Output: [(-78 23 80 -3) -78]
Test Case: 704 | Input/Output: [(29 -70 -60 78) -70]
Test Case: 705 | Input/Output: [(58 35 39 -53) -53]
Test Case: 706 | Input/Output: [(25 86 22 22) 22]
Test Case: 707 | Input/Output: [(-63 27 12 -62) -63]
Test Case: 708 | Input/Output: [(-41 -83 -89 -78) -89]
Test Case: 709 | Input/Output: [(16 61 90 82) 16]
Test Case: 710 | Input/Output: [(50 59 15 52) 15]
Test Case: 711 | Input/Output: [(-77 -7 55 -46) -77]
Test Case: 712 | Input/Output: [(35 3 -54 40) -54]
Test Case: 713 | Input/Output: [(7 -68 -17 19) -68]
Test Case: 714 | Input/Output: [(53 44 -74 -48) -74]
Test Case: 715 | Input/Output: [(7 -76 35 -12) -76]
Test Case: 716 | Input/Output: [(16 26 55 15) 15]
Test Case: 717 | Input/Output: [(94 -16 14 -3) -16]
Test Case: 718 | Input/Output: [(35 -38 36 -32) -38]
Test Case: 719 | Input/Output: [(36 80 -31 -21) -31]
Test Case: 720 | Input/Output: [(-23 -41 -63 65) -63]
Test Case: 721 | Input/Output: [(-97 11 92 7) -97]
Test Case: 722 | Input/Output: [(-86 62 52 -61) -86]
Test Case: 723 | Input/Output: [(-63 -48 -60 -8) -63]
Test Case: 724 | Input/Output: [(-51 25 -72 -49) -72]
Test Case: 725 | Input/Output: [(-16 -32 -45 83) -45]
Test Case: 726 | Input/Output: [(4 68 -55 -35) -55]
Test Case: 727 | Input/Output: [(-100 20 2 58) -100]
Test Case: 728 | Input/Output: [(-60 93 98 -37) -60]
Test Case: 729 | Input/Output: [(-10 -74 18 -54) -74]
Test Case: 730 | Input/Output: [(-79 -47 -7 69) -79]
Test Case: 731 | Input/Output: [(-7 35 80 1) -7]
Test Case: 732 | Input/Output: [(80 16 -63 28) -63]
Test Case: 733 | Input/Output: [(74 93 -28 83) -28]
Test Case: 734 | Input/Output: [(93 -33 61 -66) -66]
Test Case: 735 | Input/Output: [(9 41 33 -31) -31]
Test Case: 736 | Input/Output: [(53 -71 -61 96) -71]
Test Case: 737 | Input/Output: [(3 -52 74 70) -52]
Test Case: 738 | Input/Output: [(0 83 21 30) 0]
Test Case: 739 | Input/Output: [(-30 -56 20 22) -56]
Test Case: 740 | Input/Output: [(-65 -10 63 -74) -74]
Test Case: 741 | Input/Output: [(60 -78 63 66) -78]
Test Case: 742 | Input/Output: [(53 98 26 75) 26]
Test Case: 743 | Input/Output: [(-51 69 17 -50) -51]
Test Case: 744 | Input/Output: [(-90 -67 52 77) -90]
Test Case: 745 | Input/Output: [(-100 -28 -43 -99) -100]
Test Case: 746 | Input/Output: [(-24 -57 33 96) -57]
Test Case: 747 | Input/Output: [(-30 91 8 10) -30]
Test Case: 748 | Input/Output: [(59 -46 -93 -10) -93]
Test Case: 749 | Input/Output: [(73 -60 -17 43) -60]
Test Case: 750 | Input/Output: [(-92 81 75 -73) -92]
Test Case: 751 | Input/Output: [(-50 -29 8 6) -50]
Test Case: 752 | Input/Output: [(0 -63 -34 -27) -63]
Test Case: 753 | Input/Output: [(-99 -88 29 -66) -99]
Test Case: 754 | Input/Output: [(-13 -20 -23 46) -23]
Test Case: 755 | Input/Output: [(-40 -69 100 -36) -69]
Test Case: 756 | Input/Output: [(-67 64 10 -85) -85]
Test Case: 757 | Input/Output: [(79 0 80 72) 0]
Test Case: 758 | Input/Output: [(42 -73 -98 -71) -98]
Test Case: 759 | Input/Output: [(52 -25 12 38) -25]
Test Case: 760 | Input/Output: [(48 84 2 2) 2]
Test Case: 761 | Input/Output: [(31 59 -48 -78) -78]
Test Case: 762 | Input/Output: [(-72 14 -13 33) -72]
Test Case: 763 | Input/Output: [(-51 -96 -45 -90) -96]
Test Case: 764 | Input/Output: [(-10 -95 74 -51) -95]
Test Case: 765 | Input/Output: [(60 -49 -6 29) -49]
Test Case: 766 | Input/Output: [(56 48 -9 -88) -88]
Test Case: 767 | Input/Output: [(81 83 37 23) 23]
Test Case: 768 | Input/Output: [(-61 45 72 -39) -61]
Test Case: 769 | Input/Output: [(-51 26 -31 78) -51]
Test Case: 770 | Input/Output: [(-45 -67 68 33) -67]
Test Case: 771 | Input/Output: [(3 -53 -95 53) -95]
Test Case: 772 | Input/Output: [(-63 -79 -48 24) -79]
Test Case: 773 | Input/Output: [(-66 81 -3 -37) -66]
Test Case: 774 | Input/Output: [(77 -75 -89 -66) -89]
Test Case: 775 | Input/Output: [(50 -83 -79 95) -83]
Test Case: 776 | Input/Output: [(27 -11 24 51) -11]
Test Case: 777 | Input/Output: [(4 -52 31 -50) -52]
Test Case: 778 | Input/Output: [(-51 -76 35 12) -76]
Test Case: 779 | Input/Output: [(37 13 77 -93) -93]
Test Case: 780 | Input/Output: [(-76 -84 -57 15) -84]
Test Case: 781 | Input/Output: [(86 -36 -57 -31) -57]
Test Case: 782 | Input/Output: [(82 -58 47 -37) -58]
Test Case: 783 | Input/Output: [(-88 -20 8 -36) -88]
Test Case: 784 | Input/Output: [(-76 39 71 28) -76]
Test Case: 785 | Input/Output: [(77 91 24 77) 24]
Test Case: 786 | Input/Output: [(18 -57 -63 15) -63]
Test Case: 787 | Input/Output: [(-88 55 -60 -4) -88]
Test Case: 788 | Input/Output: [(1 -60 -88 97) -88]
Test Case: 789 | Input/Output: [(-61 -92 -18 45) -92]
Test Case: 790 | Input/Output: [(-79 -22 8 56) -79]
Test Case: 791 | Input/Output: [(-66 72 37 -43) -66]
Test Case: 792 | Input/Output: [(-81 -14 16 -92) -92]
Test Case: 793 | Input/Output: [(-9 43 57 46) -9]
Test Case: 794 | Input/Output: [(-55 -14 73 23) -55]
Test Case: 795 | Input/Output: [(38 -83 32 -76) -83]
Test Case: 796 | Input/Output: [(39 -69 -8 -88) -88]
Test Case: 797 | Input/Output: [(24 6 46 4) 4]
Test Case: 798 | Input/Output: [(97 45 81 -15) -15]
Test Case: 799 | Input/Output: [(-29 -61 -40 -91) -91]
Test Case: 800 | Input/Output: [(-90 29 15 -66) -90]
Test Case: 801 | Input/Output: [(-100 12 -79 97) -100]
Test Case: 802 | Input/Output: [(-78 29 23 -39) -78]
Test Case: 803 | Input/Output: [(52 -10 -15 64) -15]
Test Case: 804 | Input/Output: [(78 92 -18 -51) -51]
Test Case: 805 | Input/Output: [(-93 17 -53 -51) -93]
Test Case: 806 | Input/Output: [(-16 28 -96 95) -96]
Test Case: 807 | Input/Output: [(-3 -72 66 8) -72]
Test Case: 808 | Input/Output: [(80 48 40 -38) -38]
Test Case: 809 | Input/Output: [(-14 47 17 -60) -60]
Test Case: 810 | Input/Output: [(-58 38 25 99) -58]
Test Case: 811 | Input/Output: [(-96 0 93 31) -96]
Test Case: 812 | Input/Output: [(-23 -34 -56 9) -56]
Test Case: 813 | Input/Output: [(25 10 92 -83) -83]
Test Case: 814 | Input/Output: [(13 66 11 -54) -54]
Test Case: 815 | Input/Output: [(-79 16 -56 -45) -79]
Test Case: 816 | Input/Output: [(-64 80 13 16) -64]
Test Case: 817 | Input/Output: [(30 76 -53 -51) -53]
Test Case: 818 | Input/Output: [(-25 0 -89 -68) -89]
Test Case: 819 | Input/Output: [(-47 -22 47 -16) -47]
Test Case: 820 | Input/Output: [(-8 -54 2 64) -54]
Test Case: 821 | Input/Output: [(-51 -94 83 -60) -94]
Test Case: 822 | Input/Output: [(-89 74 82 68) -89]
Test Case: 823 | Input/Output: [(-75 74 38 -51) -75]
Test Case: 824 | Input/Output: [(69 -7 25 -68) -68]
Test Case: 825 | Input/Output: [(22 -94 16 -7) -94]
Test Case: 826 | Input/Output: [(25 62 34 81) 25]
Test Case: 827 | Input/Output: [(-89 55 78 32) -89]
Test Case: 828 | Input/Output: [(51 56 96 54) 51]
Test Case: 829 | Input/Output: [(37 -37 32 -85) -85]
Test Case: 830 | Input/Output: [(-10 -71 -100 29) -100]
Test Case: 831 | Input/Output: [(-31 -20 20 -51) -51]
Test Case: 832 | Input/Output: [(77 -49 29 -84) -84]
Test Case: 833 | Input/Output: [(-61 19 30 -86) -86]
Test Case: 834 | Input/Output: [(-54 20 99 -85) -85]
Test Case: 835 | Input/Output: [(-54 45 -27 -98) -98]
Test Case: 836 | Input/Output: [(-33 -66 69 -67) -67]
Test Case: 837 | Input/Output: [(-71 -96 79 53) -96]
Test Case: 838 | Input/Output: [(75 -4 -86 -4) -86]
Test Case: 839 | Input/Output: [(-47 -88 -85 -81) -88]
Test Case: 840 | Input/Output: [(-18 -14 -99 3) -99]
Test Case: 841 | Input/Output: [(-83 -70 20 99) -83]
Test Case: 842 | Input/Output: [(89 -37 57 52) -37]
Test Case: 843 | Input/Output: [(-93 86 -82 82) -93]
Test Case: 844 | Input/Output: [(82 55 -75 -65) -75]
Test Case: 845 | Input/Output: [(-60 88 46 -38) -60]
Test Case: 846 | Input/Output: [(50 -12 28 25) -12]
Test Case: 847 | Input/Output: [(8 -13 76 14) -13]
Test Case: 848 | Input/Output: [(-64 -85 -90 52) -90]
Test Case: 849 | Input/Output: [(12 80 5 34) 5]
Test Case: 850 | Input/Output: [(-27 -66 84 82) -66]
Test Case: 851 | Input/Output: [(60 72 3 49) 3]
Test Case: 852 | Input/Output: [(87 -58 58 -52) -58]
Test Case: 853 | Input/Output: [(-61 -14 -56 40) -61]
Test Case: 854 | Input/Output: [(-77 -59 50 -79) -79]
Test Case: 855 | Input/Output: [(98 -36 37 47) -36]
Test Case: 856 | Input/Output: [(64 -78 15 2) -78]
Test Case: 857 | Input/Output: [(-85 -45 -8 -13) -85]
Test Case: 858 | Input/Output: [(-33 7 53 -58) -58]
Test Case: 859 | Input/Output: [(52 -86 -29 -92) -92]
Test Case: 860 | Input/Output: [(28 56 -55 55) -55]
Test Case: 861 | Input/Output: [(48 -83 -18 42) -83]
Test Case: 862 | Input/Output: [(72 -50 -84 -43) -84]
Test Case: 863 | Input/Output: [(52 -86 20 -81) -86]
Test Case: 864 | Input/Output: [(-49 16 -73 -51) -73]
Test Case: 865 | Input/Output: [(76 60 50 7) 7]
Test Case: 866 | Input/Output: [(4 -30 -29 -63) -63]
Test Case: 867 | Input/Output: [(-82 -31 24 49) -82]
Test Case: 868 | Input/Output: [(11 41 75 -51) -51]
Test Case: 869 | Input/Output: [(-97 48 -53 -99) -99]
Test Case: 870 | Input/Output: [(45 -20 56 18) -20]
Test Case: 871 | Input/Output: [(62 56 -55 21) -55]
Test Case: 872 | Input/Output: [(94 53 78 -72) -72]
Test Case: 873 | Input/Output: [(-58 -61 -78 -49) -78]
Test Case: 874 | Input/Output: [(-17 -61 -28 62) -61]
Test Case: 875 | Input/Output: [(-73 32 -17 -79) -79]
Test Case: 876 | Input/Output: [(95 -32 29 -74) -74]
Test Case: 877 | Input/Output: [(-76 61 -75 73) -76]
Test Case: 878 | Input/Output: [(38 3 55 -84) -84]
Test Case: 879 | Input/Output: [(20 -15 43 -45) -45]
Test Case: 880 | Input/Output: [(-82 74 73 -42) -82]
Test Case: 881 | Input/Output: [(94 -46 14 100) -46]
Test Case: 882 | Input/Output: [(97 79 -99 -66) -99]
Test Case: 883 | Input/Output: [(77 -26 92 91) -26]
Test Case: 884 | Input/Output: [(14 85 -67 93) -67]
Test Case: 885 | Input/Output: [(-57 39 -97 69) -97]
Test Case: 886 | Input/Output: [(-3 -85 -41 -48) -85]
Test Case: 887 | Input/Output: [(-17 -92 -53 -30) -92]
Test Case: 888 | Input/Output: [(-100 85 94 -35) -100]
Test Case: 889 | Input/Output: [(-76 60 100 -86) -86]
Test Case: 890 | Input/Output: [(4 -50 77 92) -50]
Test Case: 891 | Input/Output: [(-45 -77 21 92) -77]
Test Case: 892 | Input/Output: [(-12 -30 3 9) -30]
Test Case: 893 | Input/Output: [(-20 98 8 66) -20]
Test Case: 894 | Input/Output: [(-9 21 22 -98) -98]
Test Case: 895 | Input/Output: [(-12 12 0 79) -12]
Test Case: 896 | Input/Output: [(-39 25 -32 50) -39]
Test Case: 897 | Input/Output: [(-23 -43 14 76) -43]
Test Case: 898 | Input/Output: [(40 -56 49 -39) -56]
Test Case: 899 | Input/Output: [(66 -5 11 -41) -41]
Test Case: 900 | Input/Output: [(34 52 90 -38) -38]
Test Case: 901 | Input/Output: [(20 25 -30 85) -30]
Test Case: 902 | Input/Output: [(-98 -16 61 24) -98]
Test Case: 903 | Input/Output: [(89 -49 -78 -1) -78]
Test Case: 904 | Input/Output: [(96 61 4 -55) -55]
Test Case: 905 | Input/Output: [(37 27 -57 -69) -69]
Test Case: 906 | Input/Output: [(86 4 -13 -46) -46]
Test Case: 907 | Input/Output: [(-63 -86 -76 29) -86]
Test Case: 908 | Input/Output: [(76 -30 80 40) -30]
Test Case: 909 | Input/Output: [(-34 -1 -20 85) -34]
Test Case: 910 | Input/Output: [(-50 -11 63 -41) -50]
Test Case: 911 | Input/Output: [(-34 40 -31 63) -34]
Test Case: 912 | Input/Output: [(-35 4 49 -18) -35]
Test Case: 913 | Input/Output: [(-3 -21 -59 -73) -73]
Test Case: 914 | Input/Output: [(-10 27 -95 -69) -95]
Test Case: 915 | Input/Output: [(-60 44 49 68) -60]
Test Case: 916 | Input/Output: [(-23 46 -52 39) -52]
Test Case: 917 | Input/Output: [(21 12 95 -51) -51]
Test Case: 918 | Input/Output: [(-75 -2 36 -5) -75]
Test Case: 919 | Input/Output: [(-63 51 -37 69) -63]
Test Case: 920 | Input/Output: [(31 73 60 28) 28]
Test Case: 921 | Input/Output: [(-35 -40 87 34) -40]
Test Case: 922 | Input/Output: [(-21 13 -49 -35) -49]
Test Case: 923 | Input/Output: [(35 -99 -57 -78) -99]
Test Case: 924 | Input/Output: [(-17 73 43 -50) -50]
Test Case: 925 | Input/Output: [(-37 45 -57 -44) -57]
Test Case: 926 | Input/Output: [(50 59 56 8) 8]
Test Case: 927 | Input/Output: [(97 -50 -43 39) -50]
Test Case: 928 | Input/Output: [(-78 -70 98 -84) -84]
Test Case: 929 | Input/Output: [(83 -33 -89 55) -89]
Test Case: 930 | Input/Output: [(96 42 -22 -11) -22]
Test Case: 931 | Input/Output: [(-86 -5 -27 70) -86]
Test Case: 932 | Input/Output: [(37 -69 -23 66) -69]
Test Case: 933 | Input/Output: [(-64 -87 -9 25) -87]
Test Case: 934 | Input/Output: [(-20 -85 -65 -74) -85]
Test Case: 935 | Input/Output: [(97 -58 -88 -27) -88]
Test Case: 936 | Input/Output: [(87 -41 -1 -21) -41]
Test Case: 937 | Input/Output: [(-27 -92 39 58) -92]
Test Case: 938 | Input/Output: [(-77 81 -76 78) -77]
Test Case: 939 | Input/Output: [(69 -42 45 84) -42]
Test Case: 940 | Input/Output: [(-16 -65 -86 -67) -86]
Test Case: 941 | Input/Output: [(22 -15 82 -48) -48]
Test Case: 942 | Input/Output: [(41 -34 -22 -75) -75]
Test Case: 943 | Input/Output: [(59 -73 44 61) -73]
Test Case: 944 | Input/Output: [(30 -82 -9 78) -82]
Test Case: 945 | Input/Output: [(-33 9 97 16) -33]
Test Case: 946 | Input/Output: [(84 40 -92 71) -92]
Test Case: 947 | Input/Output: [(-76 81 75 -4) -76]
Test Case: 948 | Input/Output: [(62 -26 23 71) -26]
Test Case: 949 | Input/Output: [(56 72 13 78) 13]
Test Case: 950 | Input/Output: [(15 -27 -98 39) -98]
Test Case: 951 | Input/Output: [(66 41 -95 -62) -95]
Test Case: 952 | Input/Output: [(64 -28 99 -64) -64]
Test Case: 953 | Input/Output: [(48 97 -40 39) -40]
Test Case: 954 | Input/Output: [(-13 69 29 -94) -94]
Test Case: 955 | Input/Output: [(74 -2 85 -67) -67]
Test Case: 956 | Input/Output: [(-58 56 -69 93) -69]
Test Case: 957 | Input/Output: [(-85 -70 76 -57) -85]
Test Case: 958 | Input/Output: [(73 -57 -84 -2) -84]
Test Case: 959 | Input/Output: [(-61 66 60 -100) -100]
Test Case: 960 | Input/Output: [(-100 -74 59 -71) -100]
Test Case: 961 | Input/Output: [(-30 -93 -85 -57) -93]
Test Case: 962 | Input/Output: [(91 46 56 0) 0]
Test Case: 963 | Input/Output: [(-18 81 -85 -82) -85]
Test Case: 964 | Input/Output: [(26 91 46 -52) -52]
Test Case: 965 | Input/Output: [(33 61 16 -66) -66]
Test Case: 966 | Input/Output: [(-96 -90 -25 17) -96]
Test Case: 967 | Input/Output: [(-34 -50 98 27) -50]
Test Case: 968 | Input/Output: [(15 -12 -87 70) -87]
Test Case: 969 | Input/Output: [(24 80 -14 -32) -32]
Test Case: 970 | Input/Output: [(66 69 -86 -65) -86]
Test Case: 971 | Input/Output: [(11 21 2 -39) -39]
Test Case: 972 | Input/Output: [(84 42 76 46) 42]
Test Case: 973 | Input/Output: [(-26 29 -16 100) -26]
Test Case: 974 | Input/Output: [(-78 -2 -60 62) -78]
Test Case: 975 | Input/Output: [(-40 -59 34 -87) -87]
Test Case: 976 | Input/Output: [(92 70 12 -13) -13]
Test Case: 977 | Input/Output: [(9 49 -34 19) -34]
Test Case: 978 | Input/Output: [(6 -30 79 68) -30]
Test Case: 979 | Input/Output: [(79 32 100 -95) -95]
Test Case: 980 | Input/Output: [(-59 66 -93 64) -93]
Test Case: 981 | Input/Output: [(84 -56 15 -90) -90]
Test Case: 982 | Input/Output: [(-53 -71 17 20) -71]
Test Case: 983 | Input/Output: [(47 77 -39 -4) -39]
Test Case: 984 | Input/Output: [(-33 15 -39 21) -39]
Test Case: 985 | Input/Output: [(-25 -67 43 2) -67]
Test Case: 986 | Input/Output: [(-20 62 -32 84) -32]
Test Case: 987 | Input/Output: [(-32 -82 29 12) -82]
Test Case: 988 | Input/Output: [(50 98 7 -55) -55]
Test Case: 989 | Input/Output: [(52 59 4 -27) -27]
Test Case: 990 | Input/Output: [(15 37 -100 -66) -100]
Test Case: 991 | Input/Output: [(18 -98 -71 31) -98]
Test Case: 992 | Input/Output: [(55 -86 57 54) -86]
Test Case: 993 | Input/Output: [(63 -51 -62 -69) -69]
Test Case: 994 | Input/Output: [(-47 28 -65 -53) -65]
Test Case: 995 | Input/Output: [(-79 -100 70 -49) -100]
Test Case: 996 | Input/Output: [(96 62 36 -2) -2]
Test Case: 997 | Input/Output: [(-55 -10 89 83) -55]
Test Case: 998 | Input/Output: [(78 -97 91 -25) -97]
Test Case: 999 | Input/Output: [(-87 -80 9 98) -87]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 14 -109 32 80 -106 -113 36 -44 56 22 -125 -91 121 22 91 77
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[36 37 36 36] 36] [[84 84 -97 84] -97] [[-68 92 -68 -68] -68] [[8 -10 8 8] -10] [[-19 -19 -19 -76] -76] [[5 -75 -75 -75] -75] [[42 -83 42 42] -83] [[-74 4 4 4] -74] [[44 -23 44 44] -23] [[63 -59 63 63] -59] [(-59 -59 -59 -59) -59] [(23 23 23 23) 23] [(-54 -54 -54 -54) -54] [(-32 -32 -32 -32) -32] [(-53 -53 -53 -53) -53] [(85 46 55 81) 46] [(55 40 61 21) 21] [(83 51 94 57) 51] [(16 100 21 64) 16] [(85 75 18 23) 18] [(98 5 31 58) 5] [(37 68 21 98) 21] [(20 0 70 68) 0] [(59 77 35 55) 35] [(44 64 78 13) 13] [(58 3 57 36) 3] [(96 92 93 41) 41] [(29 74 18 8) 8] [(15 89 90 41) 15] [(0 30 77 2) 0] [(75 65 62 68) 62] [(61 64 85 19) 19] [(2 12 51 73) 2] [(35 44 93 28) 28] [(31 47 20 68) 20] [(-22 -43 -21 -44) -44] [(-67 91 -86 82) -86] [(31 -53 -77 8) -77] [(50 -69 -57 -70) -70] [(96 47 56 71) 47] [(24 -91 92 -27) -91] [(21 -53 12 -43) -53] [(-78 -70 33 56) -78] [(53 -93 57 -27) -93] [(49 54 -77 -78) -78] [(-76 -76 30 18) -76] [(-63 -45 -90 91) -90] [(-21 -92 -70 99) -92] [(-19 33 92 -31) -31] [(17 -5 -39 46) -39] [(-82 85 -96 -2) -96] [(62 14 94 -73) -73] [(74 9 -90 36) -90] [(69 13 13 -43) -43] [(30 -13 -27 -100) -100] [(-15 -9 -98 -31) -98] [(-46 -22 12 7) -46] [(8 52 -71 -95) -95] [(97 75 -7 -16) -16] [(0 -72 31 65) -72] [(46 -2 -21 -26) -26] [(94 -35 9 48) -35] [(22 10 -31 54) -31] [(44 -97 34 45) -97] [(41 39 75 -5) -5] [(85 -18 -53 -40) -53] [(34 78 20 -72) -72] [(-4 17 -90 45) -90] [(-31 21 -96 -92) -96] [(-36 99 86 89) -36] [(-63 -14 77 39) -63] [(32 75 30 84) 30] [(-12 -78 -32 -81) -81] [(-38 68 20 23) -38] [(37 -2 15 96) -2] [(32 -2 48 26) -2] [(6 79 -23 81) -23] [(-94 -35 24 -6) -94] [(-35 31 -4 -91) -91] [(-76 78 7 66) -76] [(65 -83 -31 10) -83] [(-15 97 64 69) -15] [(34 -11 -50 99) -50] [(-38 -86 -25 24) -86] [(47 52 -53 38) -53] [(17 22 -60 54) -60] [(-7 100 12 -39) -39] [(17 -98 -14 80) -98] [(64 -47 -63 -47) -63] [(82 13 -2 -21) -21] [(-8 96 12 -98) -98] [(-78 -85 13 40) -85] [(27 -45 -14 -26) -45] [(43 -35 27 -26) -35] [(-74 83 -92 73) -92])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 51                  | Program output: 94                 
Correct output: 16                  | Program output: 21                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 31                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 78                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 93                 
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 90                 
Correct output: 0                   | Program output: 77                 
Correct output: 62                  | Program output: 62                 
Correct output: 19                  | Program output: 85                 
Correct output: 2                   | Program output: 51                 
Correct output: 28                  | Program output: 93                 
Correct output: 20                  | Program output: 20                 
Correct output: -44                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -57                
Correct output: 47                  | Program output: 56                 
Correct output: -91                 | Program output: 92                 
Correct output: -53                 | Program output: 12                 
Correct output: -78                 | Program output: 33                 
Correct output: -93                 | Program output: 57                 
Correct output: -78                 | Program output: -77                
Correct output: -76                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -70                
Correct output: -31                 | Program output: 92                 
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: 94                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -27                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: 12                 
Correct output: -95                 | Program output: -71                
Correct output: -16                 | Program output: -7                 
Correct output: -72                 | Program output: 31                 
Correct output: -26                 | Program output: -21                
Correct output: -35                 | Program output: 9                  
Correct output: -31                 | Program output: -31                
Correct output: -97                 | Program output: 34                 
Correct output: -5                  | Program output: 75                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: 86                 
Correct output: -63                 | Program output: 77                 
Correct output: 30                  | Program output: 30                 
Correct output: -81                 | Program output: -32                
Correct output: -38                 | Program output: 20                 
Correct output: -2                  | Program output: 15                 
Correct output: -2                  | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 24                 
Correct output: -91                 | Program output: -4                 
Correct output: -76                 | Program output: 7                  
Correct output: -83                 | Program output: -31                
Correct output: -15                 | Program output: 64                 
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -39                 | Program output: 12                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -63                
Correct output: -21                 | Program output: -2                 
Correct output: -98                 | Program output: 12                 
Correct output: -85                 | Program output: 13                 
Correct output: -45                 | Program output: -14                
Correct output: -35                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_109} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_newline} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction -17} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_dup_items exec_k_when_autoconstructing (boolean_and tagged_109 integer_max) (in3 boolean_yank) boolean_dup exec_pop (exec_dup_times () exec_swap () (integer_pop integer_lt integer_swap boolean_flush)) exec_y (print_integer boolean_dup boolean_or boolean_yank boolean_pop) exec_dup_items integer_yankdup exec_dup_items boolean_flush exec_pop (integer_lte) in1 exec_swap (exec_pop (boolean_yankdup) boolean_empty integer_fromboolean boolean_eq) (print_boolean integer_lte boolean_xor exec_rot (exec_s_when_autoconstructing (print_boolean boolean_rot print_newline) (integer_inc) (in2 exec_shove (exec_empty integer_rot boolean_yank boolean_empty) integer_dup integer_stackdepth integer_sub) -17 integer_empty exec_k_when_autoconstructing (integer_stackdepth exec_s (boolean_or integer_inc boolean_flush integer_swap boolean_rot) () ()) ()) () ()))
Lexicase best errors: [1 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_109} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_newline} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_sub} {:close 0, :instruction -17} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_dup_items exec_k_when_autoconstructing (boolean_and tagged_109 integer_max) (in3 boolean_yank) boolean_dup exec_pop (exec_dup_times () exec_swap () (integer_pop integer_lt integer_swap boolean_flush)) exec_y (print_integer boolean_dup boolean_or boolean_yank boolean_pop) exec_dup_items integer_yankdup exec_dup_items boolean_flush exec_pop (integer_lte) in1 exec_swap (exec_pop (boolean_yankdup) boolean_empty integer_fromboolean boolean_eq) (print_boolean integer_lte boolean_xor exec_rot (exec_s_when_autoconstructing (print_boolean boolean_rot print_newline) (integer_inc) (in2 exec_shove (exec_empty integer_rot boolean_yank boolean_empty) integer_dup integer_stackdepth integer_sub) -17 integer_empty exec_k_when_autoconstructing (integer_stackdepth exec_s (boolean_or integer_inc boolean_flush integer_swap boolean_rot) () ()) ()) () ()))
Zero cases best errors: [1 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 6 2 1 1 11 2 1 6 6)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (1 6 2 1 1 11 2 1 6 6)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_47} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_yankdup})
Best program: (boolean_dup boolean_and integer_swap tagged_47 boolean_shove in3 print_integer boolean_yank exec_y () boolean_yankdup)
Errors: [1 0 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.999 0.994 0.998 0.999 0.999 0.989 0.998 0.999 0.994 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.187
Average program size in population (points): 69.322
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 504715
--- Timings ---
Current time: 1559314508185 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.9 seconds, 36.7%
Fitness Testing:      1.5 seconds, 58.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [0 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [0 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 188 276 196 98 276 98 188 276 276)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (188 188 276 196 98 276 98 188 276 276)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_7} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_7 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Errors: [0 0 1 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.94
Median total errors in population: 9
Error averages by case: (0.812 0.812 0.724 0.804 0.902 0.724 0.902 0.812 0.724 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.178
Average program size in population (points): 41.886
Average percent parens in population: 0.269
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.517
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.363
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 932793
--- Timings ---
Current time: 1559314510327 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.4 seconds, 45.3%
Fitness Testing:      1.9 seconds, 37.3%
Report:               0.8 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 375 80 375 447 1 450 902 80 447)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (1 375 80 375 447 1 450 902 80 447)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.842
Median total errors in population: 7
Error averages by case: (0.999 0.625 0.92 0.625 0.553 0.999 0.55 0.098 0.92 0.553)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.728
Average program size in population (points): 38.643
Average percent parens in population: 0.202
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.985
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 325
Genome diversity (% unique genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 338
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1358130
--- Timings ---
Current time: 1559314513126 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.5 seconds, 56.0%
Fitness Testing:      2.4 seconds, 29.8%
Report:               1.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 64                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 98                 
Correct output: 0                   | Program output: 68                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 68                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: 82                 
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: 56                 
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 18                 
Correct output: -90                 | Program output: 91                 
Correct output: -92                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 46                 
Correct output: -96                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 54                 
Correct output: -97                 | Program output: 45                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 45                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: 89                 
Correct output: -63                 | Program output: 39                 
Correct output: 30                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 23                 
Correct output: -2                  | Program output: 96                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 81                 
Correct output: -94                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: 69                 
Correct output: -50                 | Program output: 99                 
Correct output: -86                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [1 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [1 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 331 524 180 331 179 193 331 179 193)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (180 331 524 180 331 179 193 331 179 193)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot boolean_not integer_rot boolean_flush boolean_dup_times integer_yankdup boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup integer_stackdepth) exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 48
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 7.379
Median total errors in population: 6
Error averages by case: (0.82 0.669 0.476 0.82 0.669 0.821 0.807 0.669 0.821 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.821
Average program size in population (points): 30.923
Average percent parens in population: 0.178
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.589
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 215
Syntactic diversity (% unique Push programs):	 0.425
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1689406
--- Timings ---
Current time: 1559314515525 milliseconds
Total Time:          10.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         6.3 seconds, 60.7%
Fitness Testing:      2.7 seconds, 26.4%
Report:               1.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [0 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [0 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (919 337 1000 362 362 918 217 1000 338 217)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (919 337 0 362 362 918 217 0 338 217)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Errors: [0 1 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.33
Median total errors in population: 6
Error averages by case: (0.081 0.663 1.0 0.638 0.638 0.082 0.783 1.0 0.662 0.783)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 23.922
Average program size in population (points): 28.391
Average percent parens in population: 0.157
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.0145
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1926851
--- Timings ---
Current time: 1559314518168 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.5 seconds, 65.0%
Fitness Testing:      3.0 seconds, 22.6%
Report:               1.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: 5                  
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 85                 
Correct output: 21                  | Program output: 55                 
Correct output: 51                  | Program output: 83                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 85                 
Correct output: 5                   | Program output: 98                 
Correct output: 21                  | Program output: 37                 
Correct output: 0                   | Program output: 20                 
Correct output: 35                  | Program output: 59                 
Correct output: 13                  | Program output: 44                 
Correct output: 3                   | Program output: 58                 
Correct output: 41                  | Program output: 96                 
Correct output: 8                   | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 75                 
Correct output: 19                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 35                 
Correct output: 20                  | Program output: 31                 
Correct output: -44                 | Program output: -22                
Correct output: -86                 | Program output: -67                
Correct output: -77                 | Program output: 31                 
Correct output: -70                 | Program output: 50                 
Correct output: 47                  | Program output: 96                 
Correct output: -91                 | Program output: 24                 
Correct output: -53                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: 53                 
Correct output: -78                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -63                
Correct output: -92                 | Program output: -21                
Correct output: -31                 | Program output: -19                
Correct output: -39                 | Program output: 17                 
Correct output: -96                 | Program output: -82                
Correct output: -73                 | Program output: 62                 
Correct output: -90                 | Program output: 74                 
Correct output: -43                 | Program output: 69                 
Correct output: -100                | Program output: 30                 
Correct output: -98                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: 8                  
Correct output: -16                 | Program output: 97                 
Correct output: -72                 | Program output: 0                  
Correct output: -26                 | Program output: 46                 
Correct output: -35                 | Program output: 94                 
Correct output: -31                 | Program output: 22                 
Correct output: -97                 | Program output: 44                 
Correct output: -5                  | Program output: 41                 
Correct output: -53                 | Program output: 85                 
Correct output: -72                 | Program output: 34                 
Correct output: -90                 | Program output: -4                 
Correct output: -96                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 32                 
Correct output: -81                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: 37                 
Correct output: -2                  | Program output: 32                 
Correct output: -23                 | Program output: 6                  
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 65                 
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: 34                 
Correct output: -86                 | Program output: -38                
Correct output: -53                 | Program output: 47                 
Correct output: -60                 | Program output: 17                 
Correct output: -39                 | Program output: -7                 
Correct output: -98                 | Program output: 17                 
Correct output: -63                 | Program output: 64                 
Correct output: -21                 | Program output: 82                 
Correct output: -98                 | Program output: -8                 
Correct output: -85                 | Program output: -78                
Correct output: -45                 | Program output: 27                 
Correct output: -35                 | Program output: 43                 
Correct output: -92                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (boolean_shove exec_dup (in1 boolean_dup) exec_noop integer_max boolean_yankdup print_integer exec_noop exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [0 1 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (boolean_shove exec_dup (in1 boolean_dup) exec_noop integer_max boolean_yankdup print_integer exec_noop exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [0 1 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 293 1000 1000 293 608 324 284 293 1000)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (324 293 0 0 293 608 324 284 293 0)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (boolean_shove exec_dup (in1 boolean_dup) exec_noop integer_max boolean_yankdup print_integer exec_noop exec_yank boolean_not tag_boolean_634)
Errors: [0 1 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 12
Size: 14
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.581
Median total errors in population: 7
Error averages by case: (0.676 0.707 1.0 1.0 0.707 0.392 0.676 0.716 0.707 1.0)
Error minima by case: (0 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 22.295
Average program size in population (points): 26.493
Average percent parens in population: 0.157
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.537125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2154116
--- Timings ---
Current time: 1559314520534 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.5 seconds, 67.8%
Fitness Testing:      3.2 seconds, 20.6%
Report:               1.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [0 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [0 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 391 1000 1000 163 1000 163 906 163 348)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (164 391 0 0 163 0 163 906 163 348)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Errors: [0 1 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.702
Median total errors in population: 8
Error averages by case: (0.836 0.609 1.0 1.0 0.837 1.0 0.837 0.094 0.837 0.652)
Error minima by case: (0 0 1 1 0 1 0 0 0 0)
Average genome size in population (length): 24.583
Average program size in population (points): 29.323
Average percent parens in population: 0.159
Minimum age in population: 6.0
Maximum age in population: 10.96875
Average age in population: 9.01
Median age in population: 9.078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2392946
--- Timings ---
Current time: 1559314522908 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.5 seconds, 69.9%
Fitness Testing:      3.4 seconds, 19.2%
Report:               1.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 64                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 98                 
Correct output: 0                   | Program output: 68                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 68                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: 82                 
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: 56                 
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 18                 
Correct output: -90                 | Program output: 91                 
Correct output: -92                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 46                 
Correct output: -96                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 54                 
Correct output: -97                 | Program output: 45                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 45                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: 89                 
Correct output: -63                 | Program output: 39                 
Correct output: 30                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 23                 
Correct output: -2                  | Program output: 96                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 81                 
Correct output: -94                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: 69                 
Correct output: -50                 | Program output: 99                 
Correct output: -86                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot boolean_not integer_max boolean_flush boolean_dup_times integer_yankdup boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor) exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div integer_max integer_stackdepth exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Lexicase best errors: [1 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot boolean_not integer_max boolean_flush boolean_dup_times integer_yankdup boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor) exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div integer_max integer_stackdepth exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Zero cases best errors: [1 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (643 142 141 141 141 138 1000 923 1000 137)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (643 142 141 141 141 138 0 923 0 137)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth})
Best program: (exec_do*while (boolean_pop boolean_not integer_max boolean_flush boolean_dup_times integer_yankdup) boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup integer_stackdepth) exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth)
Errors: [1 0 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.594
Median total errors in population: 8
Error averages by case: (0.357 0.858 0.859 0.859 0.859 0.862 1.0 0.077 1.0 0.863)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 18.846
Average program size in population (points): 22.737
Average percent parens in population: 0.170
Minimum age in population: 8.0
Maximum age in population: 12.65625
Average age in population: 10.43928125
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2593415
--- Timings ---
Current time: 1559314525357 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.5 seconds, 71.6%
Fitness Testing:      3.6 seconds, 17.9%
Report:               2.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 64                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 98                 
Correct output: 0                   | Program output: 68                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 68                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: 82                 
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: 56                 
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 18                 
Correct output: -90                 | Program output: 91                 
Correct output: -92                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 46                 
Correct output: -96                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 54                 
Correct output: -97                 | Program output: 45                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 45                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: 89                 
Correct output: -63                 | Program output: 39                 
Correct output: 30                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 23                 
Correct output: -2                  | Program output: 96                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 81                 
Correct output: -94                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: 69                 
Correct output: -50                 | Program output: 99                 
Correct output: -86                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank exec_when (exec_y_when_autoconstructing (boolean_xor) exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup integer_stackdepth) exec_flush) boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank exec_when (exec_y_when_autoconstructing (boolean_xor) exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup integer_stackdepth) exec_flush) boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 506 506 755 506 506 249 122 506 121)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (122 506 506 755 506 506 249 122 506 121)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Best program: (boolean_dup_items exec_dup_times (integer_gte integer_stackdepth exec_k () (integer_eq boolean_rot) boolean_not integer_max boolean_flush boolean_dup_times integer_yankdup) boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup integer_stackdepth) exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 6.101
Median total errors in population: 4
Error averages by case: (0.878 0.494 0.494 0.245 0.494 0.494 0.751 0.878 0.494 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.112
Average program size in population (points): 33.638
Average percent parens in population: 0.161
Minimum age in population: 9.25
Maximum age in population: 14.34375
Average age in population: 11.9167265625
Median age in population: 11.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2861856
--- Timings ---
Current time: 1559314528016 milliseconds
Total Time:          22.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.6 seconds, 72.8%
Fitness Testing:      3.9 seconds, 16.9%
Report:               2.2 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 64                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 98                 
Correct output: 0                   | Program output: 68                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 68                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: 82                 
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: 56                 
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 18                 
Correct output: -90                 | Program output: 91                 
Correct output: -92                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 46                 
Correct output: -96                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 54                 
Correct output: -97                 | Program output: 45                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 45                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: 89                 
Correct output: -63                 | Program output: 39                 
Correct output: 30                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 23                 
Correct output: -2                  | Program output: 96                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 81                 
Correct output: -94                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: 69                 
Correct output: -50                 | Program output: 99                 
Correct output: -86                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (boolean_shove exec_dup (in1 boolean_dup) exec_noop integer_max boolean_yankdup print_integer exec_noop exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [1 1 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (boolean_shove exec_dup (in1 boolean_dup) exec_noop integer_max boolean_yankdup print_integer exec_noop exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [1 1 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 1000 1000 139 607 1000 467 264 1000 1000)
Population mean number of elite cases: 6.74
Count of perfect (error zero) individuals by case: (265 0 0 139 607 0 467 264 0 0)
Population mean number of perfect (error zero) cases: 1.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Best program: (boolean_dup boolean_and integer_swap exec_do*while (boolean_pop boolean_dup_items integer_mod exec_noop boolean_dup_times integer_yankdup) boolean_swap integer_gt boolean_not integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup integer_stackdepth) exec_flush exec_when () integer_div boolean_dup integer_stackdepth exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Errors: [1 1 1 1 0 1 0 1 1 1]
Total: 8
Mean: 0.8
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 8.258
Median total errors in population: 8
Error averages by case: (0.735 1.0 1.0 0.861 0.393 1.0 0.533 0.736 1.0 1.0)
Error minima by case: (0 1 1 0 0 1 0 0 1 1)
Average genome size in population (length): 27.812
Average program size in population (points): 33.378
Average percent parens in population: 0.165
Minimum age in population: 10.25
Maximum age in population: 15.55078125
Average age in population: 13.29494921875
Median age in population: 13.341796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.003
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3143745
--- Timings ---
Current time: 1559314530713 milliseconds
Total Time:          25.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.8 seconds, 73.6%
Fitness Testing:      4.1 seconds, 16.1%
Report:               2.5 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot boolean_not integer_max boolean_flush boolean_dup_times integer_yankdup boolean_swap integer_gt boolean_not exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup exec_y () exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Lexicase best errors: [1 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 45
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot boolean_not integer_max boolean_flush boolean_dup_times integer_yankdup boolean_swap integer_gt boolean_not exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4 exec_when () integer_div boolean_dup exec_y () exec_flush boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Zero cases best errors: [1 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 45
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 400 1000 215 215 1000 686 216 1000 400)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (0 400 0 215 215 0 686 216 0 400)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_246} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq})
Best program: (integer_fromboolean in4 boolean_dup_items exec_eq integer_gte integer_inc exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) print_integer boolean_invert_second_then_and integer_swap boolean_invert_first_then_and in2 exec_flush integer_min exec_if (tagged_246 exec_s (integer_max boolean_dup exec_rot (exec_noop integer_rot boolean_invert_first_then_and boolean_or exec_dup_items in2 integer_pop) (print_exec (exec_dup_items integer_eq exec_flush exec_do*count (integer_gte exec_eq))) ()) () ()) ())
Errors: [1 0 1 1 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 45
Size: 58
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.868
Median total errors in population: 7
Error averages by case: (1.0 0.6 1.0 0.785 0.785 1.0 0.314 0.784 1.0 0.6)
Error minima by case: (1 0 1 0 0 1 0 0 1 0)
Average genome size in population (length): 20.553
Average program size in population (points): 24.731
Average percent parens in population: 0.164
Minimum age in population: 11.5
Maximum age in population: 16.88671875
Average age in population: 14.81005859375
Median age in population: 14.849609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3364780
--- Timings ---
Current time: 1559314532984 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.7 seconds, 74.2%
Fitness Testing:      4.3 seconds, 15.5%
Report:               2.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 64                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 98                 
Correct output: 0                   | Program output: 68                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 68                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: 82                 
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: 56                 
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 18                 
Correct output: -90                 | Program output: 91                 
Correct output: -92                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 46                 
Correct output: -96                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 54                 
Correct output: -97                 | Program output: 45                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 45                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: 89                 
Correct output: -63                 | Program output: 39                 
Correct output: 30                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 23                 
Correct output: -2                  | Program output: 96                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 81                 
Correct output: -94                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: 69                 
Correct output: -50                 | Program output: 99                 
Correct output: -86                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_min} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (exec_s_when_autoconstructing (exec_noop) (integer_max boolean_yankdup print_integer print_integer exec_noop) () exec_yank integer_min) tag_boolean_634))
Lexicase best errors: [1 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 22
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_min} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (exec_s_when_autoconstructing (exec_noop) (integer_max boolean_yankdup print_integer print_integer exec_noop) () exec_yank integer_min) tag_boolean_634))
Zero cases best errors: [1 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 22
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (470 1000 467 2 431 1000 471 430 1000 431)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (470 0 467 2 431 0 471 430 0 431)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup})
Best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod) in2 exec_do*range (boolean_dup_items) integer_dup_times integer_gte integer_inc boolean_xor integer_eq boolean_rot boolean_not integer_max boolean_yankdup print_integer integer_stackdepth integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) integer_div boolean_dup))
Errors: [0 1 0 1 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.298
Median total errors in population: 7
Error averages by case: (0.53 1.0 0.533 0.998 0.569 1.0 0.529 0.57 1.0 0.569)
Error minima by case: (0 1 0 0 0 1 0 0 1 0)
Average genome size in population (length): 27.219
Average program size in population (points): 32.987
Average percent parens in population: 0.173
Minimum age in population: 12.5
Maximum age in population: 18.2294921875
Average age in population: 16.2606591796875
Median age in population: 16.341796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3643257
--- Timings ---
Current time: 1559314535461 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.7 seconds, 74.8%
Fitness Testing:      4.6 seconds, 15.1%
Report:               3.0 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_749})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop)) print_boolean boolean_not tag_boolean_749)
Lexicase best errors: [0 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_749})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop)) print_boolean boolean_not tag_boolean_749)
Zero cases best errors: [0 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (401 919 401 192 401 323 401 192 401 1)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (401 919 401 192 401 323 401 192 401 1)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (exec_do*while (boolean_pop boolean_xor integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Errors: [0 0 0 1 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.368
Median total errors in population: 7
Error averages by case: (0.599 0.081 0.599 0.808 0.599 0.677 0.599 0.808 0.599 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.063
Average program size in population (points): 29.081
Average percent parens in population: 0.170
Minimum age in population: 14.25
Maximum age in population: 19.78369140625
Average age in population: 17.87736083984375
Median age in population: 17.974609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3892934
--- Timings ---
Current time: 1559314537958 milliseconds
Total Time:          32.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.8 seconds, 75.3%
Fitness Testing:      4.8 seconds, 14.6%
Report:               3.2 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: 5                  
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 85                 
Correct output: 21                  | Program output: 55                 
Correct output: 51                  | Program output: 83                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 85                 
Correct output: 5                   | Program output: 98                 
Correct output: 21                  | Program output: 37                 
Correct output: 0                   | Program output: 20                 
Correct output: 35                  | Program output: 59                 
Correct output: 13                  | Program output: 44                 
Correct output: 3                   | Program output: 58                 
Correct output: 41                  | Program output: 96                 
Correct output: 8                   | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 75                 
Correct output: 19                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 35                 
Correct output: 20                  | Program output: 31                 
Correct output: -44                 | Program output: -22                
Correct output: -86                 | Program output: -67                
Correct output: -77                 | Program output: 31                 
Correct output: -70                 | Program output: 50                 
Correct output: 47                  | Program output: 96                 
Correct output: -91                 | Program output: 24                 
Correct output: -53                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: 53                 
Correct output: -78                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -63                
Correct output: -92                 | Program output: -21                
Correct output: -31                 | Program output: -19                
Correct output: -39                 | Program output: 17                 
Correct output: -96                 | Program output: -82                
Correct output: -73                 | Program output: 62                 
Correct output: -90                 | Program output: 74                 
Correct output: -43                 | Program output: 69                 
Correct output: -100                | Program output: 30                 
Correct output: -98                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: 8                  
Correct output: -16                 | Program output: 97                 
Correct output: -72                 | Program output: 0                  
Correct output: -26                 | Program output: 46                 
Correct output: -35                 | Program output: 94                 
Correct output: -31                 | Program output: 22                 
Correct output: -97                 | Program output: 44                 
Correct output: -5                  | Program output: 41                 
Correct output: -53                 | Program output: 85                 
Correct output: -72                 | Program output: 34                 
Correct output: -90                 | Program output: -4                 
Correct output: -96                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 32                 
Correct output: -81                 | Program output: -12                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: 37                 
Correct output: -2                  | Program output: 32                 
Correct output: -23                 | Program output: 6                  
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 65                 
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: 34                 
Correct output: -86                 | Program output: -38                
Correct output: -53                 | Program output: 47                 
Correct output: -60                 | Program output: 17                 
Correct output: -39                 | Program output: -7                 
Correct output: -98                 | Program output: 17                 
Correct output: -63                 | Program output: 64                 
Correct output: -21                 | Program output: 82                 
Correct output: -98                 | Program output: -8                 
Correct output: -85                 | Program output: -78                
Correct output: -45                 | Program output: 27                 
Correct output: -35                 | Program output: 43                 
Correct output: -92                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop) exec_yank boolean_not integer_gt)
Lexicase best errors: [1 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop) exec_yank boolean_not integer_gt)
Zero cases best errors: [1 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (501 228 124 92 501 228 231 352 124 124)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (501 228 124 92 501 228 231 352 124 124)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (exec_y_when_autoconstructing (exec_dup_times (integer_gte integer_inc boolean_xor) integer_eq boolean_rot) integer_yank integer_max in1 exec_noop integer_max boolean_yankdup print_integer exec_noop exec_yank boolean_not tag_boolean_634)
Errors: [1 0 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 21
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.495
Median total errors in population: 8
Error averages by case: (0.499 0.772 0.876 0.908 0.499 0.772 0.769 0.648 0.876 0.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.441
Average program size in population (points): 22.267
Average percent parens in population: 0.169
Minimum age in population: 16.54296875
Maximum age in population: 21.555419921875
Average age in population: 19.52589379882812
Median age in population: 19.6190185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4086951
--- Timings ---
Current time: 1559314540325 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.8 seconds, 75.9%
Fitness Testing:      5.0 seconds, 14.1%
Report:               3.4 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 3, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_do*while () boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) exec_s_when_autoconstructing (boolean_flush integer_gt boolean_not) (integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer))) in4 exec_when () integer_div boolean_dup integer_stackdepth) (exec_flush) boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 3, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_do*while () boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) exec_s_when_autoconstructing (boolean_flush integer_gt boolean_not) (integer_gt exec_stackdepth exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap tagged_567) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer))) in4 exec_when () integer_div boolean_dup integer_stackdepth) (exec_flush) boolean_pop boolean_dup_times exec_yankdup exec_stackdepth integer_dec)
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 926 178 178 96 95 178 97 749 327)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (178 926 178 178 96 95 178 97 749 327)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_620})
Best program: (boolean_dup_items exec_dup_times (integer_gte exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop)) exec_yank boolean_not tag_boolean_620)
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 22
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.998
Median total errors in population: 7
Error averages by case: (0.822 0.074 0.822 0.822 0.904 0.905 0.822 0.903 0.251 0.673)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.976
Average program size in population (points): 21.538
Average percent parens in population: 0.163
Minimum age in population: 17.91015625
Maximum age in population: 23.2908935546875
Average age in population: 21.20302160644531
Median age in population: 21.23004150390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4281689
--- Timings ---
Current time: 1559314542706 milliseconds
Total Time:          37.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.8 seconds, 76.5%
Fitness Testing:      5.2 seconds, 13.7%
Report:               3.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 64                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 98                 
Correct output: 0                   | Program output: 68                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 68                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: 82                 
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: 56                 
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 18                 
Correct output: -90                 | Program output: 91                 
Correct output: -92                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 46                 
Correct output: -96                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 54                 
Correct output: -97                 | Program output: 45                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 45                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: 89                 
Correct output: -63                 | Program output: 39                 
Correct output: 30                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 23                 
Correct output: -2                  | Program output: 96                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 81                 
Correct output: -94                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: 69                 
Correct output: -50                 | Program output: 99                 
Correct output: -86                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot})
Lexicase best program: (exec_do*while (boolean_pop) integer_sub integer_mod in2 exec_do*range () tagged_126 integer_gte integer_inc boolean_xor integer_eq boolean_rot boolean_not boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop print_integer boolean_invert_second_then_and integer_swap boolean_invert_first_then_and in2 exec_flush integer_min integer_yankdup boolean_swap tagged_567 integer_flush exec_do*times (boolean_and in4 boolean_not print_integer) in4 exec_when () integer_div boolean_dup integer_stackdepth exec_flush boolean_pop exec_do*while (exec_s (integer_max boolean_dup exec_rot () () ()) () ()))
Lexicase best errors: [1 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_567} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot})
Zero cases best program: (exec_do*while (boolean_pop) integer_sub integer_mod in2 exec_do*range () tagged_126 integer_gte integer_inc boolean_xor integer_eq boolean_rot boolean_not boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop print_integer boolean_invert_second_then_and integer_swap boolean_invert_first_then_and in2 exec_flush integer_min integer_yankdup boolean_swap tagged_567 integer_flush exec_do*times (boolean_and in4 boolean_not print_integer) in4 exec_when () integer_div boolean_dup integer_stackdepth exec_flush boolean_pop exec_do*while (exec_s (integer_max boolean_dup exec_rot () () ()) () ()))
Zero cases best errors: [1 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 384 387 129 129 405 384 918 405 404)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (129 384 387 129 129 405 384 918 405 404)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_759} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 2, :instruction print_integer} {:close 0, :instruction in4})
Best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*while (boolean_pop boolean_dup_items integer_mod boolean_dup_items) exec_dup_times (integer_gte integer_inc integer_sub) integer_eq boolean_dup_times exec_do*while () boolean_swap integer_gt boolean_not integer_gt exec_stackdepth) exec_when (exec_y_when_autoconstructing (boolean_xor exec_yank tag_exec_759 (boolean_swap boolean_invert_first_then_and) integer_flush exec_do*times (boolean_and in4 boolean_not print_integer)) in4))
Errors: [1 0 0 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.326
Median total errors in population: 6
Error averages by case: (0.871 0.616 0.613 0.871 0.871 0.595 0.616 0.082 0.595 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.803
Average program size in population (points): 30.229
Average percent parens in population: 0.177
Minimum age in population: 18.91015625
Maximum age in population: 24.70806884765625
Average age in population: 22.38561572265625
Median age in population: 22.46371459960938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.521
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4548087
--- Timings ---
Current time: 1559314545339 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.9 seconds, 77.0%
Fitness Testing:      5.4 seconds, 13.5%
Report:               3.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 integer_sub tagged_126 exec_noop) boolean_dup_items integer_mod in2 integer_sub tagged_126 exec_noop integer_max boolean_yankdup print_integer)
Lexicase best errors: [0 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 integer_sub tagged_126 exec_noop) boolean_dup_items integer_mod in2 integer_sub tagged_126 exec_noop integer_max boolean_yankdup print_integer)
Zero cases best errors: [0 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 607 316 1000 316 316 608 311 316 923)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (316 607 316 0 316 316 608 311 316 923)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop})
Best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_max boolean_yankdup print_integer exec_noop)))
Errors: [0 1 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 11
Size: 14
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.971
Median total errors in population: 6
Error averages by case: (0.684 0.393 0.684 1.0 0.684 0.684 0.392 0.689 0.684 0.077)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 22.655
Average program size in population (points): 27.563
Average percent parens in population: 0.174
Minimum age in population: 19.91015625
Maximum age in population: 26.4334716796875
Average age in population: 23.96467602539062
Median age in population: 24.01863098144531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4792644
--- Timings ---
Current time: 1559314547566 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        32.8 seconds, 77.1%
Fitness Testing:      5.6 seconds, 13.3%
Report:               4.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 606 606 606 606 606 606 343 347 606)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (1 606 606 606 606 606 606 343 347 606)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Best program: (boolean_or boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop integer_max exec_noop) integer_max boolean_xor print_integer exec_noop integer_lt boolean_not tag_boolean_634)
Errors: [1 0 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 5.067
Median total errors in population: 3
Error averages by case: (0.999 0.394 0.394 0.394 0.394 0.394 0.394 0.657 0.653 0.394)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.656
Average program size in population (points): 20.243
Average percent parens in population: 0.173
Minimum age in population: 22.47769165039062
Maximum age in population: 27.58116149902344
Average age in population: 25.49325469970703
Median age in population: 25.55224609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4968996
--- Timings ---
Current time: 1559314549877 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 77.5%
Fitness Testing:      5.8 seconds, 13.0%
Report:               4.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 64                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 98                 
Correct output: 0                   | Program output: 68                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 41                 
Correct output: 0                   | Program output: 2                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 68                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: 82                 
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: 56                 
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 18                 
Correct output: -90                 | Program output: 91                 
Correct output: -92                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 46                 
Correct output: -96                 | Program output: -2                 
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 65                 
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 54                 
Correct output: -97                 | Program output: 45                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: 45                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: 89                 
Correct output: -63                 | Program output: 39                 
Correct output: 30                  | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: 23                 
Correct output: -2                  | Program output: 96                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 81                 
Correct output: -94                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: 66                 
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: 69                 
Correct output: -50                 | Program output: 99                 
Correct output: -86                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 54                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 40                 
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop) exec_yank boolean_yankdup exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [1 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop) exec_yank boolean_yankdup exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [1 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 180 676 180 956 98 675 98 1000 180)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (98 180 676 180 956 98 675 98 0 180)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not})
Best program: (exec_do*while (boolean_pop boolean_xor integer_mod in4 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not)
Errors: [0 1 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.859
Median total errors in population: 7
Error averages by case: (0.902 0.82 0.324 0.82 0.044 0.902 0.325 0.902 1.0 0.82)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 16.719
Average program size in population (points): 20.409
Average percent parens in population: 0.176
Minimum age in population: 24.038330078125
Maximum age in population: 28.9149169921875
Average age in population: 26.99729917144775
Median age in population: 27.02814102172852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5144508
--- Timings ---
Current time: 1559314551763 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 77.7%
Fitness Testing:      6.0 seconds, 12.8%
Report:               4.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 36                  | Program output: 37                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: 92                 
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 100                
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 77                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 74                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 47                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: 91                 
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: 85                 
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -9                 
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: 52                 
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 78                 
Correct output: -90                 | Program output: 17                 
Correct output: -96                 | Program output: 21                 
Correct output: -36                 | Program output: 99                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 75                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 68                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 79                 
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: 31                 
Correct output: -76                 | Program output: 78                 
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 97                 
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 52                 
Correct output: -60                 | Program output: 22                 
Correct output: -39                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: 96                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (exec_do*while (exec_swap (boolean_invert_second_then_and integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) () exec_yank integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Lexicase best errors: [1 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (exec_do*while (exec_swap (boolean_invert_second_then_and integer_mod in2 exec_do*range (tagged_126 exec_noop) integer_max boolean_yankdup print_integer exec_noop) () exec_yank integer_max boolean_yankdup print_integer exec_noop) exec_yank boolean_not tag_boolean_634)
Zero cases best errors: [1 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 346 273 1000 1000 675 274 274 273 273)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (327 346 273 0 0 675 274 274 273 273)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction tagged_246} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction in4})
Best program: (boolean_dup_items exec_dup_times (integer_gte integer_inc boolean_xor) integer_inc boolean_rot boolean_not integer_rot boolean_flush boolean_dup_times exec_eq integer_gte integer_inc exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 exec_noop) boolean_dup_times boolean_yankdup print_integer exec_noop) print_integer boolean_invert_second_then_and boolean_yankdup boolean_invert_first_then_and in2 exec_flush integer_min exec_if (tagged_246 exec_s (integer_max boolean_dup exec_rot (in4) () ()) () ()) ())
Errors: [1 1 0 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.285
Median total errors in population: 8
Error averages by case: (0.673 0.654 0.727 1.0 1.0 0.325 0.726 0.726 0.727 0.727)
Error minima by case: (0 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 15.634
Average program size in population (points): 19.009
Average percent parens in population: 0.175
Minimum age in population: 25.466796875
Maximum age in population: 30.35124588012695
Average age in population: 28.59195767211914
Median age in population: 28.6871280670166
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.398
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 5316175
--- Timings ---
Current time: 1559314553775 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.0 seconds, 78.0%
Fitness Testing:      6.1 seconds, 12.6%
Report:               4.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 51                  | Program output: 94                 
Correct output: 16                  | Program output: 21                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 31                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 78                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 93                 
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 90                 
Correct output: 0                   | Program output: 77                 
Correct output: 62                  | Program output: 62                 
Correct output: 19                  | Program output: 85                 
Correct output: 2                   | Program output: 51                 
Correct output: 28                  | Program output: 93                 
Correct output: 20                  | Program output: 20                 
Correct output: -44                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -57                
Correct output: 47                  | Program output: 56                 
Correct output: -91                 | Program output: 92                 
Correct output: -53                 | Program output: 12                 
Correct output: -78                 | Program output: 33                 
Correct output: -93                 | Program output: 57                 
Correct output: -78                 | Program output: -77                
Correct output: -76                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -70                
Correct output: -31                 | Program output: 92                 
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: 94                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -27                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: 12                 
Correct output: -95                 | Program output: -71                
Correct output: -16                 | Program output: -7                 
Correct output: -72                 | Program output: 31                 
Correct output: -26                 | Program output: -21                
Correct output: -35                 | Program output: 9                  
Correct output: -31                 | Program output: -31                
Correct output: -97                 | Program output: 34                 
Correct output: -5                  | Program output: 75                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: 86                 
Correct output: -63                 | Program output: 77                 
Correct output: 30                  | Program output: 30                 
Correct output: -81                 | Program output: -32                
Correct output: -38                 | Program output: 20                 
Correct output: -2                  | Program output: 15                 
Correct output: -2                  | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 24                 
Correct output: -91                 | Program output: -4                 
Correct output: -76                 | Program output: 7                  
Correct output: -83                 | Program output: -31                
Correct output: -15                 | Program output: 64                 
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -39                 | Program output: 12                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -63                
Correct output: -21                 | Program output: -2                 
Correct output: -98                 | Program output: 12                 
Correct output: -85                 | Program output: 13                 
Correct output: -45                 | Program output: -14                
Correct output: -35                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt})
Lexicase best program: (exec_do*while (boolean_pop) boolean_dup_items integer_pop boolean_flush exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop exec_yank boolean_not integer_gt)
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt})
Zero cases best program: (exec_do*while (boolean_pop) boolean_dup_items integer_pop boolean_flush exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop exec_yank boolean_not integer_gt)
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (603 163 164 171 164 171 171 602 335 163)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (603 163 164 171 164 171 171 602 335 163)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt})
Best program: (exec_do*while (boolean_pop integer_lt integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop) exec_yank boolean_not integer_gt)
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.293
Median total errors in population: 8
Error averages by case: (0.397 0.837 0.836 0.829 0.836 0.829 0.829 0.398 0.665 0.837)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.572
Average program size in population (points): 20.34
Average percent parens in population: 0.180
Minimum age in population: 26.466796875
Maximum age in population: 32.05667304992676
Average age in population: 29.99486212921143
Median age in population: 30.05930328369141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 5492482
--- Timings ---
Current time: 1559314555996 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.9 seconds, 78.2%
Fitness Testing:      6.3 seconds, 12.4%
Report:               4.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 51                  | Program output: 94                 
Correct output: 16                  | Program output: 21                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 31                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 78                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 93                 
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 90                 
Correct output: 0                   | Program output: 77                 
Correct output: 62                  | Program output: 62                 
Correct output: 19                  | Program output: 85                 
Correct output: 2                   | Program output: 51                 
Correct output: 28                  | Program output: 93                 
Correct output: 20                  | Program output: 20                 
Correct output: -44                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -57                
Correct output: 47                  | Program output: 56                 
Correct output: -91                 | Program output: 92                 
Correct output: -53                 | Program output: 12                 
Correct output: -78                 | Program output: 33                 
Correct output: -93                 | Program output: 57                 
Correct output: -78                 | Program output: -77                
Correct output: -76                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -70                
Correct output: -31                 | Program output: 92                 
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: 94                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -27                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: 12                 
Correct output: -95                 | Program output: -71                
Correct output: -16                 | Program output: -7                 
Correct output: -72                 | Program output: 31                 
Correct output: -26                 | Program output: -21                
Correct output: -35                 | Program output: 9                  
Correct output: -31                 | Program output: -31                
Correct output: -97                 | Program output: 34                 
Correct output: -5                  | Program output: 75                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: 86                 
Correct output: -63                 | Program output: 77                 
Correct output: 30                  | Program output: 30                 
Correct output: -81                 | Program output: -32                
Correct output: -38                 | Program output: 20                 
Correct output: -2                  | Program output: 15                 
Correct output: -2                  | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: 24                 
Correct output: -91                 | Program output: -4                 
Correct output: -76                 | Program output: 7                  
Correct output: -83                 | Program output: -31                
Correct output: -15                 | Program output: 64                 
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -39                 | Program output: 12                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -63                
Correct output: -21                 | Program output: -2                 
Correct output: -98                 | Program output: 12                 
Correct output: -85                 | Program output: 13                 
Correct output: -45                 | Program output: -14                
Correct output: -35                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt})
Lexicase best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop) exec_yank boolean_not integer_gt)
Lexicase best errors: [0 0 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_gt})
Zero cases best program: (exec_do*while (boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop) exec_yank boolean_not integer_gt)
Zero cases best errors: [0 0 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 408 202 202 1 408 330 408 202 1)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (408 408 202 202 1 408 330 408 202 1)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_gt})
Best program: (exec_do*while () boolean_pop boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gt) integer_max in3 print_integer exec_noop exec_yank boolean_not integer_gt)
Errors: [0 0 1 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.43
Median total errors in population: 7
Error averages by case: (0.592 0.592 0.798 0.798 0.999 0.592 0.67 0.592 0.798 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.503
Average program size in population (points): 18.888
Average percent parens in population: 0.177
Minimum age in population: 27.466796875
Maximum age in population: 33.54430198669434
Average age in population: 31.50665443897247
Median age in population: 31.56271171569824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 5673899
--- Timings ---
Current time: 1559314558001 milliseconds
Total Time:          53.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 78.4%
Fitness Testing:      6.5 seconds, 12.2%
Report:               4.8 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 59                 
Correct output: 13                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 35                 
Correct output: 20                  | Program output: 31                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: -67                
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -19                
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: -82                
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: 8                  
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 34                 
Correct output: -90                 | Program output: -4                 
Correct output: -96                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 32                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 6                  
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 47                 
Correct output: -60                 | Program output: 17                 
Correct output: -39                 | Program output: -7                 
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 380 195 954 264 264 111 757 264 376)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (111 380 195 954 264 264 111 757 264 376)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.324
Median total errors in population: 6
Error averages by case: (0.889 0.62 0.805 0.046 0.736 0.736 0.889 0.243 0.736 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.76
Average program size in population (points): 19.577
Average percent parens in population: 0.192
Minimum age in population: 28.466796875
Maximum age in population: 34.93336820602417
Average age in population: 33.20376200628281
Median age in population: 33.33264183998108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5846855
--- Timings ---
Current time: 1559314560520 milliseconds
Total Time:          55.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 78.8%
Fitness Testing:      6.7 seconds, 12.0%
Report:               5.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 8                  
Correct output: -76                 | Program output: -76                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: 42                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: 44                 
Correct output: -59                 | Program output: 63                 
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 81                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 57                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 23                 
Correct output: 5                   | Program output: 58                 
Correct output: 21                  | Program output: 37                 
Correct output: 0                   | Program output: 20                 
Correct output: 35                  | Program output: 55                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 36                 
Correct output: 41                  | Program output: 41                 
Correct output: 8                   | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 28                 
Correct output: 20                  | Program output: 31                 
Correct output: -44                 | Program output: -44                
Correct output: -86                 | Program output: -67                
Correct output: -77                 | Program output: 8                  
Correct output: -70                 | Program output: -70                
Correct output: 47                  | Program output: 71                 
Correct output: -91                 | Program output: -27                
Correct output: -53                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -27                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -63                
Correct output: -92                 | Program output: -21                
Correct output: -31                 | Program output: -31                
Correct output: -39                 | Program output: 17                 
Correct output: -96                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -90                 | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -31                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -72                 | Program output: 0                  
Correct output: -26                 | Program output: -26                
Correct output: -35                 | Program output: 48                 
Correct output: -31                 | Program output: 22                 
Correct output: -97                 | Program output: 44                 
Correct output: -5                  | Program output: -5                 
Correct output: -53                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -90                 | Program output: -4                 
Correct output: -96                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: 37                 
Correct output: -2                  | Program output: 26                 
Correct output: -23                 | Program output: 6                  
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: 34                 
Correct output: -86                 | Program output: -38                
Correct output: -53                 | Program output: 38                 
Correct output: -60                 | Program output: 17                 
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: 17                 
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -78                
Correct output: -45                 | Program output: -26                
Correct output: -35                 | Program output: -26                
Correct output: -92                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (integer_flush in1 boolean_dup_items integer_mod in4 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (integer_flush in1 boolean_dup_items integer_mod in4 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (467 470 226 226 454 226 226 466 471 226)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (467 470 226 226 454 226 226 466 471 226)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Best program: (exec_do*while (boolean_pop exec_empty integer_mod in4 exec_do*range (tagged_126 exec_noop) integer_max tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 18
Size: 24
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.542
Median total errors in population: 5
Error averages by case: (0.533 0.53 0.774 0.774 0.546 0.774 0.774 0.534 0.529 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.866
Average program size in population (points): 18.904
Average percent parens in population: 0.211
Minimum age in population: 31.66381645202637
Maximum age in population: 36.77591037750244
Average age in population: 35.42883002948761
Median age in population: 35.72623634338379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 381
Genome diversity (% unique genomes):	 0.344
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 392
Syntactic diversity (% unique Push programs):	 0.319
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 6019624
--- Timings ---
Current time: 1559314562961 milliseconds
Total Time:          57.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.8 seconds, 79.1%
Fitness Testing:      6.8 seconds, 11.8%
Report:               5.2 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 59                 
Correct output: 13                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 35                 
Correct output: 20                  | Program output: 31                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: -67                
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -19                
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: -82                
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: 8                  
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 34                 
Correct output: -90                 | Program output: -4                 
Correct output: -96                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 32                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 6                  
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 47                 
Correct output: -60                 | Program output: 17                 
Correct output: -39                 | Program output: -7                 
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 933 954 160 932 1000 936 1000 932 159)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (158 933 954 160 932 0 936 0 932 159)
Population mean number of perfect (error zero) cases: 5.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.836
Median total errors in population: 5
Error averages by case: (0.842 0.067 0.046 0.84 0.068 1.0 0.064 1.0 0.068 0.841)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 17.604
Average program size in population (points): 23.136
Average percent parens in population: 0.241
Minimum age in population: 35.0861873626709
Maximum age in population: 38.72623634338379
Average age in population: 37.77265202760696
Median age in population: 37.72623634338379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.283
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.257
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 6227381
--- Timings ---
Current time: 1559314565101 milliseconds
Total Time:          60.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.6 seconds, 79.2%
Fitness Testing:      7.0 seconds, 11.7%
Report:               5.3 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 59                 
Correct output: 13                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 65                 
Correct output: 19                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 35                 
Correct output: 20                  | Program output: 31                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: -67                
Correct output: -77                 | Program output: -53                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -19                
Correct output: -39                 | Program output: -5                 
Correct output: -96                 | Program output: -82                
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: 9                  
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -13                
Correct output: -98                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: 8                  
Correct output: -16                 | Program output: 75                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -2                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: 10                 
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -18                
Correct output: -72                 | Program output: 34                 
Correct output: -90                 | Program output: -4                 
Correct output: -96                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 32                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: 6                  
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 47                 
Correct output: -60                 | Program output: 17                 
Correct output: -39                 | Program output: -7                 
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -47                
Correct output: -21                 | Program output: 13                 
Correct output: -98                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (962 1000 938 1000 929 966 1000 927 956 945)
Population mean number of elite cases: 9.62
Count of perfect (error zero) individuals by case: (962 0 938 0 929 966 0 927 956 945)
Population mean number of perfect (error zero) cases: 6.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 3.377
Median total errors in population: 3
Error averages by case: (0.038 1.0 0.062 1.0 0.071 0.034 1.0 0.073 0.044 0.055)
Error minima by case: (0 1 0 1 0 0 1 0 0 0)
Average genome size in population (length): 15.277
Average program size in population (points): 20.295
Average percent parens in population: 0.247
Minimum age in population: 36.0861873626709
Maximum age in population: 40.54904609918594
Average age in population: 38.9268354434371
Median age in population: 39.00976157188416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 596
Genome diversity (% unique genomes):	 0.233
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 639
Syntactic diversity (% unique Push programs):	 0.209
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 6400424
--- Timings ---
Current time: 1559314567280 milliseconds
Total Time:          62.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.4 seconds, 79.4%
Fitness Testing:      7.2 seconds, 11.6%
Report:               5.5 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 4                  
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 21                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 89                 
Correct output: 0                   | Program output: 30                 
Correct output: 62                  | Program output: 62                 
Correct output: 19                  | Program output: 64                 
Correct output: 2                   | Program output: 12                 
Correct output: 28                  | Program output: 44                 
Correct output: 20                  | Program output: 20                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -70                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 33                 
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -27                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -22                
Correct output: -95                 | Program output: -71                
Correct output: -16                 | Program output: -7                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -21                
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: 86                 
Correct output: -63                 | Program output: -14                
Correct output: 30                  | Program output: 30                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: 20                 
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -35                
Correct output: -91                 | Program output: -4                 
Correct output: -76                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: 64                 
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -39                 | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -21                 | Program output: -2                 
Correct output: -98                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min print_integer exec_noop exec_empty exec_rot () (tag_boolean_634) ())
Lexicase best errors: [0 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min print_integer exec_noop exec_empty exec_rot () (tag_boolean_634) ())
Zero cases best errors: [0 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 931 1 945 931 1000 1 930 962 1000)
Population mean number of elite cases: 6.70
Count of perfect (error zero) individuals by case: (1 931 1 945 931 0 1 930 962 0)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min print_integer exec_noop exec_empty exec_rot () (tag_boolean_634) ())
Errors: [0 0 0 1 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.298
Median total errors in population: 5
Error averages by case: (0.999 0.069 0.999 0.055 0.069 1.0 0.999 0.07 0.038 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 15.344
Average program size in population (points): 20.346
Average percent parens in population: 0.246
Minimum age in population: 37.88604593276978
Maximum age in population: 42.27940383553505
Average age in population: 40.40805537614226
Median age in population: 40.47623634338379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 498
Genome diversity (% unique genomes):	 0.307
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 554
Syntactic diversity (% unique Push programs):	 0.274
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 6578661
--- Timings ---
Current time: 1559314569355 milliseconds
Total Time:          64.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.1 seconds, 79.5%
Fitness Testing:      7.4 seconds, 11.6%
Report:               5.7 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 212
Test mean error for best: 0.21200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 62                 
Correct output: 19                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -27                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -71                
Correct output: -16                 | Program output: -7                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -21                
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 30                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -39                 | Program output: -7                 
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -21                 | Program output: -2                 
Correct output: -98                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Lexicase best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 22
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Zero cases best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 22
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (707 933 934 935 713 934 707 234 933 237)
Population mean number of elite cases: 7.27
Count of perfect (error zero) individuals by case: (707 933 934 935 713 934 707 234 933 237)
Population mean number of perfect (error zero) cases: 7.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_126} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction tag_boolean_634})
Best program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 17
Size: 22
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 2.733
Median total errors in population: 2
Error averages by case: (0.293 0.067 0.066 0.065 0.287 0.066 0.293 0.766 0.067 0.763)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.09
Average program size in population (points): 20.062
Average percent parens in population: 0.248
Minimum age in population: 38.92074680328369
Maximum age in population: 43.68767821788788
Average age in population: 42.68647690322995
Median age in population: 42.41047024726868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 590
Genome diversity (% unique genomes):	 0.26
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 612
Syntactic diversity (% unique Push programs):	 0.225
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 6744270
--- Timings ---
Current time: 1559314571164 milliseconds
Total Time:          66.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.5 seconds, 79.5%
Fitness Testing:      7.6 seconds, 11.5%
Report:               5.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 27
Successful program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 22


Auto-simplifying with starting size: 22
step: 0
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 500
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1000
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1500
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2000
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2500
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3000
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3500
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4000
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4500
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 5000
program: (integer_flush in1 boolean_dup_items integer_mod in2 exec_do*range (tagged_126 integer_gte) in3 integer_min in1 integer_min print_integer exec_noop exec_yank exec_rot () (tag_boolean_634) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 212
Test mean error for best: 0.21200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -76                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -59                 | Program output: -59                
Correct output: 23                  | Program output: 23                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -53                 | Program output: -53                
Correct output: 46                  | Program output: 46                 
Correct output: 21                  | Program output: 40                 
Correct output: 51                  | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 18                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 44                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 92                 
Correct output: 8                   | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 0                   | Program output: 0                  
Correct output: 62                  | Program output: 62                 
Correct output: 19                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 28                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: -44                 | Program output: -43                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -69                
Correct output: 47                  | Program output: 47                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -78                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -19                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -73                 | Program output: 14                 
Correct output: -90                 | Program output: -90                
Correct output: -43                 | Program output: 13                 
Correct output: -100                | Program output: -27                
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -71                
Correct output: -16                 | Program output: -7                 
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -21                
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -5                  | Program output: 39                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: 30                  | Program output: 30                 
Correct output: -81                 | Program output: -78                
Correct output: -38                 | Program output: -38                
Correct output: -2                  | Program output: -2                 
Correct output: -2                  | Program output: -2                 
Correct output: -23                 | Program output: -23                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -15                 | Program output: -15                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -60                 | Program output: -60                
Correct output: -39                 | Program output: -7                 
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -21                 | Program output: -2                 
Correct output: -98                 | Program output: -8                 
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -92                 | Program output: -92                
;;******************************
